{"version":3,"file":"static/js/529.9fd6fb8e.chunk.js","mappings":"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","sources":["core/instrument/component/InstrumentSound.tsx","app/options/InstrumentAppOption.tsx","app/property/InstrumentGames.ts","app/property/Instrument.gameStyles.ts","app/property/InstrumentTimes.ts","core/instrument/component/EntityInstrumentImages.tsx","app/InstrumentApp.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx","core/time/component/TimeImage.tsx"],"sourcesContent":["import './InstrumentSound.scss'\n\nimport {mapByArray} from '@joookiwi/collection'\n\nimport type {Instruments}     from 'core/instrument/Instruments'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface InstrumentSoundProperties\n    extends ReactProperties {\n\n    readonly value: Instruments\n\n}\n\nexport default function InstrumentSound({value,}: InstrumentSoundProperties,) {\n    const name = value.name\n    const englishName = value.englishName\n\n    const sounds = value.sounds\n    const elements = mapByArray(sounds, (it, i,) =>\n        <SimpleSoundComponent key={`instrument sounds #${i} (${englishName})`} file={it} title={`${name} (instrument #${i})`}/>,)\n    if (elements.isEmpty)\n        return <div className=\"instrumentSound-container individual-instrumentSound-container\">{elements}</div>\n    return <div className=\"instrumentSound-container grouped-instrumentSound-container\">{elements}</div>\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {getFirstOrNullByArray}       from '@joookiwi/collection'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}                              from 'app/options/AppOption'\nimport type {Names, Ordinals}                        from 'app/options/InstrumentAppOption.types'\nimport type {SimpleReactHeader, SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {Instruments}                            from 'core/instrument/Instruments'\n\nimport {CommonOptions} from 'app/options/CommonOptions'\nimport Image           from 'app/tools/images/Image'\nimport {Entities}      from 'core/entity/Entities'\nimport {GameStyles}    from 'core/gameStyle/GameStyles'\nimport GameStyleImage  from 'core/gameStyle/component/GameStyleImage'\nimport InstrumentSound from 'core/instrument/component/InstrumentSound'\n\nimport EntityCompanion = Entities.Companion\nimport NSMBU =           GameStyles.NSMBU\nimport SMB =             GameStyles.SMB\nimport SMB3 =            GameStyles.SMB3\nimport SMW =             GameStyles.SMW\n\nexport abstract class InstrumentAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Instruments> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly NAME = new class InstrumentAppOption_Name extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            return CommonOptions.get.getNameContent(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n    public static readonly REFERENCE_SMB = new class InstrumentAppOption_Name extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            const references = enumeration.reference.entities\n            if (references == null)\n                return null\n            return <div className=\"instrumentReference-smb\">{references.map(it =>\n                <Image key={`instrument reference (SMB - ${it.english})`} file={getFirstOrNullByArray(EntityCompanion.getValueByName(it.americanEnglish,).image.get(SMB,),)}/>,)\n            }</div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'reference-smb', element: <GameStyleImage reference={SMB}/>, } as const satisfies SimpleReactHeader\n        }\n\n    }('reference-smb',)\n    public static readonly REFERENCE_SMB3 = new class InstrumentAppOption_Name extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            const references = enumeration.reference.entities\n            if (references == null)\n                return null\n            return <div className=\"instrumentReference-smb3\">{references.map(it =>\n                <Image key={`instrument reference (SMB3 - ${it.english})`} file={getFirstOrNullByArray(EntityCompanion.getValueByName(it.americanEnglish,).image.get(SMB3,),)}/>,)\n            }</div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'reference-smb3', element: <GameStyleImage reference={SMB3}/>, } as const satisfies SimpleReactHeader\n        }\n\n    }('reference-smb3',)\n    public static readonly REFERENCE_SMW = new class InstrumentAppOption_Name extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            const references = enumeration.reference.entities\n            if (references == null)\n                return null\n            return <div className=\"instrumentReference-smw\">{references.map(it =>\n                <Image key={`instrument reference (SMW - ${it.english})`} file={getFirstOrNullByArray(EntityCompanion.getValueByName(it.americanEnglish,).image.get(SMW,),)}/>,)\n            }</div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'reference-smw', element: <GameStyleImage reference={SMW}/>, } as const satisfies SimpleReactHeader\n        }\n\n    }('reference-smb3',)\n    public static readonly REFERENCE_NSMBU = new class InstrumentAppOption_Name extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            const references = enumeration.reference.entities\n            if (references == null)\n                return null\n            return <div className=\"instrumentReference-nsmbu\">{references.map(it =>\n                <Image key={`instrument reference (NSMBU - ${it.english})`} file={getFirstOrNullByArray(EntityCompanion.getValueByName(it.americanEnglish,).image.get(NSMBU,),)}/>,)\n            }</div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'reference-nsmbu', element: <GameStyleImage reference={NSMBU}/>, } as const satisfies SimpleReactHeader\n        }\n\n    }('reference-smb3',)\n    public static readonly SOUND = new class InstrumentAppOption_Sound extends InstrumentAppOption {\n\n        protected override _createContentOption(enumeration: Instruments,) {\n            return <InstrumentSound value={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.soundHeader\n        }\n\n    }('sound',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<InstrumentAppOption, typeof InstrumentAppOption> = class CompanionEnum_InstrumentAppOption\n        extends CompanionEnum<InstrumentAppOption, typeof InstrumentAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_InstrumentAppOption\n\n        private constructor() {\n            super(InstrumentAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Instruments,): ReactElement\n\n    public renderContent(enumeration: Instruments,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n}\n","import type {CompanionEnumWithParentSingleton}   from '@joookiwi/enumerable'\nimport type {NullOrString}                       from '@joookiwi/type'\nimport {CompanionEnumWithParent, EnumWithParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/InstrumentGames.types'\n\nimport {Games} from 'core/game/Games'\n\nexport abstract class InstrumentGames\n    extends EnumWithParent<Games, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER = new class InstrumentGames_SuperMarioMaker extends InstrumentGames {\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class InstrumentGames_SuperMarioMakerForNintendo3DS extends InstrumentGames {\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class InstrumentGames_SuperMarioMaker2 extends InstrumentGames {\n\n        public override get smm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<InstrumentGames, typeof InstrumentGames, Games, typeof Games> = class CompanionEnum_InstrumentGames\n        extends CompanionEnumWithParent<InstrumentGames, typeof InstrumentGames, Games, typeof Games> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_InstrumentGames\n\n        private constructor() {\n            super(InstrumentGames, Games,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_InstrumentGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get smm1Color(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get smm1RouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (Game=1)`\n    }\n\n    public get smm3dsRouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (Game=3DS)`\n    }\n\n    public get smm2RouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import type {CompanionEnumWithParentSingleton}           from '@joookiwi/enumerable'\nimport type {NullOrString}                               from '@joookiwi/type'\nimport {CompanionEnumWithParent, EnumWithNullableParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/Instrument.gameStyles.types'\n\nimport {GameStyles} from 'core/gameStyle/GameStyles'\n\nexport class InstrumentGameStyles\n    extends EnumWithNullableParent<GameStyles, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAME_STYLES = new class InstrumentGameStyles_AllGameStyles extends InstrumentGameStyles {\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }()\n\n    public static readonly SMB = new class InstrumentGameStyles_Smb extends InstrumentGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smbRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SMB3 = new class InstrumentGameStyles_Smb3 extends InstrumentGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smb3RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SMW = new class InstrumentGameStyles_Smw extends InstrumentGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smwRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly NSMBU = new class InstrumentGameStyles_Nsmbu extends InstrumentGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get nsmbuRouteName() {\n            return null\n        }\n\n    }()\n\n    public static readonly MIXED_GAME_STYLE = new class InstrumentGameStyles_MixedGameStyle extends InstrumentGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override smb3Color(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override smwColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override nsmbuColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<InstrumentGameStyles, typeof InstrumentGameStyles, GameStyles, typeof GameStyles> = class CompanionEnum_InstrumentGameStyles\n        extends CompanionEnumWithParent<InstrumentGameStyles, typeof InstrumentGameStyles, GameStyles, typeof GameStyles> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_InstrumentGameStyles\n\n        private constructor() {\n            super(InstrumentGameStyles, GameStyles,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_InstrumentGameStyles()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public smbColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public smb3Color(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public smwColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public nsmbuColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get allRouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (GameStyle=all)`\n    }\n\n    public get smbRouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (GameStyle=1)`\n    }\n\n    public get smb3RouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (GameStyle=3)`\n    }\n\n    public get smwRouteName(): NullOrString<PossibleRouteName> {\n        return `everyInstrument (GameStyle=W)`\n    }\n\n    public get nsmbuRouteName(): NullOrString<'everyInstrument (GameStyle=U)'> {\n        return `everyInstrument (GameStyle=U)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import type {CompanionEnumWithParentSingleton}           from '@joookiwi/enumerable'\nimport type {NullOr}                                     from '@joookiwi/type'\nimport {CompanionEnumWithParent, EnumWithNullableParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/InstrumentTimes.types'\n\nimport {Times} from 'core/time/Times'\n\nexport class InstrumentTimes\n    extends EnumWithNullableParent<Times, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_TIMES = new class InstrumentTimes_All extends InstrumentTimes {\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly DAY = new class InstrumentTimes_Day extends InstrumentTimes {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get nightColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get dayRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly NIGHT = new class InstrumentTimes_Night extends InstrumentTimes {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get dayColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get nightRouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<InstrumentTimes, typeof InstrumentTimes, Times, typeof Times> = class CompanionEnum_InstrumentTimes\n        extends CompanionEnumWithParent<InstrumentTimes, typeof InstrumentTimes, Times, typeof Times> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_InstrumentTimes\n\n        private constructor() {\n            super(InstrumentTimes, Times,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_InstrumentTimes()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get dayColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get nightColor(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get allRouteName(): NullOr<PossibleRouteName> {\n        return `everyInstrument (Time=all)`\n    }\n\n    public get dayRouteName(): NullOr<PossibleRouteName> {\n        return `everyInstrument (Time=day)`\n    }\n\n    public get nightRouteName(): NullOr<PossibleRouteName> {\n        return `everyInstrument (Time=night)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import './EntityInstrumentImages.scss'\n\nimport {getFirstOrNullByArray, mapByArray} from '@joookiwi/collection'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\nimport type {Instruments}     from 'core/instrument/Instruments'\n\nimport Image        from 'app/tools/images/Image'\nimport {GameStyles} from 'core/gameStyle/GameStyles'\nimport {Entities}   from 'core/entity/Entities'\n\nimport EntityCompanion = Entities.Companion\nimport NSMBU =           GameStyles.NSMBU\nimport SMB =             GameStyles.SMB\nimport SMB3 =            GameStyles.SMB3\nimport SMW =             GameStyles.SMW\n\ninterface EntityInstrumentImagesProperties\n    extends ReactProperties {\n\n    readonly value: Instruments\n\n}\n\nexport default function EntityInstrumentImages({value,}: EntityInstrumentImagesProperties,) {\n    return <div className=\"instrument-entity-images-container text-center mb-1\">{\n        mapByArray(value.reference.entities,\n            it => EntityCompanion.getValueByName(it.americanEnglish,).image,)\n            .map(it => getFirstOrNullByArray(it.get(SMW,),)\n                ?? getFirstOrNullByArray(it.get(NSMBU,),)\n                ?? getFirstOrNullByArray(it.get(SMB3,),)\n                ?? getFirstOrNullByArray(it.get(SMB,),),)\n            .filterNotNull()\n            .map(it =>\n                <Image key={`Instrument entity image (${it.path}/${it.name})`} file={it}/>,)\n    }</div>\n}\n","import 'app/_GameAsideContent.scss'\nimport 'app/_GameStyleAsideContent.scss'\nimport 'app/_TimeAsideContent.scss'\nimport './InstrumentApp.scss'\n\nimport type {Array, MutableArray, NullOr, NullOrString} from '@joookiwi/type'\nimport type {CollectionHolder}                          from '@joookiwi/collection'\nimport {filterByArray}                                  from '@joookiwi/collection'\n\nimport type {InstrumentAppProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {GameStyleCollection}     from 'util/collection/GameStyleCollection'\nimport type {TimeCollection}          from 'util/collection/TimeCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\nimport type {PossibleRouteName}       from 'route/EveryRoutes.types'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {InstrumentAppOption}                        from 'app/options/InstrumentAppOption'\nimport {InstrumentGames}                            from 'app/property/InstrumentGames'\nimport {InstrumentGameStyles}                       from 'app/property/Instrument.gameStyles'\nimport {InstrumentTimes}                            from 'app/property/InstrumentTimes'\nimport Table                                        from 'app/tools/table/Table'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport List                                         from 'app/util/List'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport {Games}                                      from 'core/game/Games'\nimport GameImage                                    from 'core/game/component/GameImage'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport GameStyleImage                               from 'core/gameStyle/component/GameStyleImage'\nimport {Instruments}                                from 'core/instrument/Instruments'\nimport EntityInstrumentImages                       from 'core/instrument/component/EntityInstrumentImages'\nimport InstrumentSound                              from 'core/instrument/component/InstrumentSound'\nimport {Times}                                      from 'core/time/Times'\nimport TimeImage                                    from 'core/time/component/TimeImage'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent                                from 'lang/name/component/Name.component'\nimport {intersect}                                  from 'util/utilitiesMethods'\n\nimport ALL =             Instruments.ALL\nimport ALL_GAME_STYLES = GameStyles.ALL\nimport NSMBU =           GameStyles.NSMBU\nimport SMB =             GameStyles.SMB\nimport SMB3 =            GameStyles.SMB3\nimport SMM1 =            Games.SMM1\nimport SMM2 =            Games.SMM2\nimport SMM3DS =          Games.SMM3DS\nimport SMW =             GameStyles.SMW\n\nclass InstrumentAppInterpreter\n    implements AppInterpreterWithTable<Instruments, InstrumentAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n    readonly #gameStyles\n    readonly #times\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection, gameStyles: GameStyleCollection, times: TimeCollection,) {\n        this.#games = games\n        this.#gameStyles = gameStyles\n        this.#times = times\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        const games = this.#games\n        const gameStyles = this.#gameStyles\n        const times = this.#times\n        return filterByArray(ALL, ({reference,},) =>\n            games.hasAnyIn(reference,)\n            && gameStyles.hasAnyIn(reference,)\n            && times.hasAnyIn(reference,),)\n    }\n\n    //region -------------------- Card --------------------\n\n    public createCardListDimension() {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 5,\n            extraLarge: 6,\n        } as const satisfies DimensionOnList\n    }\n\n    public createCardListContent(enumerable: Instruments,) {\n        return <div className=\"instrument-sounds\">\n            <EntityInstrumentImages value={enumerable}/>\n            <InstrumentSound value={enumerable}/>\n        </div>\n    }\n\n    //endregion -------------------- Card --------------------\n    //region -------------------- Table --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('instrument.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): Array<InstrumentAppOption> {\n        const gameStyles = this.#gameStyles\n\n        const options: MutableArray<InstrumentAppOption> = [InstrumentAppOption.NAME,]\n        if (gameStyles.hasSmb)\n            options.push(InstrumentAppOption.REFERENCE_SMB,)\n        if (gameStyles.hasSmb3)\n            options.push(InstrumentAppOption.REFERENCE_SMB3,)\n        if (gameStyles.hasSmw)\n            options.push(InstrumentAppOption.REFERENCE_SMW,)\n        if (gameStyles.hasNsmbu)\n            options.push(InstrumentAppOption.REFERENCE_NSMBU,)\n        options.push(InstrumentAppOption.SOUND,)\n        return options\n    }\n\n\n    public getAdditionalClass(option: InstrumentAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: Instruments, option: InstrumentAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: InstrumentAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyInstrument (list)',],\n    [ViewDisplays.CARD_LIST, 'everyInstrument (card)',],\n    [ViewDisplays.TABLE, 'everyInstrument (table)',],\n] as const satisfies Array<ViewAndRouteName>\n\n/** @reactComponent */\nexport default function InstrumentApp({viewDisplay, games, gameStyles, times,}: InstrumentAppProperties,) {\n\n    //region -------------------- Game selection --------------------\n\n    const game = games.hasSmm2\n        ? InstrumentGames.SUPER_MARIO_MAKER_2\n        : games.hasSmm1\n            ? InstrumentGames.SUPER_MARIO_MAKER\n            : InstrumentGames.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    //endregion -------------------- Game selection --------------------\n    //region -------------------- Game style selection --------------------\n\n    const amountOfSelectedGameStyles = intersect(ALL_GAME_STYLES, gameStyles,).length\n    const gameStyle = amountOfSelectedGameStyles === 5 || amountOfSelectedGameStyles === 4\n            ? InstrumentGameStyles.ALL_GAME_STYLES\n            : amountOfSelectedGameStyles !== 1\n                ? InstrumentGameStyles.MIXED_GAME_STYLE\n                : gameStyles.hasSmb\n                    ? InstrumentGameStyles.SMB\n                    : gameStyles.hasSmb3\n                        ? InstrumentGameStyles.SMB3\n                        : gameStyles.hasSmw\n                            ? InstrumentGameStyles.SMW\n                            : InstrumentGameStyles.NSMBU\n\n    //endregion -------------------- Game style selection --------------------\n    //region -------------------- Time selection --------------------\n\n    const time = games.hasNotSmm2AndSmm1Or3ds\n        ? null\n        : times.hasAllTimes\n            ? InstrumentTimes.ALL_TIMES\n            : times.hasDay\n                ? InstrumentTimes.DAY\n                : InstrumentTimes.NIGHT\n\n    //endregion -------------------- Time selection --------------------\n\n    return <SubMainContainer reactKey=\"instrument\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay}\n                             titleContent={gameContentTranslation('instrument.all',)}\n                             description={<InstrumentDescription viewDisplay={viewDisplay} game={game}/>}\n                             asideContent={<InstrumentAsideContent game={times.hasOnlyNight ? null : game} gameStyle={gameStyle} time={time} gameStyles={gameStyles}/>}>\n        <SubContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles} times={times}/>\n    </SubMainContainer>\n}\n\n/** @reactComponent */\nfunction SubContent({viewDisplay, games, gameStyles, times,}: InstrumentAppProperties,) {\n    const appInterpreter = new InstrumentAppInterpreter(games, gameStyles, times,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <InstrumentList items={appInterpreter.content}/>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <CardList reactKey=\"instrument\" interpreter={appInterpreter}/>\n    return <Table id=\"instrument-table\" interpreter={appInterpreter}/>\n}\n\n//region -------------------- List --------------------\n\ninterface Instrument_ListProperties\n    extends ReactProperties {\n\n    readonly items: CollectionHolder<Instruments>\n\n}\n\n/** @reactComponent */\nfunction InstrumentList({items,}: Instrument_ListProperties,) {\n    return <List partialId=\"instrument\" items={items} withSeparator>{it =>\n        <div className=\"d-flex justify-content-between\">\n            <div className=\"d-flex\">\n                <NameComponent id=\"entity-name\" name={it.reference} popoverOrientation=\"top\"/>\n                <EntityInstrumentImages value={it}/>\n            </div>\n            <InstrumentSound value={it}/>\n        </div>\n    }</List>\n}\n\n//endregion -------------------- List --------------------\n//region -------------------- Description content --------------------\n\ninterface InstrumentDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: InstrumentGames\n\n}\n\n/** @reactComponent */\nfunction InstrumentDescription({viewDisplay, game,}: InstrumentDescriptionProperties,) {\n    const smm1Link = game.smm1RouteName satisfies NullOrString<PossibleRouteName>\n    const smm3dsLink = game.smm3dsRouteName satisfies NullOrString<PossibleRouteName>\n    const smm2Link = game.smm2RouteName satisfies NullOrString<PossibleRouteName>\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyInstrument (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyInstrument (card)' satisfies PossibleRouteName\n    const tableLink = viewDisplay === ViewDisplays.TABLE ? null : 'everyInstrument (table)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation('instrument.description.intro page', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1Link}><GameImage reference={SMM1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm3dsLink}><GameImage reference={SMM3DS}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={SMM2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('instrument.description.intro variants', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-variant-description\" routeName={smm1Link}><GameImage reference={SMM1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-variant-description\" routeName={smm3dsLink}><GameImage reference={SMM3DS}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-variant-description\" routeName={smm2Link}><GameImage reference={SMM2}/></TextOrLink>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('instrument.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n            tableLink: <LinkText key=\"tableLink\" partialId=\"tableLink\" routeName={tableLink} color=\"primary\">{contentTranslation('view type.table.singular',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface InstrumentAsideContentProperties\n    extends ReactProperties {\n\n    readonly game: NullOr<InstrumentGames>\n    readonly gameStyle: InstrumentGameStyles\n    readonly time: NullOr<InstrumentTimes>\n\n    readonly gameStyles: GameStyleCollection\n\n}\n\n/** @reactComponent */\nfunction InstrumentAsideContent({game, gameStyle, time, gameStyles,}: InstrumentAsideContentProperties,) {\n    return <div id=\"instrument-asideContent-container\">\n        <GameAsideContent game={game}/>\n        {game == null ? null : <div className=\"d-inline mx-1\"/>}\n        <GameStyleAsideContent gameStyle={gameStyle} gameStyles={gameStyles}/>\n        {time == null ? null : <div className=\"d-inline mx-1\"/>}\n        <TimeAsideContent time={time}/>\n    </div>\n}\n\n/** @reactComponent */\nfunction GameAsideContent({game,}: Pick<InstrumentAsideContentProperties, 'game'>,) {\n    if (game == null)\n        return null\n    return <div id=\"instrument-gamesButton-container\" className=\"gameAsideContent-container btn-group btn-group-sm\">\n        <LinkButton partialId=\"smm1Game\" routeName={game.smm1RouteName} color={game.smm1Color}>\n            <GameImage reference={SMM1}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm3dsGame\" routeName={game.smm3dsRouteName} color={game.smm3dsColor}>\n            <GameImage reference={SMM3DS}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm2Game\" routeName={game.smm2RouteName} color={game.smm2Color}>\n            <GameImage reference={SMM2}/>\n        </LinkButton>\n    </div>\n}\n\n/** @reactComponent */\nfunction GameStyleAsideContent({gameStyle, gameStyles,}: Pick<InstrumentAsideContentProperties, | 'gameStyle' | 'gameStyles'>,) {\n    return <div id=\"instrument-gameStylesButton-container\" className=\"gameStyleAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameStyleLimit\" routeName={gameStyle.allRouteName} color={gameStyle.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"entity-gameStylesButton-singularGameStyle-top-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smbGameStyleLimit\" routeName={gameStyle.smbRouteName} color={gameStyle.smbColor(gameStyles.hasSmb,)}>\n                <GameStyleImage reference={SMB}/>\n            </LinkButton>\n            <LinkButton partialId=\"smb3GameStyleLimit\" routeName={gameStyle.smb3RouteName} color={gameStyle.smb3Color(gameStyles.hasSmb3,)}>\n                <GameStyleImage reference={SMB3}/>\n            </LinkButton>\n        </div>\n        <div id=\"entity-gameStylesButton-singularGameStyle-bottom-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smwGameStyleLimit\" routeName={gameStyle.smwRouteName} color={gameStyle.smwColor(gameStyles.hasSmw,)}>\n                <GameStyleImage reference={SMW}/>\n            </LinkButton>\n            <LinkButton partialId=\"nsmbuGameStyleLimit\" routeName={gameStyle.nsmbuRouteName} color={gameStyle.nsmbuColor(gameStyles.hasNsmbu,)}>\n                <GameStyleImage reference={NSMBU}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n/** @reactComponent */\nfunction TimeAsideContent({time,}: Pick<InstrumentAsideContentProperties, 'time'>,) {\n    if (time == null)\n        return null\n    return <div id=\"instrument-timesButton-container\" className=\"timeAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allTime\" routeName={time.allRouteName} color={time.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"dayTime\" routeName={time.dayRouteName} color={time.dayColor}>\n                <TimeImage reference={Times.DAY}/>\n            </LinkButton>\n            <LinkButton partialId=\"nightTime\" routeName={time.nightRouteName} color={time.nightColor}>\n                <TimeImage reference={Times.NIGHT}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or an underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {Nullable, NullableString} from '@joookiwi/type'\n\nimport type {Times}           from 'core/time/Times'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Image   from 'app/tools/images/Image'\nimport {Empty} from 'util/emptyVariables'\n\nimport EMPTY_STRING = Empty.EMPTY_STRING\n\ninterface TimeImageProperties\n    extends ReactProperties {\n\n    readonly reference: Nullable<Times>\n\n    readonly className?: NullableString\n\n}\n\n/** @reactComponent */\nexport default function TimeImage({reference, className,}: TimeImageProperties,) {\n    if (reference == null)\n        return null\n    return <Image file={reference.imageFile} className={`time-image ${reference.englishNameInHtml}-image${className == null ? EMPTY_STRING : ` ${className}`}`}/>\n}\n"],"names":["InstrumentSound","_ref","value","name","englishName","sounds","elements","mapByArray","it","i","_jsx","SimpleSoundComponent","file","title","concat","isEmpty","className","children","EntityCompanion","Entities","Companion","NSMBU","GameStyles","SMB","SMB3","SMW","_associatedClass","_classPrivateFieldLooseKey","_additionalClasses","InstrumentAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","_classPrivateFieldLooseBase","this","additionalClasses","renderContent","enumeration","_createContentOption","renderTableHeader","_createTableHeaderOption","_InstrumentAppOption","NAME","CommonOptions","get","getNameContent","nameHeader","REFERENCE_SMB","references","reference","entities","map","Image","getFirstOrNullByArray","getValueByName","americanEnglish","image","english","key","element","GameStyleImage","REFERENCE_SMB3","REFERENCE_SMW","REFERENCE_NSMBU","SOUND","soundHeader","CompanionEnum","_instance","_CompanionEnum_InstrumentAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","InstrumentGames","EnumWithParent","smm1Color","smm3dsColor","smm2Color","smm1RouteName","smm3dsRouteName","smm2RouteName","_InstrumentGames","SUPER_MARIO_MAKER","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_InstrumentGames","CompanionEnum_InstrumentGames","CompanionEnumWithParent","Games","InstrumentGameStyles","EnumWithNullableParent","allColor","smbColor","isSelected","smb3Color","smwColor","nsmbuColor","allRouteName","smbRouteName","smb3RouteName","smwRouteName","nsmbuRouteName","_InstrumentGameStyles","ALL_GAME_STYLES","MIXED_GAME_STYLE","_CompanionEnum_InstrumentGameStyles","CompanionEnum_InstrumentGameStyles","InstrumentTimes","dayColor","nightColor","dayRouteName","nightRouteName","_InstrumentTimes","ALL_TIMES","DAY","NIGHT","_CompanionEnum_InstrumentTimes","CompanionEnum_InstrumentTimes","Times","EntityInstrumentImages","_ref2","_ref3","_getFirstOrNullByArra","filterNotNull","path","ALL","Instruments","SMM1","SMM2","SMM3DS","_games","_gameStyles","_times","InstrumentAppInterpreter","games","gameStyles","times","tableHeadersColor","tableCaption","gameContentTranslation","content","filterByArray","hasAnyIn","createCardListDimension","default","small","medium","large","extraLarge","createCardListContent","enumerable","_jsxs","tableOptions","options","hasSmb","push","hasSmb3","hasSmw","hasNsmbu","getAdditionalClass","option","createTableContent","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","InstrumentApp","viewDisplay","game","hasSmm2","hasSmm1","amountOfSelectedGameStyles","intersect","length","gameStyle","time","hasNotSmm2AndSmm1Or3ds","hasAllTimes","hasDay","SubMainContainer","reactKey","titleContent","description","InstrumentDescription","asideContent","InstrumentAsideContent","hasOnlyNight","SubContent","appInterpreter","InstrumentList","items","CardList","interpreter","Table","id","_ref4","List","partialId","withSeparator","NameComponent","popoverOrientation","_ref5","smm1Link","smm3dsLink","smm2Link","listLink","cardLink","tableLink","_Fragment","TextOrLink","routeName","GameImage","LinkText","color","contentTranslation","toLowerCase","cardsLink","_ref6","GameAsideContent","GameStyleAsideContent","TimeAsideContent","_ref7","LinkButton","_ref8","_ref9","TimeImage","type","disabled","Link","to","routeFromName","EMPTY_STRING","Empty","imageFile","englishNameInHtml"],"sourceRoot":""}