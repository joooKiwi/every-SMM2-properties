{"version":3,"file":"static/js/516.eec633f5.chunk.js","mappings":"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","sources":["app/options/SoundEffectAppOption.tsx","app/SoundEffectApp.tsx","app/options/CommonOptions.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {lazy}                                                                    from 'react'\n\nimport type {AppOptionWithContent, PossibleRenderReactElement} from './component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from './component/AppOptionWithTable'\nimport type {Names, Ordinals}                                  from './SoundEffectAppOption.types'\nimport type {NullOr}                                           from '../../util/types'\nimport type {ReactElement}                                     from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent}                              from '../tools/table/SimpleHeader'\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component'\nimport {CommonOptions}                 from './CommonOptions'\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables'\nimport {Games}                         from '../../core/game/Games'\nimport {SoundEffects}                  from '../../core/soundEffect/SoundEffects'\nimport {SoundEffectCategories}         from '../../core/soundEffectCategory/SoundEffectCategories'\n\n//region -------------------- dynamic imports --------------------\n\nconst SimpleSoundComponent = lazy(() => import( '../../util/sound/component/SimpleSound.component'))\nconst SoundEffectComponent = lazy(() => import( '../../core/soundEffect/SoundEffect.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class SoundEffectAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GAME =             new class GameStyleAppOption_Game extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return [\n                SoundEffectAppOption.renderSMM1And3DSImage(enumeration),\n                SoundEffectAppOption.renderSMM2Image(enumeration),\n            ]\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeaderWithMainGames\n        }\n\n    }()\n    public static readonly NAME =             new class GameStyleAppOption_Name extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly CATEGORY =         new class GameStyleAppOption_Category extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            const {reference,} = enumeration\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => SoundEffectCategories.getValueByName(reference.categoryEnglish).imagePath,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    public static readonly PLAYER_BEHAVIOUR = new class GameStyleAppOption_PlayerBehaviour extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return enumeration.reference.playerSoundEffectTriggerContainer.createNewComponent(enumeration.englishName,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'player behaviour', element: '--Player behaviour--',}//TODO add Player behaviour\n        }\n\n    }()\n    public static readonly SOUNDS = new class GameStyleAppOption_PlayerBehaviour extends SoundEffectAppOption {\n\n        protected override _createContentOption({englishName, sounds_exclusiveSmm1, sounds_standaloneSmm1, sounds_smm2,}: SoundEffects,) {\n            const isSMM1Empty = sounds_exclusiveSmm1.length === 0,\n                isSMM2Empty = sounds_smm2.length === 0\n\n            return isSMM1Empty && isSMM2Empty\n                ? EMPTY_REACT_ELEMENT\n                : <div key={`${englishName} (sound effect sounds)`} className={`soundEffect-sounds-container ${isSMM1Empty || isSMM2Empty ? ` soundEffect-sounds-smm${isSMM1Empty ? 2 : 1}-only-container` : ''}`}>\n                    {isSMM1Empty\n                        ? EMPTY_REACT_ELEMENT\n                        : <div key={`${englishName} (sound effect sounds - SMM1&3DS)`} className=\"soundEffect-sounds-smm1-container\">\n                            {sounds_standaloneSmm1.map(sound => <div key={`${englishName} (sound effect sound - SMM1&3DS - ${sound.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm1-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                                <SimpleSoundComponent file={sound} title={`${englishName} (${sound.key})`}/>\n                            </div>)}\n                        </div>}\n                    {isSMM2Empty\n                        ? EMPTY_REACT_ELEMENT\n                        : <div key={`${englishName} (sound effect sounds (SMM2))`} className=\"soundEffect-sounds-smm2-container\">\n                            {sounds_smm2.map(sound => <div key={`${englishName} (sound effect sound - SMM2 - ${sound.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm2-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                                <SimpleSoundComponent file={sound} title={`${englishName} (${sound.key})`}/>\n                            </div>)}\n                        </div>}\n                </div>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'sounds', element: '--Sounds--',}//TODO add sounds\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundEffectAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link SoundEffectApp} and get by {@link SoundEffectAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => SoundEffects\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    public static renderSMM1And3DSImage(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker1 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_1}/> : EMPTY_REACT_ELEMENT\n    }\n\n    public static renderSMM2Image(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker2 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_2}/> : EMPTY_REACT_ELEMENT\n    }\n\n    protected abstract _createContentOption(enumeration: SoundEffects,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(SoundEffectAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return SoundEffectAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<SoundEffectAppOption>,): SoundEffectAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<SoundEffectAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './SoundEffectApp.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from './interpreter/AppInterpreterWithTable'\nimport type {AppProperties}                                        from './AppProperties.types'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from '../util/react/ReactProperties'\nimport type {SoundEffectAppStates}                                 from './AppStates.types'\n\nimport {AbstractTableApp}       from './withInterpreter/AbstractTableApp'\nimport {gameContentTranslation} from '../lang/components/translationMethods'\nimport {SoundEffects}           from '../core/soundEffect/SoundEffects'\nimport {SoundEffectAppOption}   from './options/SoundEffectAppOption'\nimport {ViewDisplays}           from './withInterpreter/ViewDisplays'\n\n/**\n * @reactComponent\n */\nexport default class SoundEffectApp\n    extends AbstractTableApp<AppInterpreterWithTable<SoundEffects, SoundEffectAppOption>, AppProperties, SoundEffectAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'soundEffect'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every sound effects')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<SoundEffects, SoundEffectAppOption> {\n        return new class implements AppInterpreterWithTable<SoundEffects, SoundEffectAppOption> {\n\n            public get iterable() {\n                return SoundEffects[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: SoundEffects,) {\n                return <div>\n                    <div className=\"soundEffect-images-container\">\n                        {SoundEffectAppOption.renderSMM1And3DSImage(enumerable)}\n                        {SoundEffectAppOption.renderSMM2Image(enumerable)}\n                    </div>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => SoundEffects,) {\n                SoundEffectAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly SoundEffectAppOption[] {\n                return [\n                    SoundEffectAppOption.GAME,\n                    SoundEffectAppOption.NAME,\n                    SoundEffectAppOption.CATEGORY,\n                    SoundEffectAppOption.PLAYER_BEHAVIOUR,\n                    SoundEffectAppOption.SOUNDS,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every sound effects'),\n                }\n            }\n\n            public createTableContent(option: SoundEffectAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: SoundEffectAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {Enum} from '@joookiwi/enumerable/dist/types'\nimport {lazy}      from 'react'\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame'\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from '../../core/ClassWithReference'\nimport type {Name}                                      from '../../lang/name/Name'\nimport type {NameTrait}                                 from '../../lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader'\nimport type {Themes}                                    from '../../core/theme/Themes'\n\nimport {BASE_PATH}                                  from '../../variables'\nimport {contentTranslation, gameContentTranslation} from '../../lang/components/translationMethods'\nimport {EMPTY_REACT_ELEMENT}                        from '../../util/emptyReactVariables'\nimport {EmptyStringName}                            from '../../lang/name/EmptyStringName'\nimport {Games}                                      from '../../core/game/Games'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'))\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('Game'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: gameContentTranslation('Game'),\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n"],"names":["SimpleSoundComponent","lazy","SoundEffectComponent","Symbol","iterator","SoundEffectAppOption","this","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","enumerable","reference","isInSuperMarioMaker1","name","game","Games","EMPTY_REACT_ELEMENT","isInSuperMarioMaker2","value","Enum","values","GAME","enumeration","renderSMM1And3DSImage","renderSMM2Image","CommonOptions","NAME","CATEGORY","SoundEffectCategories","categoryEnglish","imagePath","PLAYER_BEHAVIOUR","playerSoundEffectTriggerContainer","createNewComponent","englishName","key","element","SOUNDS","sounds_exclusiveSmm1","sounds_standaloneSmm1","sounds_smm2","isSMM1Empty","length","isSMM2Empty","className","map","sound","file","title","SoundEffectApp","props","state","typeDisplayed","ViewDisplays","gameContentTranslation","SoundEffects","caption","option","AbstractTableApp","Image","NameComponent","contentTranslation","id","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","path","mainGames","isInSMM1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInCourseTheme","BASE_PATH","isInWorldTheme"],"sourceRoot":""}