{"version":3,"file":"static/js/355.dc955cf6.chunk.js","mappings":"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","sources":["app/options/CommonOptions.tsx","app/options/component/AbstractAppOptionWithSomething.ts","app/options/component/AppOptionWithContent.component.ts","app/options/component/AppOptionWithTable.component.ts","app/withInterpreter/AbstractCardListApp.tsx","app/tools/table/TableContent.tsx","app/tools/table/header/HeaderTypes.ts","app/tools/table/TableHeaders.tsx","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/Table.tsx","app/withInterpreter/AbstractTableApp.tsx"],"sourcesContent":["import type {Enum} from '@joookiwi/enumerable/dist/types'\n\nimport type {SingleHeaderContent, SingleHeadersContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                    from 'core/theme/Themes'\nimport type {Name}                                      from 'lang/name/Name'\nimport type {NameTrait}                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from 'lang/name/NameTraitFromACategory'\nimport type {ImageFile}                                 from 'util/file/image/ImageFile'\nimport type {ReactElement}                              from 'util/react/ReactProperties'\n\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                                             from 'app/tools/images/Image'\nimport {Games}                                           from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {EmptyStringName}                                 from 'lang/name/EmptyStringName'\nimport NameComponent                                     from 'lang/name/component/Name.component'\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | ImageFile | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if ('toNameMap' in imagePath_or_name)\n            return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n        return <Image key={`${startingKey} image`} file={imagePath_or_name}/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('game.singular'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {key: 'game', element: gameContentTranslation('game.singular'), subHeaders: subHeaders,}\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imageFile.fullName,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : null}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : null}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image file={COURSE_THEME_IMAGE_FILE}/> : null}\n            {reference.isInWorldTheme ? <Image file={WORLD_THEME_IMAGE_FILE}/> : null}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","export abstract class AbstractAppOptionWithSomething<T, > {\n\n    //region -------------------- Fields --------------------\n\n    readonly #callbackToRender\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(callbackToRender: () => T,) {\n        this.#callbackToRender = callbackToRender\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _callbackToRender() {\n        return this.#callbackToRender\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\n\nimport {AbstractAppOptionWithSomething} from 'app/options/component/AbstractAppOptionWithSomething'\n\nexport class AppOptionWithContentComponent\n    extends AbstractAppOptionWithSomething<PossibleRenderReactElement>\n    implements AppOptionWithContent {\n\n    public constructor(callbackToRender: () => PossibleRenderReactElement,) {\n        super(callbackToRender,)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        const value = this._callbackToRender()\n        return value instanceof Array ? value : [value]\n    }\n\n}\n","import type {AppOptionWithTable}  from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {AbstractAppOptionWithSomething} from 'app/options/component/AbstractAppOptionWithSomething'\n\nexport class AppOptionWithTableComponent\n    extends AbstractAppOptionWithSomething<SingleHeaderContent>\n    implements AppOptionWithTable {\n\n    public constructor(callbackToRender: () => SingleHeaderContent,) {\n        super(callbackToRender,)\n    }\n\n    public get renderTableHeader(): SingleHeaderContent {\n        return this._callbackToRender()\n    }\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {CARD_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {TableContentProperties} from 'app/tools/table/TableContent.types'\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map((content, i,) => {\n        const firstContent = content[0]\n        return <tr key={`${firstContent} (header #${i + 1})`}>\n            {content.map((innerContent, j,) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${firstContent} (${i + 1}-${j + 1})`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>\n    })}</>\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleName, PossiblePlacement} from 'app/tools/table/header/HeaderTypes.types'\nimport type {Nullable}                                         from 'util/types/nullable'\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][],) {\n            return layout\n        }\n\n    }('head', 'top',)\n    public static readonly FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][],) {\n            return [...layout].reverse()\n        }\n\n    }('foot', 'bottom',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: HeaderTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name\n    readonly #placement\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super()\n        this.#name = name\n        this.#placement = placement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][]\n\n\n    public static getValueByName(value: Nullable<| HeaderTypes | string>,): HeaderTypes {\n        if (value == null)\n            throw new TypeError(`No \"${this.name}\" could be found by a null value.`)\n        if (value instanceof this)\n            return value\n        const valueFound = this.values.find(it => it.simpleName === value)\n        if (valueFound == null)\n            throw new ReferenceError(`No \"${this.name}\" could be found by this value \"${value}\".`)\n        return valueFound\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return HeaderTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<HeaderTypes>,): HeaderTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<HeaderTypes> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<HeaderTypes> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {PureComponent} from 'react'\n\nimport type {SingleHeaderContent, SingleHeadersContent}          from 'app/tools/table/SimpleHeader'\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from 'app/tools/table/TableHeaders.types'\nimport type {ClassWithType}                                      from 'core/ClassWithType'\nimport type {ReactComponent}                                     from 'util/react/ReactComponent'\n\nimport {HeaderTypes} from 'app/tools/table/header/HeaderTypes'\nimport Image         from 'app/tools/images/Image'\nimport Tooltip       from 'bootstrap/tooltip/Tooltip'\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent, ClassWithType<HeaderTypes> {\n\n    //region -------------------- Fields --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders\n    #layout?: Layout\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get type(): HeaderTypes {\n        return this.props.type\n    }\n\n    public get headers(): SingleHeadersContent {\n        return this.props.headers\n    }\n\n    public get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder()\n    }\n\n    public get layout(): Layout {\n        return this.#layout ??= this.props.layout()\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return null\n\n        const tooltip = header.tooltip\n        if (tooltip == null)\n            return null\n\n        return <Tooltip option={({title: tooltip, placement: type.placement,})} elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header)\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>\n    }\n\n\n    public override render(): JSX.Element {\n        const headers = this.headers\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered())\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {HeaderHolder}        from 'app/tools/table/header/HeaderHolder'\nimport type {ReactElement}        from 'util/react/ReactProperties'\nimport type {Nullable, NullOr}    from 'util/types/nullable'\n\nimport {assert} from 'util/utilitiesMethods'\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>()\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>()\n    static readonly #EMPTY_ARRAY = []\n\n    readonly #tableIdentifier: string\n    readonly #header\n    #parent: NullOr<HeaderHolder>\n    #subHeaders?: readonly HeaderHolder[]\n    #subLevel?: number\n    #width?: number\n    #height?: number\n    #wasRendered\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier\n        this.#parent = null\n        this.#header = header\n        this.#wasRendered = false\n        this.#callbackToRenderHead = callbackToRenderHead\n        this.#callbackToRenderFoot = callbackToRenderFoot\n\n        HeaderHolderContainer.#addInstance(this)\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    static #addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES\n        const tableIdentifier = instance.#tableIdentifier\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!\n\n        array.push(instance)\n    }\n\n    static #getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!\n    }\n\n    static #getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!\n\n        let maximumSubLevel = this.#getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): NullOr<HeaderHolder> {\n        return this.#parent\n    }\n\n    public set parent(value: Nullable<HeaderHolder>,) {\n        this.setParent(value)\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: Nullable<HeaderHolder>,): | this | never\n    public setParent(value: Nullable<HeaderHolder>,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',)\n        this.#parent = value\n        return this\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value)\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value\n        return this\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0\n            let parent: this['parent'] = this.parent\n            while (parent != null) {\n                currentSubLevel++\n                parent = parent.parent\n            }\n            this.#subLevel = currentSubLevel\n        }\n        return this.#subLevel\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.#getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel\n            this.#height = currentHeight\n        }\n        return this.#height\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,)\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1\n        }\n        return this.#width\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value\n        return this\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false)\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot()\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return null\n        this.setRendered(true)\n        return this.#callbackToRenderHead(this)\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return null\n        this.setRendered(true)\n        return this.#callbackToRenderFoot(this)\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import {PureComponent} from 'react'\n\nimport type {SingleHeaderContent}        from 'app/tools/table/SimpleHeader'\nimport type {EveryHeaderHolders, Layout} from 'app/tools/table/TableHeaders.types'\nimport type {TableProperties}            from 'app/tools/table/Table.types'\nimport type {HeaderHolder}               from 'app/tools/table/header/HeaderHolder'\nimport type {BootstrapColor}             from 'bootstrap/Bootstrap.types'\nimport type {ObjectHolder}               from 'util/holder/ObjectHolder'\nimport type {ReactComponent}             from 'util/react/ReactComponent'\n\nimport TableContent                   from 'app/tools/table/TableContent'\nimport TableHeaders                   from 'app/tools/table/TableHeaders'\nimport {HeaderHolderContainer}        from 'app/tools/table/header/HeaderHolder.container'\nimport {HeaderTypes}                  from 'app/tools/table/header/HeaderTypes'\nimport {DelayedObjectHolderContainer} from 'util/holder/DelayedObjectHolder.container'\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary'\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info'\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id() {\n        return this.props.id\n    }\n\n    public get caption() {\n        return this.props.caption\n    }\n\n    public get headers() {\n        return this.props.headers\n    }\n\n    public get content() {\n        return this.props.content\n    }\n\n    public get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR\n    }\n\n    public get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR\n    }\n\n\n    #getEveryHeaders(): EveryHeaders\n    #getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    #getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][]\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header)\n            array.push([TableHeaders.getHeaderKey(header), header,])\n            if (subHeaders.length !== 0)\n                array.push(...this.#getEveryHeaders(subHeaders,))\n        }\n        return array\n    }\n\n    #getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]))\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))))\n\n        return everyHeaderHolders\n    }\n\n    #getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = []\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel\n            const height = headerContainer.height\n            const width = headerContainer.width\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key)\n        })\n        return layout\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): JSX.Element {\n        const caption = this.caption\n        const headers = this.headers\n        const isHeaderNull = headers == null\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.#getEveryHeaderHolders(this.#getEveryHeaders()))\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.#getLayout(everyHeadersHolder.get))\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? null : <caption>{caption}</caption>}\n            {isHeaderNull ? null : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? null : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][]\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreterWithTable}      from 'app/interpreter/AppInterpreterWithTable'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SingleTableContent}           from 'app/tools/table/Table.types'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport Table                 from 'app/tools/table/Table'\nimport {AbstractCardListApp} from 'app/withInterpreter/AbstractCardListApp'\nimport {ViewDisplays}        from 'app/withInterpreter/ViewDisplays'\nimport {nonNull}             from 'util/utilitiesMethods'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {TABLE,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [TABLE, this.__tableRouteName,],\n        ]\n    }\n\n    private get __tableRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createTableRouteName()\n    }\n\n    protected abstract _createTableRouteName(): EveryPossibleRouteNames\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[]\n        let index = 1\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    nonNull(optionInterpreter.tableOptions).map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ])\n            index++\n        }\n        return content\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n\n        return <Table key={`${key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${key}-table`}\n                      content={this.#tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: '#',},\n                          ...nonNull(nonNull(optionInterpreter.tableOptions)\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader)))\n                      ]}/>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["_instance","_classPrivateFieldLooseKey","_nameHeader","_gameHeader","_gameHeaderWithAllGames","_gameHeaderWithMainGames","_mainGames","_categoryHeader","CommonOptions","_classCallCheck","Object","defineProperty","writable","value","_createClass","key","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","this","element","contentTranslation","enumeration","_jsx","NameComponent","id","name","reference","popoverOrientation","_classPrivateFieldLoo3","_classPrivateFieldLoo4","gameContentTranslation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","englishName","english","startingKey","concat","englishNameInHtml","Image","file","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_len","arguments","length","subHeaders","Array","_key","_classPrivateFieldLoo7","_classPrivateFieldLoo8","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","imageFile","fallbackName","path","fullName","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_classPrivateFieldLoo9","_classPrivateFieldLoo10","apply","_toConsumableArray","mainGames","_classPrivateFieldLoo11","_classPrivateFieldLoo12","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","_jsxs","className","children","renderSingleComponent","isInCourseTheme","COURSE_THEME_IMAGE_FILE","isInWorldTheme","WORLD_THEME_IMAGE_FILE","_classPrivateFieldLoo13","_classPrivateFieldLoo14","AbstractAppOptionWithSomething","callbackToRender","_callbackToRender","AppOptionWithContentComponent","_ref","_inherits","_super","_createSuper","call","AppOptionWithTableComponent","CARD_LIST","ViewDisplays","_routeName","AbstractCardListApp","_AbstractSimpleListAp","_this","args","_assertThisInitialized","_get","_getPrototypeOf","prototype","__cardRouteName","_createCardListRouteName","enumerable","_step","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","_iterator","_createForOfIteratorHelper","iterable","s","n","done","uniqueEnglishName","_createUniqueNameOnCardList","nameContainer","push","createCardListContent","err","e","f","_Fragment","AbstractSimpleListApp","TableContent","map","i","firstContent","innerContent","j","filter","_name","_placement","_Symbol$iterator","Symbol","iterator","HeaderTypes","_Enum","placement","TypeError","valueFound","values","find","it","simpleName","ReferenceError","Enum","getValueOn","getValuesOn","_regeneratorRuntime","mark","wrap","_context","prev","next","delegateYield","stop","HEAD","_HeaderTypes","HeaderTypes_Head","_super2","layout","FOOT","_HeaderTypes2","HeaderTypes_Foot","_super3","reverse","_everyHeaderHolders","_layout","TableHeaders","props","type","headers","everyHeadersHolder","_this2","headerAsTh","createSingleHeaderContent","everyHeaderHolders","forEach","headerHolder","resetRendered","getLayout","layoutAsTr","index","layoutAsTh","render","header","_header$subHeaders","EMPTY_ARRAY","source","tooltip","Tooltip","option","title","elementId","getHeaderKey","height","width","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","_INSTANCES","_MAXIMUM_SUB_LEVEL_MAP","_EMPTY_ARRAY","_tableIdentifier","_header","_parent","_subHeaders","_subLevel","_width","_height","_wasRendered","_callbackToRenderHead","_callbackToRenderFoot","_addInstance","_getEveryInstances","_getMaximumSubLevel","HeaderHolderContainer","tableIdentifier","callbackToRenderHead","callbackToRenderFoot","set","setParent","assert","setSubHeaders","currentSubLevel","parent","currentHeight","subLevel","subHeadersWidth","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","has","maximumSubLevel","previousHeader","instance","Map","_getEveryHeaders","_getEveryHeaderHolders","_getLayout","Table","_getLayout2","_getEveryHeaderHolders2","_getEveryHeaders2","caption","_this$props$tableCol","DEFAULT_TABLE_COLOR","_this$props$headersC","DEFAULT_HEADERS_COLOR","isHeaderNull","DelayedObjectHolderContainer","layoutHolder","tableColor","headersColor","_this$headers","undefined","array","getSubHeaders","everyHeaders","_this3","_ref2","_ref3","_slicedToArray","subHeader","headerContainer","_ref4","_layout$_ref","TABLE","_tableContent","AbstractTableApp","_AbstractCardListApp","_tableContent2","__tableRouteName","_createTableRouteName","_objectSpread","tableProperties","nonNull","tableOptions","tableHeader","createTableHeader","_loop","callbackToGetEnumerable","createTableContent","flat"],"sourceRoot":""}