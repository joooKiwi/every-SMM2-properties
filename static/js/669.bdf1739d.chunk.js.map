{"version":3,"file":"static/js/669.bdf1739d.chunk.js","mappings":"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","sources":["app/CharacterNameApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import type {CharacterNameProperties}                              from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\n\nimport {AbstractCardListApp}     from 'app/withInterpreter/AbstractCardListApp'\nimport {CharacterNames}          from 'core/characterName/CharacterNames'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {filterGame}              from 'util/utilitiesMethods'\n\nexport default class CharacterNameApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CharacterNames>, CharacterNameProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'characterName'\n    }\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyCharacterName (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyCharacterName (card)'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('character name.all',)\n    }\n\n    protected override _createUniqueNameOnSimpleList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createUniqueNameOnCardList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class CharacterNameAppInterpreter implements AppInterpreterWithCardList<CharacterNames> {\n\n            public get content() {\n                return filterGame(CharacterNames.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({uniqueEnglishName: name, editorVoiceSoundFileHolder,}: CharacterNames,) {\n                return <div className=\"card-body\">\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n\n}","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\nimport {ReactElement}          from 'react'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const cardListDimension = optionInterpreter.createCardListDimension()\n        const dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension,).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSound>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["CharacterNameApp","_AbstractCardListApp","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","gameContentTranslation","enumerable","uniqueEnglishName","$this","this","CharacterNameAppInterpreter","get","filterGame","CharacterNames","values","props","games","_ref","name","editorVoiceSoundFileHolder","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","AbstractCardListApp","_routeName","_classPrivateFieldLooseKey","_AbstractSimpleListAp","_this","_len","length","args","Array","_key","call","concat","Object","defineProperty","_assertThisInitialized","writable","_toConsumableArray","_get","_getPrototypeOf","prototype","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createCardListRouteName","englishName","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","size","contentToDisplay","index","_createUniqueNameOnCardList","id","englishNameInHtml","_jsxs","NameComponent","reference","nameContainer","popoverOrientation","createCardListContent","_Fragment","AbstractSimpleListApp","regularFile","regularSound","europeanFile","europeanSound","SimpleSoundComponent","file","title"],"sourceRoot":""}