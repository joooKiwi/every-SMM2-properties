{"version":3,"file":"static/js/295.4d7a3048.chunk.js","mappings":"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","sources":["core/entity/properties/instrument/InstrumentProperty.component.tsx","core/entityLimit/Limit.component.tsx","core/theme/CourseTheme.component.tsx","app/options/EntityAppOption.tsx","app/EntityApp.tsx","app/options/component/EmptyAppOption.ts","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import './InstrumentProperty.scss'\n\nimport type {Entities}        from 'core/entity/Entities'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface InstrumentPropertyProperties\n    extends ReactProperties {\n\n    value: Entities\n\n}\n\n/**\n * @todo add on click event to play the music block sound (randomly if more than one)\n * @reactComponent\n */\nexport default function InstrumentPropertyComponent({value: {englishNameInHtml, reference: {canMakeASoundOutOfAMusicBlock: value, canMakeASoundOutOfAMusicBlockComment: comment,},},}: InstrumentPropertyProperties,) {\n    if (value !== true)\n        return null\n    const id = `${englishNameInHtml}-instrumentProperty`\n\n    if (comment == null)\n        return <i id={id} className=\"music-block\"/>\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} elementId={id}>\n        <i id={id} className=\"music-block-with-comment\"/>\n    </Tooltip>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {EntityLimits}     from 'core/entityLimit/EntityLimits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'whilePlaying'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    id: Id\n\n    limits: | EntityLimits | ReadonlyMap<EntityLimits, boolean>\n\n    displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof EntityLimits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly EntityLimits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.current.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, entityLimit: EntityLimits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = entityLimit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, entityLimit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(entityLimit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: entityLimit.reference.nameContainer.languageValue,}} elementId={acronymId}>\n            <TextComponent key={`${entityLimit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, entityLimit,)\n}\n\nfunction createSingleNameComponent(id: Id, entityLimit: EntityLimits,) {\n    return <NameComponent key={`${entityLimit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={entityLimit.reference}/>\n}","import type {ThemeProperty} from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport {ThemeComponent}          from 'core/theme/Theme.component'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class CourseThemeComponent\n    extends ThemeComponent<ThemeProperty> {\n\n\n    protected override get _map() {\n        return this.reference.toCourseThemeMap()\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInGroundTheme\n            && this.reference.isInUndergroundTheme\n            && this.reference.isInUnderwaterTheme\n            && (this.reference.isInDesertTheme ?? false)\n            && (this.reference.isInSnowTheme ?? false)\n            && (this.reference.isInSkyTheme ?? false)\n            && (this.reference.isInForestTheme ?? false)\n            && this.reference.isInGhostHouseTheme\n            && this.reference.isInAirshipTheme\n            && this.reference.isInCastleTheme\n    }\n\n    protected override _renderSingleComponent(theme: Themes,) {\n        return CourseThemeComponent.renderSingleComponent(theme, true, this.name.english,)\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage:<Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme => this._renderSingleComponent(courseTheme))}</div>\n    }\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Fragment}                                                                from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Entities}                                         from 'core/entity/Entities'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\nimport type {EmptyArray}                                       from 'util/types/variables'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                             from 'app/options/component/EmptyAppOption'\nimport Image                                        from 'app/tools/images/Image'\nimport TextComponent                                from 'app/tools/text/TextComponent'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport InstrumentPropertyComponent                  from 'core/entity/properties/instrument/InstrumentProperty.component'\nimport {EntityCategories}                           from 'core/entityCategory/EntityCategories'\nimport LimitComponent                               from 'core/entityLimit/Limit.component'\nimport {Games}                                      from 'core/game/Games'\nimport GameComponent                                from 'core/game/Game.component'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport GameStyleComponent                           from 'core/gameStyle/GameStyle.component'\nimport CourseThemeComponent                         from 'core/theme/CourseTheme.component'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\nimport TimeComponent                                from 'core/time/Time.component'\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image className={`entity-image ${englishNameInHtml}-image`} file={image}/>)\n                }</Fragment>)\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            }\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n                </div>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: gameContentTranslation('time.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imageFile,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n                const entity = enumeration.reference\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds\n                const editorLimit_SMM2 = entity.editorLimit_smm2\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS} displayAcronymIfApplicable/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2} displayAcronymIfApplicable/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: gameContentTranslation('limit.singular'),\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: gameContentTranslation('limit.editor.value'),\n                        tooltip: gameContentTranslation('limit.editor.limit'),\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: gameContentTranslation('limit.play.value'),\n                        tooltip: gameContentTranslation('limit.play.limit'),\n                    },\n                ],\n            }\n        }\n\n    }()\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new EntityAppOption()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityAppOption>,): EntityAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<EntityAppOption> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = NullOr<() => PossibleRenderReactElement>\ntype PossibleOptionWithTable = NullOr<SingleHeaderContent>\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('entity.all')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable() {\n                return Entities[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [\n                    EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('entity.all'),\n                }\n            }\n\n            public createTableContent(option: EntityAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["InstrumentPropertyComponent","_ref","_ref$value","value","englishNameInHtml","_ref$value$reference","reference","canMakeASoundOutOfAMusicBlock","comment","canMakeASoundOutOfAMusicBlockComment","id","concat","_jsx","className","Tooltip","option","title","gameContentTranslation","elementId","children","LimitComponent","limits","displayAcronymIfApplicable","EntityLimits","createSingleComponent","selectedLimits","_toConsumableArray","filter","_ref2","_slicedToArray","map","_ref4","length","_Fragment","limit","index","_jsxs","Fragment","createReturnOfLine","englishName","ProjectLanguages","current","comma","entityLimit","acronym","createSingleNameComponent","acronymId","StringContainer","getInHtml","nameContainer","languageValue","TextComponent","content","NameComponent","name","CourseThemeComponent","_ThemeComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","toCourseThemeMap","_this$reference$isInD","_this$reference$isInS","_this$reference$isInS2","_this$reference$isInF","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","theme","renderSingleComponent","english","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","_this","Themes","courseThemes","courseTheme","_renderSingleComponent","ThemeComponent","_gameStyles","_classPrivateFieldLooseKey","_gameStyles_unusedImages","_times","_themes","_appOptionWithContent","_appOptionWithTable","_Symbol$iterator","Symbol","iterator","EntityAppOption","call","Object","defineProperty","_assertThisInitialized","writable","_classPrivateFieldLooseBase","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","_classPrivateFieldLoo","_classPrivateFieldLoo2","GameStyles","values","toArray","_classPrivateFieldLoo3","_classPrivateFieldLoo4","SUPER_MARIO_BROS","_classPrivateFieldLoo5","_classPrivateFieldLoo6","Times","_classPrivateFieldLoo7","_classPrivateFieldLoo8","Enum","getValueOn","getValuesOn","_regeneratorRuntime","mark","wrap","_context","prev","next","delegateYield","stop","IMAGES","_EntityAppOption","EntityAppOption_Images","_super2","enumeration","CALLBACK_TO_GET_ENUMERATION","uniqueImage","gameStyle","image","element","contentTranslation","subHeaders","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","_EntityAppOption2","EntityAppOption_Name","_super3","CommonOptions","getNameContent","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","nameHeader","GAME","_EntityAppOption3","EntityAppOption_Game","_super4","entity","GameComponent","displayAllAsText","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","_EntityAppOption4","EntityAppOption_GameStyle","_super5","GameStyleComponent","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","_EntityAppOption5","EntityAppOption_CourseTheme","_super6","WHEN_ALL_SELECTED_COURSE_THEME","TIME","_EntityAppOption6","EntityAppOption_Time","_super7","TimeComponent","WHEN_ALL_SELECTED_TIME","CATEGORY","_EntityAppOption7","EntityAppOption_Category","_super8","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValueByName","imageFile","categoryHeader","CATEGORY_AS_TEXT","LIMIT","_EntityAppOption8","EntityAppOption_Limit","_super9","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","tooltip","alt","Games","SUPER_MARIO_MAKER_1","fallbackName","path","fullName","SUPER_MARIO_MAKER_2","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","EntityApp","_AbstractTableApp","_class","Entities","small","medium","large","extraLarge","category","categoryEnglish","set","caption","AbstractTableApp","_instance","EMPTY_ARRAY","regularFile","regularSoundFile","europeanFile","europeanSoundFile","SimpleSoundComponent"],"sourceRoot":""}