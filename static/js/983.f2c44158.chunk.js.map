{"version":3,"file":"static/js/983.f2c44158.chunk.js","mappings":"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","sources":["app/options/EntityAppOption.tsx","app/EntityApp.tsx","app/options/CommonOptions.tsx","app/options/component/EmptyAppOption.ts"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Fragment, lazy}                                                          from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Entities}                                         from 'core/entity/Entities'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\nimport type {EmptyArray}                                       from 'util/types/variables'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                             from 'app/options/component/EmptyAppOption'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {EntityCategories}                           from 'core/entityCategory/EntityCategories'\nimport {EntityLimitTypes}                           from 'core/entityLimit/EntityLimitTypes'\nimport {Games}                                      from 'core/game/Games'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =        lazy(() => import('core/theme/CourseTheme.component'))\nconst EditorVoiceSoundComponent =   lazy(() => import('core/editorVoice/EditorVoiceSound.component'))\nconst Image =                       lazy(() => import('app/tools/images/Image'))\nconst InstrumentPropertyComponent = lazy(() => import('core/entity/properties/instrument/InstrumentProperty.component'))\nconst GameComponent =               lazy(() => import('core/game/Game.component'))\nconst GameStyleComponent =          lazy(() => import('core/gameStyle/GameStyle.component'))\nconst LimitComponent =              lazy(() => import('core/entityLimit/Limit.component'))\nconst TimeComponent =               lazy(() => import('core/time/Time.component'))\nconst TextComponent =               lazy(() => import('app/tools/text/TextComponent'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image id={`${englishNameInHtml}-image`} className=\"entity-image\" source={image} fallbackName={`${englishName} (${gameStyle.acronym})`}/>)\n                }</Fragment>)\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            }\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSound} name={enumeration.englishName}/>\n                </div>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: gameContentTranslation('Game style'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: gameContentTranslation('Course theme'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: gameContentTranslation('Time'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imagePath,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n                const entity = enumeration.reference\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds\n                const editorLimit_SMM2 = entity.editorLimit_smm2\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS} displayAcronymIfApplicable/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2} displayAcronymIfApplicable/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: gameContentTranslation('Limit'),\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: gameContentTranslation(EntityLimitTypes.EDITOR.englishCommonText),\n                        tooltip: gameContentTranslation('Limit in the editor'),\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: gameContentTranslation(EntityLimitTypes.WHILE_PLAYING.englishCommonText),\n                        tooltip: gameContentTranslation('Limit while playing'),\n                    },\n                ],\n            }\n        }\n\n    }()\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new EntityAppOption()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityAppOption>,): EntityAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = NullOr<() => PossibleRenderReactElement>\ntype PossibleOptionWithTable = NullOr<SingleHeaderContent>\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport {lazy} from 'react'\n\nimport type {AppProperties}                                        from 'app/AppProperties.types'\nimport type {EntityAppStates}                                      from 'app/AppStates.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityAppOption}        from 'app/options/EntityAppOption'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {Entities}               from 'core/entity/Entities'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- dynamic imports --------------------\n\nconst SimpleSoundComponent = lazy(() => import('util/sound/component/SimpleSound.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @reactComponent\n */\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, AppProperties, EntityAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every entities')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable() {\n                return Entities[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishNameInHtml: htmlName, reference, editorVoiceSound: {file: editorVoice1, europeanFile: editorVoice2,},}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    {editorVoice1 == null ? null : <SimpleSoundComponent file={editorVoice1} title={`${htmlName} - editor voice`}/>}\n                    {editorVoice2 == null ? null : <SimpleSoundComponent file={editorVoice2} title={`${htmlName} - editor voice (european)`}/>}\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every entities'),\n                }\n            }\n\n            public createTableContent(option: EntityAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {Enum} from '@joookiwi/enumerable/dist/types'\nimport {lazy}      from 'react'\n\nimport type {SingleHeaderContent, SingleHeadersContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                    from 'core/theme/Themes'\nimport type {Name}                                      from 'lang/name/Name'\nimport type {NameTrait}                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from 'lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from 'util/react/ReactProperties'\n\nimport {BASE_PATH}                                  from 'variables'\nimport {Games}                                      from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {EmptyStringName}                            from 'lang/name/EmptyStringName'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('app/tools/images/Image'))\nconst NameComponent = lazy(() => import('lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('Game'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: gameContentTranslation('Game'),\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : null}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : null}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : null}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : null}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n"],"names":["CourseThemeComponent","lazy","EditorVoiceSoundComponent","Image","InstrumentPropertyComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","this","content","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","GameStyles","Times","Themes","value","Enum","values","IMAGES","enumeration","CALLBACK_TO_GET_ENUMERATION","englishName","englishNameInHtml","uniqueImage","_gameStyles","map","gameStyle","Fragment","get","image","id","className","source","fallbackName","acronym","key","element","contentTranslation","subHeaders","renderSingleComponent","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","CommonOptions","editorVoiceSound","name","GAME","entity","reference","displayAllAsText","WHEN_ALL_SELECTED_GAME","GAME_STYLE","gameContentTranslation","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","categoryNameContainer","EntityCategories","english","imagePath","CATEGORY_AS_TEXT","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","limits","displayAcronymIfApplicable","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","EntityLimitTypes","tooltip","alt","Games","path","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","SimpleSoundComponent","EntityApp","props","state","typeDisplayed","ViewDisplays","Entities","small","medium","large","extraLarge","htmlName","editorVoice1","file","editorVoice2","europeanFile","category","categoryEnglish","title","caption","option","AbstractTableApp","NameComponent","popoverOrientation","imagePath_or_nameCallback","EmptyStringName","imagePath_or_name","startingKey","getGameHeader","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","isInCourseTheme","BASE_PATH","isInWorldTheme","EMPTY_ARRAY"],"sourceRoot":""}