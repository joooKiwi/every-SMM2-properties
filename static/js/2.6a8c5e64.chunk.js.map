{"version":3,"sources":["util/sound/player/AbstractSoundPlayer.ts","util/sound/player/SoundStates.ts","util/sound/history/HistoryState.ts","util/sound/history/SoundStateHistory.ts","util/sound/player/SimpleSoundPlayer.ts","util/sound/player/SoundPlayer.factory.ts","util/sound/holder/SoundSubElementsHolder.ts","util/sound/player/Validators.ts","util/sound/component/SimpleSound.component.tsx"],"names":["AbstractSoundPlayer","key","isInProduction","map","if","includes","isMet","ReferenceError","set","this","ExtendedMapContainer","DEFAULT_DOES_LOOP","Symbol","iterator","SoundStates","englishName","value","values","find","enumerable","Enum","getValueOn","getValuesOn","STANDBY","playElement","PAUSED","stopElement","PLAYING","pauseElement","LOADING","loadingElement","EXCEPTION","exceptionElement","HistoryState","state","isLoading","other","SoundStateHistory","currentState","current","setLast","_history","push","TypeError","last","SimpleSoundPlayer","source","title","doesLoop","setState","audio","Audio","fullName","onplaying","event","history","stop","pause","onPlaying","onended","onEnd","loop","paused","isAudioExistant","Number","isFinite","duration","onBeforePlay","onAfterPlay","onBeforePause","onAfterPause","onBeforeStop","onAfterStop","onBeforeStateChanged","onAfterStateChanged","play","then","isDurationValid","catch","isPaused","isStandby","currentTime","equals","SoundPlayerFactory","SoundSubElementsHolder","Validators","callback","getNonNullDefaultOn","setDefault","setNonNullDefaultOn","ALL_YES","ALL_NO","ON_PLAY_ONLY","ON_CREATE_ONLY","_DEFAULT","SimpleSoundComponent","props","isSourceRetrieved","_audio","file","validator","default","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","remove","elementsHolder","className","onClick","role","componentState","getElementsFrom","Component"],"mappings":"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","file":"static/js/2.6a8c5e64.chunk.js","sourcesContent":["import type {ExtendedMap} from '../../extended/ExtendedMap'\nimport type {SoundPlayer} from './SoundPlayer'\n\nimport {ExtendedMapContainer} from '../../extended/ExtendedMap.container'\nimport {isInProduction}       from '../../../variables'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #MAP?: ExtendedMap<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            (AbstractSoundPlayer.map)\n                .if(map => map.includes(key))\n                .isMet(() => {\n                    throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n                })\n                .set(key, this)\n        }\n    }\n\n    public static get map(): ExtendedMap<string, SoundPlayer> {\n        return this.#MAP ??= new ExtendedMapContainer()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundStates.types'\nimport type {ClassWithEnglishName}                                                                                                                                                               from '../../../core/ClassWithEnglishName'\nimport type {StaticReference}                                                                                                                                                                    from '../../enum/Enum.types'\nimport type {ReactElement}                                                                                                                                                                       from '../../react/ReactProperties'\nimport type {SoundSubElementsHolder}                                                                                                                                                             from '../holder/SoundSubElementsHolder'\n\nimport {Enum} from '../../enum/Enum'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<SoundStates> {\n        return SoundStates\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundStates, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundStates\n    public static getValue(value: PossibleValue,): | SoundStates | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this)\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {SoundStates} from '../player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","import {SoundStates}  from '../player/SoundStates'\nimport {HistoryState} from './HistoryState'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false,)\n        this.#history = [this.current,]\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: | HistoryState | null | undefined,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: | HistoryState | null | undefined,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: | HistoryState | null | undefined,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: | HistoryState | null | undefined,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {OnAfterPauseSoundPlayerCallback, OnAfterPlayingSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback} from './types'\nimport type {SoundFile}                                                                                                                                                                                                                                                                                                                                         from '../SoundFile'\n\nimport {AbstractSoundPlayer} from './AbstractSoundPlayer'\nimport {SoundStateHistory}   from '../history/SoundStateHistory'\nimport {SoundStates}         from './SoundStates'\nimport {HistoryState}        from '../history/HistoryState'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: | OnBeforePlaySoundPlayerCallback<this> | null\n    #onAfterPlay?: | OnAfterPlaySoundPlayerCallback<this> | null\n    #onPlaying?: | OnAfterPlayingSoundPlayerCallback<this> | null\n    #onBeforePause?: | OnBeforePauseSoundPlayerCallback<this> | null\n    #onAfterPause?: | OnAfterPauseSoundPlayerCallback<this> | null\n    #onBeforeStop?: | OnBeforeStopSoundPlayerCallback<this> | null\n    #onAfterStop?: | OnAfterStopSoundPlayerCallback<this> | null\n    #onEnd?: | OnEndSoundPlayerCallback<this> | null\n    #onBeforeStateChanged?: | OnBeforeStateChangedSoundPlayerCallback<this> | null\n    #onAfterStateChanged?: | OnAfterStateChangedSoundPlayerCallback<this> | null\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false,),)\n                this.onPlaying?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false,),)\n                this.onEnd?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): | OnBeforePlaySoundPlayerCallback<this> | null {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: | OnBeforePlaySoundPlayerCallback<this> | null | undefined,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: | OnBeforePlaySoundPlayerCallback<this> | null | undefined,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): | OnAfterPlaySoundPlayerCallback<this> | null {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: | OnAfterPlaySoundPlayerCallback<this> | null | undefined,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: | OnAfterPlaySoundPlayerCallback<this> | null | undefined,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onPlaying(): | OnAfterPlayingSoundPlayerCallback<this> | null {\n        return this.#onPlaying ?? null\n    }\n\n    public set onPlaying(value: | OnAfterPlayingSoundPlayerCallback<this> | null | undefined,) {\n        this.#onPlaying = value ?? null\n    }\n\n    public setOnPlaying(value: | OnAfterPlayingSoundPlayerCallback<this> | null | undefined,) {\n        this.onPlaying = value\n        return this\n    }\n\n\n    public get onBeforePause(): | OnBeforePauseSoundPlayerCallback<this> | null {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: | OnBeforePauseSoundPlayerCallback<this> | null | undefined,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: | OnBeforePauseSoundPlayerCallback<this> | null | undefined,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): | OnAfterPauseSoundPlayerCallback<this> | null {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: | OnAfterPauseSoundPlayerCallback<this> | null | undefined,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: | OnAfterPauseSoundPlayerCallback<this> | null | undefined,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): | OnBeforeStopSoundPlayerCallback<this> | null {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: | OnBeforeStopSoundPlayerCallback<this> | null | undefined,) {\n        this.#onBeforeStop = value\n    }\n\n    public setOnBeforeStop(value: | OnBeforeStopSoundPlayerCallback<this> | null | undefined,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): OnAfterStopSoundPlayerCallback<this> | null {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: OnAfterStopSoundPlayerCallback<this> | null | undefined,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: OnAfterStopSoundPlayerCallback<this> | null | undefined,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onEnd(): | OnEndSoundPlayerCallback<this> | null {\n        return this.#onEnd ?? null\n    }\n\n    public set onEnd(value: | OnEndSoundPlayerCallback<this> | null | undefined,) {\n        this.#onEnd = value ?? null\n    }\n\n    public setOnEnd(value: | OnEndSoundPlayerCallback<this> | null | undefined,): this {\n        this.onEnd = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): | OnBeforeStateChangedSoundPlayerCallback<this> | null {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: | OnBeforeStateChangedSoundPlayerCallback<this> | null | undefined,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: | OnBeforeStateChangedSoundPlayerCallback<this> | null | undefined,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): | OnAfterStateChangedSoundPlayerCallback<this> | null {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: | OnAfterStateChangedSoundPlayerCallback<this> | null | undefined,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: | OnAfterStateChangedSoundPlayerCallback<this> | null | undefined,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false,),))\n        this.setState(new HistoryState(PLAYING, true,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from '../SoundFile'\n\nimport {AbstractSoundPlayer} from './AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from './SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: | DOES_LOOP | null | undefined,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import type {ReactElement} from '../../react/ReactProperties'\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, IsSourceFoundCallback, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Validators.types'\nimport type {ClassWithEnglishName}                                                                                                                                                                                      from '../../../core/ClassWithEnglishName'\nimport type {StaticReference}                                                                                                                                                                                           from '../../enum/Enum.types'\n\nimport {Enum} from '../../enum/Enum'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    protected static readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Validators\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): | boolean | null {\n        return null\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Validators> {\n        return Validators\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): Validators {\n        return Enum.getNonNullDefaultOn(this)\n    }\n\n    public static set default(value: | Validators | string,) {\n        this.setDefault(value)\n    }\n\n    public static setDefault(value: | Validators | string,): typeof Validators {\n        return Enum.setNonNullDefaultOn(this, value,)\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends Validators, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Validators\n    public static getValue(value: PossibleValue,): | Validators | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this)\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {IsSourceFoundCallback} from '../player/Validators.types'\nimport type {ReactComponent}        from '../../react/ReactComponent'\nimport type {ReactElement}          from '../../react/ReactProperties'\nimport type {SimpleSoundState}      from './state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from '../player/SimpleSoundPlayer'\nimport type {SimpleSoundProperties} from './property/SimpleSoundProperties'\nimport type {SoundFile}             from '../SoundFile'\n\nimport {AbstractSoundPlayer}    from '../player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from '../player/SoundPlayer.factory'\nimport {SoundStates}            from '../player/SoundStates'\nimport {SoundSubElementsHolder} from '../holder/SoundSubElementsHolder'\nimport {Validators}             from '../player/Validators'\nimport {HistoryState}           from '../history/HistoryState'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.default\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false,),)\n        AbstractSoundPlayer.map.remove(audio.source.key)\n    }\n\n    public override render(): ReactElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"sourceRoot":""}