{"version":3,"file":"static/js/54.943d5875.chunk.js","mappings":"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","sources":["core/soundEffect/SMM1And3DSSoundEffectSounds.component.tsx","core/soundEffect/SMM1And3DSOnlySoundEffectSounds.component.tsx","core/soundEffect/SMM2SoundEffectSoundsComponent.tsx","core/soundEffect/SMM2OnlySoundEffectSounds.component.tsx","core/soundEffect/SoundEffect.component.tsx","core/soundEffect/SoundEffectSounds.component.tsx","app/options/SoundEffectAppOption.tsx","app/property/SoundEffectGames.ts","app/SoundEffectApp.tsx","app/tools/button/LinkButton.tsx","core/soundEffect/SoundEffectImage.tsx"],"sourcesContent":["import type {SoundEffectSoundsComponentProperties} from 'core/soundEffect/SoundEffectSounds.component.types'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\nexport default function SMM1And3DSSoundEffectSoundsComponent({reference,}: SoundEffectSoundsComponentProperties,) {\n    const englishName = reference.englishName\n    return <div key={`${englishName} (sound effect sounds - SMM1&3DS)`} className=\"soundEffect-sounds-smm1-container\">{\n        reference.sounds_standaloneSmm1.map(it =>\n            <div key={`${englishName} (sound effect sound - SMM1&3DS - ${it.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm1-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                <SimpleSoundComponent file={it} title={`${englishName} (${it.key})`}/>\n            </div>)\n    }</div>\n}\n","import type {SoundEffectSoundsComponentProperties} from 'core/soundEffect/SoundEffectSounds.component.types'\n\nimport SMM1And3DSSoundEffectSoundsComponent from 'core/soundEffect/SMM1And3DSSoundEffectSounds.component'\n\nexport default function SMM1And3DSOnlySoundEffectSoundsComponent({reference,}: SoundEffectSoundsComponentProperties,) {\n    if (reference.sounds_standaloneSmm1.length === 0)\n        return null\n    return <div className=\"soundEffect-sounds-container sound-effect-sounds-smm1-only-container\">\n        <SMM1And3DSSoundEffectSoundsComponent reference={reference}/>\n    </div>\n}\n","import type {SoundEffectSoundsComponentProperties} from 'core/soundEffect/SoundEffectSounds.component.types'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\nexport default function SMM2SoundEffectSoundsComponent({reference,}: SoundEffectSoundsComponentProperties,) {\n    const englishName = reference.englishName\n    return <div key={`${englishName} (sound effect sounds - SMM2)`} className=\"soundEffect-sounds-smm2-container\">\n        {reference.sounds_smm2.map(it =>\n            <div key={`${englishName} (sound effect sound - SMM2 - ${it.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm2-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                <SimpleSoundComponent file={it} title={`${englishName} (${it.key})`}/>\n            </div>)}\n    </div>\n}\n","import type {SoundEffectSoundsComponentProperties} from 'core/soundEffect/SoundEffectSounds.component.types'\n\nimport SMM2SoundEffectSoundsComponent from 'core/soundEffect/SMM2SoundEffectSoundsComponent'\n\nexport default function SMM2OnlySoundEffectSoundsComponent({reference,}: SoundEffectSoundsComponentProperties,) {\n    if (reference.sounds_smm2.length === 0)\n        return null\n    return <div className=\"soundEffect-sounds-container sound-effect-sounds-smm2-only-container\">\n        <SMM2SoundEffectSoundsComponent reference={reference}/>\n    </div>\n}\n","import './SoundEffect.scss'\n\nimport type {SoundEffects}    from 'core/soundEffect/SoundEffects'\nimport type {Name}            from 'lang/name/Name'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Image             from 'app/tools/images/Image'\nimport {Games}           from 'core/game/Games'\nimport SoundEffectImage  from 'core/soundEffect/SoundEffectImage'\nimport {StringContainer} from 'util/StringContainer'\n\ninterface SoundEffectProperties\n    extends ReactProperties {\n\n    readonly reference: SoundEffects\n\n    readonly game?: Games\n\n    readonly name?: Name<string>\n\n}\n\n/**\n * @deprecated This should be replaced with something else\n * @reactComponent\n */\nexport default function SoundEffectComponent({reference, game, name,}: SoundEffectProperties,) {\n    if (game === Games.SUPER_MARIO_MAKER_1) {\n        const [imageFile1, imageFile2,] = reference.SMM1ImageFiles!\n        if (imageFile2 == null)\n            return <SoundEffectImage reference={reference} file={imageFile1}/>\n\n        const themeEnglishNameInHtml = reference.englishNameInHtml\n        const identifier = name?.english\n        const id = identifier == null ? `${themeEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${themeEnglishNameInHtml}-soundEffect${game == null ? '' : `-${game.acronym}`}-image`\n        return <Image partialId={id} images={([\n            {file: imageFile1, className: `soundEffect-image ${themeEnglishNameInHtml}-image`,},\n            {file: imageFile2, className: `soundEffect-image ${themeEnglishNameInHtml}-image`,},\n        ])} className={`soundEffect-animated-image ${themeEnglishNameInHtml}-image`}/>\n    }\n    return <SoundEffectImage reference={reference}/>\n}\n","import type {SoundEffectSoundsComponentProperties} from 'core/soundEffect/SoundEffectSounds.component.types'\n\nimport SMM1And3DSSoundEffectSoundsComponent from 'core/soundEffect/SMM1And3DSSoundEffectSounds.component'\nimport SMM2SoundEffectSoundsComponent       from 'core/soundEffect/SMM2SoundEffectSoundsComponent'\n\nexport default function SoundEffectSoundsComponent({reference,}: SoundEffectSoundsComponentProperties,) {\n    const isSMM1Empty = reference.sounds_exclusiveSmm1.length === 0\n    const isSMM2Empty = reference.sounds_smm2.length === 0\n\n    if (isSMM1Empty && isSMM2Empty)\n        return null\n\n    if (isSMM1Empty && !isSMM2Empty)\n        return <div className=\"soundEffect-sounds-container sound-effect-sounds-smm2-only-container\">\n            <SMM2SoundEffectSoundsComponent reference={reference}/>\n        </div>\n    if (!isSMM1Empty && isSMM2Empty)\n        return <div className=\"soundEffect-sounds-container sound-effect-sounds-smm1-only-container\">\n            <SMM1And3DSSoundEffectSoundsComponent reference={reference}/>\n        </div>\n    return <div className=\"soundEffect-sounds-container\">\n        <SMM1And3DSSoundEffectSoundsComponent reference={reference}/>\n        <hr className=\"my-1\"/>\n        <SMM2SoundEffectSoundsComponent reference={reference}/>\n    </div>\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {SoundEffects}        from 'core/soundEffect/SoundEffects'\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/SoundEffectAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {CommonOptions}                          from 'app/options/CommonOptions'\nimport UnfinishedText, {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport {Games}                                  from 'core/game/Games'\nimport SMM1And3DSOnlySoundEffectSoundsComponent from 'core/soundEffect/SMM1And3DSOnlySoundEffectSounds.component'\nimport SMM2OnlySoundEffectSoundsComponent       from 'core/soundEffect/SMM2OnlySoundEffectSounds.component'\nimport SoundEffectComponent                     from 'core/soundEffect/SoundEffect.component'\nimport SoundEffectSoundsComponent               from 'core/soundEffect/SoundEffectSounds.component'\nimport {SoundEffectCategories}                  from 'core/soundEffectCategory/SoundEffectCategories'\n\nexport abstract class SoundEffectAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<SoundEffects> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SMM1_AND_SMM3DS_ICON = new class GameStyleAppOption_SMM1AndSMM3DSIcon extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return SoundEffectAppOption.renderSMM1And3DSImage(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.smm1And3dsGameHeader\n        }\n\n    }('smm1AndSmm3ds-icon',)\n    public static readonly SMM2_ICON =            new class GameStyleAppOption_SMM2Icon extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return SoundEffectAppOption.renderSMM2Image(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.smm2GameHeader\n        }\n\n    }('smm2-icon',)\n    public static readonly NAME =                 new class GameStyleAppOption_Name extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n    public static readonly CATEGORY =             new class GameStyleAppOption_Category extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            const {reference,} = enumeration\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => SoundEffectCategories.CompanionEnum.get.getValueByName(reference.categoryEnglish,).imageFile,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }('category',)\n    public static readonly PLAYER_BEHAVIOUR =     new class GameStyleAppOption_PlayerBehaviour extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return enumeration.reference.playerSoundEffectTrigger.createNewComponent(enumeration.englishName,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'player behaviour', element: unfinishedText('Player behaviour'),}//TODO add Player behaviour\n        }\n\n    }('playerBehaviour',)\n    public static readonly SOUNDS =               new class GameStyleAppOption_Sounds extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return <SoundEffectSoundsComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'sounds', element: <UnfinishedText>Sounds</UnfinishedText>,}//TODO add sounds\n        }\n\n    }('sounds',)\n    public static readonly SOUNDS_IN_SMM1_AND_3DS_ONLY = new class GameStyleAppOption_SoundsInSMM1And3DSOnly extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return <SMM1And3DSOnlySoundEffectSoundsComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'sounds', element: <UnfinishedText>Sounds</UnfinishedText>,}//TODO add sounds\n        }\n\n    }('sounds',)\n    public static readonly SOUNDS_IN_SMM2_ONLY = new class GameStyleAppOption_SoundsInSMM2Only extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return <SMM2OnlySoundEffectSoundsComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'sounds', element: <UnfinishedText>Sounds</UnfinishedText>,}//TODO add sounds\n        }\n\n    }('sounds',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<SoundEffectAppOption, typeof SoundEffectAppOption> = class CompanionEnum_SoundEffectAppOption\n        extends CompanionEnum<SoundEffectAppOption, typeof SoundEffectAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundEffectAppOption\n\n        private constructor() {\n            super(SoundEffectAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundEffectAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    public static renderSMM1And3DSImage(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker1 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_1}/> : null\n    }\n\n    public static renderSMM2Image(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker2 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_2}/> : null\n    }\n\n    protected abstract _createContentOption(enumeration: SoundEffects,): ReactElement\n\n    public renderContent(enumeration: SoundEffects,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/SoundEffectGames.types'\nimport type {ViewDisplays}                       from 'app/withInterpreter/ViewDisplays'\n\nexport class SoundEffectGames\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAMES = new class SoundEffectGames_AllGames extends SoundEffectGames {\n\n        public override getAllRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class SoundEffectGames_SuperMarioMakerOrSuperMarioMakerForNintendo3DS extends SoundEffectGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1Or3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class SoundEffectGames_SuperMarioMaker2 extends SoundEffectGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Or3dsColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<SoundEffectGames, typeof SoundEffectGames> = class CompanionEnum_SoundEffectGames\n        extends CompanionEnum<SoundEffectGames, typeof SoundEffectGames> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundEffectGames\n\n        private constructor() {\n            super(SoundEffectGames,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundEffectGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm1Or3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getAllRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everySoundEffect (${viewDisplay.urlValue} Game=all)`\n    }\n\n    public getSmm1Or3dsRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everySoundEffect (${viewDisplay.urlValue} Game=1)`\n    }\n\n    public getSmm2RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everySoundEffect (${viewDisplay.urlValue} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './SoundEffectApp.scss'\n\nimport type {SoundEffectProperties}   from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {GameStyleCollection}     from 'util/collection/GameStyleCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {SoundEffectAppOption}                       from 'app/options/SoundEffectAppOption'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport Table                                        from 'app/tools/table/Table'\nimport {SoundEffectGames}                           from 'app/property/SoundEffectGames'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport {SoundEffects}                               from 'core/soundEffect/SoundEffects'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame, intersect}                      from 'util/utilitiesMethods'\n\nclass SoundEffectAppInterpreter\n    implements AppInterpreterWithTable<SoundEffects, SoundEffectAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n    readonly #gameStyles\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection, gameStyles: GameStyleCollection,) {\n        this.#games = games\n        this.#gameStyles = gameStyles\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(SoundEffects.CompanionEnum.get.values, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 5,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: SoundEffects,) {\n        return <div>\n            <div className=\"soundEffect-images-container\">\n                {SoundEffectAppOption.renderSMM1And3DSImage(enumerable,)}\n                {SoundEffectAppOption.renderSMM2Image(enumerable,)}\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('sound effect.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): readonly SoundEffectAppOption[] {\n        const games = this.#games\n        const hasSMM1Or3DS = games.hasSMM1Or3DS\n        const hasSMM2 = games.hasSMM2\n\n        const options = [] as SoundEffectAppOption[]\n        if (hasSMM1Or3DS)\n            options.push(SoundEffectAppOption.SMM1_AND_SMM3DS_ICON,)\n        if (hasSMM2)\n            options.push(SoundEffectAppOption.SMM2_ICON,)\n        options.push(\n            SoundEffectAppOption.NAME,\n            SoundEffectAppOption.CATEGORY,\n            SoundEffectAppOption.PLAYER_BEHAVIOUR,\n        )\n        if (games.hasAllGames)\n            options.push(SoundEffectAppOption.SOUNDS,)\n        else {\n            if (hasSMM1Or3DS)\n                options.push(SoundEffectAppOption.SOUNDS_IN_SMM1_AND_3DS_ONLY,)\n            if (hasSMM2)\n                options.push(SoundEffectAppOption.SOUNDS_IN_SMM2_ONLY,)\n        }\n        return options\n    }\n\n\n    public getAdditionalClass(option: SoundEffectAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: SoundEffects, option: SoundEffectAppOption,) {\n        //TODO add content based on the game style parameter\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: SoundEffectAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everySoundEffect (list)',],\n    [ViewDisplays.CARD_LIST, 'everySoundEffect (card)',],\n    [ViewDisplays.TABLE, 'everySoundEffect (table)',],\n] as const satisfies readonly ViewAndRouteName[]\n\n/** @reactComponent */\nexport default function SoundEffectApp({viewDisplay, games, gameStyles,}: SoundEffectProperties,) {\n    const titleContent = gameContentTranslation('sound effect.all',)\n    const appInterpreter = new SoundEffectAppInterpreter(games, gameStyles,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"soundEffect\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<SoundEffectAsideContent viewDisplay={viewDisplay} games={games}/>}>\n            <SimpleList reactKey=\"soundEffect\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"soundEffect\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<SoundEffectAsideContent viewDisplay={viewDisplay} games={games}/>}>\n            <CardList reactKey=\"soundEffect\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"soundEffect\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             asideContent={<SoundEffectAsideContent viewDisplay={viewDisplay} games={games}/>}>\n        <Table id=\"soundEffect-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Aside content --------------------\n\ninterface SoundEffectAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly games: GameCollection\n\n}\n\nconst GamePossibilities = Games.Possibilities.get\nconst allGames = GamePossibilities.ALL_GAMES\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\nfunction SoundEffectAsideContent({viewDisplay, games,}: SoundEffectAsideContentProperties,) {\n    const soundEffectGame = intersect(allGames, games,).length === 3\n        ? SoundEffectGames.ALL_GAMES\n        : games.hasSMM2\n            ? SoundEffectGames.SUPER_MARIO_MAKER_2\n            : SoundEffectGames.SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    return <div id=\"soundEffect-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameLimit\" routeName={soundEffectGame.getAllRouteName(viewDisplay,)} color={soundEffectGame.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"soundEffect-gamesButton-singularGame-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smm1Or3dsGame\" routeName={soundEffectGame.getSmm1Or3dsRouteName(viewDisplay,)} color={soundEffectGame.smm1Or3dsColor}>\n                <GameImage reference={smm1}/>\n                <GameImage reference={smm3ds}/>\n            </LinkButton>\n            <LinkButton partialId=\"smm2Game\" routeName={soundEffectGame.getSmm2RouteName(viewDisplay,)} color={soundEffectGame.smm2Color}>\n                <GameImage reference={smm2}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {SoundEffects}         from 'core/soundEffect/SoundEffects'\nimport type {SoundEffectImageFile} from 'core/soundEffect/file/SoundEffectImageFile'\nimport type {ReactProperties}      from 'util/react/ReactProperties'\n\nimport Image from 'app/tools/images/Image'\n\ninterface SoundEffectImageProperties\n    extends ReactProperties {\n\n    readonly reference: SoundEffects\n\n    /** The file associated or {@link SoundEffects.SMM2ImageFile} by default */\n    readonly file?: SoundEffectImageFile\n\n}\n\nexport default function SoundEffectImage({reference, file,}: SoundEffectImageProperties,) {\n    return <Image file={file ?? reference.SMM2ImageFile} className={`soundEffect-image ${reference.englishNameInHtml}-image`}/>\n}\n"],"names":["SMM1And3DSSoundEffectSoundsComponent","_ref","reference","englishName","_jsx","className","children","sounds_standaloneSmm1","map","it","SimpleSoundComponent","file","title","concat","key","SMM1And3DSOnlySoundEffectSoundsComponent","length","SMM2SoundEffectSoundsComponent","sounds_smm2","SMM2OnlySoundEffectSoundsComponent","SoundEffectComponent","game","name","Games","SUPER_MARIO_MAKER_1","imageFile1","imageFile2","SMM1ImageFiles","SoundEffectImage","themeEnglishNameInHtml","englishNameInHtml","identifier","english","id","StringContainer","getInHtml","acronym","Image","partialId","images","SoundEffectSoundsComponent","isSMM1Empty","sounds_exclusiveSmm1","isSMM2Empty","_jsxs","_associatedClass","_classPrivateFieldLooseKey","_additionalClasses","SoundEffectAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","additionalClasses","renderSMM1And3DSImage","enumerable","isInSuperMarioMaker1","renderSMM2Image","isInSuperMarioMaker2","SUPER_MARIO_MAKER_2","renderContent","enumeration","_createContentOption","renderTableHeader","_createTableHeaderOption","_SoundEffectAppOption","SMM1_AND_SMM3DS_ICON","CommonOptions","get","smm1And3dsGameHeader","SMM2_ICON","smm2GameHeader","NAME","getNameContent","nameHeader","CATEGORY","getCategoryContent","SoundEffectCategories","CompanionEnum","getValueByName","categoryEnglish","imageFile","categoryHeader","PLAYER_BEHAVIOUR","playerSoundEffectTrigger","createNewComponent","element","unfinishedText","SOUNDS","UnfinishedText","SOUNDS_IN_SMM1_AND_3DS_ONLY","SOUNDS_IN_SMM2_ONLY","_instance","_CompanionEnum_SoundEffectAppOption","CompanionEnum_SoundEffectAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","SoundEffectGames","allColor","smm1Or3dsColor","smm2Color","getAllRouteName","viewDisplay","urlValue","getSmm1Or3dsRouteName","getSmm2RouteName","_SoundEffectGames","ALL_GAMES","SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","_CompanionEnum_SoundEffectGames","CompanionEnum_SoundEffectGames","_games","_gameStyles","SoundEffectAppInterpreter","games","gameStyles","tableHeadersColor","tableCaption","gameContentTranslation","content","filterGame","SoundEffects","values","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","createCardListContent","tableOptions","hasSMM1Or3DS","hasSMM2","options","push","hasAllGames","getAdditionalClass","option","createTableContent","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","SoundEffectApp","titleContent","appInterpreter","SubMainContainer","reactKey","asideContent","SoundEffectAsideContent","SimpleList","interpreter","CardList","Table","allGames","Possibilities","smm1","smm3ds","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","smm2","_ref2","soundEffectGame","intersect","LinkButton","routeName","color","contentTranslation","GameImage","type","disabled","Link","to","routeFromName","SMM2ImageFile"],"sourceRoot":""}