{"version":3,"file":"static/js/811.c4607c10.chunk.js","mappings":"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","sources":["app/SoundEffectCategoryApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './SoundEffectCategoryApp.scss'\n\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport Image                    from 'app/tools/images/Image'\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {SoundEffectCategories}  from 'core/soundEffectCategory/SoundEffectCategories'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class SoundEffectCategoryApp\n    extends AbstractCardListApp<SoundEffectCategories, AppInterpreterWithCardList<SoundEffectCategories>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'soundEffectCategory'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everySoundEffectCategory (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everySoundEffectCategory (card)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('sound effect category.all')\n    }\n\n    protected override _createAppOptionInterpreter() {\n        return new class SoundEffectCategoryAppInterpreter implements AppInterpreterWithCardList<SoundEffectCategories> {\n\n            public get content() {\n                return SoundEffectCategories.CompanionEnum.get.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 1,\n                    small: 2,\n                    medium: 3,\n                    large: 5,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent(enumerable: SoundEffectCategories,) {\n                return <Image file={enumerable.imageFile}/>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["SoundEffectCategoryApp","AbstractCardListApp","_createKey","_createSimpleListRouteName","_createCardListRouteName","_createTitleContent","gameContentTranslation","_createAppOptionInterpreter","content","SoundEffectCategories","CompanionEnum","get","values","toArray","createListDimension","default","small","medium","large","createCardListDimension","this","createCardListContent","enumerable","_jsx","Image","file","imageFile","_routeName","_classPrivateFieldLooseKey","AbstractSimpleListApp","constructor","arguments","Object","defineProperty","writable","value","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createUniqueNameOnCardList","englishName","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","lg","extraLarge","xl","extraExtraLarge","xxl","dimensions","concat","size","length","contentToDisplay","Array","index","uniqueEnglishName","id","englishNameInHtml","className","children","_jsxs","NameComponent","name","reference","nameContainer","popoverOrientation","DisplayButtonGroup","_ref","reactKey","views","currentView","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","props","viewDisplay","__possibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","createList","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}