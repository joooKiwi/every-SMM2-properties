{"version":3,"file":"static/js/211.8fd0f806.chunk.js","mappings":"uPA2Be,SAASA,EAAT,GAA4F,IAAnEC,EAAkE,EAAlEA,GAAIC,EAA8D,EAA9DA,OAAQC,EAAsD,EAAtDA,2BAChD,GAAID,aAAkBE,EAAAA,EAClB,OAAOC,EAAsBJ,EAAIC,EAAQC,GAE7C,IAAMG,GAAiB,OAAIJ,GAAQK,QAAO,qCAA4BC,KAAI,qCAC1E,OAAiC,IAA1BF,EAAeG,QAChB,yBACA,8BAAGH,EAAeE,KAAI,SAACE,EAAOC,GAAR,OACpB,UAAC,EAAAC,SAAD,WAA8DP,EAAsBJ,EAAIS,EAAOP,GAA8BU,EAAmBP,EAAgBK,KAAhK,UAAkBD,EAAMI,YAAxB,aAAwCH,EAAQ,EAAhD,mBAAuDV,GADnC,KAG/B,CAED,SAASY,EAAmBP,EAAyCK,GACjE,OAAOA,IAAUL,EAAeG,OAAS,GAAI,yBAAQ,gCAAGM,EAAAA,EAAAA,gBAAAA,OAAuC,oBAClG,CAED,SAASV,EAAsBJ,EAAQe,EAA2Bb,GAC9D,GAAIA,EAA4B,CAC5B,IAAMc,EAAUD,EAAYC,QAC5B,OAAe,MAAXA,EACOC,EAA0BjB,EAAIe,IAClC,SAAC,UAAD,CAAoEf,GAAE,8BAAyBA,GAAMkB,QAASF,GAA9G,UAAuBD,EAAYF,YAAnC,6BAA8Db,GACxE,CACD,OAAOiB,EAA0BjB,EAAIe,EACxC,CAED,SAASE,EAA0BjB,EAAQe,GACvC,OAAO,SAAC,UAAD,CAAiEf,GAAE,2BAAsBA,GAAMmB,KAAMJ,EAAYK,WAAjH,UAAuBL,EAAYF,YAAnC,0BAA2Db,GACrE,C","sources":["core/entityLimit/Limit.component.tsx"],"sourcesContent":["import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {EntityLimits}     from 'core/entityLimit/EntityLimits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\n\ntype Id = `${| 'editor' | 'whilePlaying'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    id: Id\n\n    limits: | EntityLimits | ReadonlyMap<EntityLimits, boolean>\n\n    displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof EntityLimits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly EntityLimits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.currentLanguage.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, entityLimit: EntityLimits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = entityLimit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, entityLimit,)\n        return <TextComponent key={`${entityLimit.englishName} (acronym) → ${id}`} id={`entityLimit-acronym-${id}`} content={acronym}/>\n    }\n    return createSingleNameComponent(id, entityLimit,)\n}\n\nfunction createSingleNameComponent(id: Id, entityLimit: EntityLimits,) {\n    return <NameComponent key={`${entityLimit.englishName} (name) → ${id}`} id={`entityLimit-name-${id}`} name={entityLimit.reference}/>\n}"],"names":["LimitComponent","id","limits","displayAcronymIfApplicable","EntityLimits","createSingleComponent","selectedLimits","filter","map","length","limit","index","Fragment","createReturnOfLine","englishName","ProjectLanguages","entityLimit","acronym","createSingleNameComponent","content","name","reference"],"sourceRoot":""}