{"version":3,"file":"static/js/396.d649d133.chunk.js","mappings":"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","sources":["app/options/GameStyleAppOption.tsx","app/property/GameStyleGames.ts","app/GameStyleApp.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx","core/nightEffect/NightEffect.component.tsx","core/time/TimeImage.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/GameStyleAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {GameStyles}          from 'core/gameStyle/GameStyles'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport GameStyleImage           from 'core/gameStyle/GameStyleImage'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport ThemeImage               from 'core/theme/ThemeImage'\nimport {Themes}                 from 'core/theme/Themes'\nimport TimeImage                from 'core/time/TimeImage'\nimport {Times}                  from 'core/time/Times'\nimport {ProjectLanguages}       from 'lang/ProjectLanguages'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport abstract class GameStyleAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<GameStyles> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =             new class GameStyleAppOption_Images extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return <GameStyleImage reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly NAME =              new class GameStyleAppOption_Name extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_DESERT_WIND = new class GameStyleAppOption_NightDesertWind extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,) {\n            return <NightEffectComponent gameStyle={reference}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'nightDesertWind',\n                element: <div className=\"night-desert-wind-effect-container\">\n                    <ThemeImage reference={Themes.DESERT}/>\n                    <TimeImage reference={Times.NIGHT}/>\n                </div>,\n                tooltip: gameContentTranslation('Wind effect (night desert)', {\n                    night: unfinishedText('night'),//TODO add night reference\n                    desert: ProjectLanguages.current.get(Themes.DESERT.reference)!.toLowerCase(),\n                },),\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<GameStyleAppOption, typeof GameStyleAppOption> = class CompanionEnum_GameStyleAppOption\n        extends CompanionEnum<GameStyleAppOption, typeof GameStyleAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_GameStyleAppOption\n\n        private constructor() {\n            super(GameStyleAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_GameStyleAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: GameStyles,): ReactElement\n\n    public renderContent(enumeration: GameStyles,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/GameStyleGames.types'\nimport type {ViewDisplays}                       from 'app/withInterpreter/ViewDisplays'\n\nexport class GameStyleGames\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class GameStyleGames_SuperMarioMakerOrSuperMarioMakerForNintendo3DS extends GameStyleGames {\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1Or3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class GameStyleGames_SuperMarioMaker2 extends GameStyleGames {\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<GameStyleGames, typeof GameStyleGames> = class CompanionEnum_GameStyleGames\n        extends CompanionEnum<GameStyleGames, typeof GameStyleGames> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_GameStyleGames\n\n        private constructor() {\n            super(GameStyleGames,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_GameStyleGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get smm1Or3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getSmm1Or3dsRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyGameStyle (${viewDisplay.urlValue} Game=1)`\n    }\n\n    public getSmm2RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyGameStyle (${viewDisplay.urlValue} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './GameStyleApp.scss'\n\nimport type {GameStyleProperties}     from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\nimport type {PossibleRouteName}       from 'route/EveryRoutes.types'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {GameStyleAppOption}                         from 'app/options/GameStyleAppOption'\nimport {GameStyleGames}                             from 'app/property/GameStyleGames'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport Table                                        from 'app/tools/table/Table'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport GameStyleImage                               from 'core/gameStyle/GameStyleImage'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame}                                 from 'util/utilitiesMethods'\n\nclass GameStyleAppInterpreter\n    implements AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection,) {\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(GameStyles.CompanionEnum.get.values, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 3,\n            extraLarge: 5,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: GameStyles,) {\n        return <div className=\"card-body\" id={`gameStyle-${enumerable.englishNameInHtml}`}>\n            <GameStyleImage reference={enumerable}/>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('game style.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): readonly GameStyleAppOption[] {\n        return [\n            GameStyleAppOption.ICON,\n            GameStyleAppOption.NAME,\n            GameStyleAppOption.NIGHT_DESERT_WIND,\n        ]\n    }\n\n    public createTableContent(content: GameStyles, option: GameStyleAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: GameStyleAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyGameStyle (list)',],\n    [ViewDisplays.CARD_LIST, 'everyGameStyle (card)',],\n    [ViewDisplays.TABLE, 'everyGameStyle (table)',],\n] as const satisfies readonly ViewAndRouteName[]\n\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nexport default function GameStyleApp({viewDisplay, games,}: GameStyleProperties,) {\n    const titleContent = gameContentTranslation('game style.all',)\n    const appInterpreter = new GameStyleAppInterpreter(games,)\n\n    const game = games.hasSMM2\n        ? GameStyleGames.SUPER_MARIO_MAKER_2\n        : GameStyleGames.SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<GameStyleDescription viewDisplay={viewDisplay} game={game}/>}\n                                 asideContent={<GameStyleAsideContent viewDisplay={viewDisplay} game={game}/>}>\n            <SimpleList reactKey=\"gameStyle\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<GameStyleDescription viewDisplay={viewDisplay} game={game}/>}\n                                 asideContent={<GameStyleAsideContent viewDisplay={viewDisplay} game={game}/>}>\n            <CardList reactKey=\"gameStyle\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             description={<GameStyleDescription viewDisplay={viewDisplay} game={game}/>}\n                             asideContent={<GameStyleAsideContent viewDisplay={viewDisplay} game={game}/>}>\n        <Table id=\"gameStyle-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Description content --------------------\n\ninterface GameStyleDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: GameStyleGames\n\n}\n\n/** @reactComponent */\nfunction GameStyleDescription({viewDisplay, game,}: GameStyleDescriptionProperties,) {\n    const entity = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName.toLowerCase(),)\n    const entities = OtherWordInTheGames.ENTITY.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.pluralEnglishName.toLowerCase(),)\n\n    const smm1OrSmm3dsLink = game.getSmm1Or3dsRouteName(viewDisplay,)\n    const smm2Link = game.getSmm2RouteName(viewDisplay,)\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyGameStyle (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyGameStyle (card)' satisfies PossibleRouteName\n    const tableLink = viewDisplay === ViewDisplays.TABLE ? null : 'everyGameStyle (table)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation('game style.description.intro page', {\n                gameStyles: <em key=\"gameStyles\">{gameContentTranslation('game style.plural',).toLowerCase()}</em>,\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1OrSmm3dsLink}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm1OrSmm3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('game style.description.intro sm3dw', {\n                sm3dwLink: <LinkText key=\"sm3dwLink\" partialId=\"sm3dwLink\" routeName=\"everyEntity (card GameStyle=3DW)\" color=\"primary\"><GameStyleImage reference={GameStyles.SUPER_MARIO_3D_WORLD}/></LinkText>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-sm3dw-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('game style.description.intro entity', {\n                entityLink: <LinkText key=\"entityLink\"  partialId=\"entityLink\" routeName=\"everyEntity\" color=\"primary\">{entity}</LinkText>,\n                entitiesLink: <LinkText key=\"entitiesLink\" partialId=\"entityLink\" routeName=\"everyEntity\" color=\"primary\">{entities}</LinkText>,\n                smbLink: <LinkText key=\"smbLink\" partialId=\"smbLink\" routeName=\"everyEntity (card GameStyle=1)\" color=\"primary\"><GameStyleImage reference={GameStyles.SUPER_MARIO_BROS}/></LinkText>,\n                smb3Link: <LinkText key=\"smb3Link\" partialId=\"smb3Link\" routeName=\"everyEntity (card GameStyle=3)\" color=\"primary\"><GameStyleImage reference={GameStyles.SUPER_MARIO_BROS_3}/></LinkText>,\n                smwLink: <LinkText key=\"smwLink\" partialId=\"smwLink\" routeName=\"everyEntity (card GameStyle=W)\" color=\"primary\"><GameStyleImage reference={GameStyles.SUPER_MARIO_WORLD}/></LinkText>,\n                nsmbuLink: <LinkText key=\"nsmbuLink\" partialId=\"nsmbuLink\" routeName=\"everyEntity (card GameStyle=U)\" color=\"primary\"><GameStyleImage reference={GameStyles.NEW_SUPER_MARIO_BROS_U}/></LinkText>,\n                sm3dwLink: <LinkText key=\"sm3dwLink\" partialId=\"sm3dwLink\" routeName=\"everyEntity (card GameStyle=3DW)\" color=\"primary\"><GameStyleImage reference={GameStyles.SUPER_MARIO_3D_WORLD}/></LinkText>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('game style.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n            tableLink: <LinkText key=\"tableLink\" partialId=\"tableLink\" routeName={tableLink} color=\"primary\">{contentTranslation('view type.table.singular',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface GameStyleAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: GameStyleGames\n\n}\n\n/** @reactComponent */\nfunction GameStyleAsideContent({viewDisplay, game,}: GameStyleAsideContentProperties,) {\n    return <div id=\"gameStyle-gamesButton-singularGame-container\" className=\"gameAsideContent-container btn-group btn-group-sm\">\n        <LinkButton partialId=\"smm1Or3dsGame\" routeName={game.getSmm1Or3dsRouteName(viewDisplay,)} color={game.smm1Or3dsColor}>\n            <GameImage reference={smm1}/>\n            <GameImage reference={smm3ds}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm2Game\" routeName={game.getSmm2RouteName(viewDisplay,)} color={game.smm2Color}>\n            <GameImage reference={smm2}/>\n        </LinkButton>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or a simple underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    readonly gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    readonly theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`,)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n","import type {Times}           from 'core/time/Times'\nimport type {ReactProperties} from 'util/react/ReactProperties'\nimport Image                  from 'app/tools/images/Image'\n\ninterface TimeImageProperties\n    extends ReactProperties {\n\n    readonly reference: Times\n\n}\n\nexport default function TimeImage({reference,}: TimeImageProperties,) {\n    return <Image file={reference.imageFile} className={`time-image ${reference.englishNameInHtml}-image`}/>\n}\n"],"names":["GameStyleAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","_GameStyleAppOption","ICON","_jsx","GameStyleImage","reference","key","element","unfinishedText","NAME","CommonOptions","get","getNameContent","nameHeader","NIGHT_DESERT_WIND","_ref","NightEffectComponent","gameStyle","_jsxs","className","children","ThemeImage","Themes","DESERT","TimeImage","Times","NIGHT","tooltip","gameContentTranslation","night","desert","ProjectLanguages","current","toLowerCase","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_GameStyleAppOption","CompanionEnum_GameStyleAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","value","GameStyleGames","smm1Or3dsColor","smm2Color","getSmm1Or3dsRouteName","viewDisplay","concat","urlValue","getSmm2RouteName","_GameStyleGames","SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_GameStyleGames","CompanionEnum_GameStyleGames","_games","GameStyleAppInterpreter","games","tableHeadersColor","tableCaption","content","filterGame","GameStyles","values","createListDimension","default","small","medium","extraLarge","createCardListDimension","createCardListContent","enumerable","id","englishNameInHtml","tableOptions","createTableContent","option","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","smm1","Games","SUPER_MARIO_MAKER_1","smm3ds","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","smm2","GameStyleApp","titleContent","appInterpreter","game","hasSMM2","SubMainContainer","reactKey","description","GameStyleDescription","asideContent","GameStyleAsideContent","SimpleList","interpreter","CardList","Table","_ref2","_OtherWordInTheGames$","_OtherWordInTheGames$2","entity","OtherWordInTheGames","ENTITY","singularLowerCaseNameOnReferenceOrNull","singularEnglishName","entities","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","smm1OrSmm3dsLink","smm2Link","listLink","cardLink","tableLink","_Fragment","gameStyles","smm1Link","TextOrLink","routeName","GameImage","smm3dsLink","sm3dwLink","LinkText","partialId","color","SUPER_MARIO_3D_WORLD","entityLink","entitiesLink","smbLink","SUPER_MARIO_BROS","smb3Link","SUPER_MARIO_BROS_3","smwLink","SUPER_MARIO_WORLD","nsmbuLink","NEW_SUPER_MARIO_BROS_U","contentTranslation","cardsLink","_ref3","LinkButton","type","disabled","Link","to","routeFromName","properties","NightEffectByGameStyle","NightEffectByTheme","nightDesertWindTranslationKey","translationKey","_effect$createNewComp","theme","effect","createNewComponent","Image","file","imageFile"],"sourceRoot":""}