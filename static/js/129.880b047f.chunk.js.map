{"version":3,"file":"static/js/129.880b047f.chunk.js","mappings":"4MASe,MAAMA,UACTC,EAAAA,EAIEC,aACN,MAAO,YACX,CAGmBC,6BACf,MAAO,wBACX,CAEmBC,2BACf,MAAO,wBACX,CAGUC,sBACN,OAAOC,EAAAA,EAAAA,IAAuB,iBAClC,CAEUC,8BACN,OAAO,IAAI,MAEIC,cACP,OAAOC,EAAAA,EAAYC,cAAcC,IAAIC,OAAOC,SAChD,CAIOC,sBACH,MAAO,CACHC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,WAAY,EAEpB,CAKOC,0BACH,OAAOC,KAAKP,qBAChB,CAEOQ,sBAAqBC,GAAiC,IAAhC,OAACC,EAAM,KAAEC,GAAmBF,EACrD,OAAOG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,SAAEJ,EAAOK,KAAI,CAACC,EAAOC,KAC1DL,EAAAA,EAAAA,KAACM,EAAAA,EAAoB,CAACC,KAAMH,EAAOI,MAAK,GAAAC,OAAKV,EAAI,kBAAAU,OAAiBJ,EAAK,UAE/E,EAKR,E,yGC1DoEK,GAAAC,EAAAA,EAAAA,GAAA,aAEjE,MAAepC,UAIVqC,EAAAA,EAA0CC,cAAA,SAAAC,WAElDC,OAAAC,eAAA,KAAAN,EAAA,CAAAO,UAAA,EAAAC,WAAA,IAOmBC,6BACf,MAAO,IACAC,MAAMD,6BACT,CAACE,EAAAA,EAAaC,UAAW3B,KAAK4B,iBAEtC,CAEYA,sBAAsC,IAADC,EAAAC,EAC7C,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAO/B,KAAIe,IAAAA,UAAA,IAAAe,EAAAA,EAAAD,EAAAd,GAAgBf,KAAKjB,0BACpC,CAIUiD,4BAA4BC,GAClC,OAAOA,EAAWC,WACtB,CASOC,iBACH,MAAMC,EAAoBpC,KAAKqC,sBACzBC,EAAMtC,KAAKuC,MACV7C,QAAS8C,EAAI7C,MAAO8C,EAAI7C,OAAQ8C,EAAI7C,MAAO8C,EAAI7C,WAAY8C,EAAIC,gBAAiBC,GAAQV,EAAkBrC,0BAC3GgD,EAAU,YAAAjC,OAAe0B,GAAE1B,OAAS,MAAN2B,EAAa,GAAE,gBAAA3B,OAAmB2B,IAAI3B,OAAS,MAAN4B,EAAa,GAAE,gBAAA5B,OAAmB4B,IAAI5B,OAAS,MAAN6B,EAAa,GAAE,gBAAA7B,OAAmB6B,IAAI7B,OAAS,MAAN8B,EAAa,GAAE,gBAAA9B,OAAmB8B,IAAI9B,OAAU,MAAPgC,EAAc,GAAE,iBAAAhC,OAAoBgC,IACtO3D,EAAUiD,EAAkBjD,QAE5B6D,EAAO7D,EAAQ8D,OACfC,EAAmB,IAAIC,MAAoBH,GACjD,IAAItC,EAAQsC,EACZ,KAAOtC,KAAU,GAAG,CAChB,MAAMuB,EAAa9C,EAAQuB,GACrB0C,EAAoBpD,KAAKgC,4BAA4BC,GAG3DiB,EAAiBxC,IACbL,EAAAA,EAAAA,KAAA,OAA6DgD,GAAE,GAAAvC,OAAKwB,EAAG,KAAAxB,OAAImB,EAAWqB,kBAAiB,cAAchD,UAAS,GAAAQ,OAAKwB,EAAG,cAAa/B,UAC/IgD,EAAAA,EAAAA,MAAA,OAAiEjD,UAAU,+DAA8DC,SAAA,EACrIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAA+CH,GAAG,OAAOjD,KAAM6B,EAAWwB,UAAUC,cAAeC,mBAAmB,QAAM,GAAA7C,OAAnHsC,EAAiB,uBACxC/C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,SAAE6B,EAAkBnC,sBAAsBgC,OAAkB,GAAAnB,OAFlGsC,EAAiB,qCAGxB,GAAAtC,OAJGsC,EAAiB,+BAMtC,CACA,OAAO/C,EAAAA,EAAAA,KAAA,OAAKC,UAAS,OAAAQ,OAASiC,EAAU,wCAAuCxC,SAAE2C,GACrF,E,yIC5DW,SAASU,EAAkB1D,GAAuE,IAArE2D,SAAUvB,EAAG,MAAEwB,EAAK,YAAEC,GAA2C7D,EACzG,OAAOG,EAAAA,EAAAA,KAAA,OAA6CgD,GAAG,4BAA4B/C,UAAU,YAAWC,SAAEuD,EAAMtD,KAAIwD,IAAA,IAAEC,EAAM7D,GAAM4D,EAAA,OAC9H3D,EAAAA,EAAAA,KAAC6D,EAAa,CAAiDL,SAAUvB,EAAK2B,KAAMA,EAAME,UAAW/D,EAAM2D,YAAaA,GAAY,GAAAjD,OAA7GwB,EAAG,6BAAAxB,OAA4BmD,EAAI,KAA4E,KACzI,GAAAnD,OAFmBwB,EAAG,6BAG3B,CAEA,SAAS4B,EAAaE,GAA4E,IAA1EP,SAAUvB,EAAG,KAAE2B,EAAI,YAAEF,EAAW,UAAEI,GAAoCC,EAC1F,MAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,MAC3BC,GAAOC,EAAAA,EAAAA,GAAcN,GAE3B,OAAIG,IAAgBE,GAAQP,IAASF,GAC1B1D,EAAAA,EAAAA,KAAA,UAAsCC,UAAS,sBAAAQ,OAAwBmD,EAAKS,SAAQ,oBAAoBC,KAAK,SAASC,UAAQ,MAAA9D,OAA9GwB,EAAG,MAAAxB,OAAKmD,EAAK7D,KAAI,OACrCC,EAAAA,EAAAA,KAACwE,EAAAA,GAAI,CAA+BC,GAAIN,EAAMlE,UAAS,mBAAAQ,OAAqBmD,EAAKS,SAAQ,oBAAoBK,QAASA,IAAMrD,EAAAA,EAAarC,cAAcC,IAAI0F,QAAUf,GAAK,GAAAnD,OAA5JwB,EAAG,MAAAxB,OAAKmD,EAAK7D,KAAI,KAC1C,CCfuE,IAAA6E,GAAAjE,EAAAA,EAAAA,GAAA,uBAAAuB,GAAAvB,EAAAA,EAAAA,GAAA,OAAAkE,GAAAlE,EAAAA,EAAAA,GAAA,kBAEhE,MAAemE,UAGVC,EAAAA,EAUDlE,YAAYmE,GACf5D,MAAM4D,GATVjE,OAAAC,eAAA,KAAA4D,EAAA,CAAA3D,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAkB,EAAA,CAAAjB,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAA6D,EAAA,CAAA5D,UAAA,EAAAC,WAAA,GAUA,CAKW+D,kBACP,OAAOtF,KAAKqF,MAAMC,WACtB,CAIYC,4BAAsD,IAAD1D,EAAAC,EAC7D,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAO/B,KAAIiF,IAAAA,UAAA,IAAAnD,EAAAA,EAAAD,EAAAoD,GAA0BjF,KAAKwB,4BAC9C,CAUce,WAAgB,IAADiD,EAAAC,EACzB,OAAW,QAAXA,GAAAD,GAAAzD,EAAAA,EAAAA,GAAO/B,KAAIuC,IAAAA,UAAA,IAAAkD,EAAAA,EAAAD,EAAAjD,GAAUvC,KAAKnB,YAC9B,CAQcwD,4BAA8B,IAADqD,EAAAC,EACvC,OAAW,QAAXA,GAAAD,GAAA3D,EAAAA,EAAAA,GAAO/B,KAAIkF,IAAAA,UAAA,IAAAS,EAAAA,EAAAD,EAAAR,GAAqBlF,KAAKd,6BACzC,CAOU0G,sBACN,OAAO,IACX,CAEUC,qBACN,OAAOxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAc,CAACC,UAAQ,EAAAxF,SAAC,eACpC,CAEmByF,eACf,MAAM,YAACV,EAAa/C,KAAMD,GAAQtC,KAElC,OAAOK,EAAAA,EAAAA,KAAA,OAAyCgD,GAAG,oBAAmB9C,UAClEgD,EAAAA,EAAAA,MAAA,OAAKF,GAAE,GAAAvC,OAAKwB,EAAG,cAAchC,UAAS,GAAAQ,OAAKwE,EAAYZ,SAAQ,cAAanE,SAAA,EACxEF,EAAAA,EAAAA,KAAA,MAA2BgD,GAAE,GAAAvC,OAAKwB,EAAG,UAAUhC,UAAU,YAAWC,SAAEP,KAAKhB,uBAAqB,GAAA8B,OAApFwB,EAAG,cACfiB,EAAAA,EAAAA,MAAA,SAAqCF,GAAG,wBAAuB9C,SAAA,EAC3DF,EAAAA,EAAAA,KAACuD,EAAkB,CAACC,SAAUvB,EAAKwB,MAAO9D,KAAKuF,sBAAuBxB,YAAauB,IAClFtF,KAAK4F,wBAAqB,GAAA9E,OAFhBwB,EAAG,qBAIlBjC,EAAAA,EAAAA,KAAA,KAAAE,SAAiCP,KAAK6F,sBAAoB,GAAA/E,OAA/CwB,EAAG,oBACdjC,EAAAA,EAAAA,KAAA,OAA0CC,UAAU,cAAaC,SAAE+E,EAAYW,gBAAgBjG,OAAM,GAAAc,OAAxFwB,EAAG,MAAAxB,OAAKwE,EAAYX,KAAI,UACnC,GAAA7D,OATUwB,EAAG,yBAW3B,E,eClFyEvB,GAAAC,EAAAA,EAAAA,GAAA,aAEtE,MAAeC,UAIVkE,EAAsCjE,cAAA,SAAAC,WAE9CC,OAAAC,eAAA,KAAAN,EAAA,CAAAO,UAAA,EAAAC,WAAA,IAOmBC,6BACf,MAAO,CACH,CAACE,EAAAA,EAAawE,YAAalG,KAAKmG,iBAExC,CAEYA,sBAAsC,IAADtE,EAAAC,EAC7C,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAO/B,KAAIe,IAAAA,UAAA,IAAAe,EAAAA,EAAAD,EAAAd,GAAgBf,KAAKlB,4BACpC,CAIUsH,8BAA8BnE,GACpC,OAAOA,EAAWC,WACtB,CAQOmE,aACH,MAAMjE,EAAoBpC,KAAKqC,sBACzBC,EAAMtC,KAAKuC,MACV7C,QAAS8C,EAAI7C,MAAO8C,EAAI7C,OAAQ8C,EAAI7C,MAAO8C,EAAI7C,WAAY8C,EAAIC,gBAAiBC,GAAQV,EAAkB3C,sBAC3GsD,EAAU,YAAAjC,OAAe0B,GAAE1B,OAAS,MAAN2B,EAAa,GAAE,gBAAA3B,OAAmB2B,IAAI3B,OAAS,MAAN4B,EAAa,GAAE,gBAAA5B,OAAmB4B,IAAI5B,OAAS,MAAN6B,EAAa,GAAE,gBAAA7B,OAAmB6B,IAAI7B,OAAS,MAAN8B,EAAa,GAAE,gBAAA9B,OAAmB8B,IAAI9B,OAAU,MAAPgC,EAAc,GAAE,iBAAAhC,OAAoBgC,IACtO3D,EAAUiD,EAAkBjD,QAE5B6D,EAAO7D,EAAQ8D,OACfC,EAAmB,IAAIC,MAAoBH,GACjD,IAAItC,EAAQsC,EACZ,KAAOtC,KAAU,GAAG,CAChB,MAAMuB,EAAa9C,EAAQuB,GACrB0C,EAAoBpD,KAAKoG,8BAA8BnE,GAG7DiB,EAAiBxC,IACbL,EAAAA,EAAAA,KAAA,OAAwDgD,GAAE,GAAAvC,OAAKwB,EAAG,KAAAxB,OAAImB,EAAWqB,kBAAiB,cAAchD,UAAS,GAAAQ,OAAKwB,EAAG,cAAa/B,UAC1IF,EAAAA,EAAAA,KAAA,QAA8DC,UAAU,iEAAgEC,UACpIF,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAA+CH,GAAG,OAAOjD,KAAM6B,EAAWwB,UAAUC,cAAeC,mBAAmB,QAAM,GAAA7C,OAAnHsC,EAAiB,uBAAoG,GAAAtC,OADlIsC,EAAiB,iCAExB,GAAAtC,OAHEsC,EAAiB,0BAKtC,CACA,OAAO/C,EAAAA,EAAAA,KAAA,OAAKC,UAAS,OAAAQ,OAASiC,EAAU,wCAAuCxC,SAAE2C,GACrF,E,yGCtDW,SAASoD,EAAOpG,GAA8J,IAA9G,SAACK,EAAQ,OAAEgG,EAAQC,GAAIC,EAAQ,UAAEC,GAAyExG,EAKrL,OAJAyG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAWC,EAAAA,EAAyBvH,IAAIwH,IAAIJ,EAAW,IAAIK,EAAAA,EAAgBL,EAAWH,EAAQE,IACpG,MAAO,IAAMI,EAAAA,EAAyBvH,IAAI0H,OAAOJ,GAAWK,SAAS,IAE1D,OAAR1G,QAAQ,IAARA,EAAAA,EAAY,IACvB,C,eCVe,SAAS2G,EAAWhH,GAAmK,IAAnG,SAACK,EAAQ,UAAEmG,KAAcS,GAAsEjH,EAC9L,OAAOG,EAAAA,EAAAA,KAACiG,EAAO,CAACI,UAAWA,KAAeS,EAAe5G,UACrDF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAa,CAAiB/D,GAAIqD,EAAWvH,QAASoB,EAAU,iBAAe,WAA5DmG,IAE5B,C,0BCDAW,GAAArG,EAAAA,EAAAA,GAAA,8BACe,MAAMsG,UACTC,EAAAA,UAURrG,YAAYmE,GACR5D,MAAM4D,GARVjE,OAAAC,eAAA,KAAAgG,EAAA,CAAA/F,UAAA,EAAAC,WAAA,KASIQ,EAAAA,EAAAA,GAAA/B,KAAIqH,GAAAA,GAA+BG,EAAAA,EAAiBxC,QAAQ1F,IAAYU,KAAKI,MAC7EJ,KAAKyH,MAAQ,CACTC,SAASrH,EAAAA,EAAAA,KAAC+G,EAAAA,EAAa,CAAgCjI,SAAO4C,EAAAA,EAAAA,GAAE/B,KAAIqH,GAAAA,IAA6B,GAAAvG,OAAjEd,KAAKqD,GAAE,iBAE/C,CAKWA,SACP,OAAOrD,KAAKqF,MAAMhC,EACtB,CAEWsE,aACP,OAAO3H,KAAKqF,MAAMsC,MACtB,CAEWC,4BACP,OAAO5H,KAAKqF,MAAMuC,qBACtB,CAEWT,sBACP,OAAOnH,KAAKqF,MAAM8B,eACtB,CAEW/G,WACP,OAAOJ,KAAKmH,gBAAgB/G,IAChC,CAEWuD,yBACP,OAAO3D,KAAKmH,gBAAgBxD,kBAChC,CAIgBkE,oBACZ,MAAMxE,EAAKrD,KAAKqD,GACVuE,EAAwB5H,KAAK4H,sBAEnC5H,KAAK8H,SAAS,CACVJ,SAASrH,EAAAA,EAAAA,KAAC6G,EAAW,CAA8BR,UAAWrD,EAAIkD,OAAQwB,EAAa/H,KAAK2H,OAAQ3H,KAAK2D,oBAAoBqE,EAAAA,EAAAA,IAAmB,0BACtHhI,KAAKmH,gBAAiBX,GAAK,CAACyB,KAAMA,IAAML,GAAsB,GAAOM,KAAMA,IAAMN,GAAsB,IAAUrH,UAAAwB,EAAAA,EAAAA,GACtI/B,KAAIqH,GAAAA,IAAA,GAAAvG,OAFqBuC,EAAE,qBAKxC,CAEgB8E,SACZ,OAAOnI,KAAKyH,MAAMC,OACtB,EAWJ,SAASK,EAAarB,EAAmB/C,EAAkD9C,GACvF,MAAM0F,EAAmC,CACrC1F,MAAOA,EACP1B,QAASiJ,SAASC,eAAe3B,GACjC4B,MAAM,EACNC,QAAS,eAKb,OAH0B,MAAtB5E,IACA4C,EAAOiC,UAAY7E,GAEhB4C,CACX,CC1Fe,SAASkC,EAAiBvI,GAAgE,IAA/D,GAACmD,EAAE,OAAEsE,EAAM,KAAEvH,EAAI,mBAAEsI,GAAwCxI,EACjG,MAAMyI,EAAqBvI,EAAKwI,kBAAkBC,QAAOC,IAAOA,EAAGC,YAE7D5J,EAAU,GACV6J,EAAU5I,EAAK6I,YACrB,IAAK,MAAOC,EAAU3H,KAAWyH,EACxBL,EAAmBQ,SAASD,IAEjC/J,EAAQiK,MAAK7F,EAAAA,EAAAA,MAAA,OAAwEjD,UAAU,2BAA0BC,SAAA,EACrHF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAa,CACVjI,QAAO,GAAA2B,QAAKuI,EAAAA,EAAAA,IAAoBH,EAAShH,cAAYpB,OAAG0G,EAAAA,EAAiBxC,QAAQsE,OAAKxI,OAAG0G,EAAAA,EAAiBxC,QAAQuE,YAAUzI,OAAG0G,EAAAA,EAAiBxC,QAAQsE,OACxJhJ,UAAU,6EACdD,EAAAA,EAAAA,KAAC+G,EAAAA,EAAa,CAACjI,QAASoC,EAAOjB,UAAU,wCAAqC,GAAAQ,OAJxDuC,EAAE,kCAAAvC,OAAiCoI,EAAShH,eAO1E,OAAO7B,EAAAA,EAAAA,KAAA,OAAoCgD,GAAIsE,EAAQrH,UAAU,gBAAgBkJ,QAASd,EAAmBnI,SAAEpB,GAAO,GAAA2B,OAAlGuC,EAAE,qBAC1B,C,eCPe,SAASG,EAAatD,GAA6C,IAA5C,GAACmD,KAAO8D,GAAgCjH,EAC1E,MAAOwI,EAAoBd,IAA0B6B,EAAAA,EAAAA,WAAS,IACxD,KAACrJ,GAAS+G,EAEVjF,EAAc9B,EAAKsJ,QACnBhD,EAAS,GAAA5F,OAAMuC,EAAE,KAAAvC,OAAI6I,EAAAA,EAAgBC,UAAU1H,IAC/CyF,EAAM,GAAA7G,OAAM4F,EAAS,SAE3B,OAAOnD,EAAAA,EAAAA,MAAA,OAAgDF,GAAE,GAAAvC,OAAK4F,EAAS,cAAcpG,UAAU,iBAAgBC,SAAA,EAC3GF,EAAAA,EAAAA,KAACiH,EAAoB,CAA0CjE,GAAIqD,EAAWiB,OAAQA,EAAQC,sBAAuBA,EAAuBT,gBAAiBA,GAAgB,GAAArG,OAA/IoB,EAAW,gBAAApB,OAAeuC,EAAE,OAC1DhD,EAAAA,EAAAA,KAACoI,EAAiB,CAAuCrI,KAAMA,EAAMiD,GAAIqD,EAAWiB,OAAQA,EAAQe,mBAAoBA,GAAmB,GAAA5H,OAAhHoB,EAAW,aAAApB,OAAYuC,EAAE,QAAyF,GAAAvC,OAF7HoB,EAAW,kBAAApB,OAAiBuC,EAAE,KAItD,C","sources":["app/InstrumentApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {Instruments}            from 'core/instrument/Instruments'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport SimpleSoundComponent     from 'util/file/sound/component/SimpleSound.component'\n\nexport default class InstrumentApp\n    extends AbstractCardListApp<Instruments, AppInterpreterWithCardList<Instruments>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected _createKey() {\n        return 'instrument'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyInstrument (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyInstrument (card)'\n    }\n\n\n    protected _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('instrument.all')\n    }\n\n    protected _createAppOptionInterpreter() {\n        return new class InstrumentAppInterpreter implements AppInterpreterWithCardList<Instruments> {\n\n            public get content() {\n                return Instruments.CompanionEnum.get.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 1,\n                    small: 3,\n                    medium: 4,\n                    large: 5,\n                    extraLarge: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent({sounds, name,}: Instruments,) {\n                return <div className=\"instrument-sounds\">{sounds.map((sound, index,) =>\n                    <SimpleSoundComponent file={sound} title={`${name} (instrument #${index})`}/>\n                )}</div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["InstrumentApp","AbstractCardListApp","_createKey","_createSimpleListRouteName","_createCardListRouteName","_createTitleContent","gameContentTranslation","_createAppOptionInterpreter","content","Instruments","CompanionEnum","get","values","toArray","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","this","createCardListContent","_ref","sounds","name","_jsx","className","children","map","sound","index","SimpleSoundComponent","file","title","concat","_routeName","_classPrivateFieldLooseKey","AbstractSimpleListApp","constructor","arguments","Object","defineProperty","writable","value","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createUniqueNameOnCardList","enumerable","englishName","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","lg","xl","extraExtraLarge","xxl","dimensions","size","length","contentToDisplay","Array","uniqueEnglishName","id","englishNameInHtml","_jsxs","NameComponent","reference","nameContainer","popoverOrientation","DisplayButtonGroup","reactKey","views","currentView","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","props","viewDisplay","__possibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","createList","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}