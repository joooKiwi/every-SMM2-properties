{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/component/EmptyAppOption.ts","app/options/EntityAppOption.tsx","app/EveryEntitiesApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","EmptyAppOption","renderContent","EMPTY_ARRAY","renderTableHeader","CourseThemeComponent","EditorVoiceSoundComponent","InstrumentPropertyComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","defaultValue","content","_createContentOption","AppOptionWithContentComponent","__appOptionWithContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","typeDisplayed","ViewDisplays","TABLE","GameStyles","values","SUPER_MARIO_BROS","Times","Themes","courseThemes","value","Enum","getValueOn","getValuesOn","AbstractAppOption","CALLBACK_TO_GET_ENUMERATION","image","editorImage","_gameStyles","map","gameStyle","Set","themes","theme","times","time","index","flat","src","acronym","clearConditionImage","IMAGES","EmptyEditorImage","ContentTranslationComponent","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","getNameContent","editorVoiceSound","nameHeader","GAME","entity","displayAllAsText","WHEN_ALL_SELECTED_GAME","gameHeader","GAME_STYLE","WHEN_ALL_SELECTED_GAME_STYLE","GameContentTranslationComponent","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","getCategoryContent","CATEGORY_AS_TEXT","EntityCategories","getValue","categoryHeader","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","limits","displayAcronymIfApplicable","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","EntityLimitTypes","EDITOR","englishCommonText","tooltip","namespace","WHILE_PLAYING","SimpleSound","EveryEntitiesApp","props","state","createDefaultState","Entities","htmlName","editorVoice1","fileName","editorVoice2","europeanFileName","category","categoryEnglish","title","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/9.b0a49640.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame';\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}                        from '../../core/ClassWithReference';\nimport type {Enum}                                      from '../../util/enum/Enum';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {NameTrait}                                 from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory';\nimport type {ReactElement}                              from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader';\nimport type {Themes}                                    from '../../core/theme/Themes';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {BASE_PATH}                     from '../../variables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n    #gameHeader?: SingleHeaderContent;\n    #gameHeaderWithAllGames?: SingleHeaderContent;\n    #gameHeaderWithMainGames?: SingleHeaderContent;\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        };\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference;\n        const isInSMM1 = reference.isInSuperMarioMaker1;\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS;\n        const isInSMM2 = reference.isInSuperMarioMaker2;\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference;\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>;\n","import type {AppOptionWithTable}   from './AppOptionWithTable';\nimport type {AppOptionWithContent} from './AppOptionWithContent';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY;\n    public readonly renderTableHeader = null;\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {Entities}                                                                                                                                                              from '../../core/entity/Entities';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityAppOption.types';\nimport type {EntityAppStates}                                                                                                                                                       from '../AppStates.types';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AbstractAppOption}             from './AbstractAppOption';\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {EntityCategories}              from '../../core/entityCategory/EntityCategories';\nimport {EntityLimitTypes}              from '../../core/entityLimit/EntityLimitTypes';\nimport {EmptyAppOption}                from './component/EmptyAppOption';\nimport {EmptyEditorImage}              from '../../core/entity/images/editor/EmptyEditorImage';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\nimport {GameStyles}                    from '../../core/gameStyle/GameStyles';\nimport {Themes}                        from '../../core/theme/Themes';\nimport {Times}                         from '../../core/time/Times';\nimport {ViewDisplays}                  from '../withInterpreter/ViewDisplays';\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =        lazy(() => import('../../core/theme/CourseTheme.component'));\nconst EditorVoiceSoundComponent =   lazy(() => import('../../core/editorVoice/EditorVoiceSound.component'));\nconst InstrumentPropertyComponent = lazy(() => import( '../../core/entity/properties/instrument/InstrumentProperty.component'));\nconst GameComponent =               lazy(() => import('../../core/game/Game.component'));\nconst GameStyleComponent =          lazy(() => import('../../core/gameStyle/GameStyle.component'));\nconst LimitComponent =              lazy(() => import('../../core/entityLimit/Limit.component'));\nconst TimeComponent =               lazy(() => import('../../core/time/Time.component'));\nconst TextComponent =               lazy(() => import( '../tools/text/TextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport abstract class EntityAppOption\n    extends AbstractAppOption<boolean, EntityAppStates, Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        get #createImageOnEditor(): PossibleRenderReactElement {\n            const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n            const image = enumeration.editorImage;\n\n            return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`editor image (${enumeration.englishName})`}>{\n                [...new Set(EntityAppOption.themes.map(theme =>\n                    EntityAppOption.times.map(time => image.get(true, gameStyle, theme, time,)\n                        .map((image, index,) => [theme, time, image, index,] as const))).flat(2))]\n                    .map(([theme, time, image, index,]) =>\n                        <img src={image} alt={`${gameStyle.acronym}-${theme.englishName}-${time.englishName}-${index + 1}`}/>)\n            }</Fragment>);\n        }\n\n        get #createImageOnClearCondition(): PossibleRenderReactElement {\n            const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n            const image = enumeration.clearConditionImage;\n\n            return EntityAppOption._gameStyles.map(gameStyle =>\n                <Fragment key={`clear condition image (${enumeration.englishName})`}>{\n                    image.get(gameStyle).map((image, index,) => <img src={image} alt={`${gameStyle.acronym}-${index + 1}`}/>)\n                }</Fragment>);\n        }\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return enumeration.editorImage === EmptyEditorImage.get\n                    ? this.#createImageOnClearCondition\n                    : this.#createImageOnEditor;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            };\n        }\n\n    }(true,);\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new class EntityAppOption_ImagesOnEditor extends EntityAppOption {}(true,);\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new class EntityAppOption_ImagesOnClearCondition extends EntityAppOption {}(true,);\n    public static readonly IMAGES_ON_WHILE_PLAYING = new class EntityAppOption_ImagesOnWhilePlaying extends EntityAppOption {}(false,);\n    public static readonly IMAGES_ON_UNUSED = new class EntityAppOption_ImagesOnUnused extends EntityAppOption {}(false,);\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSound} name={enumeration.englishName}/>\n                </div>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }(true,);\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME.get}/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.gameHeader;\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_GAME = new class EntityAppOption_WhenAllSelectedGame extends EntityAppOption {}(false,);\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME_STYLE.get}/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: <GameContentTranslationComponent translationKey=\"Game style\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new class EntityAppOption_WhenAllSelectedGameStyle extends EntityAppOption {}(false,);\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_COURSE_THEME.get}/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: <GameContentTranslationComponent translationKey=\"Course theme\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new class EntityAppOption_WhenAllSelectedCourseTheme extends EntityAppOption {}(false,);\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_TIME.get}/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: <GameContentTranslationComponent translationKey=\"Time\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_TIME = new class EntityAppOption_WhenAllSelectedTime extends EntityAppOption {}(false,);\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer;\n\n                return CommonOptions.get.getCategoryContent(enumeration,\n                    () => EntityAppOption.CATEGORY_AS_TEXT.get\n                        ? categoryName\n                        : EntityCategories.getValue(categoryName.english)!.imagePath,);\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.categoryHeader;\n        }\n\n    }(true,);\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new class EntityAppOption_CategoryAsText extends EntityAppOption {}(false,);\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const entity = enumeration.reference;\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds;\n                const editorLimit_SMM2 = entity.editorLimit_smm2;\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS}\n                                          displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2}\n                                          displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()}\n                                    displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                ];\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: <GameContentTranslationComponent translationKey=\"Limit\"/>,\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.EDITOR.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit in the editor',},\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.WHILE_PLAYING.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit while playing',},\n                    },\n                ],\n            };\n        }\n\n    }(true,);\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new class EntityAppOption_IfApplicableAcronymOnLimitAsText extends EntityAppOption {}(true,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EveryEntitiesApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities;\n\n    static #gameStyles?: readonly GameStyles[];\n    static #gameStyles_unusedImages?: readonly [GameStyles,] | readonly [];\n    static #times?: readonly Times[];\n    static #themes?: readonly Themes[];\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(defaultValue: boolean,) {\n        super(defaultValue,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get createDefaultState(): EntityAppStates {\n        return {\n            typeDisplayed: ViewDisplays.TABLE,\n        };\n    }\n\n\n    protected static get _gameStyles() {\n        return this.#gameStyles ??= GameStyles.values;\n    }\n\n    protected static get _gameStyles_unusedImages() {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,];\n    }\n\n    protected static get times() {\n        return this.#times ??= Times.values;\n    }\n\n    protected static get themes() {\n        return this.#themes ??= Themes.courseThemes;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null;\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption();\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,);\n        }\n        return this.#appOptionWithContent;\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null;\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption();\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,);\n        }\n        return this.#appOptionWithTable;\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityAppOption> {\n        return EntityAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityAppOption = EntityAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityAppOption\n    public static getValue(value: PossibleValue,): | EntityAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = | (() => PossibleRenderReactElement) | null;\ntype PossibleOptionWithTable = | SingleHeaderContent | null;\n","import './EveryEntitiesApp.scss';\nimport './options/EntityAppOption.scss';\n\nimport {lazy} from 'react';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {EntityAppStates}                                    from './AppStates.types';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {Entities}                      from '../core/entity/Entities';\nimport {EntityAppOption}               from './options/EntityAppOption';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\n\nconst SimpleSound = lazy(() => import('./tools/sounds/SimpleSound'));\n\n/**\n * @reactComponent\n */\nexport default class EveryEntitiesApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, {}, EntityAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = EntityAppOption.createDefaultState;\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'entity';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every entities\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable(): IterableIterator<Entities> {\n                return Entities[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({englishNameInHtml: htmlName, reference, editorVoiceSound: {fileName: editorVoice1, europeanFileName: editorVoice2,},}: Entities,): ReactElement {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`;//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    {editorVoice1 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice1} title={`${htmlName} - editor voice`}/>}\n                    {editorVoice2 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice2} title={`${htmlName} - editor voice (european)`}/>}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    EntityAppOption.GAME,\n                    EntityAppOption.GAME_STYLE,\n                    EntityAppOption.COURSE_THEME,\n                    EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every entities\"/>,\n                };\n            }\n\n            public createTableContent(option: EntityAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: EntityAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}