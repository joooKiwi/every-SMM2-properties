{"version":3,"sources":["core/theme/Themes.ts","core/gameStyle/GameStyles.ts","util/DynamicImporter.ts","util/enum/Enum.ts","util/emptyVariables.ts","lang/Characters.ts","lang/EveryLanguages.ts","util/utilitiesMethods.ts","util/holder/DelayedObjectHolder.container.ts","variables.ts","util/StringContainer.ts","core/_util/loader/HeaderTypesForConvertor.ts","lang/ProjectLanguages.ts","core/_properties/Property.container.ts","core/game/Games.ts","lang/name/ClassContainingAName.ts","core/time/Times.ts","core/_template/AbstractTemplate.builder.ts","util/loader/converter/AbstractStringConverter.ts","util/loader/converter/GenericStringToAnyConverter.ts","util/loader/converter/GenericStringToAnyNullableConverter.ts","util/loader/converter/ConverterPatterns.ts","util/loader/converter/ConverterUtil.ts","util/loader/converter/StringToBooleanConverter.ts","util/loader/converter/AbstractEmptyableStringConverter.ts","util/loader/converter/StringToEmptyableStringConverter.ts","util/loader/converter/StringToNullableBooleanConverter.ts","util/loader/converter/StringToNullableNumberConverter.ts","util/loader/converter/StringToNullableStringConverter.ts","util/loader/converter/StringToNumberConverter.ts","util/loader/converter/StringToStringConverter.ts","util/loader/converter/AbstractStringToSingleValueConvertor.ts","util/loader/converter/StringToSingleNumberConverter.ts","util/loader/converter/StringToSingleStringConverter.ts","util/loader/converter/StringToSingleBooleanConverter.ts","util/loader/converter/PredefinedConverter.ts","util/loader/HeaderContainer.ts","util/loader/CSVLoader.ts","core/_properties/boolean/BooleanPropertyWithAmountAndComment.container.ts","core/_properties/PropertyWithAmountAndComment.container.ts","core/_properties/boolean/BooleanPropertyWithAmount.container.ts","core/_properties/PropertyWithAmount.container.ts","core/_properties/PropertyWithComment.container.ts","core/_properties/boolean/BooleanPropertyWithComment.container.ts","core/_properties/PropertyWithEverything.container.ts","core/_properties/boolean/BooleanPropertyWithEverything.container.ts","core/_properties/number/NumberPropertyWithComment.container.ts","core/_properties/number/NumberPropertyWithEverything.container.ts","core/_properties/number/NumberProperty.container.ts","core/_properties/string/StringProperty.container.ts","core/_properties/string/StringPropertyWithComment.container.ts","core/_properties/string/StringPropertyWithEverything.container.ts","core/_properties/PropertyProvider.ts","util/emptyReactVariables.tsx","lang/name/containers/EmptyLanguageContainer.ts","lang/name/containers/LanguageContainer.ts","lang/name/containers/OptionalLanguageContainer.ts","lang/name/Name.container.ts","lang/name/Name.builder.container.ts","lang/name/Name.creator.ts","core/_template/TemplateWithName.builder.ts","util/extended/EntrySet.container.ts","util/extended/ExtendedMap.container.ts","core/gameReference/GameReferences.ts","util/provider/AbstractProvider.ts","lang/components/ContentTranslationComponent.tsx","util/holder/ObjectHolder.container.ts","app/tools/images/Image.tsx","util/holder/objectHolders.ts","lang/components/GameContentTranslationComponent.tsx","core/entity/properties/game/GameProperty.container.ts","core/entity/properties/game/GameProperty.provider.ts","lang/name/EmptyStringName.ts","routes/route.ts","core/entityLimit/EntityLimits.ts","bootstrap/tooltip/Tooltip.tsx","util/extended/ExtendedSet.container.ts","core/entity/images/GameStyles.ts","core/entity/images/AbstractImage.builder.ts","core/entity/images/clearCondition/ClearConditionImage.container.ts","core/entity/images/clearCondition/ClearConditionImage.builder.ts","core/entity/images/clearCondition/EmptyClearConditionImage.ts","core/entity/images/clearCondition/ClearConditionImage.factory.ts","core/entity/images/AbstractImageWithTimesThemesAndGameStyles.ts","core/entity/images/editor/EditorImage.container.ts","core/entity/images/editor/EditorImage.builder.ts","core/entity/images/editor/EditorImage.factory.ts","core/editorVoice/EditorVoiceSound.regional.container.ts","core/editorVoice/EditorVoiceSound.single.container.ts","core/editorVoice/EmptyEditorVoiceSound.ts","core/editorVoice/EditorVoiceSound.factory.ts","core/editorVoice/holder/AbstractEditorVoiceSoundHolder.ts","core/editorVoice/holder/EditorVoiceSoundHolderWithSingingPartBefore.ts","core/editorVoice/holder/EditorVoiceSoundHolderWithVoiceBefore.ts","core/editorVoice/holder/EntityReferenceHolder.container.ts","core/editorVoice/EditorVoices.ts","core/entity/images/inGame/InGameImage_SMM1.container.ts","core/entity/images/inGame/InGameImage_SMM1.builder.ts","core/entity/images/inGame/EmptyInGameImage.ts","core/entity/images/inGame/InGameImage.factory.ts","core/entity/images/unused/UnusedImage_BigMushroom.container.ts","core/entity/images/unused/UnusedImage.builder.ts","core/entity/images/unused/UnusedImage_BigMushroom.builder.ts","core/entity/images/unused/UnusedImage_Regular.container.ts","core/entity/images/unused/UnusedImage_Regular.builder.ts","core/entity/images/unused/EmptyUnusedImage_BigMushroom.ts","core/entity/images/unused/EmptyUnusedImage_Regular.ts","core/entity/images/unused/UnusedImage.factory.ts","core/entity/Entities.ts","core/availableFromTheStart/ClassThatIsAvailableFromTheStart.provider.ts","bootstrap/tooltip/TooltipInstance.ts","lang/name/ClassContainingANameAndACategory.ts","core/game/GameStructure.container.ts","core/game/GameStructure.provider.ts","lang/components/TranslationUtility.tsx","bootstrap/BootstapInstance.ts","lang/components/AnyTranslationComponent.tsx","core/entityLimit/EntityLimitTypes.ts","core/_component/AbstractEntityPropertyComponent.tsx","core/entityCategory/EmptyEntityCategory.ts","core/_template/Template.builder.ts","core/entity/properties/EmptyEntityReference.ts","core/entity/EmptyEntity.ts","app/tools/text/TextComponent.tsx","core/version/Versions.ts","core/officialNotification/OfficialNotifications.tsx","routes/SimpleRoute.container.ts","routes/everyRoutes.tsx","bootstrap/BootstrapWithBasicEventsInstance.ts","core/instrument/Instruments.ts","core/_component/AbstractEntityPropertyThatCanDisplayAllComponent.ts","core/entity/properties/instrument/EmptyInstrumentProperty.ts","core/entity/properties/limit/EmptyLimitProperty.ts","core/entity/properties/EmptyIsInProperty.ts","util/extended/tools/AbstractIntermediate.ts","util/extended/tools/ConditionalIntermediate.ts","core/entityCategory/EntityCategories.ts","core/soundEffectCategory/SoundEffectCategories.ts","core/miiCostumeCategory/MiiCostumeCategories.ts","core/availableFromTheStart/ClassThatIsAvailableFromTheStart.container.ts","core/nightEffect/NightEffects.tsx","navigation/button/Github.button.tsx","bootstrap/modal/ModalInstance.ts","bootstrap/modal/element/ModalButton.tsx","navigation/button/AbstractNavigationButton.tsx","navigation/button/LanguageChanger.button.tsx","lang/date/DateDayLanguages.tsx","lang/date/SimpleDate.tsx","navigation/Footer.tsx","app/options/global/group/AbstractGroup.tsx","app/options/global/group/AbstractGroupWithSingleImage.tsx","app/options/global/group/GameGroup.tsx","app/options/global/group/GameStyleGroup.tsx","app/options/global/ImageAnimations.ts","app/options/global/Images.tsx","app/options/global/GlobalThemeOption.ts","app/options/global/Sounds.tsx","app/options/global/Texts.tsx","app/options/global/GlobalAppOption.ts","app/options/global/group/ThemeGroup.tsx","app/options/global/group/TimeGroup.tsx","app/options/global/GlobalOption.component.tsx","navigation/DisplayView.routeButton.tsx","navigation/DisplayView.body.tsx","navigation/LanguageChanger.single.link.tsx","navigation/LanguageChanger.link.tsx","navigation/LanguageChanger.body.tsx","bootstrap/modal/element/ModalBody.tsx","bootstrap/modal/element/ModalContainer.tsx","bootstrap/modal/element/ModalFooter.tsx","bootstrap/modal/element/ModalHeader.tsx","navigation/Search.body.tsx","navigation/ModalContainers.tsx","navigation/button/DisplayView.button.tsx","navigation/button/Home.button.tsx","navigation/button/Parameter.button.tsx","navigation/button/Search.button.tsx","navigation/Navigation.tsx","app/AbstractApp.tsx","lang/components/LanguageTranslationComponent.tsx","app/options/AbstractAppOption.ts","core/theme/Theme.component.tsx","core/entity/images/editor/EmptyEditorImage.ts","core/game/Game.component.tsx","core/gameStyle/GameStyle.component.tsx","core/soundEffect/SoundEffect.component.tsx","core/_component/AbstractDualEntityPropertyComponent.tsx","core/time/Time.component.tsx","core/soundEffect/SoundEffects.ts","core/mysteryMushroom/image/Image.container.ts","core/mysteryMushroom/sound/Sound.container.ts","core/mysteryMushroom/MysteryMushrooms.ts","core/miiCostume/MiiCostumes.ts","core/courseTag/CourseTags.ts","core/predefinedMessage/PredefinedMessages.ts","core/behaviour/EntityBehaviours.ts","core/entity/AbstractEntity.ts","core/entity/Entity.container.ts","core/entity/properties/EntityReferences.container.ts","core/entity/AbstractExclusiveSMM2Entity.ts","core/entity/ExclusiveSM3DWEntity.container.ts","core/entity/ExclusiveSMM1Entity.container.ts","core/entity/ExclusiveSMM2Entity.container.ts","core/entity/properties/gameStyle/GameStyleProperty.container.ts","core/entity/properties/gameStyle/GameStyleProperty.provider.ts","core/entity/properties/instrument/InstrumentProperty.container.ts","core/entity/properties/instrument/InstrumentProperty.provider.ts","core/entity/properties/limit/LimitProperty.container.ts","core/entity/properties/limit/LimitProperty.provider.ts","core/entity/properties/Property.container.ts","core/_properties/PropertyThatCanBeUnknownWithComment.container.ts","core/entity/properties/theme/ThemeProperty.container.ts","core/entity/properties/theme/ThemeProperty.provider.ts","core/entity/properties/time/TimeProperty.container.ts","core/entity/properties/time/TimeProperty.provider.ts","core/entity/Entity.builder.ts","util/builder/GenericSingleInstanceBuilder.ts","core/entity/ReferencesToWatch.ts","core/entity/Entity.loader.ts","core/mysteryMushroom/MysteryMushroom.container.ts","core/mysteryMushroom/properties/MysteryMushroomProperty.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnDeath.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnGoalPole.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnGroundAfterJump.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnJump.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnMovement.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnTaunt.container.ts","core/mysteryMushroom/properties/sound/SoundEffectOnTurnAfterRun.container.ts","core/mysteryMushroom/properties/sound/SoundEffectWhenCollected.container.ts","core/mysteryMushroom/properties/sound/SpecialMusicInStarMode.container.ts","core/mysteryMushroom/properties/sound/SoundProperty.container.ts","core/mysteryMushroom/properties/UnlockProperty.container.ts","core/mysteryMushroom/properties/UnlockProperty.provider.ts","core/mysteryMushroom/MysteryMushroom.loader.ts","core/mysteryMushroom/MysteryMushroom.builder.ts","lang/name/ClassContainingANameAndAnAlternative.ts","core/entityLimit/AbstractEntityLimitContainer.ts","core/entityLimit/AlternativeEntityLimitContainer.ts","core/entityLimit/properties/EmptyEntityLimitAmount.ts","core/entityLimit/EmptyEntityLimit.ts","core/entityLimit/properties/EntityLimitAmount.container.ts","core/entityLimit/EntityLimit.container.ts","core/_properties/number/NumberPropertyThatCanBeUnknown.container.ts","core/_properties/PropertyThatCanBeUnknown.container.ts","core/entityLimit/EntityLimit.builder.ts","core/entityLimit/EntityLimit.loader.ts","core/theme/AbstractTheme.ts","core/theme/CourseTheme.container.ts","core/theme/AbstractCourseAndWorldTheme.ts","core/theme/CourseAndWorldTheme.container.ts","core/theme/EmptyWorldTheme.ts","core/theme/CourseOnlyTheme.container.ts","core/theme/WorldTheme.container.ts","core/theme/EmptyCourseTheme.ts","core/theme/WorldOnlyTheme.container.ts","core/theme/Theme.loader.ts","core/theme/Theme.builder.ts","lang/i18n.ts","reportWebVitals.ts","routes/DirectRoute.tsx","app/LoadingApp.tsx","routes/redirectToHome.tsx","routes/Routes.tsx","IndexComponent.tsx","index.tsx","core/behaviour/EntityBehaviour.container.ts","core/behaviour/properties/EntityBehaviourIsInOnly.container.ts","core/behaviour/properties/EntityBehaviourIsInOnly.provider.ts","core/behaviour/properties/EntityBehaviourLink.container.ts","core/behaviour/properties/EntityBehaviourLink.provider.ts","core/behaviour/EntityBehaviour.builder.ts","core/behaviour/EntityBehaviour.loader.ts","core/miiCostume/MiiCostume.container.ts","core/officialNotification/holder/EmptyOfficialNotificationHolder.ts","core/officialNotification/holder/OfficialNotificationHolder.container.ts","core/officialNotification/holder/OfficialNotificationHolder.provider.ts","core/officialNotification/holder/OfficialNotificationHolder.builder.ts","core/miiCostume/MiiCostume.loader.ts","core/miiCostume/MiiCostume.builder.ts","core/soundEffectCategory/EmptySoundEffectCategory.ts","core/soundEffect/properties/PlayerSoundEffectTriggerProperty.container.ts","core/soundEffect/SoundEffect.container.ts","core/soundEffect/properties/SoundEffectProperty.container.ts","core/soundEffect/SoundEffect.builder.ts","core/soundEffect/SoundEffect.loader.ts","core/entityCategory/EntityCategory.loader.ts","core/entityCategory/EntityCategory.container.ts","core/entityCategory/EntityCategory.builder.ts","core/gameReference/GameReference.loader.ts","core/gameReference/GameReference.container.ts","core/gameReference/GameReference.builder.ts","core/gameStyle/GameStyle.container.ts","core/gameStyle/GameStyle.builder.ts","core/gameStyle/GameStyle.loader.ts","core/soundEffectCategory/SoundEffectCategory.loader.ts","core/soundEffectCategory/SoundEffectCategory.container.ts","core/soundEffectCategory/SoundEffectCategory.builder.ts","core/miiCostumeCategory/MiiCostumeCategory.loader.ts","core/miiCostumeCategory/MiiCostumeCategory.container.ts","core/miiCostumeCategory/MiiCostumeCategory.builder.ts","core/courseTag/CourseTag.container.ts","core/courseTag/CourseTag.builder.ts","core/courseTag/CourseTag.loader.ts","core/predefinedMessage/PredefinedMessage.loader.ts","core/predefinedMessage/PredefinedMessage.container.ts","core/predefinedMessage/PredefinedMessage.builder.ts","core/instrument/Instrument.loader.ts","core/instrument/Instrument.container.ts","core/instrument/Instrument.builder.ts"],"names":["Symbol","iterator","Themes","englishName_or_enumeration","gameName","StringContainer","this","REFERENCE_MAP","get","englishName","getInHtml","reference","courseTheme","worldTheme","BASE_PATH","property","_get","referenceProperty","EmptyEntity","name","isNightTheme","text","isSmallPath","ThemeComponent","renderSingleComponent","Import","ThemeLoader","load","values","map","limit","GROUND","UNDERGROUND","UNDERWATER","DESERT","SNOW","SKY","FOREST","GHOST_HOUSE","AIRSHIP","CASTLE","VOLCANO","SPACE","value","find","enumerable","Enum","getValueOn","getValuesOn","isInGroundTheme","referenceInGroundTheme","isInUndergroundTheme","referenceInUndergroundTheme","isInUnderwaterTheme","referenceInUnderwaterTheme","isInDesertTheme","referenceInDesertTheme","isInSnowTheme","referenceInSnowTheme","isInSkyTheme","referenceInSkyTheme","isInForestTheme","referenceInForestTheme","isInGhostHouseTheme","referenceInGhostHouseTheme","isInAirshipTheme","referenceInAirshipTheme","isInCastleTheme","referenceInCastleTheme","GameStyles","acronym_or_enumeration","gameAcronym","acronym","ordinal","GameStyleComponent","GameStyleLoader","SUPER_MARIO_BROS","SUPER_MARIO_BROS_3","SUPER_MARIO_WORLD","NEW_SUPER_MARIO_BROS_U","isInSuperMarioBrosStyle","referenceInSuperMarioBrosStyle","isInSuperMarioBros3Style","referenceInSuperMarioBros3Style","isInSuperMarioWorldStyle","referenceInSuperMarioWorldStyle","isInNewSuperMarioBrosUStyle","referenceInNewSuperMarioBrosUStyle","SUPER_MARIO_3D_WORLD","isInSuperMario3DWorldStyle","referenceInSuperMario3DWorldStyle","DynamicImporter","require","EntityLoader","Entities","EntityLimitLoader","EntityLimits","EntityLimitTypes","EntityCategoryLoader","EntityCategories","NightEffects","Times","GameReferences","GameReferenceLoader","EntityBehaviourLoader","EntityBehaviours","SoundEffectLoader","SoundEffects","SoundEffectCategoryLoader","SoundEffectCategories","MysteryMushroomLoader","MysteryMushrooms","MiiCostumeLoader","MiiCostumes","MiiCostumeCategoryLoader","MiiCostumeCategories","OfficialNotifications","CourseTags","CourseTagLoader","PredefinedMessages","PredefinedMessageLoader","Instruments","InstrumentLoader","Versions","ClassThatIsAvailableFromTheStartContainer","ClassThatIsAvailableFromTheStartProvider","toStringTag","staticReference","_static","Object","entries","Reflect","set","instance","has","defaultValue","getDefaultOn","ReferenceError","valueRetrieved","getValue","setDefaultOn","parent","_PARENT","parentValue","__getEnumInstanceByThisOrEnumerable","_getValueByEnumerable","__getEnumInstanceByNameOrIndex","_getValueByString","_getValueByNumber","_getValueByBoolean","_getValueByObject","nameOrIndex","everyProperties","getOwnPropertyDescriptors","filter","_EXCLUDED_NAMES","includes","test","defaultElementIndex","findIndex","_DEFAULT_NAME","defaultElement","splice","at","forEach","index","Map","EMPTY_STRING","EMPTY_ARRAY","EMPTY_MAP","EMPTY_OBJECT","Characters","spaceUnevenCharacter","spaceEvenCharacter","length","isSpaceEven","spaceEvenCharacters","spaceUnevenCharacters","points_enum","parentheses_enum","brackets_enum","braces_enum","slashes_enum","letters_enum","flat","numbers_enum","enumValue","isUppercase","toUpperCase","isLowercase","toLowerCase","getCharacters","characters","spaceEvenObjectMap","spaceEvenCharacter1","spaceEvenCharacter2","spaceUnevenCharacter1","spaceUnevenCharacter2","STARTING_PARENTHESIS","ENDING_PARENTHESIS","STARTING_BRACKET","ENDING_BRACKET","STARTING_BRACE","ENDING_BRACE","startingCharacter","endingCharacter","enumArray","POINT","INTERROGATION_POINT","EXCLAMATION_POINT","COLON","SEMICOLON","COMMA","UNION_TRAIT","COMMERCIAL_AND","SLASH","VERTICAL_SLASH","LETTER_A","LETTER_B","LETTER_C","LETTER_D","LETTER_E","LETTER_F","LETTER_G","LETTER_H","LETTER_I","LETTER_J","LETTER_K","LETTER_L","LETTER_M","LETTER_N","LETTER_O","LETTER_P","LETTER_Q","LETTER_R","LETTER_S","LETTER_T","LETTER_U","LETTER_V","LETTER_W","LETTER_X","LETTER_Y","LETTER_Z","NUMBER_0","NUMBER_1","NUMBER_2","NUMBER_3","NUMBER_4","NUMBER_5","NUMBER_6","NUMBER_7","NUMBER_8","NUMBER_9","EveryLanguages","isACompleteLanguage","projectAcronym","internationalAcronym","originalName","differenceWords","_spaceParameters","spaceParameters","__spaceParameters","isASpaceEvenLanguageForThePointsAndSpace","isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace","language","currentLanguage","isCurrentLanguage","default","hasSpace","SPACE_STRING","getPoints","isASpaceEvenLanguage","points","getParentheses","parentheses","getBrackets","brackets","getBraces","braces","getSlashes","slashes","getLowercaseLetters","getUppercaseLetters","getNumbers","character","getCharacter","classWithEveryLanguages","AMERICAN_ENGLISH","original","textInParentheses","textInBrackets","textInBraces","setCurrentLanguage","selectedLanguage","i18n","changeLanguage","INTERNATIONALISATION_SET_CURRENT_LANGUAGE","getNonNullDefaultOn","setDefault","setNonNullDefaultOn","document","querySelectorAll","element","setAttribute","ENGLISH","_SPACE_UNEVEN_LANGUAGE_WITH_SPACE","EUROPEAN_ENGLISH","isDefaultLanguage","english","originalEnglish","americanEnglish","europeanEnglish","FRENCH","CANADIAN_FRENCH","EUROPEAN_FRENCH","french","originalFrench","canadianFrench","europeanFrench","GERMAN","german","SPANISH","AMERICAN_SPANISH","EUROPEAN_SPANISH","spanish","originalSpanish","americanSpanish","europeanSpanish","ITALIAN","italian","DUTCH","dutch","PORTUGUESE","AMERICAN_PORTUGUESE","EUROPEAN_PORTUGUESE","portuguese","originalPortuguese","americanPortuguese","europeanPortuguese","RUSSIAN","russian","JAPANESE","_SPACE_EVEN_LANGUAGE_WITHOUT_SPACE","japanese","CHINESE","TRADITIONAL_CHINESE","SIMPLIFIED_CHINESE","chinese","originalChinese","traditionalChinese","simplifiedChinese","KOREAN","_SPACE_EVEN_LANGUAGE_WITH_SPACE","korean","HEBREW","hebrew","POLISH","polish","UKRAINIAN","ukrainian","GREEK","greek","_DEFAULT","UNKNOWN_STRING","isArrayEquals","firstArray","secondArray","i","elementInFirstArray","elementInSecondArray","Array","assert","condition","message","isInProduction","AssertionError","DelayedObjectHolderContainer","ObjectHolderContainer","hasBeenInitialised","process","splitValues","replaceAll","split","stringValue","replacementText","characterToReplace","replace","returnedValue","shift","charAt","substring","join","HeaderTypesForConvertorForTestAndDevelopment","everyAcronyms","everyEnglishNames","everyTranslationKeys","everyAlternativeAcronyms","everyAlternativeEnglishNames","everyEnglishNamesOnFile","additionalEnglishName","everyNames","everyNames_smm1","everyNames_smm3ds","everyNames_smm2","HeaderTypesForConvertorForProduction","everyPossibleAcronym_gameReference","everyPossibleAcronymWithPokemonGeneration_gameReference","everyPossibleName_gameReference","everyPossibleAcronym_gameStyle","everyPossibleName_entity","everyPossibleAcronym_entityBehaviour","everyPossibleTranslationKey_entityBehaviour","everyPossibleName_entityGroup","everyPossibleName_theme","everyPossibleName_themeNightEffect","everyPossibleName_entityCategory","everyPossibleAcronym_limit","everyAlternativeAcronym_limit","everyPossibleName_limit","everyName_limit","everyNameOrUnknown_limit","everyPossibleName_limitType","everyPossibleName_soundEffect","everyPossibleName_soundEffectCategory","everyPossibleName_MiiCostumeCategory","everyPossibleEnglishNameOnFile_mysteryMushroom","everyPossibleConditionToUnlockIt_mysteryMushroom","everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom","everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom","everyPossibleNameWithAmount_officialNotification","everyPossibleName_predefinedMessage","everyPossibleName_instrument","everyPossibleNameOnEntity_instrument","everyPossibleName_version","everyPossibleName_version_smm","everyPossibleName_version_smm3ds","everyPossibleName_version_smm2","HeaderTypesForConvertor","ProjectLanguages","isASupportedLanguageInSMM1","isASupportedLanguageInSMM3DS","isASupportedLanguageInSMM2","isInSuperMarioMaker1","isInSuperMarioMakerFor3DS","isInSuperMarioMaker2","differentWords","isCurrentLanguageOrAssociatedWithIt","space","point","interrogationPoint","exclamationPoint","colon","semicolon","comma","unionTrait","commercialAnd","startingParenthesis","endingParenthesis","startingBrackets","endingBrackets","startingBraces","endingBraces","slash","verticalSlash","romainLowercaseAlphabet","romainUppercaseAlphabet","numbers","PropertyContainer","isUnknown_or_amount_or_comment","comment_or_amount","comment","UNKNOWN","NULL_CONTAINER","UNKNOWN_CONTAINER","NOT_APPLICABLE_CONTAINER","TRUE_CONTAINER","TRUE_WITH_AMOUNT_CONTAINER","FALSE_CONTAINER","FALSE_WITH_AMOUNT_CONTAINER","Games","enumeration_or_acronym","simpleValue","GameComponent","SUPER_MARIO_MAKER_1","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","ClassContainingAName","nameContainer","languageValue","isHebrewUsed","isPolishUsed","isUkrainianUsed","isGreekUsed","originalLanguages","toNameMap","imagePath","TimeComponent","DAY","isInDayTheme","referenceInDayTheme","NIGHT","isInNightTheme","referenceInNightTheme","AbstractTemplateBuilder","content","header","_headersIndexMap","_content","hasAReferenceInMarioMaker","nameTemplateWithOptionalLanguages","_createNameTemplate","headers","isInSuperMarioMaker1And3DS","simple","american","european","canadian","traditional","simplified","languages","AbstractStringConverter","originalValue","convertTheValue","isValueValid","_convertTheValue","_newError","GenericStringToAnyConverter","typeName","isValueValidCallback","convertTheValueCallback","validValue","_convertTheValueCallback","TypeError","_typeName","_isValueValidCallback","GenericStringToAnyNullableConverter","ConverterPatterns","EvalError","BOOLEAN_PATTERN","NUMBER_PATTERN","EMPTYABLE_STRING_PATTERN","NULLABLE_STRING_PATTERN","ConverterUtil","lowerCaseValue","Number","StringToBooleanConverter","convertToBoolean","AbstractEmptyableStringConverter","_isValueValid","StringToEmptyableStringConverter","nonEmptyValue","StringToNullableBooleanConverter","StringToNullableNumberConverter","convertToNumber","StringToNullableStringConverter","convertToNullableString","StringToNumberConverter","StringToStringConverter","AbstractStringToSingleValueConvertor","singleValue","StringToSingleNumberConverter","StringToSingleStringConverter","StringToSingleBooleanConverter","PredefinedConverter","simpleName","simpleNameAsNonNullable","undefined","validatingValue","newValidation","newConversion","NUMBER","NULLABLE_NUMBER","BOOLEAN","NULLABLE_BOOLEAN","STRING","EMPTYABLE_STRING","convertToEmptyableString","NULLABLE_STRING","SINGLE_NUMBER","SINGLE_STRING","SINGLE_BOOLEAN","Boolean","HeaderContainer","otherHeaders","Set","headerTypeOrConvertorSet","size","predefinedConvertor","add","predefinedConvertors","_reorderPredefinedConvertorIfContainStringConvertor","temporaryPredefinedConvertors","from","predefinedStringConvertor","delete","convertorCallback","headerTypeOrConvertor","_addFollowingHeader","_addSingleValueToValidate","_addPredefinedConvertor","addHeaderTypeOrConvertor","_addConvertorCallbacks","_createSingleConversionCallback","newConvertor","CSVLoader","CUSTOM_CALLBACK_NAME","TRUE_CALLBACK","originalContent","callbackToCreateObject","hasOriginalContentAsReference","GENERIC_HAS_ORIGINAL_CONTENT_AS_REFERENCE","originalHeaders","originalHeader","COMMA_AND_SPACE_STRING","GENERIC_DOES_THROW_ERROR","setDoesThrowError","doesThrowError","GENERIC_DEFAULT_CONVERSION","setDefaultConversion","defaultConversion","_convertedContent","_headerContainerMap","callback","onBeforeFinalObjectCreated","onAfterFinalObjectCreated","onBeforeSingleContentConverted","onAfterSingleContentConverted","onInitialisationStart","onInitialisationEnd","_initialiseContent","headersAsArray","arrayContent","callbackOnBeforeFinalObjectCreated","convertContent","callbackOnAfterFinalObjectCreated","push","callbacks","typeOrHeader","validValueOrConvertor","convertTo","_addTypeToHeaderTypeOrConvertor","_validateHeaderNotIncludedInArrayOfHeadersReceived","addHeaderToConvert","headerConverterHolder","convertor","convertedValue","callbackOnInitialisationStart","headersConverterHolders","_getConverterBasedOnHeader","addContent","callbackOnBeforeSingleContentConverted","_convertOriginalContent","callbackOnAfterSingleContentConverted","callbackOnInitialisationEnd","convertedContent","headerContainer","headerContainerMap","amountOfValidator","_createSingleConvertor","_createMixedConvertor","createConversionCallbacks","validations","_createMixedConvertorInstanceTypes","containNullable","containEmptyableString","followingHeaders","singleValuesToValidate","convertorCallbacks","conversionCallbacksToConverter","mixedTypeOnConverter","CUSTOM_VALIDATION_CALLBACK","CUSTOM_CONVERSION_CALLBACK_WITH_ERRORS","CUSTOM_VALIDATION_CALLBACK_WITH_EMPTYABLE_STRING","CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING_WITH_ERRORS","CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING","CUSTOM_CONVERSION_CALLBACK","_createContainValidations","mixedConvertorInstance","_createMixedConvertorInstance","_interpretConvertorInstance","conversionCallbackToConverter","returnValue","BooleanPropertyWithAmountAndCommentContainer","amount","BooleanPropertyWithAmountContainer","PropertyWithCommentContainer","BooleanPropertyWithCommentContainer","PropertyWithEverythingContainer","isUnknown","BooleanPropertyWithEverythingContainer","NumberPropertyWithCommentContainer","NumberPropertyWithEverythingContainer","NumberPropertyContainer","StringPropertyContainer","StringPropertyWithCommentContainer","StringPropertyWithEverythingContainer","PropertyProvider","canBeNotApplicable","doesHaveAnAmount","key","callbackToCreateNew","type","NaN","EMPTY_REACT_ELEMENT","EmptyLanguageContainer","LanguageContainer","_singleValue","_arrayValue","OptionalLanguageContainer","isEmptyStringOrUndefined","NameContainer","isUsed","_optionalLanguages","languageContainer","optionalLanguages","newInstance","isValueArray","children","NameBuilderContainer","template","game","isACompleteName","_game","setEnglish","setFrench","setGerman","setSpanish","setItalian","setDutch","setPortuguese","setRussian","setJapanese","setChinese","setKorean","setHebrew","setPolish","setUkrainian","setGreek","value1","value2","value3","canBeNullable","all3ValuesAreNull","NameCreator","uniqueName","englishReferenceName","TemplateWithNameBuilder","templateBuilder_or_template","nameTemplate","nameBuilder","__game","addEnglishReference","_uniqueName","build","_build","_createName","TemplateBuilder","EntrySetContainer","key_or_entry","ExtendedMapContainer","iterable","defaultSeparator","DEFAULT_SEPARATOR","pushAndGet","addAndGet","drop","remove","arrayOrEntrySet","_map","clear","ConditionalIntermediate","internalKey","findKey","internalValue","callbackIfNotFound","DEFAULT_VALUE_IF_NOT_FOUND","newArray","toArray","keys","entry","separator","ExtendedSetContainer","toString","toLocaleString","everyValuesHasBeenDeleted","EMPTY","SUPER_MARIO_KART","SUPER_MARIO_64","SUPER_MARIO_SUNSHINE","SUPER_MARIO_GALAXY","MARIO_BROS","SUPER_MARIO_BROS_2","SUPER_MARIO_WORLD_2_YOSHI_ISLAND","SUPER_MARIO_LAND","WARIO_LAND_SUPER_MARIO_LAND_3","MARIO_TENNIS","DR_MARIO","DR_MARIO_64","LUIGI_MANSION","YOSHI_WOOLLY_WORLD","CAPTAIN_TOAD_TREASURE_TRACKER","WARIOWARE_TOUCHED","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG","DONKEY_KONG_JR","DONKEY_KONG_COUNTRY","KIRBY_DREAM_LAND","KIRBY_ADVENTURE","KID_ICARIUS","KID_ICARIUS_UPRISING","MEGA_MAN","METROID","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_SHADOW_DRAGON","FIRE_EMBLEM_RADIANT_DAWN","FIRE_EMBLEM_AWAKENING","POKEMON_RED","POKEMON_GREEN","POKEMON_BLUE","POKEMON_YELLOW","POKEMON_DIAMOND","POKEMON_PEARL","POKEMON_X","POKEMON_Y","PIKMIN","PIKMIN_3","THE_LEGEND_OF_ZELDA","ZELDA_II_THE_ADVENTURE_OF_LINK","THE_LEGEND_OF_ZELDA_A_LINK_TO_THE_PAST","THE_LEGEND_OF_ZELDA_OCARINA_OF_TIME","THE_LEGEND_OF_ZELDA_MAJORA_MASK","THE_LEGEND_OF_ZELDA_THE_WIND_WAKER","THE_LEGEND_OF_ZELDA_TWILIGHT_PRINCESS","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","EARTHBOUND","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING","ANIMAL_CROSSING_WILD_WORLD","ANIMAL_CROSSING_CITY_FOLK","ANIMAL_CROSSING_NEW_LEAF","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","SWAPNOTE","NINTENDO_BADGE_ARCADE","MONSTER_MANOR","GAMECENTER_CX","CORO_COR0_COMIC","FAMITSU","MERCENDES_BENZ","FAMICOM_DISK_SYSTEM","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","HELLO_KITTY","MY_MELODY","SHAUN_THE_SHEEP","BRAIN_AGE_TRAIN_YOUR_BRAIN_IN_MINUTES_A_DAY","AbstractProvider","ContentTranslationComponent","properties","namespace","Function","Image","ImageFromVariable","SingleImage","AnimatedImages","variable","isSquared","className","style","imagesProperties","appliedStyle","source","fallbackName","imageProperties","src","alt","partialId","images","displayAnimations","displayEveryImages","otherParameters","id","otherParametersExcludingStyle","ObjectHolders","Error","NULL","TRUE","FALSE","GameContentTranslationComponent","GamePropertyContainer","structure","superMarioMaker","superMarioMakerForNintendo3DS","superMarioMaker2","GamePropertyProvider","argumentsReceived","everyContainers","if","isNotMet","GameStructureProvider","EmptyStringName","route","partialPath_or_name_or_location","simpleRoute","everySimpleRoutes","path","pathName","pathname","alternativeEnglishName","isWhilePlaying","WHILE_PLAYING","EDITOR","link","_groupLink","_entityLink","alternativeAcronym","GENERAL_ENTITY_LIMIT_WHILE_PLAYING","POWER_UP_ENTITY_LIMIT_WHILE_PLAYING","LOOSE_COIN_LIMIT","COIN","SOUND_EFFECT_LIMIT","CORPSE_LIMIT","PROJECTILE_LIMIT","LIGHT_SOURCE_LIMIT","GROUND_LIMIT","BLOCK_LIMIT","PLATFORM_OR_SLOPE_OR_CONVEYOR_BELT_OR_PIPE_OR_VINE_LIMIT","CLEAR_PIPE_LIMIT","CLEAR_PIPE","GROWN_VINE_LIMIT","VINE","CHECKPOINT_FLAG_LIMIT","CHECKPOINT_FLAG","TRACK_LIMIT","TRACK","SNAKE_BLOCK_LIMIT","SNAKE_BLOCK","EXCLAMATION_BLOCK_LIMIT","EXCLAMATION_MARK_BLOCK","TRACK_BLOCK_LIMIT","TRACK_BLOCK","ICICLE_LIMIT","ICICLE","ONE_WAY_WALL_OR_ARROW_SIGN_OR_DASH_BLOCK_LIMIT","ENTITY_HELD_BY_A_TWISTER_LIMIT","TWISTER","SNOWBALL_THROWN_BY_A_SPIKE_LIMIT","SNOWBALL","SPIKE","CLEAR_CONDITION_ENTITY_AMOUNT_LIMIT","RENDERED_OBJECT_LIMIT","KEY_COLLECTED_LIMIT","_10_OR_30_OR_50_COIN_LIMIT","PINK_COIN_LIMIT","PINK_COIN","POWER_UP_ENTITY_LIMIT_EDITOR","PLAYER_FIREBALL","FIREBALL_THROWN_BY_A_PLAYER","PLAYER_SUPERBALL","SUPERBALL_THROWN_BY_A_PLAYER","PLAYER_BOMB","BOMB_THROWN_BY_A_LINK","PLAYER_BUILDER_BOX","BUILDER_BOX_THROWN_BY_A_PLAYER","PLAYER_BOOMERANG","BOOMERANG_THROWN_BY_A_PLAYER","PLAYER_CANNONBALL","CANNONBALL_THROWN_BY_A_PLAYER","HATCHED_YOSHI_LIMIT","GENERAL_ENTITY_LIMIT_EDITOR","CHARVAARGH_LIMIT","CHARVAARGH","PIRANHA_CREEPER_LIMIT","PIRANHA_CREEPER","BOWSER_AND_BOWSER_JR_LIMIT","BOOM_BOOM_AND_POM_POM_LIMIT","KOOPALING_LIMIT","ANGRY_SUN_OR_MOON_LIMIT","PHANTO_LIMIT","PHANTO","KOOPA_TROOPA_CAR_LIMIT","KOOPA_TROOPA_CAR","WARP_DOOR_LIMIT","WARP_BOX_LIMIT","WARP_PIPE_LIMIT","PIPE","Tooltip","option","triggers","on","elementId","useEffect","TooltipInstance","defaultStartingIndex","DEFAULT_STARTING_INDEX","_set","startingIndex","endingIndex","defaultStartingValue","defaultLength","internalIndex","valueFound","DEFAULT_INDEX_IF_NOT_FOUND","toMap","oldLength","deleteProperty","enumeration","shortImagePath","getReference","OriginalGameStyles","gameStyles_smm1","gameStyle","AbstractImageBuilder","simpleImageName","imageNumber","__gameStyles","gameStyles","_addGameStyle","notGameStyles","_setGameStyle","_gameStyles","_notGameStyles","_clearGameStyle","setGameStyle","setNotGameStyle","ClearConditionImageContainer","ClearConditionImageBuilder","ending","gamePath_clearCondition","amountOfImages","_value","callbackThatReturnNumbers","number","_getImagePath","_createNewMap","_getAmountBasedOnValue","_createImages","EmptyClearConditionImage","ClearConditionImageFactory","builder_or_image","setAllGameStyles","AbstractImageWithTimesThemesAndGameStyles","defaultImages","_createEveryGameStyles","_createEveryThemes","_createEveryTimes","expectEmpty","gameStyle_or_theme_or_time","theme_or_time","time","_getByGameStyle","_getByTheme","_getByTime","theme","imagesFromMap","_defaultImages","_everyThemes","_everyTimes","_getSpecificImage","_everyGameStyles","EditorImageContainer","courseThemes","EditorImageBuilder","times","themes","_selectedMap","_setType","_setDefaultType","_add","__overrideDefaultAmounts","_setOverrideDefaultAmounts","setTheme","setNightTheme","gamePath_editor","timeIterator","nextTime","next","done","_overrideImages","_overrideDefaultAmounts","defaultType","_defaultType","_type","returnedMap","timeMap","gameStyleMap","originalGameStyle","isSelected","getGameName","_createDefaultImages","__times","__themes","notThemes","overrideMap","__overrideImages","EditorImageFactory","EmptyEditorImage","EditorVoiceSoundRegionalContainer","regularFileName","europeanFileName","EditorVoiceSoundSingleContainer","fileName","EmptyEditorVoiceSound","EditorVoiceSoundFactory","sound","AbstractEditorVoiceSoundHolder","_createFileName","EditorVoiceSoundHolderWithSingingPartBefore","_simpleFileName","EditorVoiceSoundHolderWithVoiceBefore","EntityReferenceHolderContainer","references","EditorVoices","editorVoiceSound","create","_createEntityReferences","entityReferences","START_GROUND","GOAL_GROUND","STEEP_SLOPE","GENTLE_SLOPE","SPIKE_TRAP","JELECTRO","SEA_URCHIN","SPIKE_BLOCK","MUSHROOM_PLATFORM","SEMISOLID_PLATFORM","BRIDGE","BLOCK","BRICK_BLOCK","CRISTAL_BLOCK","ROTATING_BLOCK","HARD_BLOCK","ROCK_BLOCK","QUESTION_MARK_BLOCK","HIDDEN_BLOCK","NOTE_BLOCK","DONUT_BLOCK","CLOUD_BLOCK","ON_OFF_SWITCH","DOTTED_LINE_BLOCK","P_BLOCK","BLINKING_BLOCK","ICE_BLOCK","FROZEN_COIN","TEN_COIN","THIRTY_COIN","FIFTY_COIN","SUPER_MUSHROOM","SUPER_MARIO","SUPER_LUIGI","SUPER_TOAD","SUPER_TOADETTE","FIRE_FLOWER","FIRE_MARIO","FIRE_LUIGI","FIRE_TOAD","FIRE_TOADETTE","SUPERBALL_FLOWER","SUPERBALL_MARIO","SUPERBALL_LUIGI","SUPERBALL_TOAD","SUPERBALL_TOADETTE","MYSTERY_MUSHROOM","COSTUME_MARIO","WEIRD_MUSHROOM","WEIRD_MARIO","MASTER_SWORD","LINK","BIG_MUSHROOM_SMM1","BIG_MUSHROOM_CLASSIC","BIG_MUSHROOM_MODERN","BIG_MUSHROOM_SMM2","BIG_MUSHROOM","BIG_MARIO","BIG_LUIGI","BIG_TOAD","BIG_TOADETTE","SMB2_MUSHROOM","SMB2_MARIO","SMB2_LUIGI","SMB2_TOAD","SMB2_TOADETTE","SUPER_LEAF","RACCOON_MARIO","RACCOON_LUIGI","RACCOON_TOAD","RACCOON_TOADETTE","FROG_SUIT","FROG_MARIO","FROG_LUIGI","FROG_TOAD","FROG_TOADETTE","CAPE_FEATHER","CAPE_MARIO","CAPE_LUIGI","CAPE_TOAD","CAPE_TOADETTE","POWER_BALLOON","BALLOON_MARIO","BALLOON_LUIGI","BALLOON_TOAD","BALLOON_TOADETTE","PROPELLER_MUSHROOM","PROPELLER_MARIO","PROPELLER_LUIGI","PROPELLER_TOAD","PROPELLER_TOADETTE","SUPER_ACORN","FLYING_SQUIRREL_MARIO","FLYING_SQUIRREL_LUIGI","FLYING_SQUIRREL_TOAD","FLYING_SQUIRREL_TOADETTE","SUPER_BELL","CAT_MARIO","CAT_LUIGI","CAT_TOAD","CAT_TOADETTE","SUPER_HAMMER","BUILDER_MARIO","BUILDER_LUIGI","BUILDER_TOAD","BUILDER_TOADETTE","BOOMERANG_FLOWER","BOOMERANG_MARIO","BOOMERANG_LUIGI","BOOMERANG_TOAD","BOOMERANG_TOADETTE","CANNON_BOX","PROPELLER_BOX","GOOMBA_MASK","BULLET_BILL_MASK","RED_POW_BOX","SUPER_STAR","ONE_UP_MUSHROOM","ROTTEN_MUSHROOM","SHOE_GOOMBA","STILETTO_GOOMBA","YOSHI_EGG","RED_YOSHI_EGG","GOOMBA","GALOOMBA","GOOMBRAT","GOOMBUD","KOOPA_TROOPA","GREEN_KOOPA_TROOPA","RED_KOOPA_TROOPA","DRY_BONES","PARABONES","DRY_BONES_SHELL","BUZZY_BEETLE","PARA_BEETLE","BUZZY_SHELL","SPINY","WINGED_SPINY","SPINY_EGG","SPINY_SHELL","SPIKE_TOP","WINGED_SPIKE_TOP","FAST_SPIKE_TOP","FAST_WINGED_SPIKE_TOP","SKIPSQUEAK","SPINY_SKIPSQUEAK","ANT_TROOPER","HORNED_ANT_TROOPER","STINGBY","CHEEP_CHEEP","BLURPS","DEEP_CHEEP","FISH_BONE","BLOOPER","BLOOPER_NANNY","PORCUPUFFER","WIGGLER","ANGRY_WIGGLER","PIRANHA_PLANT","JUMPING_PIRANHA_PLANT","FIRE_PIRANHA_PLANT","MUNCHER","CHAIN_CHOMP","UNCHAINED_CHOMP","SPIKE_BALL","LAKITU","LAKITU_CLOUD","BOO","STRETCH","BOO_BUDDIES","PEEPA","BOB_OMB","LIT_BOB_OMB","POKEY","SNOW_POKEY","THWOMP","MONTY_MOLE","ROCKY_WRENCH","MAGIKOOPA","HAMMER_BRO","SLEDGE_BRO","FIRE_BRO","HEAVY_FIRE_BRO","LAVA_BUBBLE","MECHAKOOPA","BLASTA_MECHAKOOPA","ZAPPA_MECHAKOOPA","BULLY","BILL_BLASTER","BULL_EYE_BLASTER","BANZAI_BILL","BULL_EYE_BANZAI","CAT_BANZAI_BILL","CANNON","RED_CANNON","BURNER","FIRE_BAR","SKEWER","KOOPA_CLOWN_CAR","JUNIOR_CLOWN_CAR","FIRE_KOOPA_CLOWN_CAR","FIRE_JUNIOR_CLOWN_CAR","GRINDER","SUN","ANGRY_SUN","MOON","BOWSER","MEOWSER","BOWSER_JR","BOOM_BOOM","POM_POM","LARRY","IGGY","WENDY","LEMMY","ROY","MORTON","LUDWIG","BUMPER","SWINGING_CLAW","ONE_WAY_WALL","TREE","ARROW_SIGN","DASH_BLOCK","FAST_SNAKE_BLOCK","CONVEYOR_BELT","FAST_CONVEYOR_BELT","MUSHROOM_TRAMPOLINE","ON_OFF_TRAMPOLINE","LIFT","FLIMSY_LIFT","CLOUD_LIFT","SEESAW","LAVA_LIFT","FAST_LAVA_LIFT","CRATE","KEY","CURSED_KEY","TRAMPOLINE","HOP_CHOPS","POW_BLOCK","RED_POW_BLOCK","P_SWITCH","WARP_DOOR","P_WARP_DOOR","KEY_DOOR","WARP_BOX","WARP_BOX_WITH_KEY","WING","InGameImage_SMM1Container","courseThemes_smm1","gameStyle_or_theme","InGameImage_SMM1Builder","gamePath_inGameSmm1","EmptyInGameImage","InGameImageFactory","UnusedImage_BigMushroomContainer","UnusedImageBuilder","UnusedImage_BigMushroomBuilder","identifier","amount_or_images","_","_identifierMap","UnusedImage_RegularContainer","UnusedImage_RegularBuilder","imagesMap","imagesArray","EmptyUnusedImage_BigMushroom","all","EmptyUnusedImage_Regular","UnusedImageFactory","EMPTY_UNUSED_IMAGES","__createGroundEditorImage","_createEditorImage","_createClearConditionImage","_createInGameImage","_createUnusedImage","START_BLOCK","OCCLUDE_BLOCK","WATER","LAVA","POISON","setAmount","setOnlySM3DW","setNotSM3DW","hasNoDefaultImage","setImage","setDefaultAmount","EMPTY_BLOCK","MUSIC_BLOCK","setAsPowerUp","ARROW_THROWN_BY_A_LINK","SHOE","STILETTO","YOSHI","FIRE_THROWN_BY_A_YOSHI","POISON_THROWN_BY_A_YOSHI","BONE_THROWN_BY_A_YOSHI","WRENCH_THROWN_BY_A_YOSHI","HAMMER_THROWN_BY_A_YOSHI","RED_YOSHI","FIRE_THROWN_BY_A_RED_YOSHI","GREEN_BEACH_KOOPA","RED_BEACH_KOOPA","GREEN_KOOPA_SHELL","RED_KOOPA_SHELL","BONE_THROWN_BY_A_DRY_BONES","setAsDifferentInSMBAndSMB3","WINGED_SPINY_PROJECTILE","BABY_BLOOPER","FIREBALL_THROWN_BY_A_FIRE_PIRANHA_PLANT","CHAIN_CHOMP_STUMP","setAsSnow","waitImages","outImages","WRENCH_THROWN_BY_A_ROCKY_WRENCH","MAGIKOOPA_PROJECTILE","HAMMER_THROWN_BY_A_HAMMER_SLEDGE_BRO","FIREBALL_THROWN_BY_A_HEAVY_FIRE_BRO","HOMING_MISSILE_THROWN_BY_A_BLASTA_MECHAKOOPA","ELECTRICITY_BEAM_THROWN_BY_A_ZAPPA_MECHAKOOPA","BULLET_BILL","BULL_EYE_BILL","CAT_BULLET_BILL","CANNONBALL","RED_CANNONBALL","FIRE_THROWN_BY_A_FIRE_KOOPA_JUNIOR_CLOWN_CAR","CAR","FIRE_THROWN_BY_A_BOWSER","FALLING_FIRE_THROWN_BY_A_BOWSER","FIRE_THROWN_BY_A_BOWSER_JR","POM_POM_CLONE","SHURIKEN_THROWN_BY_A_POM_POM","LARRY_WAND","LARRY_PROJECTILE","IGGY_WAND","IGGY_PROJECTILE","WENDY_WAND","CANDY_RING_THROWN_BY_A_WENDY","LEMMY_WAND","MAGIC_BALL_THROWN_BY_A_LEMMY","ROY_WAND","ROY_PROJECTILE","MORTON_WAND","MORTON_THROWN_PROJECTILE","MORTON_GROUND_PROJECTILE","LUDWIG_WAND","LUDWIG_PROJECTILE","GOAL_POLE","GOAL_WITH_CARDS","GIANT_GATE","STONE","PARACHUTE","TOAD","CAGED_TOADETTE","BUBBLE","window","options","DEFAULT_OPTIONS","getOrCreateInstance","inserted","onInserted","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","addEventListener","event","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","ClassContainingANameAndACategory","category","categoryContainer","categoryNameContainer","GameStructureContainer","TranslationUtility","translation","keyMap","replaceInTranslation","testTranslation","OPTION_TO_RETURN_OBJECT","argumentsFound","matchAll","STARTING_REGEX","indexOf","ENDING_CHARACTER","STARTING_LENGTH","splitArguments","STARTING_OR_ENDING_REGEX","splitValue","finalArguments","j","firstElement","secondElement","console","warn","props","STARTING_CHARACTER","STARTING_CHARACTER_LENGTH","ENDING_CHARACTER_LENGTH","ENDING_REGEX","ENDING_LENGTH","returnObjects","interpolation","skipOnVariables","htmlElement","getElementById","_createInstance","__referencesMaps","instanceReturned","staticInstance","AnyTranslationComponent","AnyTranslationComponentByProperty","AnyTranslationComponentByChildren","AnyTranslationComponentBySimpleProperty","translationKey","useTranslation","t","isReplaceNotNull","translationReturnValue","replaceAndInterpretTranslation","englishCommonText","AbstractEntityPropertyComponent","enumInstances","isInEnumInstance","enumInstance","_renderSingleComponent","AbstractEntityPropertyThatCanDisplayAllComponent","EmptyEntityCategory","EmptyEntityReference","everyGameStyleReferences","everyThemeReferences","everyTimeReferences","everyReferences","propertyContainer","EmptyIsInProperty","gameContainer","gameStyleContainer","themeContainer","timeContainer","limitContainer","editorLimitContainer","editorLimit_smm1And3ds","editorLimit_smm2","isUnknown_editorLimit_smm2","isInGeneralLimitWhilePlayingContainer","isInGeneralLimitWhilePlaying","isInGeneralLimitWhilePlayingComment","isInGlobalGeneralLimitWhilePlayingContainer","isInGlobalGeneralLimitWhilePlaying","isInGlobalGeneralLimitWhilePlayingComment","isInPowerUpLimitWhilePlayingContainer","isInPowerUpLimitWhilePlaying","isInProjectileLimitWhilePlayingContainer","isInProjectileLimitWhilePlaying","isInProjectileLimitWhilePlayingComment","otherLimitWhilePlayingContainer","otherLimitWhilePlaying","otherLimitWhilePlayingComment","instrumentContainer","instruments","canMakeASoundOutOfAMusicBlockContainer","canMakeASoundOutOfAMusicBlock","canMakeASoundOutOfAMusicBlockComment","referencesContainer","getReferenceFrom","TextComponent","classes","otherProperties","getOwnPropertyNames","releaseDate","SMM_V1_00","SMM_V1_01","Date","SMM_V1_10","SMM_V1_20","SMM_V1_21","SMM_V1_30","SMM_V1_31","SMM_V1_32","SMM_V1_40","SMM_V1_41","SMM_V1_42","SMM_V1_43","SMM_V1_44","SMM_V1_45","SMM_V1_46","SMM_V1_47","SMM3DS_V1_00","SMM3DS_V1_02","SMM3DS_V1_03","SMM3DS_V1_04","SMM3DS_V1_05","SMM2_V1_0_0","SMM2_V1_1_0","SMM2_V2_0_0","SMM2_V3_0_0","SMM2_SM3DW_V3_0_0","SMM2_V3_0_1","lazy","translationKey_finishAllCharacterJob","translationKey_finishSelectedPeachJob","translationKey_receiveFeedback","translationKey_rank","translationKey_highScore","translationKey_medal","translationKey_place","translationKey_stamp","possibleAmountInEndlessMarioEasyOrNormal","possibleAmountInEndlessMarioExpertOrSuperExpert","_createAdditionalTranslationKey","job","jobs","course","courses","worldRecord","worldRecords","leaderboard","MultiplayerVersus","MultiplayerCoop","StoryMode","MakerPoints","EndlessChallenge","NinjiSpeedruns","SuperWorld","SuperWorlds","likeImage","characterImage","stampImage","missionTitle","MissionTitle","rank","difficulty","position","upperText","_addArgumentTo","FINISH_ALL_JOBS","_addStoryMode","_addJobs","FINISH_ALL_JOBS_UNDODOG","_addCharacterImage","FINISH_ALL_JOBS_YAMAMURA","FINISH_ALL_JOBS_PARTRICK","FINISH_ALL_JOBS_SOUNDFROG","FINISH_ALL_JOBS_MR_ERASER","FINISH_1ST_JOB_PEACH","_addPosition","_addMissionTitle","_addJob","FINISH_2ND_JOB_PEACH","FINISH_3RD_JOB_PEACH","HIT_MIDDLE_QUESTION_BLOCK_NEAR_PURPLE_TOAD","entityImage","FINISH_REBUILDING_THE_CASTLE","RECEIVE_A_LIKE","_addLikeImage","RECEIVE_A_COMMENT","RECEIVE_A_LOT_OF_FEEDBACK_1","_addCourse","RECEIVE_A_LOT_OF_FEEDBACK_2","RECEIVE_X_PLAY","LIKE_A_COURSE","POST_A_COMMENT","UPLOAD_A_COURSE","_1_OF_1ST_CLEAR_TO_FINISH_A_COURSE","X_OF_1ST_CLEAR_TO_FINISH_A_COURSE","_addCourses","CLEAR_1_COURSE","CLEAR_X_COURSE","PLAY_X_COURSE","SET_1_WORLD_RECORD","_addWorldRecord","HOLD_X_WORLD_RECORD","_addWorldRecords","WIN_1_MATCH_IN_MULTIPLAYER_VS","_addMultiplayerVS","WIN_X_MATCH_IN_MULTIPLAYER_VS","WIN_CONSECUTIVE_MATCH_IN_MULTIPLAYER_VS","RANK_C_IN_MULTIPLAYER_VS","_addRank","RANK_B_IN_MULTIPLAYER_VS","RANK_A_IN_MULTIPLAYER_VS","RANK_S_IN_MULTIPLAYER_VS","RANK_S_PLUS_IN_MULTIPLAYER_VS","CLEAR_1_COURSE_IN_MULTIPLAYER_COOP","_addMultiplayerCoop","CLEAR_X_COURSE_IN_MULTIPLAYER_COOP","X_MAKER_POINT_EARN","_addMakerPoints","HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_EASY","_addEndlessChallenge","_addDifficulty","HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_NORMAL","HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_EXPERT","HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_SUPER_EXPERT","GOLD_MEDAL_ON_THE_LEADERBOARD","medalImage","_addLeaderboard","SILVER_MEDAL_ON_THE_LEADERBOARD","BRONZE_MEDAL_ON_THE_LEADERBOARD","FIRST_PLACE_ON_THE_LEADERBOARD","SECOND_PLACE_ON_THE_LEADERBOARD","THIRD_PLACE_ON_THE_LEADERBOARD","COLLECT_1_STAMP_IN_THE_NINJI_SPEEDRUNS","_addStampImage","_addNinjiSpeedruns","COLLECT_X_STAMP_IN_THE_NINJI_SPEEDRUNS","UPLOAD_A_SUPER_WORLD","_addSuperWorld","CLEAR_1_SUPER_WORLD","CLEAR_X_SUPER_WORLD","_addSuperWorlds","SimpleRouteContainer","renderCallback","AboutApp","EveryPredefinedMessagesApp","EveryCourseTagsApp","EveryEntitiesApp","EveryEntityCategoriesApp","EveryEntityGroupApp","EveryGameStylesApp","EveryGameReferencesApp","EveryEntityLimitsApp","EveryInstrumentsApp","EveryMiiCostumeApp","EveryMiiCostumeCategoriesApp","EveryMysteryMushroomsApp","EveryPowerUpAndRidePriorityApp","EverySoundEffectCategoriesApp","EverySoundEffectsApp","EveryThemesApp","HomeApp","SourcesApp","show","onShow","shown","onShown","hide","onHide","hidden","onHidden","_on","filesName","SNARE_DRUM","STEEL_DRUM","BASS_DRUM","TAIKO","GAMELAN","COWBELL","CYMBAL","HI_HAT","TOM","SYNTHETIC_TOM","WOOD_BLOCK","SLEIGH_BELL","SYNTHETIC_BELL","WIND_CHIMES","GONG","MOKUGYO","KAZOO","MUSIC_BOX","MARIMBA","VIBRAPHONE","TIMPANI","TIMPANI_ROLL","TIMBALES","TUBULAR_BELL","ORGAN","PIPE_ORGAN","GUITAR_LONG","ELECTRIC_GUITAR","ACOUSTIC_GUITAR","BASS","ELECTRIC_BASS","SYNTHETIC_BASS","SUB_BASS","BASS_GLISSANDO","OUD","SANTUR","SHAMISEN","PIANO_1","PIANO_2","PIANO_4TH_A","REVERSE_PIANO","HONKY_TONK_PIANO","PIZZICATO_STRING","STACCATO_STRING","HARPSICHORD","RECORDER","SYNTHESIZER","SYNTHESIZER_CHORD","CHORD_CM","FLUTE","SAXOPHONE","TROMBONE","HORN","SYNTHETIC_BRASS","VIOLIN","HARP","ACCORDION_BASS_SOUND","ACCORDION_TREBLE_SOUND","ZURNA","BAGPIPE","ORCHESTRA_HIT","DOG_BARK","CAT_MEOW","CHICKEN","AH","OK","HELLO","YEAH","SQUARE_WAVE","SOUND_EFFECT_1","NOISE","BOMB","displayAllAsText","_isInAll","_renderComponentForAllAsText","_renderComponentForAllAsImages","_render","PureComponent","EmptyInstrumentProperty","EmptyLimitProperty","AbstractIntermediate","conditionCallback","_conditionCallbackResult","_reference","exception","imageName","TERRAIN","ITEM","ENEMY","GIZMO","soundEffectCategory","FEELINGS","STINGERS","REACTIONS","ANIMATIONS","MUSIC","HEADGEAR","TOP","COSTUME","BOTTOM","_createReplaceComponent","routeName","to","SPECIAL_EFFECT_ON_ENTITIES","entities","_createEntitiesLink","SCREEN_UPSIDE_DOWN","DARK","players","_createPlayersLink","WIND","SLIPPERY","LOW_GRAVITY","underwaterImage","_createUnderwaterImage","POISON_LIQUID","water","poison","ENTITIES_IN_WATER","CHARACTERS_IN_WATER","ID","GithubButton","title","placement","href","ModalInstance","Modal","hidePrevented","onHidePrevented","HIDE_PREVENTED_EVENT","Default","ModalButton","elementToShow","onClick","getInstance","AbstractNavigationButton","isTopButton","_isTopButton","_id","contentValue","_getContent","willBeHiddenOnShorterScreen","_tooltipPlacement","_addedClass","LanguageChangerButton","DateDayLanguages","SimpleDate","year","month","day","date","parts","newDayComponent","Footer","languageChanger","AbstractGroup","isHidden","elements","isDisabled","onClickCallback","_renderElement","AbstractGroupWithSingleImage","englishNameInHtml","GameGroup","GameStyleGroup","ImageAnimations","SEPARATED","YES","NO","Images","GlobalThemeOption","dayValue","nightValue","add_or_remove_or_reverse","ALL","NONE","onNight","onDay","isAllOrNone","SimpleSound","Sounds","NameComponent","YesOrNoResultTextComponent","BooleanTextComponent","BooleanResultTextComponent","Texts","GlobalAppOption","AbstractAppOption","IMAGES","IMAGE_ANIMATIONS","SOUNDS","TEXTS","SMM1","SMM3DS","SMM2","SMB","SMB3","SMW","NSMBU","SM3DW","ThemeGroup","hasSMM2Selected","isDisabledNight","role","optionValue","reverseDayValue","reverseNightValue","timeValues","smallImagePath","TimeGroup","GlobalOptionComponent","state","createDefaultState","imageAnimations","imageAnimationsValue","texts","textsValue","imagesValue","sounds","soundsValue","smm1","smm1Value","smm3ds","smm3dsValue","smm2","smm2Value","isNoGame","isSmm1Or3DSExclusive","everyThemeOptions","disabled","Component","DisplayViewRouteButton","tooltipValue","divId","useLocation","routeValue","DisplayViewBody","isSMM2Selected","pluralName","MiiCostume","powerUps","rides","Course","Tag","tag","tags","predefinedMessages","LanguageChangerSingleLink","callbackToSetLanguage","location","englishNameAsId","_callbackToSetLanguage","buttonId","createTooltip","labelId","labelKey","htmlFor","linkId","LanguageTranslationComponent","LanguageChangerLink","childrenLanguages","autoComplete","defaultChecked","LanguageChangerBody","containerId","divContainerId","useState","everyLanguagesShown","ModalBody","ModalContainer","verticallyCentered","modalSize","modalDialogProperties","modalDialogClassName","otherModalDialogProperties","modalContentProperties","modalContentClassName","otherModalContentProperties","ModalFooter","successButtonProperties","successButton","cancelButtonProperties","cancelButton","createSuccessButton","createCancelButton","ModalHeader","modalTitle","titleProperties","titleClassName","otherTitleProperties","closeButtonProperties","closeButtonClassName","otherCloseButtonProperties","SearchBody","ModalContainers","languageId","languageDivId","parameter","parameterId","parameterContent","displayView","displayViewId","displayViewDivId","search","searchId","searchDivId","DisplayViewButton","HOME_ID","HomeButton","ParameterButton","SearchButton","Navigation","AbstractApp","languageChangerProperties","parametersProperties","_parameterContent","displayViewProperties","searchProperties","_mainContent","themeEnglishNameInHtml","longImagePath","toGameMap","gameEnglishNameInHtml","toGameStyleMap","gameStyleEnglishNameInHtml","SoundEffectComponent","render","soundEffect","isGameNull","isIdentifierNull","SMM1ImagePath","imagePath1","imagePath2","SMM2ImagePath","AbstractDualEntityPropertyComponent","_isInFirst","_renderFirstComponent","_renderSecondComponent","timeEnglishNameInHtml","imageNumber_smm1","imageName_smm2","SHOCK","SCREAM","LAUGHTER","GUFFAW","BOOO","CHEER","BABY","PARTY_POPPER","APPLAUSE","NEAR_MISS","CLATTER","DRAMA","KICK","JUMP","HONK_HONK","PUNCH","OINK","KUH_THUNK","BEEP","NINJA_ATTACK","ZAP","DING_DONG","BZZZT","GLORY","DOOM","AWW","FIREWORKS","AUDIENCE","SCATTING","BIRD_CHIRPING","SPARK","TRADITIONAL","DISTORTION","TWISTY_TURNY","WOOZY","TELEPHONE","FLASH","PEACEFUL","HORROR","BONUS_MUSIC","FESTIVE_MUSIC","RAVE_MUSIC","HEARTBEAT","SILENCE","BIRD_TWEETING_NOISE","CHICKEN_CLUCKING_NOISE","BOSS_MUSIC","FINAL_BOSS","ImageContainer","file","amountOfImagesOnJump","__amountOfImagesOnJump","image","__path","SoundContainer","__property","amountOnSoundEffectOnJump","englishNameOnFile","_createImageContainer","_createSoundContainer","__soundContainer","powerUpCollectedSound","__imageContainers","waitingImage","tauntImage","tauntSound","pressingDownImage","walkImages","runningImages","swimmingImages","jumpImages","jumpSounds","fallingAfterJumpImage","onGroundAfterJumpSound","turningImage","turningSound","climbingImages","goalPoleImages","goalPoleSound","lostALifeSound","YAMAMURA","MARY_O","UNDODOG","MR_GAME_AND_WATCH","MARIO","LUIGI","PROFESSOR_E_GADD","PEACH","DAISY","ROSALINA","CAPTAIN_TOAD","TOADETTE","BIRDO","WARIO","ASHLEY","WALUIGI","SHY_GUY","NABBIT","MARIO_SILVER","MARIO_GOLD","STATUE_MARIO","MARIO_TRIO","KART_MARIO","CAT_PEACH","SKY_POP","BABY_MARIO","MARIO_MB","SIDESTEPPER","SHELLCREEPER","FIGHTER_FLY","GREEN_YARN_YOSHI","PINK_YARN_YOSHI","LIGHT_BLUE_YARN_YOSHI","MEGA_YARN_YOSHI","DIDDY_KONG","LITTLE_MAC","BUBBLES","BIKE","BALLOON_FIGHTER","POPO_AND_NANA","FOREMAN_SPIKE","ZELDA","SHEIK","TOON_LINK","TETRA","TINGLE","GANONDORF","WOLF_LINK","TOTEM_LINK","SAMUS","ZERO_SUIT_SAMUS","VOLLEYBALL_PLAYER","PIT","PALUTENA","DARK_PIT","DONBE","HIKARI","AYUMI_TACHIBANA","MARTH","IKE","LUCINA","ROBIN","CAPTAIN_FALCON","SONIC","KIRBY","KING_DEDEDE","META_KNIGHT","FOX_MCCLOUD","FALCO_LOMBARDI","SLIPPY_TOAD","PEPPY_HARE","ARWING","NESS","LUCAS","MASTER_BELCH","MR_SATURN","BULBASAUR","CHARMANDER","CHARIZARD","SQUIRTLE","PIKACHU","JIGGLYPUFF","MEWTWO","LUCARIO","GRENINJA","VILLAGER","TOM_NOOK","K_K_SLIDER","RESETTI","ROVER","TIMMY_AND_TOMMY","BLATHERS","MABEL","KAPP_N","CELESTE","KICKS","ISABELLE_SUMMER_OUTFIT","ISABELLE_WINTER_OUTFIT","DIGBY","CYRUS","REESE","LOTTIE","CAPTAIN_OLIMAR","WII_BALANCE_BOARD","WII_FIT_TRAINER","SHULK","FELYNE","YU_AYASAKI","DR_KAWASHIMA","DR_LOBE","BARBARA_THE_BAT","STARFY","MALLO","NIKKI","IRIS_ARCHWELL","ARCADE_BUNNY","CHITOGE_KIRISAKI","INKLING_SQUID","INKLING_BOY","INKLING_GIRL","CALLIE","MARIE","ROB","DISKUN","MAHJONG_TILE","KITTY_WHITE","MELODY","ARINO_KACHO","SUPER_MARIO_KUN","NECKY","GLA","NINTENDO_SHIRT","NINTENDO_UNIFORM","BLACK_SHORT_SHORTS","DENIM_JEAN","DENIM_SKIRT","MARIO_CAP","MARIO_OUTFIT","MARIO_SWIM_TRUNKS","FROG_MARIO_RAINCOAT","ONE_UP_HOODIE","PROPELLER_MARIO_HELMET","PROPELLER_MARIO_CLOTHES","SUPER_ACORN_HAT","CAT_MARIO_HEADGEAR","CAT_MARIO_SUIT","SUPERBALL_MARIO_HAT","SUPERBALL_MARIO_SUIT","BUILDER_HARD_HAT","BUILDER_MARIO_OUTFIT","DOCTOR_HEADGEAR","DOCTOR_COAT","LUIGI_CAP","LUIGI_OUTFIT","PRINCESS_PEACH_WIG","PRINCESS_PEACH_DRESS","PRINCESS_PEACH_TENNIS_OUTFIT","ROSALINA_WIG","ROSALINA_DRESS","TOAD_CAP","TOAD_OUTFIT","YOSHI_HAT","YOSHI_SUIT","BOWSER_HEADPIECE","BOWSER_SUIT","BOWSER_JR_HEADPIECE","SLOBBERY_SHIRT","HOVER_CLOWN","KOOPALING_HAWAIIAN_SHIRT","MAGIKOOPA_HAT","MAGIKOOPA_ROBES","CHEEP_CHEEP_HAT","FACEPLANT","SHY_CAP","ROCKY_WRENCH_MANHOLE_LID","POKEY_HAT","SNOW_POKEY_HAT","FIREWORKS_SHIRT","BANZAI_BILL_SHIRT","STAREDOWN_SHIRT","PARENT_AND_CHILD_SKIRT","CHOMP_DOG_SHIRT","FISH_BONE_SHIRT","ANGRY_SUN_SHIRT","HOT_HOT_SHIRT","RUNNING_SHIRT","PHANTO_HOODIE","SKULL_SKIRT","BURNER_SKIRT","WIND_UP_SHOE","STINGBY_SKIRT","THWOMP_SUIT","GOOGOO_ONESIE","KOOPA_TROOPA_SUIT","MUSHROOM_HAIRCLIP","SUPER_MUSHROOM_SHIRT","SUPER_STAR_BARRETTE","SUPER_STAR_FLARES","PIPE_HAT","PIPE_SKIRT","PLATFORM_SKIRT","DOORDUROYS","ANTSY_CORDUROYS","CLOUDWALKER","BOUNCY_SKIRT","SHORT_OF_DOOM","DASH_BLOCK_HOODIE","BIG_SPENDER_SHORTS","QUESTION_MARK_BLOCK_HOODIE","BLOCKSTRIPE_SHIRT","FRIED_CHICKEN_HEADGEAR","FRIED_CHICKEN_HOODIE","EDAMAME_BARRETTE","EDAMAME_CAMISOLE","I_LIKE_YOU_CAMISOLE","WHITE_TANKTOP","LAUGHING_SHIRT","MIDNIGHT_DRESS","ROYAL_CROWN","ROYAL_ATTIRE","FANCY_TOP_HAT","FANCY_TUXEDO","MATRIMONY_DRESS","SUPERB_SUIT","ROBOT_CAP","ROBOT_SUIT","FROG_CAP","REFRESHING_SHIRT","PARTRICK_SHIRT","YAMAMURA_SHIRT","RESET_DRESS","NINJI_CAP","NINJI_SHIRT","NINJI_SLACKS","NINJI_GARB","CHEETAH_HEADGEAR","CHEETAH_TANKTOP","CHEETAH_RUNNERS","CHEETAH_SUIT","FIRE_MARIO_SHIRT","RACOON_MARIO_SHIRT","CAPE_MARIO_SHIRT","FLYING_SQUIRREL_MARIO_SHIRT","CAT_MARIO_SHIRT","WORLD_WEAR","STANDARD","PUZZLE_SOLVING","SPEEDRUN","AUTOSCROLL","AUTO_MARIO","ONE_SCREEN","SHORT_AND_SWEET","PRECISION","SHOOTER","SINGLE_PLAYER","MULTIPLAYER_VERSUS","MULTIPLAYER_COOP","THEMED","ART","SHOWCASE","STORY","EXPLORATION","TECHNICAL","BOSS_BATTLE","GLITCH","TROLL","KAIZO","THANKS","HERE_WE_GO","NICE_WORK","IM_DONE_FOR","SORRY","NO_WORRIES","NICE","HOW","GOTCHA","SO_TOUGH","OOPS","WAHOO","OH_NO","WE_VE_GOT_THIS","TEAMWORK","FOLLOW_ME","HELP","RUN_FOR_IT","JUUUUUMP","HOP_ON","THROW","RESPAWN_WITH_VINE","RESPAWN_AS_QUESTION_MARK_BLOCK","ALWAYS_KNOW_VISUALLY_AMOUNT_OF_COIN","NEVER_KNOW_VISUALLY_AMOUNT_OF_COIN","ONLY_1ST_SOUND_OF_PINK_COIN","SPAWN_ONLY_1_POWER_UP","SPAWN_1_TO_4_POWER_UPS_FROM_AMOUNT_OF_PLAYERS","EXPELLED_POWER_UP_FROM_BLOCK","ALWAYS_FINAL_POWER_UP","RESPAWN_AFTER_10_SEC","CAN_RESPAWN_AT_CP","RESPAWN_IN_BLOCK_IF_PLAYER_DIE","AbstractEntity","gameStyleOrThemeOrTime","toCourseThemeMap","toTimeMap","toLimitMap","toLimitInTheEditorMap","toLimitWhilePlayingMap","_testCategory","_testProperty","NOT_APPLICABLE","EntityContainer","EntityReferencesContainer","AbstractExclusiveSMM2Entity","ExclusiveSM3DWEntityContainer","ExclusiveSMM1EntityContainer","ExclusiveSMM2EntityContainer","GameStylePropertyContainer","GameStylePropertyProvider","InstrumentPropertyContainer","InstrumentPropertyProvider","LimitPropertyContainer","editorLimit","powerUpLimit","projectileLimit","otherLimit","generalLimit","generalGlobalLimit","editorLimits","newValues","LimitPropertyProvider","instrument","PropertyThatCanBeUnknownWithCommentContainer","ThemePropertyContainer","ThemePropertyProvider","TimePropertyContainer","TimePropertyProvider","EntityBuilder","isInProperty","isInSMM1","isInSMM2","categoryInTheEditor","isIn","limits","PropertyInstanceContainer","superMarioBros","superMarioBros3","superMarioWorld","newSuperMarioBrosU","superMario3DWorld","ground","underground","underwater","desert","snow","sky","forest","ghostHouse","airship","castle","night","inSuperMarioBros","inSuperMarioBros3","inSuperMarioWorld","inNewSuperMarioBros","inSuperMario3DWorld","inGroundTheme","inUndergroundTheme","inUnderwaterTheme","inDesertTheme","inSnowTheme","inSkyTheme","inForestTheme","inGhostHouseTheme","inAirshipTheme","inCastleTheme","inDayTheme","inNightTheme","group","splitLink","newBooleanContainer","singleInstrument","limitTemplate","editor","editorLimit_SMM1And3DS","editorLimit_SMM2","whilePlaying","isInGEL","superGlobalGeneralLimit","isSuperGlobal","isInPEL","isInPJL","otherLimitComment","entityLimit","isInSMM3DS","GenericSingleInstanceBuilder","builder","AbstractReferenceToWatch","englishNames","otherReference","referenceType","_addReference","splitReference","_references","_createReferenceHolder","_alreadyAddedName","referenceWatched","_englishNames","referenceToWatchTemplate","referenceWatchedTemplate","Headers","ReferencesToWatchForProduction","singleReference","ReferencesToWatchForTestAndDevelopment","errorIfNeverFound","englishReferenceToWatch","ReferencesToWatch","templateReferences","referencesToWatch","resource","convertToNullableBoolean","convertToNullableBooleanAnd","UNKNOWN_CHARACTER","convertToEmptyableStringAnd","convertToBooleanAnd","INFINITE_CHARACTER","convertToNullableNumberAnd","convertToStringAnd","THIS_REFERENCE","finalContent","addSubReference","testReferences","setReferences","log","inSMBGameStyle","inSMB3GameStyle","inSMWGameStyle","inNSMBUGameStyle","inSM3DWGameStyle","dayLink","nightLink","groundLink","undergroundLink","underwaterLink","desertLink","snowLink","skyLink","forestLink","ghostHouseLink","airshipLink","castleLink","superMarioBrosLink","superMarioBros3Link","superMarioWorldLink","newSuperMarioBrosULink","superMario3DWorldLink","isExclusiveToSuperMarioMaker1","gameStyleTemplate","isExclusiveToSuperMario3DWorld","entityType","firstAppearance","firstAppearanceInMarioMaker","version","firstAppearanceInMarioMaker_version","_createGameTemplateFromAllGames","basic","hasAMushroomVariant","canBeInAParachute","canHaveWings","canContainOrSpawnAKey","isAffectedDirectlyByAnOnOrOffState","canBePutOnATrack","editorLimit_canBePutOnATrack","whilePlaying_canBePutOnATrack","canSpawnOutOfAPipe","canBePutInASwingingClaw","canBeThrownByALakitu","canBePutInALakituCloud","canBePutInAClownCar","canBeFiredOutOfABulletLauncher","canBePutInABlock","canBePutInATree","weight","lightSourceEmitted","isInSMB","lightSourceEmitted_isInSMB","canSurviveInTheLavaOrThePoison","bobOmb","canIgnite","canIgniteABobOmb","canBeBrokenOrKilled","canBeBrokenOrKilledByABobOmb","canBeAffectedByATwister","canGoThroughWalls","inSM3DW","canGoThroughWalls_inSM3DW","canBeStacked","isGlobalGroundOrGlobal","bowserBowserJrMagikoopa","bowser","clownCar","canBeThrownByBowserInClownCar","bowserJr","canBeThrownByBowserJr","canBeThrownByBowserJrInClownCar","magikoopa","transformed","canBeTransformedByMagikoopa","spawn","canBeSpawnedByMagikoopa","wing","canBeSpawnedByWingedMagikoopa","limitAmount","whilePlaying_isInGEL","whilePlaying_isInGEL_isSuperGlobal","whilePlaying_isInPEL","whilePlaying_isInPJL","isInRenderedObjectLimit","whilePlaying_isInObjectRenderedLimit","whilePlaying_otherLimit","whilePlaying_otherLimit_comment","canRespawn","online","canRespawn_online","insideABlock","canRespawn_online_insideABlock","behaviour","solo","behaviour_solo","localCoop","behaviour_localCoop","coop","behaviour_onlineCoop","versus","behaviour_onlineVS","offscreenRange","referencePoint","offscreenSpawningAndDespawningReferencePoint","spawning","horizontal","offscreenSpawningHorizontalRange","vertical","upward","offscreenSpawningUpwardVerticalRange","downward","offscreenSpawningDownwardVerticalRange","despawning","offscreenDespawningHorizontalRange","offscreenDespawningUpwardVerticalRange","offscreenDespawningDownwardVerticalRange","dimension","dimension_maximum","dimension_differentInSM3DW","dimension_maximum_differentInSM3DW","_createEntityNameTemplate","hasANameReferencedInMarioMaker","maximumValue","maximum","valueSM3DW","maximumValueSM3DW","differentInSM3DW","MysteryMushroomContainer","games","unlockPropertyContainer","conditionToUnlockIt","canBeUnlockedByAnAmiibo","soundPropertyContainer","soundEffectWhenCollectedContainer","gameReference","soundEffectOnTauntContainer","soundEffectOnMovementContainer","soundEffectOnJumpContainer","haveMultipleImages","soundEffectOnGroundAfterJumpContainer","soundEffectOnTurnAfterRunContainer","specialMusicInStarModeContainer","soundEffectOnGoalPoleContainer","simpleTranslationKey","soundEffectOnDeathContainer","MysteryMushroomPropertyContainer","unlock","SoundEffectOnDeathContainer","smallDefinition","SoundEffectOnGoalPoleContainer","SoundEffectOnGroundAfterJumpContainer","SoundEffectOnJumpContainer","$3_IMAGES","SoundEffectOnMovementContainer","SoundEffectOnTauntContainer","SoundEffectOnTurnAfterRunContainer","SoundEffectWhenCollectedContainer","SpecialMusicInStarModeContainer","SoundPropertyContainer","valueWhenCollected","gameWhenCollected","valueOnTaunt","gameOnTaunt","valueOnMovement","valueOnJump","gameOnJump","valueOnGroundAfterJump","gameOnGroundAfterJump","valueOnTurnAfterRun","valueInStarMode","gameInStarMode","valueOnGoalPole","typeOnGoalPole","gameOnGoalPole","smallDefinitionOnGoalPole","valueOnDeath","typeOnDeath","gameOnDeath","smallDefinitionOnDeath","UnlockPropertyContainer","UnlockPropertyProvider","MysteryMushroomBuilder","templateBuilder","_getGames","propertyTemplate","movement","hasSoundEffect","collectedTemplate","collected","tauntTemplate","taunt","jump","jumpTemplate","groundAfterJumpTemplate","turnAfterRun","turn","goalPoleTemplate","goalPole","deathTemplate","death","starModeTemplate","hasSpecialMusic","starMode","unlockTemplate","amiibo","gameReferencesMap","soundEffectOnMovement","haveASoundEffectWhenCollected","haveASoundEffectWhenCollected_game","haveASoundEffectOnTaunt","haveASoundEffectOnTaunt_game","haveASoundEffectOnJump","haveASoundEffectOnJump_game","haveASoundEffectOnGroundAfterJump","haveASoundEffectOnGroundAfterJump_game","haveASoundEffectOnTurnAfterRun","haveASoundEffectWhenOnGoalPole","haveASoundEffectWhenOnGoalPole_game","haveASoundEffectWhenOnGoalPole_smallDefinition","haveASoundEffectWhenOnGoalPole_type","haveASoundEffectOnDeath","haveASoundEffectOnDeath_game","haveASoundEffectOnDeath_smallDefinition","haveASoundEffectOnDeath_type","haveASpecialMusicInStarMode","haveASpecialMusicInStarMode_game","ClassContainingANameAndAnAlternative","alternative","alternativeContainer","alternativeNameContainer","AbstractEntityLimitContainer","alternativeLimitContainer","limitContainerInSMM1AndSMM3DS","alternativeLimitContainerInSMM1AndSMM3DS","limitContainerInSMM2","alternativeLimitContainerInSMM2","AlternativeEntityLimitContainer","regularEntityLimit","EmptyEntityLimitAmount","limitAmountInSMM1AndSMM3DS","isUnknownLimitInSMM1AndSMM3DS","limitAmountInSMM2","isUnknownLimitInSMM2","EmptyEntityLimit","alternativeLimitAmountInSMM1AndSMM3DS","isUnknownAlternativeLimitInSMM1AndSMM3DS","alternativeLimitAmountInSMM2","isUnknownAlternativeLimitInSMM2","alternativeAmountComment","amountComment","EntityLimitAmountContainer","limitInSMM1AndSMM3DS","limitInSMM2","EntityLimitContainer","NumberPropertyThatCanBeUnknownContainer","EntityLimitBuilder","newNumberContainer","amountInSMM1And3DS","amountInSMM2","regular","limit_SMM1","limit_SMM1And3DS","limit_SMM2","limit_comment","AbstractTheme","isAvailableFromTheStart","isAvailableFromTheStartContainer","isAvailableFromTheStartInSMM1","isAvailableFromTheStartInSMM3DS","isAvailableFromTheStartInSMM2","CourseThemeContainer","effect","AbstractCourseAndWorldTheme","CourseAndWorldThemeContainer","gameProperty","EmptyWorldTheme","smm2Only","null","CourseOnlyThemeContainer","WorldThemeContainer","EmptyCourseTheme","WorldOnlyThemeContainer","ThemeBuilder","is","in","isInCourseTheme","isInWorldTheme","world","availableFromTheStart","gameTemplate","_createGameTemplateFrom1And2","isAvailableFromTheStart_SMM1","effectInNightTheme","resources","en","englishLanguage","englishContent","gameContent","englishGameContent","entityContent","englishEntityContent","en_AM","americanEnglishContent","en_EU","europeanEnglishContent","fr","frenchLanguage","frenchContent","frenchGameContent","frenchEntityContent","fr_CA","canadianFrenchContent","canadianFrenchGameContent","fr_EU","europeanFrenchContent","europeanFrenchGameContent","de","germanLanguage","germanContent","germanGameContent","germanEntityContent","es","spanishLanguage","spanishContent","spanishGameContent","spanishEntityContent","es_AM","americanSpanishContent","americanSpanishEntityContent","es_EU","europeanSpanishContent","europeanSpanishEntityContent","it","italianLanguage","italianContent","italianGameContent","italianEntityContent","nl","dutchLanguage","dutchContent","dutchGameContent","dutchEntityContent","pt","portugueseLanguage","portugueseContent","portugueseGameContent","portugueseEntityContent","pt_AM","americanPortugueseContent","pt_EU","europeanPortugueseContent","ru","russianLanguage","russianContent","russianGameContent","russianEntityContent","ja","japaneseLanguage","japaneseContent","japaneseGameContent","japaneseEntityContent","zh","chineseLanguage","chineseContent","chineseGameContent","chineseEntityContent","zh_T","traditionalChineseContent","traditionalChineseLanguage","traditionalChineseGameContent","traditionalChineseEntityContent","zh_S","simplifiedChineseContent","simplifiedChineseLanguage","simplifiedChineseGameContent","simplifiedChineseEntityContent","ko","koreanLanguage","koreanContent","koreanGameContent","koreanEntityContent","use","initReactI18next","init","fallbackLng","ns","debug","escapeValue","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","DirectRoute","LoadingApp","redirectToHome","Routes","fallback","FunctionIndexComponent","setAndGetCurrentLanguage","locale","StrictMode","IndexComponent","hasError","error","errorInfo","componentStack","createRoot","EntityBehaviourContainer","isInOnly","isInOnlyContainer","isOnlineOnly","isMultiplayerOnly","linkContainer","groupLink","entityLink","EntityBehaviourIsInOnlyContainer","isInOnlineOnly","isInMultiplayerOnly","EntityBehaviourIsInOnlyProvider","EntityBehaviourLinkContainer","EntityBehaviourLinkProvider","EntityBehaviourBuilder","isOnly","links","entity","isGroupNull","isEntityNull","multiplayer","link_group","link_entity","MiiCostumeContainer","officialNotification","officialNotificationContainer","EmptyOfficialNotificationHolder","OfficialNotificationHolderContainer","OfficialNotificationHolderProvider","OfficialNotificationHolderBuilder","numberFoundInOfficialNotification","MiiCostumeBuilder","officialNotificationName","notificationIfUnlocked","MM2_version","EmptySoundEffectCategory","PlayerSoundEffectTriggerPropertyContainer","onJumpAfterLanding","onTurnAroundAfterBeingAtFullSpeed","onCrouch","after3SecondsOfNonMovementRepeatedly","onPowerUpCollected","whenGettingIntoAEntity","atSpawn","onDamageTaken","whenLosingALife","SoundEffectContainer","playerSoundEffectTriggerContainer","doesTriggerOnPlayerWhenJumpingAfterLanding","doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed","doesTriggerOnPlayerWhenCrouching","doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly","doesTriggerOnPlayerWhenCollectingAPowerUp","doesTriggerOnPlayerWhenGettingIntoAEntity","doesTriggerOnPlayerAtSpawn","doesTriggerOnPlayerWhenTakingDamage","doesTriggerOnPlayerWhenLosingALife","SoundEffectPropertyContainer","playerSoundEffectTrigger","SoundEffectBuilder","isInPropertiesTemplate","trigger","player","playerMovementTriggerTemplate","playerInteractionTriggerTemplate","interaction","playerEnvironmentTriggerTemplate","environment","jumpAfterLanding","turnAroundAfterBeingAtFullSpeed","crouch","after3SecondsRepeatedly","collectPowerUp","getIntoAnEntity","damage","lostALife","doesTrigger_player_jumpAfterLanding","doesTrigger_player_turnAroundAfterBeingAtFullSpeed","doesTrigger_player_crouch","doesTrigger_player_after3SecondsRepeatedly","doesTrigger_player_collectPowerUp","doesTrigger_player_getIntoAnEntity","doesTrigger_player_spawn","doesTrigger_player_damage","doesTrigger_player_lostALife","EntityCategoryContainer","EntityCategoryBuilder","GameReferenceContainer","GameReferenceBuilder","GameStyleContainer","nightDesertWindTranslationKey","GameStyleBuilder","nightDesertWind","direction","frequency","nightDesertWindDirection","nightDesertWindFrequency","SoundEffectCategoryContainer","SoundEffectCategoryBuilder","MiiCostumeCategoryContainer","MiiCostumeCategoryBuilder","CourseTagContainer","isAnOfficialTag","CourseTagBuilder","isOfficial","PredefinedMessageContainer","PredefinedMessageBuilder","InstrumentContainer","InstrumentBuilder"],"mappings":"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","file":"static/js/main.2e770240.chunk.js","sourcesContent":["import type {ClassWithEnglishName}                                                                                                                                                                                                                                                                                                                                                                                                                   from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                                                                                                                                                                                     from '../ClassWithReference';\nimport type {CourseAndWorldTheme}                                                                                                                                                                                                                                                                                                                                                                                                                    from './CourseAndWorldTheme';\nimport type {DayGameName, DayOrNightGameName, EndlessMarioImagePath, EnumArray, EnumArray_OnlyCourseTheme, EnumArray_OnlyCourseTheme_SMM1, EnumArray_OnlyWorldTheme, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, LargeImagePath, Names, NightGameName, Ordinals, PossibleEnglishName, PossibleGameName, PossibleGameName_CourseTheme, PossibleNonNullableValue, PossibleStringValue, PossibleValue, SmallImagePath} from './Themes.types';\nimport type {CourseTheme}                                                                                                                                                                                                                                                                                                                                                                                                                            from './CourseTheme';\nimport type {PossibleOtherEntities}                                                                                                                                                                                                                                                                                                                                                                                                                  from '../entity/Entity';\nimport type {PropertyGetter, PropertyReferenceGetter}                                                                                                                                                                                                                                                                                                                                                                                                from '../PropertyGetter';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                                                        from '../../util/enum/Enum.types';\nimport type {ThemeProperty}                                                                                                                                                                                                                                                                                                                                                                                                                          from '../entity/properties/theme/ThemeProperty';\nimport type {ThemeReferences}                                                                                                                                                                                                                                                                                                                                                                                                                        from '../entity/properties/theme/ThemeReferences';\nimport type {WorldTheme}                                                                                                                                                                                                                                                                                                                                                                                                                             from './WorldTheme';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {EmptyEntity}     from '../entity/EmptyEntity';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\nimport {ThemeComponent}  from './Theme.component';\n\n/**\n * @recursiveReferenceVia {@link ThemeBuilder} → {@link ThemeLoader}\n * @recursiveReference {@link ThemeLoader}\n * @classWithDynamicImport {@link ThemeLoader}\n */\nexport class Themes\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<CourseAndWorldTheme>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        PropertyReferenceGetter<ThemeReferences, PossibleOtherEntities>,\n        PropertyGetter<ThemeProperty> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GROUND =      new class Themes_Ground extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInGroundTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInGroundTheme'] {\n            return referenceProperty.referenceInGroundTheme;\n        }\n\n    }('Ground', 'plain',);\n    public static readonly UNDERGROUND = new class Themes_Underground extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInUndergroundTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInUndergroundTheme'] {\n            return referenceProperty.referenceInUndergroundTheme;\n        }\n\n    }('Underground', 'underground',);\n    public static readonly UNDERWATER =  new class Themes_Underwater extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInUnderwaterTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInUnderwaterTheme'] {\n            return referenceProperty.referenceInUnderwaterTheme;\n        }\n\n    }('Underwater', 'water',);\n    public static readonly DESERT =      new class Themes_Desert extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInDesertTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInDesertTheme'] {\n            return referenceProperty.referenceInDesertTheme;\n        }\n\n    }('Desert', 'desert',);\n    public static readonly SNOW =        new class Themes_Snow extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInSnowTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInSnowTheme'] {\n            return referenceProperty.referenceInSnowTheme;\n        }\n\n    }('Snow', 'snow',);\n    public static readonly SKY =         new class Themes_Sky extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInSkyTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInSkyTheme'] {\n            return referenceProperty.referenceInSkyTheme;\n        }\n\n    }('Sky', 'athletic',);\n    public static readonly FOREST =      new class Themes_Forest extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInForestTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInForestTheme'] {\n            return referenceProperty.referenceInForestTheme;\n        }\n\n    }('Forest', 'woods',);\n    public static readonly GHOST_HOUSE = new class Themes_GhostHouse extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInGhostHouseTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInGhostHouseTheme'] {\n            return referenceProperty.referenceInGhostHouseTheme;\n        }\n\n    }('Ghost House', 'hauntedhouse',);\n    public static readonly AIRSHIP =     new class Themes_Airship extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInAirshipTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInAirshipTheme'] {\n            return referenceProperty.referenceInAirshipTheme;\n        }\n\n    }('Airship', 'airship',);\n    public static readonly CASTLE =      new class Themes_Castle extends Themes {\n\n        protected override _get(property: ThemeProperty,): | boolean | null {\n            return property.isInCastleTheme;\n        }\n\n        public override getReference(referenceProperty: ThemeReferences,): ThemeReferences['referenceInCastleTheme'] {\n            return referenceProperty.referenceInCastleTheme;\n        }\n\n    }('Castle', 'castle',);\n\n    public static readonly VOLCANO =     new class Themes_Volcano extends Themes {\n\n        public override get endlessMarioImagePath() {\n            return null;\n        }\n\n    }('Volcano', 'magma',);\n    public static readonly SPACE =       new class Themes_Space extends Themes   {\n\n        public override get endlessMarioImagePath() {\n            return null;\n        }\n\n    }('Space', 'night',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Themes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, CourseAndWorldTheme>;\n    static #COURSES: EnumArray_OnlyCourseTheme;\n    static #COURSES_SMM1: EnumArray_OnlyCourseTheme_SMM1;\n    static #WORLDS: EnumArray_OnlyWorldTheme;\n\n    #reference?: CourseAndWorldTheme;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n    readonly #gameName: PossibleGameName;\n    #smallImagePath?: SmallImagePath;\n    #largeImagePath?: LargeImagePath;\n    #endlessMarioImagePath?: | EndlessMarioImagePath | null;\n\n    //endregion -------------------- Fields --------------------\n\n    // @ts-ignore\n    protected constructor(enumeration: Themes,)\n    private constructor(englishNameAndImagePath: PossibleEnglishName, gameName: PossibleGameName,)\n    private constructor(englishName_or_enumeration: | PossibleEnglishName | Themes, gameName: PossibleGameName,) {\n        super();\n        if (englishName_or_enumeration instanceof Themes) {\n            this.#englishName = englishName_or_enumeration.#englishName;\n            this.#gameName = englishName_or_enumeration.gameName;\n        } else {\n            this.#englishName = new StringContainer(englishName_or_enumeration);\n            this.#gameName = gameName;\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, CourseAndWorldTheme> {\n        return this.#REFERENCE_MAP ??= Import.ThemeLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): CourseAndWorldTheme {\n        return this.#reference ??= Themes.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get gameName(): PossibleGameName {\n        return this.#gameName;\n    }\n\n    public get courseTheme(): CourseTheme {\n        return this.reference.courseTheme;\n    }\n\n    public get worldTheme(): WorldTheme {\n        return this.reference.worldTheme;\n    }\n\n    public get smallImagePath(): SmallImagePath {\n        return this.#smallImagePath ??= `/${BASE_PATH}/theme/Lyt_E_SceneSmall_${this.gameName}_00.tiff`;\n    }\n\n    public get longImagePath(): LargeImagePath {\n        return this.#largeImagePath ??= `/${BASE_PATH}/theme/Lyt_E_Scene_${this.gameName}_00.tiff`;\n    }\n\n    public get endlessMarioImagePath(): | EndlessMarioImagePath | null {\n        return this.#endlessMarioImagePath ??= `/${BASE_PATH}/theme/WM_GameSkin_${this.gameName as PossibleGameName_CourseTheme}_00^l.tiff`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected _get(property: ThemeProperty,): | boolean | null {\n        return false;\n    }\n\n    public get(property: ThemeProperty,): boolean {\n        return this._get(property) ?? false;\n    }\n\n    public getReference(referenceProperty: ThemeReferences,): PossibleOtherEntities {\n        return [EmptyEntity.get,];\n    }\n\n    public getGameName(name: null, isNightTheme: any,): ''\n    public getGameName<V extends string = string, >(name: | V | null, isNightTheme: false,): | '' | DayGameName<V>\n    public getGameName<V extends string = string, >(name: V, isNightTheme: false,): | '' | DayGameName<V>\n    public getGameName<V extends string = string, >(name: | V | null, isNightTheme: true,): | '' | NightGameName<V>\n    public getGameName<V extends string = string, >(name: V, isNightTheme: true,): | '' | NightGameName<V>\n    public getGameName<B extends boolean = boolean, V extends string = string, >(name: | V | null, isNightTheme: B,): | '' | DayOrNightGameName<B, V>\n    public getGameName<B extends boolean = boolean, V extends string = string, >(name: V, isNightTheme: B,): | '' | DayOrNightGameName<B, V>\n    public getGameName(name: | string | null, isNightTheme: boolean,) {\n        if (name == null)\n            return '';\n        const text = this.gameName;\n        if (text == null)\n            return '';\n        return isNightTheme ? `${name}_${text}_night` : `${name}_${text}`;\n    }\n\n    public renderSingleComponent(isSmallPath: boolean,) {\n        return ThemeComponent.renderSingleComponent(this, isSmallPath,);\n    }\n\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    public static get courseThemes(): EnumArray_OnlyCourseTheme {\n        return this.#COURSES ??= [\n            this.GROUND,\n            this.UNDERGROUND,\n            this.UNDERWATER,\n            this.DESERT,\n            this.SNOW,\n            this.SKY,\n            this.FOREST,\n            this.GHOST_HOUSE,\n            this.AIRSHIP,\n            this.CASTLE,\n        ];\n    }\n\n    public static get courseThemes_smm1(): EnumArray_OnlyCourseTheme_SMM1 {\n        return this.#COURSES_SMM1 ??= [\n            this.GROUND,\n            this.UNDERGROUND,\n            this.UNDERWATER,\n            this.GHOST_HOUSE,\n            this.AIRSHIP,\n            this.CASTLE,\n        ];\n    }\n\n    public static get worldThemes(): EnumArray_OnlyWorldTheme {\n        return this.#WORLDS ??= [\n            this.GROUND,\n            this.UNDERGROUND,\n            this.DESERT,\n            this.SNOW,\n            this.SKY,\n            this.FOREST,\n            this.VOLCANO,\n            this.SPACE,\n        ];\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Themes> {\n        return Themes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Themes = Themes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Themes\n    public static getValue(value: PossibleValue,): | Themes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithAcronym}                                                                                                                                                                                                                                                                            from '../ClassWithAcronym';\nimport type {ClassWithEnglishName}                                                                                                                                                                                                                                                                        from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                                                                          from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                                          from '../ClassWithReference';\nimport type {EnumArray, EnumArray_SMM1, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAcronym, PossibleEnglishName, PossibleGameAcronym, PossibleImagePath, PossibleNonNullableValue, PossibleShortImagePath, PossibleStringValue, PossibleValue} from './GameStyles.types';\nimport type {GameStyle}                                                                                                                                                                                                                                                                                   from './GameStyle';\nimport type {GameStyleProperty}                                                                                                                                                                                                                                                                           from '../entity/properties/gameStyle/GameStyleProperty';\nimport type {GameStyleReferences}                                                                                                                                                                                                                                                                         from '../entity/properties/gameStyle/GameStyleReferences';\nimport type {PossibleOtherEntities}                                                                                                                                                                                                                                                                       from '../entity/Entity';\nimport type {PropertyGetter, PropertyReferenceGetter}                                                                                                                                                                                                                                                     from '../PropertyGetter';\nimport type {StaticReference}                                                                                                                                                                                                                                                                             from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}        from '../../variables';\nimport {Enum}             from '../../util/enum/Enum';\nimport GameStyleComponent from './GameStyle.component';\nimport {Import}           from '../../util/DynamicImporter';\nimport {StringContainer}  from '../../util/StringContainer';\n\n/**\n * @recursiveReferenceVia<{@link GameStyleBuilder}, {@link GameStyleLoader}>\n * @recursiveReference<{@link GameStyleLoader}>\n */\nexport abstract class GameStyles\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<GameStyle>,\n        ClassWithAcronym<PossibleAcronym>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath>,\n        PropertyReferenceGetter<GameStyleReferences, PossibleOtherEntities>,\n        PropertyGetter<GameStyleProperty> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_BROS =       new class GameStyles_SuperMarioBros extends GameStyles {\n\n        public override get(property: GameStyleProperty,): boolean {\n            return property.isInSuperMarioBrosStyle;\n        }\n\n        public override getReference(referenceProperty: GameStyleReferences,): GameStyleReferences['referenceInSuperMarioBrosStyle'] {\n            return referenceProperty.referenceInSuperMarioBrosStyle;\n        }\n\n    }('SMB', 'M1', 'Super Mario Bros.',);\n    public static readonly SUPER_MARIO_BROS_3 =     new class GameStyles_SuperMarioBros3 extends GameStyles {\n\n        public override get(property: GameStyleProperty,): boolean {\n            return property.isInSuperMarioBros3Style;\n        }\n\n        public override getReference(referenceProperty: GameStyleReferences,): GameStyleReferences['referenceInSuperMarioBros3Style'] {\n            return referenceProperty.referenceInSuperMarioBros3Style;\n        }\n\n    }('SMB3', 'M3', 'Super Mario Bros. 3',);\n    public static readonly SUPER_MARIO_WORLD =      new class GameStyles_SuperMarioWorld extends GameStyles {\n\n        public override get(property: GameStyleProperty,): boolean {\n            return property.isInSuperMarioWorldStyle;\n        }\n\n        public override getReference(referenceProperty: GameStyleReferences,): GameStyleReferences['referenceInSuperMarioWorldStyle'] {\n            return referenceProperty.referenceInSuperMarioWorldStyle;\n        }\n\n    }('SMW', 'MW', 'Super Mario World',);\n    public static readonly NEW_SUPER_MARIO_BROS_U = new class GameStyles_NewSuperMarioBrosU extends GameStyles {\n\n        public override get(property: GameStyleProperty,): boolean {\n            return property.isInNewSuperMarioBrosUStyle;\n        }\n\n        public override getReference(referenceProperty: GameStyleReferences,): GameStyleReferences['referenceInNewSuperMarioBrosUStyle'] {\n            return referenceProperty.referenceInNewSuperMarioBrosUStyle;\n        }\n\n    }('NSMBU', 'WU', 'New Super Mario Bros. U',);\n    public static readonly SUPER_MARIO_3D_WORLD =   new class GameStyles_SuperMario3DWorld extends GameStyles {\n\n        public override get(property: GameStyleProperty,): boolean {\n            return property.isInSuperMario3DWorldStyle === true;\n        }\n\n        public override getReference(referenceProperty: GameStyleReferences,): GameStyleReferences['referenceInSuperMario3DWorldStyle'] {\n            return referenceProperty.referenceInSuperMario3DWorldStyle;\n        }\n\n    }('SM3DW', '3W', 'Super Mario 3D World',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GameStyles;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, GameStyle>;\n    static #GAME_STYLES_SMM1?: EnumArray_SMM1;\n\n    #reference?: GameStyle;\n    readonly #acronym;\n    readonly #gameAcronym;\n    readonly #englishNameContainer: StringContainer<PossibleEnglishName>;\n    #imagePath?: PossibleImagePath;\n    #shortImagePath?: PossibleShortImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    // @ts-ignore\n    protected constructor(enumeration: GameStyles,)\n    private constructor(acronym: PossibleAcronym, gameAcronym: PossibleGameAcronym, englishName: PossibleEnglishName,)\n    private constructor(acronym_or_enumeration: | PossibleAcronym | GameStyles, gameAcronym: PossibleGameAcronym, englishName: PossibleEnglishName,) {\n        super();\n        if (acronym_or_enumeration instanceof GameStyles) {\n            this.#acronym = acronym_or_enumeration.acronym;\n            this.#gameAcronym = acronym_or_enumeration.gameAcronym;\n            this.#englishNameContainer = acronym_or_enumeration.#englishNameContainer;\n        } else {\n            this.#acronym = acronym_or_enumeration;\n            this.#gameAcronym = gameAcronym;\n            this.#englishNameContainer = new StringContainer(englishName);\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, GameStyle> {\n        return this.#REFERENCE_MAP ??= Import.GameStyleLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): GameStyle {\n        return this.#reference ??= GameStyles.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get acronym(): PossibleAcronym {\n        return this.#acronym;\n    }\n\n    public get gameAcronym(): PossibleGameAcronym {\n        return this.#gameAcronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishNameContainer.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishNameContainer.getInHtml;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath ??= `/${BASE_PATH}/game style/${this.gameAcronym}_Lyt_Logo_00.tiff`;\n    }\n\n    public get shortImagePath(): PossibleShortImagePath {\n        return this.#shortImagePath ??= `${this.ordinal + 1} - ${this.acronym}` as PossibleShortImagePath;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract get(property: GameStyleProperty,): boolean;\n\n    public abstract getReference(referenceProperty: GameStyleReferences,): PossibleOtherEntities;\n\n    public get renderSingleComponent() {\n        return GameStyleComponent.renderSingleComponent(this);\n    }\n\n\n    public static get everyAcronyms(): readonly PossibleAcronym[] {\n        return this.values.map(limit => limit.acronym);\n    }\n\n    public static get gameStyles_smm1(): EnumArray_SMM1 {\n        return this.#GAME_STYLES_SMM1 ??= [this.SUPER_MARIO_BROS, this.SUPER_MARIO_BROS_3, this.SUPER_MARIO_WORLD, this.NEW_SUPER_MARIO_BROS_U,];\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<GameStyles> {\n        return GameStyles;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends GameStyles = GameStyles, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): GameStyles\n    public static getValue(value: PossibleValue,): | GameStyles | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassThatIsAvailableFromTheStartContainer} from '../core/availableFromTheStart/ClassThatIsAvailableFromTheStart.container';\nimport type {ClassThatIsAvailableFromTheStartProvider}  from '../core/availableFromTheStart/ClassThatIsAvailableFromTheStart.provider';\nimport type {CourseTagLoader}                           from '../core/courseTag/CourseTag.loader';\nimport type {CourseTags}                                from '../core/courseTag/CourseTags';\nimport type {EntityBehaviourLoader}                     from '../core/behaviour/EntityBehaviour.loader';\nimport type {EntityBehaviours}                          from '../core/behaviour/EntityBehaviours';\nimport type {EntityCategoryLoader}                      from '../core/entityCategory/EntityCategory.loader';\nimport type {EntityCategories}                          from '../core/entityCategory/EntityCategories';\nimport type {EntityLimitLoader}                         from '../core/entityLimit/EntityLimit.loader';\nimport type {EntityLimits}                              from '../core/entityLimit/EntityLimits';\nimport type {EntityLimitTypes}                          from '../core/entityLimit/EntityLimitTypes';\nimport type {EntityLoader}                              from '../core/entity/Entity.loader';\nimport type {Entities}                                  from '../core/entity/Entities';\nimport type {GameReferenceLoader}                       from '../core/gameReference/GameReference.loader';\nimport type {GameReferences}                            from '../core/gameReference/GameReferences';\nimport type {GameStyleLoader}                           from '../core/gameStyle/GameStyle.loader';\nimport type {GameStyles}                                from '../core/gameStyle/GameStyles';\nimport type {InstrumentLoader}                          from '../core/instrument/Instrument.loader';\nimport type {Instruments}                               from '../core/instrument/Instruments';\nimport type {MiiCostumeCategories}                      from '../core/miiCostumeCategory/MiiCostumeCategories';\nimport type {MiiCostumeCategoryLoader}                  from '../core/miiCostumeCategory/MiiCostumeCategory.loader';\nimport type {MiiCostumeLoader}                          from '../core/miiCostume/MiiCostume.loader';\nimport type {MiiCostumes}                               from '../core/miiCostume/MiiCostumes';\nimport type {MysteryMushroomLoader}                     from '../core/mysteryMushroom/MysteryMushroom.loader';\nimport type {MysteryMushrooms}                          from '../core/mysteryMushroom/MysteryMushrooms';\nimport type {NightEffects}                              from '../core/nightEffect/NightEffects';\nimport type {OfficialNotifications}                     from '../core/officialNotification/OfficialNotifications';\nimport type {PredefinedMessageLoader}                   from '../core/predefinedMessage/PredefinedMessage.loader';\nimport type {PredefinedMessages}                        from '../core/predefinedMessage/PredefinedMessages';\nimport type {SoundEffectCategories}                     from '../core/soundEffectCategory/SoundEffectCategories';\nimport type {SoundEffectCategoryLoader}                 from '../core/soundEffectCategory/SoundEffectCategory.loader';\nimport type {SoundEffectLoader}                         from '../core/soundEffect/SoundEffect.loader';\nimport type {SoundEffects}                              from '../core/soundEffect/SoundEffects';\nimport type {ThemeLoader}                               from '../core/theme/Theme.loader';\nimport type {Themes}                                    from '../core/theme/Themes';\nimport type {Times}                                     from '../core/time/Times';\nimport type {Versions}                                  from '../core/version/Versions';\n\n/**\n * <p>\n * A class that has for purpose to dynamically import some class\n * that have some heavy dependencies or some recursive dependencies (not direct recursive, but indirect one).\n * </p>\n * <p>\n *     By importing this class, no other classes are imported, they will be imported once the specific method is used.\n *     But to use <u>object deconstruction</u> defeat the whole purpose of this class.\n * </p>\n *\n * @singleton\n */\nexport class DynamicImporter {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: DynamicImporter;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    //region -------------------- Fields --------------------\n\n    //region -------------------- Entity fields --------------------\n\n    #EntityLoader?: typeof EntityLoader;\n    #Entities?: typeof Entities;\n\n    //endregion -------------------- Entity fields --------------------\n    //region -------------------- \"Entity limit\" fields --------------------\n\n    #EntityLimitLoader?: typeof EntityLimitLoader;\n    #EntityLimits?: typeof EntityLimits;\n\n    #EntityLimitTypes?: typeof EntityLimitTypes;\n\n    //endregion -------------------- \"Entity limit\" fields --------------------\n    //region -------------------- \"Entity category\" fields --------------------\n\n    #EntityCategoryLoader?: typeof EntityCategoryLoader;\n    #EntityCategories?: typeof EntityCategories;\n\n    //endregion -------------------- \"Entity category\" fields --------------------\n    //region -------------------- Theme fields --------------------\n\n    #ThemeLoader?: typeof ThemeLoader;\n    #Themes?: typeof Themes;\n\n    #NightEffects?: typeof NightEffects;\n\n    //endregion -------------------- Theme fields --------------------\n    //region -------------------- Time fields --------------------\n\n    #Times?: typeof Times;\n\n    //endregion -------------------- Time fields --------------------\n    //region -------------------- \"Game reference\" fields --------------------\n\n    #GameReferenceLoader?: typeof GameReferenceLoader;\n    #GameReferences?: typeof GameReferences;\n\n    //endregion -------------------- \"Game reference\" fields --------------------\n    //region -------------------- \"Game style\" fields --------------------\n\n    #GameStyleLoader?: typeof GameStyleLoader;\n    #GameStyles?: typeof GameStyles;\n\n    //endregion -------------------- \"Game style\" fields --------------------\n    //region -------------------- \"Entity behaviour\" fields --------------------\n\n    #EntityBehaviourLoader?: typeof EntityBehaviourLoader;\n    #EntityBehaviours?: typeof EntityBehaviours;\n\n    //endregion -------------------- \"Entity behaviour\" fields --------------------\n    //region -------------------- \"Sound effect\" fields --------------------\n\n    #SoundEffectLoader?: typeof SoundEffectLoader;\n    #SoundEffects?: typeof SoundEffects;\n\n    #SoundEffectCategoryLoader?: typeof SoundEffectCategoryLoader;\n    #SoundEffectCategories?: typeof SoundEffectCategories;\n\n    //endregion -------------------- \"Sound effect\" fields --------------------\n    //region -------------------- \"Mystery Mushroom\" fields --------------------\n\n    #MysteryMushroomLoader?: typeof MysteryMushroomLoader;\n    #MysteryMushrooms?: typeof MysteryMushrooms;\n\n    //endregion -------------------- \"Sound effect\" fields --------------------\n    //region -------------------- \"Mii costume\" fields --------------------\n\n    #MiiCostumeLoader?: typeof MiiCostumeLoader;\n    #MiiCostumes?: typeof MiiCostumes;\n\n    #MiiCostumeCategoryLoader?: typeof MiiCostumeCategoryLoader;\n    #MiiCostumeCategories?: typeof MiiCostumeCategories;\n\n    //endregion -------------------- \"Mii costume\" fields --------------------\n    //region -------------------- \"Official notification\" fields --------------------\n\n    #OfficialNotifications?: typeof OfficialNotifications;\n\n    //endregion -------------------- \"Official notification\" fields --------------------\n    //region -------------------- \"Course tag\" fields --------------------\n\n    #CourseTags?: typeof CourseTags;\n    #CourseTagLoader?: typeof CourseTagLoader;\n\n    //endregion -------------------- \"Course tag\" fields --------------------\n    //region -------------------- \"Predefined message\" fields --------------------\n\n    #PredefinedMessages?: typeof PredefinedMessages;\n    #PredefinedMessageLoader?: typeof PredefinedMessageLoader;\n\n    //endregion -------------------- \"Predefined message\" fields --------------------\n    //region -------------------- Instrument fields --------------------\n\n    #Instruments?: typeof Instruments;\n    #InstrumentLoader?: typeof InstrumentLoader;\n\n    //endregion -------------------- Instrument fields --------------------\n    //region -------------------- Version fields --------------------\n\n    #Versions?: typeof Versions;\n\n    //endregion -------------------- Version fields --------------------\n    //region -------------------- Other fields --------------------\n\n    #ClassThatIsAvailableFromTheStartContainer?: typeof ClassThatIsAvailableFromTheStartContainer;\n    #ClassThatIsAvailableFromTheStartProvider?: typeof ClassThatIsAvailableFromTheStartProvider;\n\n    //endregion -------------------- Other fields --------------------\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Entity getter methods --------------------\n\n    public get EntityLoader(): typeof EntityLoader {\n        return this.#EntityLoader ??= require('../core/entity/Entity.loader').EntityLoader;\n    }\n\n    public get Entities(): typeof Entities {\n        return this.#Entities ??= require('../core/entity/Entities').Entities;\n    }\n\n\n    //endregion -------------------- Entity getter methods --------------------\n    //region -------------------- \"Entity limit\" getter methods --------------------\n\n    public get EntityLimitLoader(): typeof EntityLimitLoader {\n        return this.#EntityLimitLoader ??= require('../core/entityLimit/EntityLimit.loader').EntityLimitLoader;\n    }\n\n    public get EntityLimits(): typeof EntityLimits {\n        return this.#EntityLimits ??= require('../core/entityLimit/EntityLimits').EntityLimits;\n    }\n\n\n    public get EntityLimitTypes(): typeof EntityLimitTypes {\n        return this.#EntityLimitTypes ??= require('../core/entityLimit/EntityLimitTypes').EntityLimitTypes;\n    }\n\n    //endregion -------------------- \"Entity limit\" getter methods --------------------\n    //region -------------------- \"Entity category\" getter methods --------------------\n\n    public get EntityCategoryLoader(): typeof EntityCategoryLoader {\n        return this.#EntityCategoryLoader ??= require('../core/entityCategory/EntityCategory.loader').EntityCategoryLoader;\n    }\n\n    public get EntityCategories(): typeof EntityCategories {\n        return this.#EntityCategories ??= require('../core/entityCategory/EntityCategories').EntityCategories;\n    }\n\n    //endregion -------------------- \"Entity category\" getter methods --------------------\n    //region -------------------- Theme getter methods --------------------\n\n    public get ThemeLoader(): typeof ThemeLoader {\n        return this.#ThemeLoader ??= require('../core/theme/Theme.loader').ThemeLoader;\n    }\n\n    public get Themes(): typeof Themes {\n        return this.#Themes ??= require('../core/theme/Themes').Themes;\n    }\n\n    public get NightEffects(): typeof NightEffects {\n        return this.#NightEffects ??= require('../core/nightEffect/NightEffects').NightEffects;\n    }\n\n    //endregion -------------------- Theme getter methods --------------------\n    //region -------------------- Time getter methods --------------------\n\n    public get Times(): typeof Times {\n        return this.#Times ??= require('../core/time/Times').Times;\n    }\n\n    //endregion -------------------- Theme getter methods --------------------\n    //region -------------------- \"Game reference\" getter methods --------------------\n\n    public get GameReferences(): typeof GameReferences {\n        return this.#GameReferences ??= require('../core/gameReference/GameReferences').GameReferences;\n    }\n\n    get GameReferenceLoader(): typeof GameReferenceLoader {\n        return this.#GameReferenceLoader ??= require('../core/gameReference/GameReference.loader').GameReferenceLoader;\n    }\n\n    //endregion -------------------- \"Game reference\" getter methods --------------------\n    //region -------------------- \"Game style\" getter methods --------------------\n\n    public get GameStyleLoader(): typeof GameStyleLoader {\n        return this.#GameStyleLoader ??= require('../core/gameStyle/GameStyle.loader').GameStyleLoader;\n    }\n\n    public get GameStyles(): typeof GameStyles {\n        return this.#GameStyles ??= require('../core/gameStyle/GameStyles').GameStyles;\n    }\n\n    //endregion -------------------- Game getter methods --------------------\n    //region -------------------- \"Entity behaviour\" getter methods --------------------\n\n    public get EntityBehaviourLoader(): typeof EntityBehaviourLoader {\n        return this.#EntityBehaviourLoader ??= require('../core/behaviour/EntityBehaviour.loader').EntityBehaviourLoader;\n    }\n\n    public get EntityBehaviours(): typeof EntityBehaviours {\n        return this.#EntityBehaviours ??= require('../core/behaviour/EntityBehaviours').EntityBehaviours;\n    }\n\n    //endregion -------------------- \"Entity behaviour\" getter methods --------------------\n    //region -------------------- \"Sound effect\" getter methods --------------------\n\n    public get SoundEffectLoader(): typeof SoundEffectLoader {\n        return this.#SoundEffectLoader ??= require('../core/soundEffect/SoundEffect.loader').SoundEffectLoader;\n    }\n\n    public get SoundEffects(): typeof SoundEffects {\n        return this.#SoundEffects ??= require('../core/soundEffect/SoundEffects').SoundEffects;\n    }\n\n\n    public get SoundEffectCategoryLoader(): typeof SoundEffectCategoryLoader {\n        return this.#SoundEffectCategoryLoader ??= require('../core/soundEffectCategory/SoundEffectCategory.loader').SoundEffectCategoryLoader;\n    }\n\n    public get SoundEffectCategories(): typeof SoundEffectCategories {\n        return this.#SoundEffectCategories ??= require('../core/soundEffectCategory/SoundEffectCategories').SoundEffectCategories;\n    }\n\n    //endregion -------------------- \"Sound effect\" getter methods --------------------\n    //region -------------------- \"Mystery Mushroom\" getter methods --------------------\n\n    public get MysteryMushroomLoader(): typeof MysteryMushroomLoader {\n        return this.#MysteryMushroomLoader ??= require('../core/mysteryMushroom/MysteryMushroom.loader').MysteryMushroomLoader;\n    }\n\n    public get MysteryMushrooms(): typeof MysteryMushrooms {\n        return this.#MysteryMushrooms ??= require('../core/mysteryMushroom/MysteryMushrooms').MysteryMushrooms;\n    }\n\n    //endregion -------------------- \"Mystery Mushroom\" getter methods --------------------\n    //region -------------------- \"Mii costume\" getter methods --------------------\n\n    public get MiiCostumeLoader(): typeof MiiCostumeLoader {\n        return this.#MiiCostumeLoader ??= require('../core/miiCostume/MiiCostume.loader').MiiCostumeLoader;\n    }\n\n    public get MiiCostumes(): typeof MiiCostumes {\n        return this.#MiiCostumes ??= require('../core/miiCostume/MiiCostumes').MiiCostumes;\n    }\n\n    public get MiiCostumeCategoryLoader(): typeof MiiCostumeCategoryLoader {\n        return this.#MiiCostumeCategoryLoader ??= require('../core/miiCostumeCategory/MiiCostumeCategory.loader').MiiCostumeCategoryLoader;\n    }\n\n    public get MiiCostumeCategories(): typeof MiiCostumeCategories {\n        return this.#MiiCostumeCategories ??= require('../core/miiCostumeCategory/MiiCostumeCategories').MiiCostumeCategories;\n    }\n\n    //endregion -------------------- \"Mii costume\" getter methods --------------------\n    //region -------------------- \"Official notification\" getter methods --------------------\n\n    get OfficialNotifications(): typeof OfficialNotifications {\n        return this.#OfficialNotifications ??= require('../core/officialNotification/OfficialNotifications').OfficialNotifications;\n    }\n\n    //endregion -------------------- \"Official notification\" getter methods --------------------\n    //region -------------------- \"Course tag\" fields --------------------\n\n    public get CourseTags(): typeof CourseTags {\n        return this.#CourseTags ??= require('../core/courseTag/CourseTags').CourseTags;\n    }\n\n    public get CourseTagLoader(): typeof CourseTagLoader {\n        return this.#CourseTagLoader ??= require('../core/courseTag/CourseTag.loader').CourseTagLoader;\n    }\n\n    //endregion -------------------- \"Course tag\" fields --------------------\n    //region -------------------- \"Predefined message\" fields --------------------\n\n    public get PredefinedMessages(): typeof PredefinedMessages {\n        return this.#PredefinedMessages ??= require('../core/predefinedMessage/PredefinedMessages').PredefinedMessages;\n    }\n\n    public get PredefinedMessageLoader(): typeof PredefinedMessageLoader {\n        return this.#PredefinedMessageLoader ??= require('../core/predefinedMessage/PredefinedMessage.loader').PredefinedMessageLoader;\n    }\n\n    //endregion -------------------- \"Predefined message\" fields --------------------\n    //region -------------------- \"Instrument\" getter methods --------------------\n\n    public get Instruments(): typeof Instruments {\n        return this.#Instruments ??= require('../core/instrument/Instruments').Instruments;\n    }\n\n    public get InstrumentLoader(): typeof InstrumentLoader {\n        return this.#InstrumentLoader ??= require('../core/instrument/Instrument.loader').InstrumentLoader;\n    }\n\n    //endregion -------------------- \"Instrument\" getter methods --------------------\n    //region -------------------- \"Version\" getter methods --------------------\n\n    public get Versions(): typeof Versions {\n        return this.#Versions ??= require('../core/version/Versions').Versions;\n    }\n\n    //endregion -------------------- \"Version\" getter methods --------------------\n    //region -------------------- Other getter methods --------------------\n\n    public get ClassThatIsAvailableFromTheStartContainer(): typeof ClassThatIsAvailableFromTheStartContainer {\n        return this.#ClassThatIsAvailableFromTheStartContainer ??= require('../core/availableFromTheStart/ClassThatIsAvailableFromTheStart.container').ClassThatIsAvailableFromTheStartContainer;\n    }\n\n    public get ClassThatIsAvailableFromTheStartProvider(): typeof ClassThatIsAvailableFromTheStartProvider {\n        return this.#ClassThatIsAvailableFromTheStartProvider ??= require('../core/availableFromTheStart/ClassThatIsAvailableFromTheStart.provider').ClassThatIsAvailableFromTheStartProvider;\n    }\n\n    //endregion -------------------- Other getter methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\n/**\n * An alias of the dynamic importer.\n *\n * It also directly use the {@link DynamicImporter.get} to remove redundancy.\n * @see DynamicImporter\n */\nexport const Import = DynamicImporter.get;\n","import type {Enumerable}       from './Enumerable';\nimport type {EnumerableStatic} from './EnumerableStatic';\nimport type {EnumName}         from './Enum.types';\n\n/**\n * <p>\n *  The first possible instance of an enum implementation using self reference instead of string or number.\n * </p>\n *\n * <p>\n *  Even though it's custom-made, it requires some custom implementation to work properly.\n *  It can have everything that a normal class have.\n *  But everything should be declared in statically in order to work as intended.\n * </p>\n *\n * <code>\n *     class SubEnum extends Enum {\n *\n *         public static readonly SUB_SUB_ENUM_1 = new class extends SubEnum(arguments);\n *         public static readonly SUB_SUB_ENUM_2 = new class extends SubEnum(arguments);\n *         public static readonly SUB_SUB_ENUM_3 = new class extends SubEnum(arguments);\n *         public static readonly SUB_SUB_ENUM_4 = new class extends SubEnum(arguments);\n *\n *         private constructor(argumentsReceived: any,){\n *             super();\n *         }\n *\n *\n *         protected get _static(): StaticReference<SubEnum> {\n *             return SubEnum;\n *         }\n *\n *          public static getValue(value: | null | undefined,): null\n *          public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n *          public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n *          public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n *          public static getValue<S extends PossibleStringValue = PossibleStringValue, >(value: S,): EnumByPossibleString<S>\n *          public static getValue<S extends string = string, >(value: S,): EnumByString<S>\n *          public static getValue<I extends SubEnum = SubEnum, >(instance: I,): I\n *          public static getValue(value: PossibleNonNullableValue,): EveryLanguages\n *          public static getValue(value: PossibleValue,): | SubEnum | null\n *          public static getValue(value: PossibleValue,) {\n *              return Enum.getValueOn(this, value,);\n *          }\n *\n *          public static get values(): EnumArray {\n *              return Enum.getValuesOn(this);\n *          }\n *\n *          public static [Symbol.iterator]() {\n *              return this.values[Symbol.iterator]();\n *          }\n *\n *     }\n * <code/><br/>\n *\n * <p>\n *  Then, with the proper implementation, everything for a class-based enum is present.\n * </p><br/>\n *\n */\nexport abstract class Enum<O extends number = number, N extends string = string, >\n    implements Enumerable<O, N> {\n\n    //region -------------------- Enum fields --------------------\n\n    static readonly #DEFAULT_NULL_DEFAULT_ARRAY = [null, null,] as const;\n    static readonly #PROTOTYPE_NAME = 'prototype';\n    /**\n     * <p>\n     *  The excluded name from the values of the current enum.\n     * </p>\n     *\n     * <code>\n     *      class SubEnum extends Enum {\n     *\n     *         public static readonly SIMPLE_SUB_SUB_ENUM = new class extends SubEnum(arguments);\n     *         public static readonly IGNORED_SUB_SUB_ENUM = new class extends SubEnum(arguments);\n     *\n     *\n     *         protected static readonly _EXCLUDED_NAMES: readonly string[] = ['IGNORED_SUB_SUB_ENUM',];\n     *\n     *          ...\n     *     }\n     * </code>\n     *\n     * @see EnumerableStatic.getValues\n     */\n    protected static readonly _EXCLUDED_NAMES: readonly string[] = [];\n    /**\n     * <p>\n     *  The parent {@link Enum enum} of the current {@link Enum enum}.<br/>\n     * </p>\n     *\n     * <p>\n     *  It is retrieved by the {@link EnumerableStatic.getValue parent getValue} method\n     *  in order to call it.\n     * </p>\n     *\n     * <code>\n     *      class SubEnum extends ParentEnum {\n     *\n     *         public static readonly SUB_SUB_ENUM_1 = new class extends SubEnum(arguments);\n     *         public static readonly SUB_SUB_ENUM_2 = new class extends SubEnum(arguments);\n     *         public static readonly SUB_SUB_ENUM_3 = new class extends SubEnum(arguments);\n     *\n     *\n     *         protected static readonly _PARENT: StaticReference<ParentEnum> = ParentEnum;//optional\n     *\n     *          ...\n     *     }\n     * </code>\n     *\n     * @see EnumerableStatic.getValue\n     */\n        // @ts-ignore\n    protected static readonly _PARENT: EnumerableStatic<any, any> = Enum;\n    static readonly #NUMBER_ONLY_REGEX = /^\\d+$/;\n    /**\n     * The default name used for the default value stored by the current instance.\n     *\n     * @see Enum.getDefaultOn\n     * @see Enum.setDefaultOn\n     * @see Enum.getNonNullDefaultOn\n     * @see Enum.setNonNullDefaultOn\n     */\n    protected static _DEFAULT_NAME = '_DEFAULT';\n\n    static readonly #LAST_ORDINAL_MAP = new Map<EnumerableStatic, number>();\n    static readonly #ORDINAL_MAP = new Map<Enumerable, number>();\n    static readonly #NAME_MAP = new Map<Enumerable, string>();\n    static readonly #DEFAULT_MAP = new Map<EnumerableStatic, | Enumerable | null>();\n    static readonly #VALUES_MAP = new Map<EnumerableStatic, readonly Enumerable[]>();\n\n    #name?: N;\n    readonly #ordinal: O;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Enum static methods --------------------\n\n    /**\n     * <p>\n     *  Initialise everything for the current instance.\n     * </p>\n     *\n     * <p>\n     *  It retrieves every values that are not from a getter or setter.\n     *  It also ignores the values based on {@link _EXCLUDED_NAMES}.\n     * </p>\n     *\n     * <p>\n     *  The initialisation includes:\n     *  <ul>\n     *      <li>default value</li>\n     *      <li>values map</li>\n     *      <li>names map</li>\n     *      <li>ordinals map</li>\n     *  </ul>\n     * </p>\n     *\n     * @param instance the static instance to initialise\n     */\n    static #initialiseOn(instance: EnumerableStatic,): typeof Enum\n    static #initialiseOn(instance: EnumerableStatic & typeof Enum,) {\n        const everyProperties = (Object.entries(Object.getOwnPropertyDescriptors(instance))\n            .filter(([, property,]) => property.get == null && property.set == null)\n            .filter(([name,]) => name !== this.#PROTOTYPE_NAME)\n            .filter(([name,]) => !instance._EXCLUDED_NAMES.includes(name))\n            .filter(([name,]) => !this.#NUMBER_ONLY_REGEX.test(name))\n            .filter(([, property,]) => property.value instanceof instance) as [string, TypedPropertyDescriptor<Enumerable>][])\n            .map(([name, property,]) => ([name, property.value!,] as const));\n\n        const defaultElementIndex = everyProperties.findIndex(([name,]) => name === instance._DEFAULT_NAME);\n        const defaultElement = defaultElementIndex === -1 ? this.#DEFAULT_NULL_DEFAULT_ARRAY : everyProperties.splice(defaultElementIndex, 1,).at(0) ?? this.#DEFAULT_NULL_DEFAULT_ARRAY;\n\n        this.#VALUES_MAP.set(instance, everyProperties.map(([, enumerable,]) => enumerable));\n        this.#DEFAULT_MAP.set(instance, defaultElement[1]);\n\n        everyProperties.forEach(([name, enumerable,], index,) => {\n            this.#ORDINAL_MAP.set(enumerable, index,);\n            this.#NAME_MAP.set(enumerable, name,);\n        });\n\n        return this;\n    }\n\n    /**\n     * Get the name based on the {@link _static} object.\n     *\n     * @param instance the instance\n     * @see Enum.name\n     */\n    static #getNameOn<I extends Enumerable, >(instance: I,): I['name']\n    static #getNameOn(instance: Enumerable & Enum,) {\n        if (!this.#NAME_MAP.has(instance))\n            this.#initialiseOn(instance._static);\n        return this.#NAME_MAP.get(instance);\n    }\n\n    /**\n     * Get the last ordinal of the current instance retrieved.\n     *\n     * @param instance the static instance to retrieve the last ordinal\n     * @onlyCalledAtConstruction\n     * @see Enum.ordinal\n     */\n    static #getLastOrdinalOn<I extends Enumerable, >(instance: EnumerableStatic<I['ordinal'], I['name'], I>,): I['ordinal']\n    static #getLastOrdinalOn(instance: EnumerableStatic,) {\n        const map = this.#LAST_ORDINAL_MAP;\n        return map.has(instance)\n            ? map.set(instance, map.get(instance)! + 1).get(instance)\n            : map.set(instance, 0).get(instance);\n    }\n\n\n    //endregion -------------------- Enum static methods --------------------\n\n    protected constructor() {\n        // @ts-ignore\n        const staticReference = this._static;\n        this.#name = Object.entries(staticReference).find(([, a,]) => a == null)?.[0] as N | undefined;\n        Reflect.set(staticReference, this.#ordinal = Enum.#getLastOrdinalOn(staticReference), this,);\n    }\n\n    //region -------------------- Enum methods --------------------\n\n    public get name(): N {\n        return this.#name ??= Enum.#getNameOn(this);\n    }\n\n    public get ordinal(): O {\n        return this.#ordinal;\n    }\n\n    /**\n     * <p>\n     *  Get the static instance for a way to retrieve the values\n     *  in both {@link name this.name} & {@link ordinal this.ordinal} methods\n     *  to get the proper value based on the current instance.\n     * </p>\n     *\n     * <p>\n     *  The use of {@link StaticReference} need to be used on the child classes\n     *  to ensure another class can extends the child class without any problems.\n     * </p>\n     *\n     * <p> The implementation of this method (in Typescript) is needed like this. </p>\n     * <code>\n     *     protected get _static(): {@link StaticReference}<SubEnum> {\n     *         return SubEnum;\n     *     }\n     * </code>\n     * <p> And for the Javascript directly, it is: </p>\n     * <code>\n     *     get _static() {\n     *         return SubEnum;\n     *     }\n     * </code>\n     *\n     * @protected\n     * @see StaticReference\n     * @see ordinal\n     * @see name\n     */\n    protected abstract get _static(): EnumerableStatic<O, N>;\n\n\n    public static getDefaultOn<I extends Enumerable, >(instance: EnumerableStatic<I['ordinal'], I['name'], any>,): | I | null\n    public static getDefaultOn(instance: EnumerableStatic,) {\n        if (!this.#DEFAULT_MAP.has(instance))\n            this.#initialiseOn(instance);\n\n        return this.#DEFAULT_MAP.get(instance);\n    }\n\n    public static getNonNullDefaultOn<I extends Enumerable, >(instance: EnumerableStatic<I['ordinal'], I['name'], any>,): I\n    public static getNonNullDefaultOn(instance: EnumerableStatic,) {\n        const defaultValue = this.getDefaultOn(instance);\n\n        if (defaultValue == null)\n            throw new ReferenceError(`The reference in the enum ${instance.name} cannot be null.`);\n\n        return defaultValue;\n    }\n\n    public static setDefaultOn<I extends Enumerable, IS extends EnumerableStatic<I['ordinal'], I['name'], any>, >(instance: IS, value: | I | string | number | null,): IS\n    public static setDefaultOn(instance: EnumerableStatic, value: | Enumerable | string | number | null,) {\n        if (!this.#DEFAULT_MAP.has(instance))\n            this.#initialiseOn(instance);\n\n        const valueRetrieved = instance.getValue(value);\n        if (valueRetrieved !== this.#DEFAULT_MAP.get(instance))\n            this.#DEFAULT_MAP.set(instance, valueRetrieved);\n        return instance;\n    }\n\n    public static setNonNullDefaultOn<I extends Enumerable, IS extends EnumerableStatic<I['ordinal'], I['name'], any>, >(instance: IS, value: | I | string | number | null,): IS\n    public static setNonNullDefaultOn(instance: EnumerableStatic, value: | Enumerable | string | number | null,) {\n        if (!this.#DEFAULT_MAP.has(instance))\n            this.#initialiseOn(instance);\n\n        if (value == null)\n            return instance;\n\n        return this.setDefaultOn(instance, value,);\n    }\n\n    //region -------------------- GetValue methods --------------------\n\n    /**\n     * Get the value by a string.\n     *\n     *\n     * @param value the string value (excluding {@link name})\n     * @see Enum.getValueOn\n     */\n    protected static _getValueByString(value: string,): | Enumerable | null {\n        return null;\n    }\n\n    /**\n     * Get the value by a number.\n     *\n     * @param value the number value (excluding {@link ordinal})\n     * @see Enum.getValueOn\n     */\n    protected static _getValueByNumber(value: number,): | Enumerable | null {\n        return null;\n    }\n\n    /**\n     * Get the value by an object\n     *\n     * @param value the boolean value\n     * @see Enum.getValueOn\n     */\n    protected static _getValueByBoolean(value: boolean,): | Enumerable | null {\n        return null;\n    }\n\n    /**\n     * Get the value by an object.\n     *\n     * @param value the object value (excluding {@link string}, {@link number}, {@link boolean} & {@link Enumerable})\n     * @see Enum.getValueOn\n     */\n    protected static _getValueByObject(value: object,): | Enumerable | null {\n        return null;\n    }\n\n    /**\n     * Get the value by an enumerable that is not the current instance <u> !={@link _static}</u>\n     *\n     * @param value the enumerable value\n     * @see Enum.getValueOn\n     */\n    protected static _getValueByEnumerable(value: Enumerable,): | Enumerable | null {\n        return null;\n    }\n\n    /**\n     * <p>\n     *  Get the enum value of the instance selected.\n     *  It does call the value by a selected argument\n     *  if the values received are not those handled automatically.\n     * </p>\n     * <p>\n     *  The possible arguments received handled are:\n     *  <ol>\n     *      <li><i>undefined</i> or <i>null</i></li>\n     *      <li>the {@link Enum.ordinal ordinal},</li>\n     *      <li>the {@link Enum.name name},</li>\n     *      <li>directly as a {@link Enum}</li>\n     *      <li>a static {@link Enum._PARENT _PARENT} field</li>\n     *  </ol>\n     *  And the possible arguments received can be <i>undefined</i>, <i>null</i>,\n     *  a <i>{@link String string}</i>, a <i>{@link Number number}</i>\n     *  or an {@link Object object}.\n     * </p>\n     *\n     * @param instance the enum instance\n     * @param value the value to compare\n     * @see Enum._getValueByString\n     * @see Enum._getValueByNumber\n     * @see Enum._getValueByBoolean\n     * @see Enum._getValueByObject\n     * @see Enum._getValueByEnumerable\n     * @see Enum._PARENT\n     */\n    public static getValueOn<I extends Enumerable, IS extends EnumerableStatic<I['ordinal'], I['name'], any> = EnumerableStatic<I['ordinal'], I['name'], any>, >(instance: IS, value: | number | I['ordinal'] | string | I['name'] | boolean | I | object | null | undefined,): | I | null\n    public static getValueOn<I extends Enum, >(instance: EnumerableStatic & typeof Enum, value: | number | I['ordinal'] | string | I['name'] | boolean | I | object | null | undefined,): | I | null {\n        if (value == null)\n            return null;\n\n        const parent = instance._PARENT as EnumerableStatic & typeof Enum;\n        if (parent !== Enum) {\n            const parentValue = Enum.getValueOn(parent, value,) as Enumerable | null;\n\n            if (value instanceof Enum)\n                return instance.__getEnumInstanceByThisOrEnumerable(instance, parentValue ?? value);\n\n            if (parentValue == null)\n                return null;\n            return instance._getValueByEnumerable(parentValue) as | I | null;\n        }\n\n\n        switch (typeof value) {\n            case 'string':\n                return this.__getEnumInstanceByNameOrIndex(instance, value,)\n                    ?? instance._getValueByString(value,) as | I | null;\n            case 'number':\n                return this.__getEnumInstanceByNameOrIndex(instance, value,)\n                    ?? instance._getValueByNumber(value,) as | I | null;\n            case 'boolean':\n                return this._getValueByBoolean(value) as | I | null;\n            default:\n                if ('_static' in value)\n                    return Enum.__getEnumInstanceByThisOrEnumerable(instance, value,);\n                return instance._getValueByObject(value,) as | I | null;\n        }\n    }\n\n    /**\n     * Get the enum instance reflectively and compare the {@link Enum._static} with the instance received.\n     *\n     * @param instance the enum instance to compare\n     * @param nameOrIndex the name or the index\n     * @return the enum instance or null\n     */\n    private static __getEnumInstanceByNameOrIndex<I extends Enum, >(instance: EnumerableStatic, nameOrIndex: | string | number,): | I | null\n    private static __getEnumInstanceByNameOrIndex(instance: EnumerableStatic & typeof Enum, nameOrIndex: | string | number,) {\n        const value = instance[nameOrIndex] as | Enum | undefined;\n        if (value == null)\n            return null;\n        if (value._static === instance)\n            return value;\n        return null;\n    }\n\n    /**\n     * Get the enum instance by a comparison of {@link _static} & the {@link EnumerableStatic instance}.\n     * Or by utilising from the current context {@link _getValueByEnumerable}.\n     *\n     * @param instance the enum instance to compare\n     * @param enumerable the enumerable to send or return\n     */\n    private static __getEnumInstanceByThisOrEnumerable<I extends Enum, >(instance: EnumerableStatic, enumerable: Enumerable,): | I | null\n    private static __getEnumInstanceByThisOrEnumerable(instance: EnumerableStatic & typeof Enum, enumerable: Enum,) {\n        return enumerable._static === instance\n            ? enumerable\n            : instance._getValueByEnumerable(enumerable);\n    }\n\n    //endregion -------------------- GetValue methods --------------------\n\n    /**\n     * Get every value based on the current instance received.\n     *\n     * @param instance the instance to retrieve every values\n     */\n    public static getValuesOn<IS extends EnumerableStatic<any, any, any>, >(instance: IS,): IS['values']\n    public static getValuesOn(instance: EnumerableStatic,) {\n        if (!this.#VALUES_MAP.has(instance))\n            this.#initialiseOn(instance);\n\n        return this.#VALUES_MAP.get(instance);\n    }\n\n    public get [Symbol.toStringTag](): EnumName {\n        return 'Enum';\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","/**\n * An empty string\n */\nexport const EMPTY_STRING = '';\n\n/**\n * An empty array with no values that is not modifiable.\n *\n * @note It is an empty array to ensure any possible values is possible.\n */\nexport const EMPTY_ARRAY: readonly [] = [];\n\n/**\n * An empty {@link Map} with any values that should always return undefined as a value.\n *\n * @note It use \"any\" as a type to enable every values\n */\nexport const EMPTY_MAP: ReadonlyMap<any, never> = new Map<any, never>();\n\nexport const EMPTY_OBJECT: Readonly<{}> = {};\n","import type {Braces_Array, Braces_SpaceEven_Array, Braces_SpaceUneven_Array, Brackets_Array, Brackets_SpaceEven_Array, Brackets_SpaceUneven_Array, CharactersEquivalencesMap, EnumArray, EnumArray_Braces, EnumArray_Brackets, EnumArray_Number, EnumArray_Parentheses, EnumArray_Points, EnumArray_RomainAlphabet, EnumArray_Slashes, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Letters_Array, LowercaseLetters_Array, LowercaseRomainAlphabet_SpaceEven_Array, LowercaseRomainAlphabet_SpaceUneven_Array, Names, Numbers_Array, Numbers_SpaceEven_Array, Numbers_SpaceUneven_Array, Ordinals, Parentheses_Array, Parentheses_SpaceEven_Array, Parentheses_SpaceUneven_Array, Points_Array, Points_SpaceEven_Array, Points_SpaceUneven_Array, PossibleBraces_Array, PossibleBrackets_Array, PossibleLowercaseRomainAlphabet_Array, PossibleMixedSpaceEvenCharacter_RomainAlphabet, PossibleMixedSpaceUnevenCharacter_RomainAlphabet, PossibleNonNullableValue, PossibleNumbers_Array, PossibleParentheses_Array, PossiblePoints_Array, PossibleSingleCharacter, PossibleSingleSpaceEvenCharacter_ExcludingRomainAlphabet, PossibleSingleSpaceUnevenCharacter_ExcludingRomainAlphabet, PossibleSlashes_Array, PossibleSpaceEvenCharacters, PossibleSpaceUnevenCharacters, PossibleStringValue, PossibleUppercaseRomainAlphabet_Array, PossibleValue, RomainAlphabet_SpaceEven_Array, RomainAlphabet_SpaceUneven_Array, Slashes_Array, Slashes_SpaceEven_Array, Slashes_SpaceUneven_Array, SpaceEvenCharacter_RomainAlphabet, SpaceUnevenCharacter_RomainAlphabet, TextInBraces, TextInBrackets, TextInParentheses, UppercaseLetters_Array, UppercaseRomainAlphabet_SpaceEven_Array, UppercaseRomainAlphabet_SpaceUneven_Array, VariableCharacterByCharacter, VariableCharacterByString, VariableCharactersByBoolean, VariableValueByBoolean} from './Characters.types';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   from '../util/enum/Enum.types';\n\nimport {Enum} from '../util/enum/Enum';\n\nexport class Characters\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly POINT =                new Characters('.',  '．',);\n    public static readonly INTERROGATION_POINT =  new Characters('?',  '？',);\n    public static readonly EXCLAMATION_POINT =    new Characters('!',  '！',);\n    public static readonly COLON =                new Characters(':',  '：',);\n    public static readonly SEMICOLON =            new Characters(';',  '；',);\n    public static readonly COMMA =                new Characters(',',  '，',);\n    public static readonly UNION_TRAIT =          new Characters('-',  '－',);\n\n    public static readonly COMMERCIAL_AND =       new Characters('&',  '＆',);\n\n    public static readonly STARTING_PARENTHESIS = new Characters('(',  '（',);\n    public static readonly ENDING_PARENTHESIS =   new Characters(')',  '）',);\n    public static readonly STARTING_BRACKET =     new Characters('(',  '（',);\n    public static readonly ENDING_BRACKET =       new Characters(')',  '）',);\n    public static readonly STARTING_BRACE =       new Characters('(',  '（',);\n    public static readonly ENDING_BRACE =         new Characters(')',  '）',);\n\n    public static readonly SLASH =                new Characters('/',  '／',);\n    public static readonly VERTICAL_SLASH =       new Characters('|',  '｜',);\n\n    public static readonly LETTER_A =             new Characters('Aa', 'Ａａ',);\n    public static readonly LETTER_B =             new Characters('Bb', 'Ｂｂ',);\n    public static readonly LETTER_C =             new Characters('Cc', 'Ｃｃ',);\n    public static readonly LETTER_D =             new Characters('Dd', 'Ｄｄ',);\n    public static readonly LETTER_E =             new Characters('Ee', 'Ｅｅ',);\n    public static readonly LETTER_F =             new Characters('Ff', 'Ｆｆ',);\n    public static readonly LETTER_G =             new Characters('Gg', 'Ｇｇ',);\n    public static readonly LETTER_H =             new Characters('Hh', 'Ｈｈ',);\n    public static readonly LETTER_I =             new Characters('Ii', 'Ｉｉ',);\n    public static readonly LETTER_J =             new Characters('Jj', 'Ｊｊ',);\n    public static readonly LETTER_K =             new Characters('Kk', 'Ｋｋ',);\n    public static readonly LETTER_L =             new Characters('Ll', 'Ｌｌ',);\n    public static readonly LETTER_M =             new Characters('Mm', 'Ｍｍ',);\n    public static readonly LETTER_N =             new Characters('Nn', 'Ｎｎ',);\n    public static readonly LETTER_O =             new Characters('Oo', 'Ｏｏ',);\n    public static readonly LETTER_P =             new Characters('Pp', 'Ｐｐ',);\n    public static readonly LETTER_Q =             new Characters('Qq', 'Ｑｑ',);\n    public static readonly LETTER_R =             new Characters('Rr', 'Ｒｒ',);\n    public static readonly LETTER_S =             new Characters('Ss', 'Ｓｓ',);\n    public static readonly LETTER_T =             new Characters('Tt', 'Ｔｔ',);\n    public static readonly LETTER_U =             new Characters('Uu', 'Ｕｕ',);\n    public static readonly LETTER_V =             new Characters('Vv', 'Ｖｖ',);\n    public static readonly LETTER_W =             new Characters('Ww', 'Ｗｗ',);\n    public static readonly LETTER_X =             new Characters('Xx', 'Ｘｘ',);\n    public static readonly LETTER_Y =             new Characters('Yy', 'Ｙｙ',);\n    public static readonly LETTER_Z =             new Characters('Zz', 'Ｚｚ',);\n\n    public static readonly NUMBER_0 =             new Characters('0',  '０',);\n    public static readonly NUMBER_1 =             new Characters('1',  '１',);\n    public static readonly NUMBER_2 =             new Characters('2',  '２',);\n    public static readonly NUMBER_3 =             new Characters('3',  '３',);\n    public static readonly NUMBER_4 =             new Characters('4',  '４',);\n    public static readonly NUMBER_5 =             new Characters('5',  '５',);\n    public static readonly NUMBER_6 =             new Characters('6',  '６',);\n    public static readonly NUMBER_7 =             new Characters('7',  '７',);\n    public static readonly NUMBER_8 =             new Characters('8',  '８',);\n    public static readonly NUMBER_9 =             new Characters('9',  '９',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Characters;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static readonly #POINTS: EnumArray_Points = [this.POINT, this.INTERROGATION_POINT, this.EXCLAMATION_POINT, this.COLON, this.SEMICOLON,];\n    static #POINTS_STRING?: Points_Array;\n    static #POINTS_SPACE_EVEN?: Points_SpaceEven_Array;\n    static #POINTS_SPACE_UNEVEN?: Points_SpaceUneven_Array;\n\n    static readonly #PARENTHESES: EnumArray_Parentheses = [this.STARTING_PARENTHESIS, this.ENDING_PARENTHESIS,];\n    static #PARENTHESES_STRING?: Parentheses_Array;\n    static #PARENTHESES_SPACE_EVEN?: Parentheses_SpaceEven_Array;\n    static #PARENTHESES_SPACE_UNEVEN?: Parentheses_SpaceUneven_Array;\n\n    static readonly #BRACKETS: EnumArray_Brackets = [this.STARTING_BRACKET, this.ENDING_BRACKET,];\n    static #BRACKETS_STRING?: Brackets_Array;\n    static #BRACKETS_SPACE_EVEN?: Brackets_SpaceEven_Array;\n    static #BRACKETS_SPACE_UNEVEN?: Brackets_SpaceUneven_Array;\n\n    static readonly #BRACES: EnumArray_Braces = [this.STARTING_BRACE, this.ENDING_BRACE,];\n    static #BRACES_STRING?: Braces_Array;\n    static #BRACES_SPACE_EVEN?: Braces_SpaceEven_Array;\n    static #BRACES_SPACE_UNEVEN?: Braces_SpaceUneven_Array;\n\n    static readonly #SLASHES: EnumArray_Slashes = [this.SLASH, this.VERTICAL_SLASH,];\n    static #SLASHES_STRING?: Slashes_Array;\n    static #SLASHES_SPACE_EVEN?: Slashes_SpaceEven_Array;\n    static #SLASHES_SPACE_UNEVEN?: Slashes_SpaceUneven_Array;\n\n    static readonly #LETTERS: EnumArray_RomainAlphabet = [\n        this.LETTER_A, this.LETTER_B, this.LETTER_C, this.LETTER_D, this.LETTER_E,\n        this.LETTER_F, this.LETTER_G, this.LETTER_H, this.LETTER_I, this.LETTER_J,\n        this.LETTER_K, this.LETTER_L, this.LETTER_M, this.LETTER_N, this.LETTER_O,\n        this.LETTER_P, this.LETTER_Q, this.LETTER_R, this.LETTER_S, this.LETTER_T,\n        this.LETTER_U, this.LETTER_V, this.LETTER_W, this.LETTER_X, this.LETTER_Y,\n        this.LETTER_Z,\n    ];\n    static #LETTERS_STRING?: Letters_Array;\n    static #LETTERS_SPACE_EVEN?: RomainAlphabet_SpaceEven_Array;\n    static #LETTERS_SPACE_UNEVEN?: RomainAlphabet_SpaceUneven_Array;\n    static #LOWERCASE_LETTERS?: LowercaseLetters_Array;\n    static #LOWERCASE_LETTERS_SPACE_EVEN?: LowercaseRomainAlphabet_SpaceEven_Array;\n    static #LOWERCASE_LETTERS_SPACE_UNEVEN?: LowercaseRomainAlphabet_SpaceUneven_Array;\n    static #UPPERCASE_LETTERS?: UppercaseLetters_Array;\n    static #UPPERCASE_LETTERS_SPACE_EVEN?: UppercaseRomainAlphabet_SpaceEven_Array;\n    static #UPPERCASE_LETTERS_SPACE_UNEVEN?: UppercaseRomainAlphabet_SpaceUneven_Array;\n\n    static readonly #NUMBERS: EnumArray_Number = [\n        this.NUMBER_0, this.NUMBER_1, this.NUMBER_2, this.NUMBER_3, this.NUMBER_4,\n        this.NUMBER_5, this.NUMBER_6, this.NUMBER_7, this.NUMBER_8, this.NUMBER_9,\n    ];\n    static #NUMBERS_STRING?: Numbers_Array;\n    static #NUMBERS_SPACE_EVEN?: Numbers_SpaceEven_Array;\n    static #NUMBERS_SPACE_UNEVEN?: Numbers_SpaceUneven_Array;\n\n\n    static #SPACE_EVEN_OBJECT_MAP?: CharactersEquivalencesMap;\n\n\n    readonly #spaceEvenCharacters: PossibleSpaceEvenCharacters;\n    readonly #spaceUnevenCharacters: PossibleSpaceUnevenCharacters;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(spaceUnevenCharacter: PossibleSingleSpaceUnevenCharacter_ExcludingRomainAlphabet, spaceEvenCharacter: PossibleSingleSpaceEvenCharacter_ExcludingRomainAlphabet,)\n    private constructor(spaceUnevenCharacters: PossibleMixedSpaceUnevenCharacter_RomainAlphabet, spaceEvenCharacters: PossibleMixedSpaceEvenCharacter_RomainAlphabet,)\n    private constructor(spaceUnevenCharacter: SpaceUnevenCharacterReceived, spaceEvenCharacter: SpaceEvenCharacterReceived,) {\n        super();\n        if (spaceUnevenCharacter.length === 1) {\n            this.#spaceEvenCharacters = [spaceEvenCharacter as PossibleSingleSpaceEvenCharacter_ExcludingRomainAlphabet];\n            this.#spaceUnevenCharacters = [spaceUnevenCharacter as PossibleSingleSpaceUnevenCharacter_ExcludingRomainAlphabet];\n        } else {\n            this.#spaceEvenCharacters = [spaceEvenCharacter[0] as Uppercase<SpaceEvenCharacter_RomainAlphabet>, spaceEvenCharacter[1] as Lowercase<SpaceEvenCharacter_RomainAlphabet>,];\n            this.#spaceUnevenCharacters = [spaceUnevenCharacter[0] as Uppercase<SpaceUnevenCharacter_RomainAlphabet>, spaceUnevenCharacter[1] as Lowercase<SpaceUnevenCharacter_RomainAlphabet>,];\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get spaceEvenCharacters(): PossibleSpaceEvenCharacters {\n        return this.#spaceEvenCharacters;\n    }\n\n    public get spaceUnevenCharacters(): PossibleSpaceUnevenCharacters {\n        return this.#spaceUnevenCharacters;\n    }\n\n    //region -------------------- Specific characters --------------------\n\n    static #getBothEvenAndUnevenCharacters<A extends readonly string[], >(enumArray: readonly Characters[], index: | 0 | 1,): A {\n        return enumArray.map(enumerable => [enumerable.spaceUnevenCharacters[index], enumerable.spaceEvenCharacters[index],]).flat() as unknown as A;\n    }\n\n    static #getOnlyUnevenCharacter<A extends readonly string[], >(enumArray: readonly Characters[], index: | 0 | 1,): A {\n        return enumArray.map(enumerable => enumerable.spaceUnevenCharacters[index]) as unknown as A;\n    }\n\n    static #getOnlyEvenCharacter<A extends readonly string[], >(enumArray: readonly Characters[], index: | 0 | 1,): A {\n        return enumArray.map(enumerable => enumerable.spaceEvenCharacters[index]).flat() as unknown as A;\n    }\n\n    //region -------------------- Specific characters (points) --------------------\n\n    public static get points_enum(): EnumArray_Points {\n        return this.#POINTS;\n    }\n\n    public static get points(): Points_Array {\n        return this.#POINTS_STRING ??= this.#getBothEvenAndUnevenCharacters(this.points_enum, 0,);\n    }\n\n    public static getPoints<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Points_SpaceEven_Array, Points_SpaceUneven_Array>\n    public static getPoints(isSpaceEven: boolean,): PossiblePoints_Array {\n        return isSpaceEven\n            ? this.#POINTS_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.points_enum, 0,)\n            : this.#POINTS_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.points_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (points) --------------------\n    //region -------------------- Specific characters (parentheses) --------------------\n\n    public static get parentheses_enum(): EnumArray_Parentheses {\n        return this.#PARENTHESES;\n    }\n\n    public static get parentheses(): Parentheses_Array {\n        return this.#PARENTHESES_STRING ??= this.#getBothEvenAndUnevenCharacters(this.parentheses_enum, 0,);\n    }\n\n    public static getParentheses<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Parentheses_SpaceEven_Array, Parentheses_SpaceUneven_Array>\n    public static getParentheses(isSpaceEven: boolean,): PossibleParentheses_Array {\n        return isSpaceEven\n            ? this.#PARENTHESES_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.parentheses_enum, 0,)\n            : this.#PARENTHESES_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.parentheses_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (parentheses) --------------------\n    //region -------------------- Specific characters (brackets) --------------------\n\n    public static get brackets_enum(): EnumArray_Brackets {\n        return this.#BRACKETS;\n    }\n\n    public static get brackets(): Brackets_Array {\n        return this.#BRACKETS_STRING ??= this.#getBothEvenAndUnevenCharacters(this.brackets_enum, 0,);\n    }\n\n    public static getBrackets<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Brackets_SpaceEven_Array, Brackets_SpaceUneven_Array>\n    public static getBrackets(isSpaceEven: boolean,): PossibleBrackets_Array {\n        return isSpaceEven\n            ? this.#BRACKETS_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.brackets_enum, 0,)\n            : this.#BRACKETS_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.brackets_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (brackets) --------------------\n    //region -------------------- Specific characters (braces) --------------------\n\n    public static get braces_enum(): EnumArray_Braces {\n        return this.#BRACES;\n    }\n\n    public static get braces(): Braces_Array {\n        return this.#BRACES_STRING ??= this.#getBothEvenAndUnevenCharacters(this.braces_enum, 0,);\n    }\n\n    public static getBraces<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Braces_SpaceEven_Array, Braces_SpaceUneven_Array>\n    public static getBraces(isSpaceEven: boolean,): PossibleBraces_Array {\n        return isSpaceEven\n            ? this.#BRACES_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.braces_enum, 0,)\n            : this.#BRACES_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.braces_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (braces) --------------------\n    //region -------------------- Specific characters (slashes) --------------------\n\n    public static get slashes_enum(): EnumArray_Slashes {\n        return this.#SLASHES;\n    }\n\n    public static get slashes(): Slashes_Array {\n        return this.#SLASHES_STRING ??= this.#getBothEvenAndUnevenCharacters(this.slashes_enum, 0,);\n    }\n\n    public static getSlashes<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Slashes_SpaceEven_Array, Slashes_SpaceUneven_Array>\n    public static getSlashes(isSpaceEven: boolean,): PossibleSlashes_Array {\n        return isSpaceEven\n            ? this.#SLASHES_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.slashes_enum, 0,)\n            : this.#SLASHES_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.slashes_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (slashes) --------------------\n    //region -------------------- Specific characters (letters) --------------------\n\n    public static get letters_enum(): EnumArray_RomainAlphabet {\n        return this.#LETTERS;\n    }\n\n    public static get letters(): Letters_Array {\n        return this.#LETTERS_STRING ??= this.letters_enum.map(enumerable => [enumerable.spaceUnevenCharacters, enumerable.spaceEvenCharacters,]).flat(2) as unknown as Letters_Array;\n    }\n\n    public static getLetters<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, RomainAlphabet_SpaceEven_Array, RomainAlphabet_SpaceUneven_Array>\n    public static getLetters(isSpaceEven: boolean,): | RomainAlphabet_SpaceUneven_Array | RomainAlphabet_SpaceEven_Array {\n        return isSpaceEven\n            ? this.#LETTERS_SPACE_EVEN ??= this.letters_enum.map(enumerable => enumerable.spaceEvenCharacters).flat() as unknown as RomainAlphabet_SpaceEven_Array\n            : this.#LETTERS_SPACE_UNEVEN ??= this.letters_enum.map(enumerable => enumerable.spaceUnevenCharacters).flat() as unknown as RomainAlphabet_SpaceUneven_Array;\n    }\n\n\n    public static get lowercaseLetters(): LowercaseLetters_Array {\n        return this.#LOWERCASE_LETTERS ??= this.#getBothEvenAndUnevenCharacters(this.letters_enum, 1,);\n    }\n\n    public static getLowercaseLetters<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, LowercaseRomainAlphabet_SpaceEven_Array, LowercaseRomainAlphabet_SpaceUneven_Array>\n    public static getLowercaseLetters(isSpaceEven: boolean,): PossibleLowercaseRomainAlphabet_Array {\n        return isSpaceEven\n            ? this.#LOWERCASE_LETTERS_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.letters_enum, 1,)\n            : this.#LOWERCASE_LETTERS_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.letters_enum, 1,);\n    }\n\n    public static get uppercaseLetters(): UppercaseLetters_Array {\n        return this.#UPPERCASE_LETTERS ??= this.#getBothEvenAndUnevenCharacters(this.letters_enum, 0,);\n    }\n\n    public static getUppercaseLetters<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, UppercaseRomainAlphabet_SpaceEven_Array, UppercaseRomainAlphabet_SpaceUneven_Array>\n    public static getUppercaseLetters(isSpaceEven: boolean,): PossibleUppercaseRomainAlphabet_Array {\n        return isSpaceEven\n            ? this.#UPPERCASE_LETTERS_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.letters_enum, 0,)\n            : this.#UPPERCASE_LETTERS_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.letters_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (letters) --------------------\n    //region -------------------- Specific characters (numbers) --------------------\n\n    public static get numbers_enum(): EnumArray_Number {\n        return this.#NUMBERS;\n    }\n\n    public static get numbers(): Numbers_Array {\n        return this.#NUMBERS_STRING ??= this.#getBothEvenAndUnevenCharacters(this.numbers_enum, 0,);\n    }\n\n    public static getNumbers<B extends boolean, >(isSpaceEven: B,): VariableValueByBoolean<B, Numbers_SpaceEven_Array, Numbers_SpaceUneven_Array>\n    public static getNumbers(isSpaceEven: boolean,): PossibleNumbers_Array {\n        return isSpaceEven\n            ? this.#NUMBERS_SPACE_EVEN ??= this.#getOnlyEvenCharacter(this.numbers_enum, 0,)\n            : this.#NUMBERS_SPACE_UNEVEN ??= this.#getOnlyUnevenCharacter(this.numbers_enum, 0,);\n    }\n\n    //endregion -------------------- Specific characters (numbers) --------------------\n\n    //endregion -------------------- Specific characters --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getCharacters<B extends boolean, >(isSpaceEven: B,): VariableCharactersByBoolean<B>\n    public getCharacters(isSpaceEven: boolean,) {\n        return isSpaceEven ? this.spaceEvenCharacters : this.spaceUnevenCharacters;\n    }\n\n    public static getCharacter<B extends boolean, C extends PossibleSingleCharacter, >(isSpaceEven: B, value: C,): VariableCharacterByCharacter<B, C>\n    public static getCharacter<B extends boolean, C extends string, >(isSpaceEven: B, value: C,): VariableCharacterByString<B, C>\n    public static getCharacter(isSpaceEven: boolean, value: string,) {\n        const enumValue = this.getValue(value);\n        if (enumValue == null)\n            return null;\n        const isUppercase = value === value.toUpperCase();\n        const isLowercase = value === value.toLowerCase();\n        if (!isUppercase && !isLowercase)//. ? ! , - & / | ( ) [ ] { } [0 to 9]\n            return enumValue.getCharacters(isSpaceEven)[0];\n\n        const characters = enumValue.getCharacters(isSpaceEven);//[a to z] [A to Z]\n        return isUppercase ? characters[0] : characters[1];\n    }\n\n    /**\n     * An equivalence {@link Object object map} of every characters used in the {@link Characters} enum.\n     */\n    public static get equivalenceMapObject(): CharactersEquivalencesMap {\n        if (this.#SPACE_EVEN_OBJECT_MAP == null) {\n            const spaceEvenObjectMap: Partial<CharactersEquivalencesMap> = {};\n            for (const enumerable of this) {\n                const [spaceEvenCharacter1, spaceEvenCharacter2,] = enumerable.spaceEvenCharacters;\n                const [spaceUnevenCharacter1, spaceUnevenCharacter2,] = enumerable.spaceUnevenCharacters;\n                Reflect.set(spaceEvenObjectMap, spaceEvenCharacter1, spaceUnevenCharacter1,);\n                Reflect.set(spaceEvenObjectMap, spaceUnevenCharacter1, spaceEvenCharacter1,);\n                if (spaceUnevenCharacter2 != null) {\n                    Reflect.set(spaceEvenObjectMap, spaceEvenCharacter2!, spaceUnevenCharacter2,);\n                    Reflect.set(spaceEvenObjectMap, spaceUnevenCharacter2, spaceEvenCharacter2,);\n                }\n            }\n            this.#SPACE_EVEN_OBJECT_MAP = spaceEvenObjectMap as CharactersEquivalencesMap;\n        }\n        return this.#SPACE_EVEN_OBJECT_MAP;\n    }\n\n    //region -------------------- Transformation methods --------------------\n\n    static #textInBetween(isSpaceEven: boolean, startingCharacter: Characters, text: string, endingCharacter: Characters,) {\n        return `${startingCharacter.getCharacters(isSpaceEven)}${text}${endingCharacter.getCharacters(isSpaceEven)}`;\n    }\n\n    public static textInParentheses<B extends boolean, S extends string, >(isSpaceEven: B, text: S,): TextInParentheses<B, S>\n    public static textInParentheses(isSpaceEven: boolean, text: string,) {\n        return this.#textInBetween(isSpaceEven, this.STARTING_PARENTHESIS, text, this.ENDING_PARENTHESIS,);\n    }\n\n    public static textInBrackets<B extends boolean, S extends string, >(isSpaceEven: B, text: S,): TextInBrackets<B, S>\n    public static textInBrackets(isSpaceEven: boolean, text: string,) {\n        return this.#textInBetween(isSpaceEven, this.STARTING_BRACKET, text, this.ENDING_BRACKET,);\n    }\n\n    public static textInBraces<B extends boolean, S extends string, >(isSpaceEven: B, text: S,): TextInBraces<B, S>\n    public static textInBraces(isSpaceEven: boolean, text: string,) {\n        return this.#textInBetween(isSpaceEven, this.STARTING_BRACE, text, this.ENDING_BRACE,);\n    }\n\n    //endregion -------------------- Transformation methods --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Characters> {\n        return Characters;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.spaceEvenCharacters.includes(value as never)\n                || enumerable.spaceUnevenCharacters.includes(value as never))\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<PS extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: PS,): EnumByPossibleString<PS>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends Characters, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Characters\n    public static getValue(value: PossibleValue,): | Characters | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype SpaceUnevenCharacterReceived = | PossibleSingleSpaceUnevenCharacter_ExcludingRomainAlphabet | PossibleMixedSpaceUnevenCharacter_RomainAlphabet;\ntype SpaceEvenCharacterReceived = | PossibleSingleSpaceEvenCharacter_ExcludingRomainAlphabet | PossibleMixedSpaceEvenCharacter_RomainAlphabet;","import type {Dispatch, SetStateAction} from 'react';\nimport i18n                            from 'i18next';\n\nimport type {AnyClassWithEveryLanguages, ClassWithEveryLanguages, CompleteClassWithEveryLanguages}from './ClassWithEveryLanguages';\nimport type {AmericanOrEuropeanOriginal, CanadianOrEuropeanOriginal, ChineseOriginal, PossibleAmericanOrEuropeanValue, PossibleCanadianOrEuropeanValue, PossibleChineseValue}from './name/containers/Language';\nimport type {AdditionalAcronym, AdditionalEnglishName, AdditionalOriginalName, BasicAcronym, BasicEnglishName, BasicOriginalName, EnumArray, Names, Ordinals, PossibleAcronym, PossibleEnglishName, PossibleInternationalAcronym, PossibleNonNullableValue, PossibleOriginalName, PossibleSpaceCharacter, PossibleStringValue, PossibleValue}                                                                                                                                                                                                                                                                                                                                                                                         from './EveryLanguages.types';\nimport type {LanguageEnumerable}from './LanguageEnumerable';\nimport type {PossibleAcronym as PossibleAcronym_Project, PossibleDifferentWord, PossibleEnglishName as PossibleEnglishName_Project, PossibleInternationalAcronym as PossibleInternationalAcronym_Project, PossibleOriginalName as PossibleOriginalName_Project}                                                                                                                                                                                                                                                                                                                                                                                                                                                                       from './ProjectLanguages.types';\nimport type {PossibleBraces_Array, PossibleBrackets_Array, PossibleColon, PossibleComma, PossibleCommercialAnd, PossibleEndingBrace, PossibleEndingBracket, PossibleEndingParentheses, PossibleExclamationPoint, PossibleInterrogationPoint, PossibleLowercaseRomainAlphabet_Array, PossibleNumbers_Array, PossibleParentheses_Array, PossiblePoint, PossiblePoints_Array, PossibleSemicolon, PossibleSingleCharacter, PossibleSlash, PossibleSlashes_Array, PossibleStartingBrace, PossibleStartingBracket, PossibleStartingParentheses, PossibleUnionTrait, PossibleUppercaseRomainAlphabet_Array, PossibleVerticalSlash, TextInBraces, TextInBrackets, TextInParentheses, VariableCharacterByCharacter, VariableCharacterByString} from './Characters.types';\nimport type {PossibleLanguageValue}from './ClassWithOnlyProjectLanguages';\nimport type {StaticReference}from '../util/enum/Enum.types';\n\nimport {Characters}   from './Characters';\nimport {EMPTY_STRING} from '../util/emptyVariables';\nimport {Enum}         from '../util/enum/Enum';\n\nexport abstract class EveryLanguages\n    extends Enum<Ordinals, Names>\n    implements LanguageEnumerable<PossibleAcronym, PossibleInternationalAcronym, PossibleEnglishName, PossibleOriginalName, | PossibleDifferentWord | null> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ENGLISH =             new class EveryLanguages_English extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        public override get isCurrentLanguage(): boolean {\n            return EveryLanguages.AMERICAN_ENGLISH.isCurrentLanguage || EveryLanguages.EUROPEAN_ENGLISH.isCurrentLanguage;\n        }\n\n        public override get isDefaultLanguage(): boolean {\n            return EveryLanguages.AMERICAN_ENGLISH.isDefaultLanguage || EveryLanguages.EUROPEAN_ENGLISH.isDefaultLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['english']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['english']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.english;\n        }\n\n        public override original<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['originalEnglish']\n        public override original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): AmericanOrEuropeanOriginal<T> {\n            return classWithEveryLanguages.originalEnglish;\n        }\n\n    }           (true,  'en',    'en',    'English',              'English',);\n    public static readonly AMERICAN_ENGLISH =    new class EveryLanguages_AmericanEnglish extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.EUROPEAN_ENGLISH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['americanEnglish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['americanEnglish']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.americanEnglish;\n        }\n\n    }   (true,  'en-AM', 'en-US', 'English (America)',    'English (America)',   'America',      EveryLanguages.ENGLISH,);\n    public static readonly EUROPEAN_ENGLISH =    new class EveryLanguages_EuropeanEnglish extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.AMERICAN_ENGLISH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanEnglish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanEnglish']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.europeanEnglish;\n        }\n\n    }   (true,  'en-EU', 'en-EU', 'English (Europe)',     'English (Europe)',    'Europe',       EveryLanguages.ENGLISH,);\n    public static readonly FRENCH =              new class EveryLanguages_French extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        public override get isCurrentLanguage(): boolean {\n            return EveryLanguages.CANADIAN_FRENCH.isCurrentLanguage || EveryLanguages.EUROPEAN_FRENCH.isCurrentLanguage;\n        }\n\n        public override get isDefaultLanguage(): boolean {\n            return EveryLanguages.CANADIAN_FRENCH.isDefaultLanguage || EveryLanguages.EUROPEAN_FRENCH.isDefaultLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['french']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['french']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.french;\n        }\n\n        public override original<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['originalFrench']\n        public override original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): CanadianOrEuropeanOriginal<T> {\n            return classWithEveryLanguages.originalFrench;\n        }\n\n    }            (true,  'fr',    'fr',    'French',               'Français',);\n    public static readonly CANADIAN_FRENCH =     new class EveryLanguages_CanadianFrench extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.EUROPEAN_FRENCH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['canadianFrench']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['canadianFrench']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.canadianFrench;\n        }\n\n    }    (true,  'fr-CA', 'fr-CA', 'French (Canada)',      'Français (Canada)',   'Canada',       EveryLanguages.FRENCH,);\n    public static readonly EUROPEAN_FRENCH =     new class EveryLanguages_EuropeanFrench extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.CANADIAN_FRENCH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanFrench']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return this.get(classWithEveryLanguages);\n        }\n\n        public override get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanFrench']\n        public override get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n            return classWithEveryLanguages.europeanFrench;\n        }\n\n    }    (true,  'fr-EU', 'fr-EU', 'French (Europe)',      'Français (Europe)',   'Europe',       EveryLanguages.FRENCH,);\n    public static readonly GERMAN =              new class EveryLanguages_German extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['german']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.german;\n        }\n\n    }            (false, 'de',    'de',    'German',               'Deutsche',);\n    public static readonly SPANISH =             new class EveryLanguages_Spanish extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        public override get isCurrentLanguage(): boolean {\n            return EveryLanguages.AMERICAN_SPANISH.isCurrentLanguage || EveryLanguages.EUROPEAN_SPANISH.isCurrentLanguage;\n        }\n\n        public override get isDefaultLanguage(): boolean {\n            return EveryLanguages.AMERICAN_SPANISH.isDefaultLanguage || EveryLanguages.EUROPEAN_SPANISH.isDefaultLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['spanish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.spanish;\n        }\n\n        public override original<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['originalSpanish']\n        public override original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleAmericanOrEuropeanValue<T> {\n            return classWithEveryLanguages.originalSpanish;\n        }\n\n    }           (false, 'es',    'es',    'Spanish',              'Español',);\n    public static readonly AMERICAN_SPANISH =    new class EveryLanguages_AmericanSpanish extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.AMERICAN_SPANISH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['americanSpanish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.americanSpanish;\n        }\n\n    }   (false, 'es-AM', 'es-US', 'Spanish (America)',    'Español (America)',   'America',      EveryLanguages.SPANISH,);\n    public static readonly EUROPEAN_SPANISH =    new class EveryLanguages_EuropeanSpanish extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.AMERICAN_SPANISH.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanSpanish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.europeanSpanish;\n        }\n\n    }   (false, 'es-EU', 'es-EU', 'Spanish (Europe)',     'Español (Europa)',    'Europe',       EveryLanguages.SPANISH,);\n    public static readonly ITALIAN =             new class EveryLanguages_Italian extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['italian']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.italian;\n        }\n\n    }           (false, 'it',    'it',    'Italian',              'Italiano',);\n    public static readonly DUTCH =               new class EveryLanguages_Dutch extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['dutch']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.dutch;\n        }\n\n    }             (false, 'nl',    'nl',    'Dutch',                'Nederlands',);\n    public static readonly PORTUGUESE =          new class EveryLanguages_Portuguese extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        public override get isCurrentLanguage(): boolean {\n            return EveryLanguages.AMERICAN_PORTUGUESE.isCurrentLanguage || EveryLanguages.EUROPEAN_PORTUGUESE.isCurrentLanguage;\n        }\n\n        public override get isDefaultLanguage(): boolean {\n            return EveryLanguages.AMERICAN_PORTUGUESE.isDefaultLanguage || EveryLanguages.EUROPEAN_PORTUGUESE.isDefaultLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['portuguese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.portuguese;\n        }\n\n        public override original<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['originalPortuguese']\n        public override original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleAmericanOrEuropeanValue<T> {\n            return classWithEveryLanguages.originalPortuguese;\n        }\n\n    }        (false, 'pt',    'pt',    'Portuguese',           'Português',);\n    public static readonly AMERICAN_PORTUGUESE = new class EveryLanguages_AmericanPortuguese extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.EUROPEAN_PORTUGUESE.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['americanPortuguese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.americanPortuguese;\n        }\n\n    }(false, 'pt-AM', 'pt-US', 'Portuguese (America)', 'Português (América)', 'America',      EveryLanguages.PORTUGUESE,);\n    public static readonly EUROPEAN_PORTUGUESE = new class EveryLanguages_EuropeanPortuguese extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.AMERICAN_PORTUGUESE.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['europeanPortuguese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.europeanPortuguese;\n        }\n\n    }(false, 'pt-EU', 'pt-EU', 'Portuguese (Europe)',  'Português (Europa)',  'Europe',       EveryLanguages.PORTUGUESE,);\n    public static readonly RUSSIAN =             new class EveryLanguages_Russian extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['russian']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.russian;\n        }\n\n    }           (false, 'ru',    'ru',    'Russian',              'русский',);\n    public static readonly JAPANESE =            new class EveryLanguages_Japanese extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_EVEN_LANGUAGE_WITHOUT_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['japanese']\n        protected override _get<T>(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.japanese;\n        }\n\n    }          (false, 'ja',    'ja',    'Japanese',             '日本語',);\n    public static readonly CHINESE =             new class EveryLanguages_Chinese extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_EVEN_LANGUAGE_WITHOUT_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        public override get isCurrentLanguage(): boolean {\n            return EveryLanguages.TRADITIONAL_CHINESE.isCurrentLanguage || EveryLanguages.SIMPLIFIED_CHINESE.isCurrentLanguage;\n        }\n\n        public override get isDefaultLanguage(): boolean {\n            return EveryLanguages.TRADITIONAL_CHINESE.isDefaultLanguage || EveryLanguages.SIMPLIFIED_CHINESE.isDefaultLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['chinese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.chinese;\n        }\n\n        public override original<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['originalChinese']\n        public override original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleChineseValue<T> {\n            return classWithEveryLanguages.originalChinese;\n        }\n\n    }           (false, 'zh',    'zh',    'Chinese',              '中国人',);\n    public static readonly TRADITIONAL_CHINESE = new class EveryLanguages_TraditionalChinese extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.SIMPLIFIED_CHINESE.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['traditionalChinese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.traditionalChinese;\n        }\n\n    }(false, 'zh-T',  'zh-TW', 'Traditional chinese',  '繁體中文',              'Traditional', EveryLanguages.CHINESE,);\n    public static readonly SIMPLIFIED_CHINESE =  new class EveryLanguages_SimplifiedChinese extends EveryLanguages {\n\n        public override get isCurrentLanguageOrAssociatedWithIt(): boolean {\n            return this.isCurrentLanguage && EveryLanguages.TRADITIONAL_CHINESE.isCurrentLanguage;\n        }\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['simplifiedChinese']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.simplifiedChinese;\n        }\n\n    } (false, 'zh-S',  'zh-CN', 'Simplified chinese',   '简体中文',              'Simplified',  EveryLanguages.CHINESE,);\n    public static readonly KOREAN =              new class EveryLanguages_Korean extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_EVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['korean']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.korean;\n        }\n\n    }            (false, 'ko',    'ko',    'Korean',               '한국어',);\n\n    public static readonly HEBREW =              new class EveryLanguages_Hebrew extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['hebrew']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.hebrew;\n        }\n\n    }            (false, 'he',    'he',    'Hebrew',               'עִברִית',);\n    public static readonly POLISH =              new class EveryLanguages_Polish extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['polish']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.polish;\n        }\n\n    }            (false, 'pl',    'pl',    'Polish',               'Polski',);\n    public static readonly UKRAINIAN =           new class EveryLanguages_Ukrainian extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['ukrainian']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.ukrainian;\n        }\n\n    }         (false, 'uk',    'uk',    'Ukrainian',            'Український',);\n    public static readonly GREEK =               new class EveryLanguages_Greek extends EveryLanguages {\n\n        //region -------------------- Space getter methods --------------------\n\n        protected override get _spaceParameters(): SpaceParameterReceived {\n            return EveryLanguages._SPACE_UNEVEN_LANGUAGE_WITH_SPACE;\n        }\n\n        //endregion -------------------- Space getter methods --------------------\n\n        protected override _get<T, U extends AnyClassWithEveryLanguages<T> = AnyClassWithEveryLanguages<T>, >(classWithEveryLanguages: U,): U['greek']\n        protected override _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T> {\n            return classWithEveryLanguages.greek;\n        }\n\n    }             (false, 'el',    'el',    'Greek',                'ελληνικά',);\n\n    protected static readonly _DEFAULT = EveryLanguages.AMERICAN_ENGLISH;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EveryLanguages;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #CURRENT_LANGUAGE: EveryLanguages;\n    public static readonly UNKNOWN_STRING = '???';\n    public static readonly SPACE_STRING = ' ';\n    public static INTERNATIONALISATION_SET_CURRENT_LANGUAGE: | Dispatch<SetStateAction<PossibleInternationalAcronym_Project>> | null = null;\n    protected static readonly _SPACE_EVEN_LANGUAGE_WITH_SPACE: SpaceParameterReceived = [true, true, false,];\n    protected static readonly _SPACE_EVEN_LANGUAGE_WITHOUT_SPACE: SpaceParameterReceived = [false, true,];\n    protected static readonly _SPACE_UNEVEN_LANGUAGE_WITH_SPACE: SpaceParameterReceived = [true, false,];\n\n    readonly #isACompleteLanguage: boolean;\n\n    #spaceParameter?: SpaceParameters;\n    #isASpaceEvenLanguage?: boolean;\n\n    readonly #projectAcronym: PossibleAcronym;\n    readonly #internationalAcronym: PossibleInternationalAcronym;\n    readonly #englishName: PossibleEnglishName;\n    readonly #originalName: PossibleOriginalName;\n    readonly #differentWords: | PossibleDifferentWord | null;\n    readonly #parent: | EveryLanguages | null;\n    #children?: PossibleChildrenLanguages;\n\n    #space?: PossibleSpaceCharacter;\n    #points?: PossiblePoints_Array;\n    #comma?: PossibleComma;\n    #unionTrait?: PossibleUnionTrait;\n    #commercialAnd?: PossibleCommercialAnd;\n    #parentheses?: PossibleParentheses_Array;\n    #brackets?: PossibleBrackets_Array;\n    #braces?: PossibleBraces_Array;\n    #slashes?: PossibleSlashes_Array;\n    #romainLowercaseAlphabet?: PossibleLowercaseRomainAlphabet_Array;\n    #romainUppercaseAlphabet?: PossibleUppercaseRomainAlphabet_Array;\n    #numbers?: PossibleNumbers_Array;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(isACompleteLanguage: boolean, projectAcronym: BasicAcronym, internationalAcronym: BasicAcronym, englishName: BasicEnglishName, originalName: BasicOriginalName,)\n    private constructor(isACompleteLanguage: boolean, projectAcronym: AdditionalAcronym, internationalAcronym: AdditionalAcronym, englishName: AdditionalEnglishName, originalName: AdditionalOriginalName,)\n    private constructor(isACompleteLanguage: boolean, projectAcronym: PossibleAcronym_Project, internationalAcronym: PossibleInternationalAcronym_Project, englishName: PossibleEnglishName_Project, originalName: PossibleOriginalName_Project,)\n    private constructor(isACompleteLanguage: boolean, projectAcronym: PossibleAcronym_Project, internationalAcronym: PossibleInternationalAcronym_Project, englishName: PossibleEnglishName_Project, originalName: PossibleOriginalName_Project, differenceWords: PossibleDifferentWord, parent: EveryLanguages,)\n    private constructor(isACompleteLanguage: boolean, projectAcronym: PossibleAcronym, internationalAcronym: PossibleInternationalAcronym, englishName: PossibleEnglishName, originalName: PossibleOriginalName, differenceWords: | PossibleDifferentWord | null = null, parent: | EveryLanguages | null = null,) {\n        super();\n        this.#isACompleteLanguage = isACompleteLanguage;\n        this.#projectAcronym = projectAcronym;\n        this.#internationalAcronym = internationalAcronym;\n        this.#englishName = englishName;\n        this.#originalName = originalName;\n        this.#differentWords = differenceWords;\n        this.#parent = parent;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isACompleteLanguage(): boolean {\n        return this.#isACompleteLanguage;\n    }\n\n    //region -------------------- Space getter methods --------------------\n\n    protected get _spaceParameters(): SpaceParameterReceived {\n        return this.parent!._spaceParameters;\n    }\n\n    private get __spaceParameters(): SpaceParameters {\n        if (this.#spaceParameter == null) {\n            const spaceParameters = this._spaceParameters;\n            if (spaceParameters.length === 3)\n                this.#spaceParameter = spaceParameters;\n            else\n                this.#spaceParameter = [spaceParameters[0], spaceParameters[1], spaceParameters[1],];\n        }\n        return this.#spaceParameter;\n    }\n\n    public get hasSpace(): boolean {\n        return this.__spaceParameters[0];\n    }\n\n    public get isASpaceEvenLanguage(): boolean {\n        return this.#isASpaceEvenLanguage ??= this.isASpaceEvenLanguageForThePointsAndSpace && this.isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace;\n    }\n\n    public get isASpaceEvenLanguageForThePointsAndSpace(): boolean {\n        return this.__spaceParameters[1];\n    }\n\n    public get isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace(): boolean {\n        return this.__spaceParameters[2];\n    }\n\n    //endregion -------------------- Space getter methods --------------------\n\n    public get projectAcronym(): PossibleAcronym {\n        return this.#projectAcronym;\n    }\n\n    public get internationalAcronym(): PossibleInternationalAcronym {\n        return this.#internationalAcronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName;\n    }\n\n    public get originalName(): PossibleOriginalName {\n        return this.#originalName;\n    }\n\n    public get differentWords(): | PossibleDifferentWord | null {\n        return this.#differentWords;\n    }\n\n    public get parent(): | EveryLanguages | null {\n        return this.#parent;\n    }\n\n    public get children(): PossibleChildrenLanguages {\n        return this.#children ??= EveryLanguages.values.filter(language => language.parent != null)\n            .filter(language => language !== this)\n            .filter(language => language.parent === this) as unknown as PossibleChildrenLanguages;\n    }\n\n    public get isCurrentLanguage(): boolean {\n        return this === EveryLanguages.currentLanguage;\n    }\n\n    public get isCurrentLanguageOrAssociatedWithIt(): boolean {\n        return this.isCurrentLanguage;\n    }\n\n    public get isDefaultLanguage(): boolean {\n        return this === EveryLanguages.default;\n    }\n\n    //region -------------------- Characters getter methods --------------------\n\n    public get space(): PossibleSpaceCharacter {\n        return this.#space ??= this.hasSpace ? EveryLanguages.SPACE_STRING : EMPTY_STRING;\n    }\n\n    public get points(): PossiblePoints_Array {\n        return this.#points ??= Characters.getPoints(this.isASpaceEvenLanguage);\n    }\n\n    public get point(): PossiblePoint {\n        return this.points[0];\n    }\n\n    public get interrogationPoint(): PossibleInterrogationPoint {\n        return this.points[1];\n    }\n\n    public get exclamationPoint(): PossibleExclamationPoint {\n        return this.points[2];\n    }\n\n    public get colon(): PossibleColon {\n        return this.points[3];\n    }\n\n    public get semicolon(): PossibleSemicolon {\n        return this.points[4];\n    }\n\n    public get comma(): PossibleComma {\n        return this.#comma ??= Characters.COMMA.getCharacters(this.isASpaceEvenLanguage)[0] as PossibleComma;\n    }\n\n    public get unionTrait(): PossibleUnionTrait {\n        return this.#unionTrait ??= Characters.UNION_TRAIT.getCharacters(this.isASpaceEvenLanguage)[0] as PossibleUnionTrait;\n    }\n\n\n    public get commercialAnd(): PossibleCommercialAnd {\n        return this.#commercialAnd ??= Characters.COMMERCIAL_AND.getCharacters(this.isASpaceEvenLanguage)[0] as PossibleCommercialAnd;\n    }\n\n\n    public get parentheses(): PossibleParentheses_Array {\n        return this.#parentheses ??= Characters.getParentheses(this.isASpaceEvenLanguage);\n    }\n\n    public get startingParenthesis(): PossibleStartingParentheses {\n        return this.parentheses[0];\n    }\n\n    public get endingParenthesis(): PossibleEndingParentheses {\n        return this.parentheses[1];\n    }\n\n    public get brackets(): PossibleBrackets_Array {\n        return this.#brackets ??= Characters.getBrackets(this.isASpaceEvenLanguage);\n    }\n\n    public get startingBrackets(): PossibleStartingBracket {\n        return this.brackets[0];\n    }\n\n    public get endingBrackets(): PossibleEndingBracket {\n        return this.brackets[1];\n    }\n\n    public get braces(): PossibleBraces_Array {\n        return this.#braces ??= Characters.getBraces(this.isASpaceEvenLanguage);\n    }\n\n    public get startingBraces(): PossibleStartingBrace {\n        return this.braces[0];\n    }\n\n    public get endingBraces(): PossibleEndingBrace {\n        return this.braces[1];\n    }\n\n\n    public get slashes(): PossibleSlashes_Array {\n        return this.#slashes ??= Characters.getSlashes(this.isASpaceEvenLanguage);\n    }\n\n    public get slash(): PossibleSlash {\n        return this.slashes[0];\n    }\n\n    public get verticalSlash(): PossibleVerticalSlash {\n        return this.slashes[1];\n    }\n\n\n    public get romainLowercaseAlphabet(): PossibleLowercaseRomainAlphabet_Array {\n        return this.#romainLowercaseAlphabet ??= Characters.getLowercaseLetters(this.isASpaceEvenLanguage);\n    }\n\n    public get romainUppercaseAlphabet(): PossibleUppercaseRomainAlphabet_Array {\n        return this.#romainUppercaseAlphabet ??= Characters.getUppercaseLetters(this.isASpaceEvenLanguage);\n    }\n\n\n    public get numbers(): PossibleNumbers_Array {\n        return this.#numbers ??= Characters.getNumbers(this.isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace);\n    }\n\n\n    public character<C extends PossibleSingleCharacter, >(character: C,): VariableCharacterByCharacter<this['isASpaceEvenLanguage'], C>\n    public character<C extends string, >(character: C,): VariableCharacterByString<this['isASpaceEvenLanguage'], C>\n    public character(character: string,) {\n        return Characters.getCharacter(this.isASpaceEvenLanguage, character,);\n    }\n\n    //endregion -------------------- Characters getter methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected abstract _get<T, >(classWithEveryLanguages: CompleteClassWithEveryLanguages<T>,): T;\n    protected abstract _get<T, >(classWithEveryLanguages: ClassWithEveryLanguages<T>,): PossibleLanguageValue<T>;\n    protected abstract _get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): PossibleLanguageValue<T>;\n\n    public get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n        return this._get(classWithEveryLanguages) ?? EveryLanguages.AMERICAN_ENGLISH.get(classWithEveryLanguages);\n    }\n\n    public original<T, >(classWithEveryLanguages: CompleteClassWithEveryLanguages<T>,): | T | AmericanOrEuropeanOriginal<T> | CanadianOrEuropeanOriginal<T> | ChineseOriginal<T>\n    public original<T, >(classWithEveryLanguages: ClassWithEveryLanguages<T>,): | PossibleLanguageValue<T> | PossibleAmericanOrEuropeanValue<T> | PossibleCanadianOrEuropeanValue<T> | PossibleChineseValue<T>\n    public original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): | PossibleLanguageValue<T> | PossibleAmericanOrEuropeanValue<T> | PossibleCanadianOrEuropeanValue<T> | PossibleChineseValue<T> {\n        return this.parent?.original<T>(classWithEveryLanguages) ?? this.get(classWithEveryLanguages);\n    }\n\n    //region -------------------- Transformation methods --------------------\n\n    public textInParentheses<S extends string, >(text: S,): TextInParentheses<this['isASpaceEvenLanguage'], S>\n    public textInParentheses(text: string,) {\n        return Characters.textInParentheses(this.isASpaceEvenLanguage, text,);\n    }\n\n    public textInBrackets<S extends string, >(text: S,): TextInBrackets<this['isASpaceEvenLanguage'], S>\n    public textInBrackets(text: string,) {\n        return Characters.textInBrackets(this.isASpaceEvenLanguage, text,);\n    }\n\n    public textInBraces<S extends string, >(text: S,): TextInBraces<this['isASpaceEvenLanguage'], S>\n    public textInBraces(text: string,) {\n        return Characters.textInBraces(this.isASpaceEvenLanguage, text,);\n    }\n\n    //endregion -------------------- Transformation methods --------------------\n\n    /**\n     * Set the language into the dom elements using a <b>lang</b> value\n     * to change it to the current instance.\n     */\n    #setLanguageToHTML(): this {\n        document.querySelectorAll('[lang]').forEach(element => element.setAttribute('lang', this.projectAcronym));\n        return this;\n    }\n\n    public static get currentLanguage(): EveryLanguages {\n        return this.#CURRENT_LANGUAGE;\n    }\n\n    public static set currentLanguage(value: | EveryLanguages | string | number,) {\n        this.setCurrentLanguage(value);\n    }\n\n    public static setCurrentLanguage(value: | EveryLanguages | string | number,): typeof EveryLanguages {\n        let selectedLanguage = this.getValue(value);\n        if (selectedLanguage == null || selectedLanguage.isCurrentLanguage)\n            return this;\n\n        const currentLanguage = (this.#CURRENT_LANGUAGE = selectedLanguage.#setLanguageToHTML());\n        i18n.changeLanguage(currentLanguage.projectAcronym);\n        this.INTERNATIONALISATION_SET_CURRENT_LANGUAGE?.(currentLanguage.internationalAcronym as PossibleInternationalAcronym_Project);\n        return this;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EveryLanguages> {\n        return EveryLanguages;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): EveryLanguages {\n        return Enum.getNonNullDefaultOn(EveryLanguages);\n    }\n\n    public static set default(value: EveryLanguages | string | number,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | EveryLanguages | string | number,): typeof EveryLanguages {\n        return Enum.setNonNullDefaultOn(EveryLanguages, value,);\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,): | EveryLanguages | null {\n        return this.values.find(enumerable => enumerable.projectAcronym === value\n                || enumerable.internationalAcronym === value\n                || enumerable.englishName === value\n                || enumerable.originalName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumArray[O]\n    public static getValue<O extends number = number, >(ordinal: O,): | NonNullable<EnumArray[O]> | null\n    public static getValue<N extends Names = Names>(name: N,): typeof EveryLanguages[N]\n    public static getValue(nameOrAcronym: PossibleStringValue,): EveryLanguages\n    public static getValue(nameOrAcronym: string,): | EveryLanguages | null\n    public static getValue<I extends EveryLanguages = EveryLanguages, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EveryLanguages\n    public static getValue(value: PossibleValue,): | EveryLanguages | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(EveryLanguages);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype SpaceParameterReceived = | [hasSpace: boolean, isSpaceEvenLanguage: boolean,] | readonly [hasSpace: boolean, isSpaceEvenLanguageExcludingPointsAndSpace: boolean, isSpaceEvenLanguagePointsAndSpace: boolean,];\ntype SpaceParameters = readonly [hasSpace: boolean, isSpaceEvenLanguageExcludingPointsAndSpace: boolean, isSpaceEvenLanguagePointsAndSpace: boolean,];\ntype PossibleChildrenLanguages = readonly [EveryLanguages, EveryLanguages,] | readonly [];\n","import {AssertionError} from 'assert';\nimport {isInProduction} from '../variables';\n\n/**\n * Validate if an array is equals to another one.\n *\n * It will validate recursively if every item within the array are equals (whenever the type it is).\n *\n * @param firstArray\n * @param secondArray\n */\nexport function isArrayEquals(firstArray: readonly any[], secondArray: readonly any[],): boolean {\n    if (firstArray === secondArray)\n        return true;\n    if (firstArray.length !== secondArray.length)\n        return false;\n\n    const length = firstArray.length;\n\n    for (let i = 0; i < length; i++) {\n        const elementInFirstArray = firstArray[i];\n        const elementInSecondArray = secondArray[i];\n        if (elementInFirstArray instanceof Array && elementInSecondArray instanceof Array)\n            if (!isArrayEquals(elementInFirstArray, elementInSecondArray,))\n                return false;\n        if (firstArray[i] !== secondArray[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function assert(condition: boolean, message: string,): asserts condition {\n    if (isInProduction)\n        return;\n    if (!condition)\n        throw new AssertionError({message: message,});\n}\n","import type {ObjectHolder, PossibleValueOnObjectHolder} from './ObjectHolder';\n\nimport {ObjectHolderContainer} from './ObjectHolder.container';\n\nexport class DelayedObjectHolderContainer<T>\n    implements ObjectHolder<T> {\n\n    #hasBeenInitialised;\n    #object?: T;\n    readonly #callback;\n\n    public constructor(value: PossibleValueOnObjectHolder<T>,) {\n        this.#hasBeenInitialised = false;\n        this.#callback = () => {\n            this.#hasBeenInitialised = true;\n            return new ObjectHolderContainer(value).get;\n        };\n    }\n\n\n    public get hasBeenInitialised(): boolean {\n        return this.#hasBeenInitialised;\n    }\n\n    public get callback(): () => T {\n        return this.#callback;\n    }\n\n    public get get(): T {\n        if (!this.hasBeenInitialised)\n            this.#object = this.#callback();\n        return this.#object!;\n    }\n\n}\n","/**\n * The base path of the project.\n *\n * Currently, it is used by the images (indirectly) & editor voices.\n *\n * @note if this value changes, the package.json homepage should change too.\n * @see EditorVoices\n */\nexport const BASE_PATH = 'smm-encyclopedia';\n\n/**\n * A basic representation of the base path.\n * It is a simple alias for the name to use instead of <b>typeof BASE_PATH</b>.\n *\n * @see BASE_PATH\n */\nexport type BasePath = typeof BASE_PATH;\n\n/**\n * Define if the application is in production.\n */\nexport const isInProduction = process.env.NODE_ENV === 'production';\n","export class StringContainer<T extends string, T_HTML extends string = string, > {\n\n    /**\n     * A regex containing the characters that should be removed direclty\n     * <ol>\n     *  <li>:</li>\n     *  <li>(</li>\n     *  <li>)</li>\n     *  <li>[</li>\n     *  <li>]</li>\n     *  <li>-</li>\n     *  <li>|</li>\n     *  <li>'s</li>\n     * </ol>\n     */\n    static readonly #REMOVAL_REGEX = /[.:()[\\]]-|('s)/g;\n\n    static readonly #REPLACE_CHARACTERS = new Map([['?', 'question'], ['!', 'exclamation'], ['&', 'and',], ['|', 'or',],] as const);\n\n    static readonly #WORD_SEPARATOR_REGEX = /[ \\-\\\\/]/g;\n\n    static readonly #ALREADY_CONVERTED_VALUES = new Map<string, string>();\n\n    readonly #value;\n    #valueInHtml?: T_HTML;\n\n    public constructor(value: T,) {\n        this.#value = value;\n    }\n\n    public get get(): T {\n        return this.#value;\n    }\n\n    public get getInHtml(): T_HTML {\n        return this.#valueInHtml ??= StringContainer.getInHtml(this.get) as T_HTML;\n    }\n\n    /**\n     * Convert the value received in an html format string.<br/>\n     *\n     * Example: <u>anExample-withSomething(weird)&fun</u>\n     * will be transformed in <u>anExampleWithSomethingWeirdAndFun</u><br/>\n     *\n     * It also keeps track of the converted values to not reiterate the same values twice.\n     *\n     * @param value The value to convert as a proper HTML value.\n     */\n    public static getInHtml(value: string,): string {\n        if (this.#ALREADY_CONVERTED_VALUES.has(value))\n            return this.#ALREADY_CONVERTED_VALUES.get(value)!;\n\n        const splitValues = value.toLowerCase()\n            .replaceAll(this.#REMOVAL_REGEX, '',)\n            .split(this.#WORD_SEPARATOR_REGEX)\n            .map(stringValue => this.#REPLACE_CHARACTERS.get(stringValue as never) ?? stringValue)\n            .map(stringValue => {\n                this.#REPLACE_CHARACTERS.forEach((replacementText, characterToReplace,) => {\n                    if (stringValue.includes(characterToReplace))\n                        stringValue = stringValue.replace(characterToReplace, '');\n                });\n                return stringValue;\n            }).flat(2);\n\n        const returnedValue = splitValues.shift() + splitValues.map(stringValue => stringValue.charAt(0).toUpperCase() + stringValue.substring(1)).join('');\n        this.#ALREADY_CONVERTED_VALUES.set(value, returnedValue,);\n        return returnedValue;\n    }\n\n}\n","import type {EmptyableStringConstant, EveryAlternativeAcronym_EntityLimit, EveryConditionToUnlockIt_MysteryMushroom, EveryEnglishName_EntityLimit, EveryEnglishNameOrUnknown_EntityLimit, EveryPossibleAcronym_EntityBehaviour, EveryPossibleAcronym_EntityLimit, EveryPossibleAcronym_GameReference, EveryPossibleAcronym_GameStyle, EveryPossibleAcronymWithPokemonGeneration_GameReference, EveryPossibleEnglishName_EntityLimitType, EveryPossibleEnglishName_PredefinedMessage, EveryPossibleEnglishName_SoundEffect, EveryPossibleEnglishName_SoundEffectCategory, EveryPossibleEnglishNameOnFile_MysteryMushroom, EveryPossibleName_Entity, EveryPossibleName_EntityCategory, EveryPossibleName_EntityGroup, EveryPossibleName_EntityLimit, EveryPossibleName_GameReference, EveryPossibleName_Instrument, EveryPossibleName_MiiCostumeCategory, EveryPossibleName_Theme, EveryPossibleName_ThemeNightEffect, EveryPossibleName_Version, EveryPossibleName_Version_SMM, EveryPossibleName_Version_SMM2, EveryPossibleName_Version_SMM3DS, EveryPossibleNameOnEntity_Instrument, EveryPossibleNameWithAmount_OfficialNotification, EveryPossibleTranslationKey_EntityBehaviour, EverySmallDefinition_SoundEffectOnDeath_MysteryMushroom, EverySmallDefinition_SoundEffectOnGoalPole_MysteryMushroom, HeaderTypesForConvertorDefinition, StringConstant, UnknownCharacter, UnknownReference} from './HeaderTypesForConvertorDefinition';\n\nimport {Import}         from '../../../util/DynamicImporter';\nimport {isInProduction} from '../../../variables';\n\n/**\n * @singleton\n * @classWithDynamicImport {@link GameReferences}, {@link GameStyles}, {@link Entities}, {@link EntityBehaviours} {@link Themes}, {@link NightEffects}, {@link EntityCategories}, {@link EntityLimits}, {@link EntityLimitTypes}, {@link SoundEffects}, {@link SoundEffectCategories}, {@link MiiCostumeCategories}, {@link MysteryMushrooms}, {@link Versions}\n */\nclass HeaderTypesForConvertorForTestAndDevelopment\n    implements HeaderTypesForConvertorDefinition {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: HeaderTypesForConvertorForTestAndDevelopment;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    //region -------------------- Fields --------------------\n\n    static readonly #UNKNOWN_CHARACTER: UnknownCharacter = '?';\n    static readonly #UNKNOWN_REFERENCE: UnknownReference = '???';\n\n    //region -------------------- Array fields --------------------\n\n    #everyPossibleAcronym_gameReference?: EveryPossibleAcronym_GameReference;\n    #everyPossibleAcronymWithPokemonGeneration_gameReference?: EveryPossibleAcronymWithPokemonGeneration_GameReference;\n    #everyPossibleName_gameReference?: EveryPossibleName_GameReference;\n\n    #everyPossibleAcronym_gameStyle?: EveryPossibleAcronym_GameStyle;\n\n    #everyPossibleName_entity?: EveryPossibleName_Entity;\n\n    #everyPossibleAcronym_entityBehaviour?: EveryPossibleAcronym_EntityBehaviour;\n    #everyPossibleTranslationKey_entityBehaviour?: EveryPossibleTranslationKey_EntityBehaviour;\n\n    #everyPossibleName_entityGroup?: EveryPossibleName_EntityGroup;\n\n    #everyPossibleName_theme?: EveryPossibleName_Theme;\n    #everyPossibleName_themeNightEffect?: EveryPossibleName_ThemeNightEffect;\n\n    #everyPossibleName_entityCategory?: EveryPossibleName_EntityCategory;\n\n    #everyPossibleAcronym_limit?: EveryPossibleAcronym_EntityLimit;\n    #everyAlternativeAcronym_limit?: EveryAlternativeAcronym_EntityLimit;\n    #everyPossibleName_limit?: EveryPossibleName_EntityLimit;\n    #everyName_limit?: EveryEnglishName_EntityLimit;\n    #everyNameOrUnknown_limit?: EveryEnglishNameOrUnknown_EntityLimit;\n\n    #everyPossibleName_limitType?: EveryPossibleEnglishName_EntityLimitType;\n\n    #everyPossibleName_soundEffect?: EveryPossibleEnglishName_SoundEffect;\n    #everyPossibleName_soundEffectCategory?: EveryPossibleEnglishName_SoundEffectCategory;\n\n    #everyPossibleName_MiiCostumeCategory?: EveryPossibleName_MiiCostumeCategory;\n\n    #everyPossibleEnglishNameOnFile_mysteryMushroom?: EveryPossibleEnglishNameOnFile_MysteryMushroom;\n    #everyPossibleConditionToUnlockIt_mysteryMushroom?: EveryConditionToUnlockIt_MysteryMushroom;\n    #everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom?: EverySmallDefinition_SoundEffectOnGoalPole_MysteryMushroom;\n    #everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom?: EverySmallDefinition_SoundEffectOnDeath_MysteryMushroom;\n\n    #everyPossibleNameWithAmount_officialNotification?: EveryPossibleNameWithAmount_OfficialNotification;\n\n    #everyPossibleName_predefinedMessage?: EveryPossibleEnglishName_PredefinedMessage;\n\n    #everyPossibleName_instrument?: EveryPossibleName_Instrument;\n    #everyPossibleNameOnEntity_instrument?: EveryPossibleNameOnEntity_Instrument;\n\n    #everyPossibleName_version?: EveryPossibleName_Version;\n    #everyPossibleName_version_smm?: EveryPossibleName_Version_SMM;\n    #everyPossibleName_version_smm3ds?: EveryPossibleName_Version_SMM3DS;\n    #everyPossibleName_version_smm2?: EveryPossibleName_Version_SMM2;\n\n    //endregion -------------------- Array fields --------------------\n\n    //endregion -------------------- Fields --------------------\n\n    //region -------------------- Game reference --------------------\n\n    public get everyPossibleAcronym_gameReference() {\n        return this.#everyPossibleAcronym_gameReference ??= Import.GameReferences.everyAcronyms;\n    }\n\n    public get everyPossibleAcronymWithPokemonGeneration_gameReference() {\n        return this.#everyPossibleAcronymWithPokemonGeneration_gameReference ??= [\n            ...Import.GameReferences.everyAcronyms,\n            'Pokémon gen 1', 'Pokémon gen 4', 'Pokémon gen 6',\n        ];\n    }\n\n    public get everyPossibleName_gameReference() {\n        return this.#everyPossibleName_gameReference ??= Import.GameReferences.everyEnglishNames;\n    }\n\n    //endregion -------------------- Game reference --------------------\n    //region -------------------- Game style --------------------\n\n    public get everyPossibleAcronym_gameStyle() {\n        return this.#everyPossibleAcronym_gameStyle ??= Import.GameStyles.everyAcronyms;\n    }\n\n    //endregion -------------------- Game style --------------------\n    //region -------------------- Entity --------------------\n\n    public get everyPossibleName_entity() {\n        return this.#everyPossibleName_entity ??= Import.Entities.everyEnglishNames;\n    }\n\n    //endregion -------------------- Entity --------------------\n    //region -------------------- Entity behaviour --------------------\n\n    public get everyPossibleAcronym_entityBehaviour() {\n        return this.#everyPossibleAcronym_entityBehaviour ??= Import.EntityBehaviours.everyAcronyms;\n    }\n\n    public get everyPossibleTranslationKey_entityBehaviour() {\n        return this.#everyPossibleTranslationKey_entityBehaviour ??= Import.EntityBehaviours.everyTranslationKeys;\n    }\n\n    //endregion -------------------- Entity behaviour --------------------\n    //region -------------------- Entity group --------------------\n\n    public get everyPossibleName_entityGroup() {\n        //TODO implements this methods\n        return this.#everyPossibleName_entityGroup ??= [];\n    }\n\n    //endregion -------------------- Entity group --------------------\n    //region -------------------- Theme --------------------\n\n    public get everyPossibleName_theme(): EveryPossibleName_Theme {\n        return this.#everyPossibleName_theme ??= Import.Themes.everyEnglishNames;\n    }\n\n    public get everyPossibleName_themeNightEffect(): EveryPossibleName_ThemeNightEffect {\n        return this.#everyPossibleName_themeNightEffect ??= Import.NightEffects.everyEnglishNames;\n    }\n\n    //endregion -------------------- Theme --------------------\n    //region -------------------- Entity category --------------------\n\n    public get everyPossibleName_entityCategory() {\n        return this.#everyPossibleName_entityCategory ??= Import.EntityCategories.everyEnglishNames;\n    }\n\n    //endregion -------------------- Entity group --------------------\n    //region -------------------- Entity limit --------------------\n\n    public get everyPossibleAcronym_limit() {\n        return this.#everyPossibleAcronym_limit ??= [...Import.EntityLimits.everyAcronyms, ...Import.EntityLimits.everyAlternativeAcronyms,];\n    }\n\n    public get everyAlternativeAcronym_limit() {\n        return this.#everyAlternativeAcronym_limit ??= Import.EntityLimits.everyAlternativeAcronyms;\n    }\n\n    public get everyPossibleName_limit() {\n        return this.#everyPossibleName_limit ??= [...Import.EntityLimits.everyEnglishNames, ...Import.EntityLimits.everyAlternativeEnglishNames,];\n    }\n\n    public get everyName_limit() {\n        return this.#everyName_limit ??= Import.EntityLimits.everyEnglishNames;\n    }\n\n    public get everyNameOrUnknown_limit() {\n        return this.#everyNameOrUnknown_limit ??= [HeaderTypesForConvertorForTestAndDevelopment.#UNKNOWN_CHARACTER, ...Import.EntityLimits.everyEnglishNames,];\n    }\n\n    //endregion -------------------- Entity limit --------------------\n    //region -------------------- Entity limit type --------------------\n\n    public get everyPossibleName_limitType() {\n        return this.#everyPossibleName_limitType ??= Import.EntityLimitTypes.everyEnglishNames;\n    }\n\n    //endregion -------------------- Entity limit type --------------------\n    //region -------------------- Sound effect --------------------\n\n    public get everyPossibleName_soundEffect() {\n        return this.#everyPossibleName_soundEffect ??= Import.SoundEffects.everyEnglishNames;\n    }\n\n    //endregion -------------------- Sound effect --------------------\n    //region -------------------- Sound effect category --------------------\n\n    public get everyPossibleName_soundEffectCategory() {\n        return this.#everyPossibleName_soundEffectCategory ??= Import.SoundEffectCategories.everyEnglishNames;\n    }\n\n    //endregion -------------------- Sound effect category --------------------\n    //region -------------------- Mii costume --------------------\n    //endregion -------------------- Mii costume --------------------\n    //region -------------------- Mii costume category --------------------\n\n    public get everyPossibleName_MiiCostumeCategory() {\n        return this.#everyPossibleName_MiiCostumeCategory ??= Import.MiiCostumeCategories.everyEnglishNames;\n    }\n\n    //endregion -------------------- Mii costume category --------------------\n    //region -------------------- Mystery Mushroom --------------------\n\n    public get everyPossibleEnglishNameOnFile_mysteryMushroom() {\n        return this.#everyPossibleEnglishNameOnFile_mysteryMushroom ??= Import.MysteryMushrooms.everyEnglishNamesOnFile;\n    }\n\n    public get everyPossibleConditionToUnlockIt_mysteryMushroom() {\n        return this.#everyPossibleConditionToUnlockIt_mysteryMushroom ??= [\n            'Unlock Mystery Mushroom',\n            '100 Mario (easy)', '100 Mario (normal)', '100 Mario (expert)', '100 Mario (super expert)',\n            'Gnat Attack (normal)', 'Gnat Attack (hard)',\n            'Complete Event', 'Complete 3 Events (by Arino)',\n        ];\n    }\n\n    public get everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom() {\n        return this.#everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom ??= [\n            HeaderTypesForConvertorForTestAndDevelopment.#UNKNOWN_REFERENCE,\n            'Introduction', 'Startup', 'Game over',\n            'Level finished', 'Level finished?', 'Race finished',\n            'Airship completed', 'Timed event completed', 'Course completed',\n            'Perfect score obtained', 'Upgrade obtained', 'Important item obtained',\n            'Star collected', 'Triforce collected',\n            'Boss key obtained', 'Boss defeated',\n            'New technique acquired', 'Gym Leader victory', 'Rank up', 'Secret area discovered', 'Declaring the Splatfest\\'s winning team',\n            'Bowser\\'s arrival', 'Link meets Zelda for the 1st time', 'Ganon encounter',\n            '3DS preview jingle',\n        ];\n    }\n\n    public get everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom() {\n        return this.#everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom ??= [\n            HeaderTypesForConvertorForTestAndDevelopment.#UNKNOWN_REFERENCE,\n            'Game over', 'Defeated', 'Error sound',\n            'Boss defeated', 'Dog laughing',\n            'Lost a life', 'Lost an Arwing', 'Falling offscreen',\n            'Eliminated from the race', 'Eliminated from the course', 'Player has fainted',\n            'Minigame lost', 'Round lost',\n            'Timed event failed', 'Ran out of energy', 'Practice Catcher result jingle',\n            'Bowser\\'s death', 'Mario saying \"Mama mia\"', 'Zelda\\'s Lullaby', 'Link caught by Moblins', 'K.K. howling', 'Pikmin death',\n        ];\n    }\n\n    //endregion -------------------- Mystery Mushroom --------------------\n    //region -------------------- Official notification --------------------\n\n    public get everyPossibleNameWithAmount_officialNotification(): EveryPossibleNameWithAmount_OfficialNotification {\n        return this.#everyPossibleNameWithAmount_officialNotification ??= Import.OfficialNotifications.values.map(enumerable => [enumerable.englishName, enumerable.additionalEnglishName]).flat(2);\n    }\n\n    //endregion -------------------- Official notification --------------------\n    //region -------------------- Predefined message --------------------\n\n    public get everyPossibleName_predefinedMessage() {\n        return this.#everyPossibleName_predefinedMessage ??= Import.PredefinedMessages.everyEnglishNames;\n    }\n\n    //endregion -------------------- Predefined message --------------------\n    //region -------------------- Instrument --------------------\n\n    public get everyPossibleName_instrument() {\n        return this.#everyPossibleName_instrument ??= Import.Instruments.everyEnglishNames;\n    }\n\n    public get everyPossibleNameOnEntity_instrument() {\n        return this.#everyPossibleNameOnEntity_instrument ??= [\n            ...Import.Instruments.everyEnglishNames,\n            'Unchain Chomp → Piano 1\\nStump → Mokugyo',\n            'Regular → Cymbal\\nSideway → Hi-Hat',\n            'Bottom → Hello\\nTop → Ok'\n        ];\n    }\n\n    //endregion -------------------- Instrument --------------------\n    //region -------------------- Version --------------------\n\n    public get everyPossibleName_version() {\n        return this.#everyPossibleName_version ??= Import.Versions.everyNames;\n    }\n\n    public get everyPossibleName_version_smm() {\n        return this.#everyPossibleName_version_smm ??= Import.Versions.everyNames_smm1;\n    }\n\n    public get everyPossibleName_version_smm3ds() {\n        return this.#everyPossibleName_version_smm3ds ??= Import.Versions.everyNames_smm3ds;\n    }\n\n    public get everyPossibleName_version_smm2() {\n        return this.#everyPossibleName_version_smm2 ??= Import.Versions.everyNames_smm2;\n    }\n\n    //endregion -------------------- Version --------------------\n\n}\n\n/**\n * @singleton\n */\nclass HeaderTypesForConvertorForProduction\n    implements HeaderTypesForConvertorDefinition {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: HeaderTypesForConvertorForProduction;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    //region -------------------- Fields --------------------\n\n    static readonly #STRING_VALUE: StringConstant = 'string';\n    static readonly #EMPTYABLE_STRING_VALUE: EmptyableStringConstant = 'emptyable string';\n    // static readonly #NUMBER_VALUE: NumberConstant = 'number';\n    // static readonly #STRING_AND_NUMBER: StringAndNumber = [this.#STRING_VALUE, this.#NUMBER_VALUE,];\n    // static readonly #EMPTY_ARRAY: EmptyArray = [];\n\n    //endregion -------------------- Fields --------------------\n\n    //region -------------------- Game reference --------------------\n\n    public readonly everyPossibleAcronym_gameReference = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleAcronymWithPokemonGeneration_gameReference = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_gameReference = HeaderTypesForConvertorForProduction.#EMPTYABLE_STRING_VALUE;\n\n    //endregion -------------------- Game reference --------------------\n    //region -------------------- Game style --------------------\n\n    public readonly everyPossibleAcronym_gameStyle = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Game style --------------------\n    //region -------------------- Entity --------------------\n\n    public readonly everyPossibleName_entity = HeaderTypesForConvertorForProduction.#EMPTYABLE_STRING_VALUE;\n\n    //endregion -------------------- Entity --------------------\n    //region -------------------- Entity behaviour --------------------\n\n    public readonly everyPossibleAcronym_entityBehaviour = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleTranslationKey_entityBehaviour = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Entity behaviour --------------------\n    //region -------------------- Entity group --------------------\n\n    public readonly everyPossibleName_entityGroup = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Entity group --------------------\n    //region -------------------- Theme --------------------\n\n    public readonly everyPossibleName_theme = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_themeNightEffect = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Theme --------------------\n    //region -------------------- Entity category --------------------\n\n    public readonly everyPossibleName_entityCategory = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Entity category --------------------\n    //region -------------------- Entity limit --------------------\n\n    public readonly everyPossibleAcronym_limit = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyAlternativeAcronym_limit = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_limit = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyName_limit = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyNameOrUnknown_limit = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Entity limit --------------------\n    //region -------------------- Entity limit type --------------------\n\n    public readonly everyPossibleName_limitType = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Entity limit type --------------------\n    //region -------------------- Sound effect --------------------\n\n    public readonly everyPossibleName_soundEffect = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Sound effect --------------------\n    //region -------------------- Sound effect category --------------------\n\n    public readonly everyPossibleName_soundEffectCategory = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Sound effect category --------------------\n    //region -------------------- Mii costume --------------------\n    //endregion -------------------- Mii costume --------------------\n    //region -------------------- Mii costume category --------------------\n\n    public readonly everyPossibleName_MiiCostumeCategory = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Mii costume category --------------------\n    //region -------------------- Mystery Mushroom --------------------\n\n    public readonly everyPossibleEnglishNameOnFile_mysteryMushroom = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleConditionToUnlockIt_mysteryMushroom = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Mystery Mushroom --------------------\n    //region -------------------- Official notification --------------------\n\n    public readonly everyPossibleNameWithAmount_officialNotification = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Official notification --------------------\n    //region -------------------- Predefined message --------------------\n\n    public readonly everyPossibleName_predefinedMessage = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Predefined message --------------------\n    //region -------------------- Instrument --------------------\n\n    public readonly everyPossibleName_instrument = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleNameOnEntity_instrument = HeaderTypesForConvertorForProduction.#EMPTYABLE_STRING_VALUE;\n\n    //endregion -------------------- Instrument --------------------\n    //region -------------------- Version --------------------\n\n    public readonly everyPossibleName_version = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_version_smm = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_version_smm3ds = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n    public readonly everyPossibleName_version_smm2 = HeaderTypesForConvertorForProduction.#STRING_VALUE;\n\n    //endregion -------------------- Version --------------------\n\n}\n\n/**\n * <p>\n *  A dynamic variable to make the production built faster.\n *  Mainly to avoid any useless validations (since they will never be used)\n *  and to avoid any {@link Array array} creation that will never be used.\n * </p>\n *\n * <p>\n *  The constant is made of the {@link HeaderTypesForConvertorForProduction production build (HeaderTypesForConvertorForProduction)}\n *  and the {@link HeaderTypesForConvertorForTestAndDevelopment test & development build (HeaderTypesForConvertorForTestAndDevelopment)}.\n * </p>\n * @see HeaderTypesForConvertorDefinition\n */\nconst HeaderTypesForConvertor: HeaderTypesForConvertorDefinition = isInProduction ? HeaderTypesForConvertorForProduction.get : HeaderTypesForConvertorForTestAndDevelopment.get;\nexport {HeaderTypesForConvertor};\n","import type {AnyClassWithEveryLanguages, ClassWithEveryLanguages, CompleteClassWithEveryLanguages}from './ClassWithEveryLanguages';\nimport type {AmericanOrEuropeanOriginal, CanadianOrEuropeanOriginal, ChineseOriginal, PossibleAmericanOrEuropeanValue, PossibleCanadianOrEuropeanValue, PossibleChineseValue}from './name/containers/Language';\nimport type {ClassInAnySuperMarioMakerGame}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           from '../core/game/ClassInAnySuperMarioMakerGame';\nimport type {EnumArray, Names, Ordinals, PossibleAcronym, PossibleDifferentWord, PossibleEnglishName, PossibleInternationalAcronym, PossibleNonNullableValue, PossibleOriginalName, PossibleStringValue, PossibleValue}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               from './ProjectLanguages.types';\nimport type {Enumerable}from '../util/enum/Enumerable';\nimport type {LanguageEnumerable}from './LanguageEnumerable';\nimport type {PossibleBraces_Array, PossibleBrackets_Array, PossibleColon, PossibleComma, PossibleCommercialAnd, PossibleEndingBrace, PossibleEndingBracket, PossibleEndingParentheses, PossibleExclamationPoint, PossibleInterrogationPoint, PossibleLowercaseRomainAlphabet_Array, PossibleNumbers_Array, PossibleParentheses_Array, PossiblePoint, PossiblePoints_Array, PossibleSemicolon, PossibleSingleCharacter, PossibleSlash, PossibleSlashes_Array, PossibleStartingBrace, PossibleStartingBracket, PossibleStartingParentheses, PossibleUnionTrait, PossibleUppercaseRomainAlphabet_Array, PossibleVerticalSlash, TextInBraces, TextInBrackets, TextInParentheses, VariableCharacterByCharacter, VariableCharacterByString} from './Characters.types';\nimport type {PossibleLanguageValue}from './ClassWithOnlyProjectLanguages';\nimport type {PossibleSpaceCharacter}from './EveryLanguages.types';\nimport type {StaticReference}from '../util/enum/Enum.types';\n\nimport {Enum}           from '../util/enum/Enum';\nimport {EveryLanguages} from './EveryLanguages';\n\n/**\n * <p>\n *     An enum class containing every languages in the project.\n *     The languages used are only those direct languages and not a basic language.\n * </p>\n *\n * <p>\n *     The other utility class is the getter and setter from a {@link ClassWithEveryLanguages}\n *     to retrieve its property by the instance that is used.\n * </p>\n *\n * As it stands, the languages are:\n * <ol>\n *     <li>en-AM - American English</li>\n *     <li>en-EU - European English</li>\n *     <li>fr-CA - Canadian French</li>\n *     <li>fr-EU - European French</li>\n *     <li>de    - German</li>\n *     <li>es-AM - American Spanish</li>\n *     <li>es-EU - European Spanish</li>\n *     <li>it    - Italian</li>\n *     <li>nl    - Dutch</li>\n *     <li>pt-AM - American Portuguese</li>\n *     <li>pt-EU - European Portuguese</li>\n *     <li>ru    - Russian</li>\n *     <li>ja    - Japanese</li>\n *     <li>zh-T  - Traditional Chinese</li>\n *     <li>zh-S  - Simplified Chinese</li>\n *     <li>ko    - Korean</li>\n * </ol>\n *\n * @indirectlyInherit<EveryLanguages>\n */\nexport class ProjectLanguages\n    extends Enum<Ordinals, Names>\n    implements LanguageEnumerable<PossibleAcronym, PossibleInternationalAcronym, PossibleEnglishName, PossibleOriginalName, PossibleDifferentWord>,\n        ClassInAnySuperMarioMakerGame {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly AMERICAN_ENGLISH =    new ProjectLanguages(EveryLanguages.AMERICAN_ENGLISH,    true,  true,  true, );\n    public static readonly EUROPEAN_ENGLISH =    new ProjectLanguages(EveryLanguages.EUROPEAN_ENGLISH,    true,  true,  true, );\n    public static readonly CANADIAN_FRENCH =     new ProjectLanguages(EveryLanguages.CANADIAN_FRENCH,     true,  true,  true, );\n    public static readonly EUROPEAN_FRENCH =     new ProjectLanguages(EveryLanguages.EUROPEAN_FRENCH,     true,  true,  true, );\n    public static readonly GERMAN =              new ProjectLanguages(EveryLanguages.GERMAN,              true,  true,  true, );\n    public static readonly AMERICAN_SPANISH =    new ProjectLanguages(EveryLanguages.AMERICAN_SPANISH,    true,  true,  true, );\n    public static readonly EUROPEAN_SPANISH =    new ProjectLanguages(EveryLanguages.EUROPEAN_SPANISH,    true,  true,  true, );\n    public static readonly ITALIAN =             new ProjectLanguages(EveryLanguages.ITALIAN,             true,  true,  true, );\n    public static readonly DUTCH =               new ProjectLanguages(EveryLanguages.DUTCH,               true,  true,  true, );\n    public static readonly AMERICAN_PORTUGUESE = new ProjectLanguages(EveryLanguages.AMERICAN_PORTUGUESE, false, false, false,);\n    public static readonly EUROPEAN_PORTUGUESE = new ProjectLanguages(EveryLanguages.EUROPEAN_PORTUGUESE, true,  true,  false,);\n    public static readonly RUSSIAN =             new ProjectLanguages(EveryLanguages.RUSSIAN,             true,  true,  true, );\n    public static readonly JAPANESE =            new ProjectLanguages(EveryLanguages.JAPANESE,            true,  true,  true, );\n    public static readonly TRADITIONAL_CHINESE = new ProjectLanguages(EveryLanguages.TRADITIONAL_CHINESE, false, false, true, );\n    public static readonly SIMPLIFIED_CHINESE =  new ProjectLanguages(EveryLanguages.SIMPLIFIED_CHINESE,  false, false, true, );\n    public static readonly KOREAN =              new ProjectLanguages(EveryLanguages.KOREAN,              false, false, true, );\n\n    protected static readonly _DEFAULT = this.getValue(EveryLanguages.default)!;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ProjectLanguages;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #language: EveryLanguages;\n    readonly #isInSuperMarioMaker1: boolean;\n    readonly #isInSuperMarioMakerFor3DS: boolean;\n    readonly #isInSuperMarioMaker2: boolean;\n    #isInEverySuperMarioMakerGame?: boolean;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(language: ProjectLanguages,)\n    // @ts-ignore\n    private constructor(language: EveryLanguages, isASupportedLanguageInSMM1: boolean, isASupportedLanguageInSMM3DS: boolean, isASupportedLanguageInSMM2: boolean,)\n    protected constructor(language: EveryLanguages | ProjectLanguages, isASupportedLanguageInSMM1?: boolean, isASupportedLanguageInSMM3DS?: boolean, isASupportedLanguageInSMM2?: boolean,) {\n        super();\n        if (language instanceof ProjectLanguages) {\n            this.#language = language.language;\n            this.#isInSuperMarioMaker1 = language.isInSuperMarioMaker1;\n            this.#isInSuperMarioMakerFor3DS = language.isInSuperMarioMakerFor3DS;\n            this.#isInSuperMarioMaker2 = language.isInSuperMarioMaker2;\n        } else {\n            this.#language = language;\n            this.#isInSuperMarioMaker1 = isASupportedLanguageInSMM1 as boolean;\n            this.#isInSuperMarioMakerFor3DS = isASupportedLanguageInSMM3DS as boolean;\n            this.#isInSuperMarioMaker2 = isASupportedLanguageInSMM2 as boolean;\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get language(): EveryLanguages {\n        return this.#language;\n    }\n\n    public get isACompleteLanguage(): boolean {\n        return this.language.isACompleteLanguage;\n    }\n\n    //region -------------------- Space getter methods --------------------\n\n    public get hasSpace(): boolean{\n        return this.language.hasSpace;\n    }\n\n    public get isASpaceEvenLanguage(): boolean {\n        return this.language.isASpaceEvenLanguage;\n    }\n\n    public get isASpaceEvenLanguageForThePointsAndSpace(): boolean {\n        return this.language.isASpaceEvenLanguageForThePointsAndSpace;\n    }\n\n    public get isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace(): boolean {\n        return this.language.isASpaceEvenLanguageForEverythingExcludingThePointsAndSpace;\n    }\n\n    //endregion -------------------- Space getter methods --------------------\n\n    public get projectAcronym(): PossibleAcronym {\n        return this.language.projectAcronym as PossibleAcronym;\n    }\n\n    public get internationalAcronym(): PossibleInternationalAcronym {\n        return this.language.internationalAcronym as PossibleInternationalAcronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.language.englishName as PossibleEnglishName;\n    }\n\n    public get originalName(): PossibleOriginalName {\n        return this.language.originalName as PossibleOriginalName;\n    }\n\n    public get differentWords(): PossibleDifferentWord {\n        return this.language.differentWords!;\n    }\n\n    public get isCurrentLanguage(): boolean {\n        return this.language.isCurrentLanguage;\n    }\n\n    public get isCurrentLanguageOrAssociatedWithIt(): boolean {\n        return this.language.isCurrentLanguageOrAssociatedWithIt;\n    }\n\n    public get isDefaultLanguage(): boolean {\n        return this.language.isDefaultLanguage;\n    }\n\n    public get isInSuperMarioMaker1(): boolean {\n        return this.#isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS(): boolean {\n        return this.#isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2(): boolean {\n        return this.#isInSuperMarioMaker2;\n    }\n\n    public get isInEverySuperMarioMakerGame(): boolean {\n        return this.#isInEverySuperMarioMakerGame ??= this.isInSuperMarioMaker1 && this.isInSuperMarioMakerFor3DS && this.isInSuperMarioMaker2;\n    }\n\n    //region -------------------- Characters getter methods --------------------\n\n    public get space(): PossibleSpaceCharacter {\n        return this.language.space;\n    }\n\n    public get points(): PossiblePoints_Array {\n        return this.language.points;\n    }\n\n    public get point(): PossiblePoint {\n        return this.language.point;\n    }\n\n    public get interrogationPoint(): PossibleInterrogationPoint {\n        return this.language.interrogationPoint;\n    }\n\n    public get exclamationPoint(): PossibleExclamationPoint {\n        return this.language.exclamationPoint;\n    }\n\n    public get colon(): PossibleColon {\n        return this.language.colon;\n    }\n\n    public get semicolon(): PossibleSemicolon {\n        return this.language.semicolon;\n    }\n\n    public get comma(): PossibleComma {\n        return this.language.comma;\n    }\n\n    public get unionTrait(): PossibleUnionTrait {\n        return this.language.unionTrait;\n    }\n\n\n    public get commercialAnd(): PossibleCommercialAnd {\n        return this.language.commercialAnd;\n    }\n\n\n    public get parentheses(): PossibleParentheses_Array {\n        return this.language.parentheses;\n    }\n\n    public get startingParenthesis(): PossibleStartingParentheses {\n        return this.language.startingParenthesis;\n    }\n\n    public get endingParenthesis(): PossibleEndingParentheses {\n        return this.language.endingParenthesis;\n    }\n\n    public get brackets(): PossibleBrackets_Array {\n        return this.language.brackets;\n    }\n\n    public get startingBrackets(): PossibleStartingBracket {\n        return this.language.startingBrackets;\n    }\n\n    public get endingBrackets(): PossibleEndingBracket {\n        return this.language.endingBrackets;\n    }\n\n    public get braces(): PossibleBraces_Array {\n        return this.language.braces;\n    }\n\n    public get startingBraces(): PossibleStartingBrace {\n        return this.language.startingBraces;\n    }\n\n    public get endingBraces(): PossibleEndingBrace {\n        return this.language.endingBraces;\n    }\n\n\n    public get slashes(): PossibleSlashes_Array {\n        return this.language.slashes;\n    }\n\n    public get slash(): PossibleSlash {\n        return this.language.slash;\n    }\n\n    public get verticalSlash(): PossibleVerticalSlash {\n        return this.language.verticalSlash;\n    }\n\n\n    public get romainLowercaseAlphabet(): PossibleLowercaseRomainAlphabet_Array {\n        return this.language.romainLowercaseAlphabet;\n    }\n\n    public get romainUppercaseAlphabet(): PossibleUppercaseRomainAlphabet_Array {\n        return this.language.romainUppercaseAlphabet;\n    }\n\n\n    public get numbers(): PossibleNumbers_Array {\n        return this.language.numbers;\n    }\n\n\n    public character<C extends PossibleSingleCharacter, >(character: C,): VariableCharacterByCharacter<this['isASpaceEvenLanguage'], C>\n    public character<C extends string, >(character: C,): VariableCharacterByString<this['isASpaceEvenLanguage'], C>\n    public character(character: string,) {\n        return this.language.character(character);\n    }\n\n    //endregion -------------------- Characters getter methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): T {\n        return this.language.get(classWithEveryLanguages);\n    }\n\n    public original<T, >(classWithEveryLanguages: CompleteClassWithEveryLanguages<T>,): | T | AmericanOrEuropeanOriginal<T> | CanadianOrEuropeanOriginal<T> | ChineseOriginal<T>\n    public original<T, >(classWithEveryLanguages: ClassWithEveryLanguages<T>,): | PossibleLanguageValue<T> | PossibleAmericanOrEuropeanValue<T> | PossibleCanadianOrEuropeanValue<T> | PossibleChineseValue<T>\n    public original<T, >(classWithEveryLanguages: AnyClassWithEveryLanguages<T>,): | PossibleLanguageValue<T> | PossibleAmericanOrEuropeanValue<T> | PossibleCanadianOrEuropeanValue<T> | PossibleChineseValue<T> {\n        return this.language.original<T>(classWithEveryLanguages);\n    }\n\n    //region -------------------- Transformation methods --------------------\n\n    public textInParentheses<S extends string, >(text: S,): TextInParentheses<this['isASpaceEvenLanguage'], S>\n    public textInParentheses(text: string,) {\n        return this.language.textInParentheses(text,);\n    }\n\n    public textInBrackets<S extends string, >(text: S,): TextInBrackets<this['isASpaceEvenLanguage'], S>\n    public textInBrackets(text: string,) {\n        return this.language.textInBrackets(text,);\n    }\n\n    public textInBraces<S extends string, >(text: S,): TextInBraces<this['isASpaceEvenLanguage'], S>\n    public textInBraces(text: string,) {\n        return this.language.textInBraces(text,);\n    }\n\n    //endregion -------------------- Transformation methods --------------------\n\n    public static get currentLanguage(): ProjectLanguages {\n        return this.getValue(EveryLanguages.currentLanguage)!;\n    }\n\n    public static set currentLanguage(value: | EveryLanguages | ProjectLanguages | string | number,) {\n        this.setCurrentLanguage(value);\n    }\n\n    public static setCurrentLanguage(value: | EveryLanguages | ProjectLanguages | string | number,): typeof ProjectLanguages {\n        if (value instanceof ProjectLanguages)\n            EveryLanguages.setCurrentLanguage(value.language);\n        else\n            EveryLanguages.setCurrentLanguage(value);\n        return this;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ProjectLanguages> {\n        return ProjectLanguages;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): ProjectLanguages {\n        return this.getValue(EveryLanguages.default)!;\n    }\n\n    public static set default(value: | EveryLanguages | ProjectLanguages | string | number,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | EveryLanguages | ProjectLanguages | string | number,): typeof ProjectLanguages {\n        if (value instanceof ProjectLanguages)\n            EveryLanguages.setDefault(value.language);\n        else\n            EveryLanguages.setDefault(value);\n        return this;\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.getValue(EveryLanguages.getValue(value));\n    }\n\n    protected static override _getValueByEnumerable(value: Enumerable,) {\n        return value instanceof EveryLanguages\n            ? this.values.find(enumerable => enumerable.language === value) ?? null\n            : null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumArray[O]\n    public static getValue<O extends number, >(ordinal: O,): | NonNullable<EnumArray[O]> | null\n    public static getValue<N extends Names = Names, >(name: N,): typeof ProjectLanguages[N]\n    public static getValue(nameOrAcronym: PossibleStringValue,): ProjectLanguages\n    public static getValue(nameOrAcronym: string,): | ProjectLanguages | null\n    public static getValue<I extends ProjectLanguages, >(instance: I,): I\n    public static getValue(instance: EveryLanguages,): | ProjectLanguages | null\n    public static getValue(value: PossibleNonNullableValue,): ProjectLanguages\n    public static getValue(value: PossibleValue,): | ProjectLanguages | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn<ProjectLanguages>(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {DEFAULT_AMOUNT, DEFAULT_COMMENT, DEFAULT_IS_UNKNOWN}                                                       from './Property';\nimport type {FalseProperty, NotApplicableProperty, NullProperty, PropertyWithEverything, TrueProperty, UnknownProperty} from './PropertyWithEverything';\nimport type {ObjectHolder, PossibleValueOnObjectHolder}                                                                 from '../../util/holder/ObjectHolder';\nimport type {PossibleAmount}                                                                                            from './ClassWithAmount';\nimport type {PossibleComment}                                                                                           from './ClassWithComment';\n\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\n\nexport class PropertyContainer<T, IS_UNKNOWN extends boolean = DEFAULT_IS_UNKNOWN, AMOUNT extends PossibleAmount = DEFAULT_AMOUNT, COMMENT extends PossibleComment = DEFAULT_COMMENT, >\n    implements PropertyWithEverything<T, IS_UNKNOWN, AMOUNT, COMMENT> {\n\n    //region -------------------- Constants --------------------\n\n    public static readonly UNKNOWN = '?';\n    static readonly #DEFAULT_IS_UNKNOWN: DEFAULT_IS_UNKNOWN = false;\n    static readonly #DEFAULT_AMOUNT: DEFAULT_AMOUNT = null;\n    static readonly #DEFAULT_COMMENT: DEFAULT_COMMENT = null;\n\n    //endregion -------------------- Constants --------------------\n    //region -------------------- Predefined properties --------------------\n\n    public static readonly NULL_CONTAINER: NullProperty = new PropertyContainer(null, false, null, null,);\n\n    public static readonly UNKNOWN_CONTAINER: UnknownProperty = new PropertyContainer(null, true, null, null,);\n\n    public static readonly NOT_APPLICABLE_CONTAINER: NotApplicableProperty = new PropertyContainer('N/A', false, null, null,);\n\n    public static readonly TRUE_CONTAINER: TrueProperty = new PropertyContainer(true, false, null, null,);\n    public static readonly TRUE_WITH_AMOUNT_CONTAINER: TrueProperty<1> = new PropertyContainer(true, false, 1, null,);\n\n    public static readonly FALSE_CONTAINER: FalseProperty = new PropertyContainer(false, false, null, null,);\n    public static readonly FALSE_WITH_AMOUNT_CONTAINER: FalseProperty<0> = new PropertyContainer(false, false, 0, null,);\n\n    //endregion -------------------- Predefined properties --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #value: ObjectHolder<T>;\n    readonly #isUnknown: IS_UNKNOWN;\n    readonly #amount: AMOUNT;\n    readonly #comment: COMMENT;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(value: PossibleValueOnObjectHolder<T>,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, amount: AMOUNT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, comment: COMMENT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, amount: AMOUNT, comment: COMMENT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN, comment: COMMENT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN, amount: AMOUNT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN, amount: AMOUNT, comment: COMMENT,)\n    protected constructor(value: PossibleValueOnObjectHolder<T>, isUnknown_or_amount_or_comment?: | IS_UNKNOWN | AMOUNT | COMMENT, comment_or_amount?: | AMOUNT | COMMENT, comment?: COMMENT,) {\n        this.#value = new DelayedObjectHolderContainer<T>(value);\n\n        switch (typeof isUnknown_or_amount_or_comment) {\n            default://Everything can only be null.\n                this.#isUnknown = PropertyContainer.#DEFAULT_IS_UNKNOWN as IS_UNKNOWN;\n                this.#amount = PropertyContainer.#DEFAULT_AMOUNT as AMOUNT;\n                this.#comment = PropertyContainer.#DEFAULT_COMMENT as COMMENT;\n                break;\n            case 'boolean':\n                this.#isUnknown = isUnknown_or_amount_or_comment;\n                switch (typeof comment_or_amount) {\n                    default://Everything (excluding is unknown) can only be null.\n                        this.#amount = PropertyContainer.#DEFAULT_AMOUNT as AMOUNT;\n                        this.#comment = PropertyContainer.#DEFAULT_COMMENT as COMMENT;\n                        break;\n                    case 'string':\n                        this.#amount = PropertyContainer.#DEFAULT_AMOUNT as AMOUNT;\n                        this.#comment = comment_or_amount as COMMENT;\n                        break;\n                    case 'number':\n                        this.#amount = comment_or_amount as AMOUNT;\n                        this.#comment = (comment == null ? PropertyContainer.#DEFAULT_COMMENT : comment) as COMMENT;\n                        break;\n                }\n                break;\n            case 'string':\n                this.#isUnknown = PropertyContainer.#DEFAULT_IS_UNKNOWN as IS_UNKNOWN;\n                this.#amount = PropertyContainer.#DEFAULT_AMOUNT as AMOUNT;\n                this.#comment = isUnknown_or_amount_or_comment as COMMENT;\n                break;\n            case 'number':\n                this.#isUnknown = PropertyContainer.#DEFAULT_IS_UNKNOWN as IS_UNKNOWN;\n                this.#amount = isUnknown_or_amount_or_comment as AMOUNT;\n                this.#comment = (comment_or_amount == null ? PropertyContainer.#DEFAULT_COMMENT : comment_or_amount) as COMMENT;\n                break;\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value() {\n        return this.#value.get;\n    }\n\n    public get isUnknown() {\n        return this.#isUnknown;\n    }\n\n    public get amount() {\n        return this.#amount;\n    }\n\n    public get comment() {\n        return this.#comment;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n\n}\n","import type {ClassWithAcronym}                                                                                                                                                                                                                                    from '../ClassWithAcronym';\nimport type {ClassWithEnglishName}                                                                                                                                                                                                                                from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                                  from '../ClassWithImagePath';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAcronym, PossibleEnglishName, PossibleImagePath, PossibleNonNullableValue, PossibleSimpleValue, PossibleStringValue, PossibleValue} from './Games.types';\nimport type {GameProperty}                                                                                                                                                                                                                                        from '../entity/properties/game/GameProperty';\nimport type {PropertyGetter}                                                                                                                                                                                                                                      from '../PropertyGetter';\nimport type {StaticReference}                                                                                                                                                                                                                                     from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport GameComponent     from './Game.component';\nimport {StringContainer} from '../../util/StringContainer';\n\nexport abstract class Games\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithAcronym<PossibleAcronym>,\n        ClassWithImagePath<PossibleImagePath>,\n        PropertyGetter<GameProperty> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER_1 =                new class Games_SuperMarioMaker1 extends Games {\n\n        public override get(property: GameProperty,): boolean {\n            return property.isInSuperMarioMaker1;\n        }\n\n    }('SMM', '1', 'Super Mario Maker',);\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class Games_SuperMarioMakerForNintendo3DS extends Games {\n\n        public override get(property: GameProperty,): boolean {\n            return property.isInSuperMarioMakerFor3DS;\n        }\n\n    }('SMM3DS', '3DS', 'Super Mario Maker for Nintendo 3DS',);\n    public static readonly SUPER_MARIO_MAKER_2 =                new class Games_SuperMarioMaker2 extends Games {\n\n        public override get(property: GameProperty,): boolean {\n            return property.isInSuperMarioMaker2;\n        }\n\n    }('SMM2', '2', 'Super Mario Maker 2',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Games;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #acronym: PossibleAcronym;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n    readonly #simpleValue: PossibleSimpleValue;\n    readonly #imagePath: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(enumeration_or_acronym: PossibleAcronym, simpleValue: PossibleSimpleValue, englishName: PossibleEnglishName,) {\n        super();\n        this.#acronym = enumeration_or_acronym;\n        this.#englishName = new StringContainer(englishName);\n        this.#simpleValue = simpleValue;\n        this.#imagePath = `/${BASE_PATH}/game/${englishName}.svg`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get acronym(): PossibleAcronym {\n        return this.#acronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get simpleValue(): PossibleSimpleValue {\n        return this.#simpleValue;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract get(property: GameProperty,): boolean;\n\n    public get renderSingleComponent() {\n        return GameComponent.renderSingleComponent(this);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Games> {\n        return Games;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.acronym === value\n                || enumerable.simpleValue === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Games = Games, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Games\n    public static getValue(value: PossibleValue,): | Games | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {NameTrait}                                 from './NameTrait';\nimport type {Name}                                      from './Name';\nimport type {EveryLanguages}                            from '../EveryLanguages';\nimport type {ObjectHolder, PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\n\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\n\n/**\n * A simple implementation of the {@link NameTrait}\n * to remove duplicate code.\n */\nexport class ClassContainingAName<T, >\n    implements NameTrait<T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #nameContainer: ObjectHolder<Name<T>>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<T>>,) {\n        this.#nameContainer = new DelayedObjectHolderContainer(name);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get nameContainer(): Name<T> {\n        return this.#nameContainer.get;\n    }\n\n\n    public get languageValue(): this['nameContainer']['languageValue'] {\n        return this.nameContainer.languageValue;\n    }\n\n    //region -------------------- English properties --------------------\n\n    public get originalEnglish(): this['nameContainer']['originalEnglish'] {\n        return this.nameContainer.originalEnglish;\n    }\n\n    public get english(): this['nameContainer']['english'] {\n        return this.nameContainer.english;\n    }\n\n    public get americanEnglish(): this['nameContainer']['americanEnglish'] {\n        return this.nameContainer.americanEnglish;\n    }\n\n    public get europeanEnglish(): this['nameContainer']['europeanEnglish'] {\n        return this.nameContainer.europeanEnglish;\n    }\n\n    //endregion -------------------- English properties --------------------\n    //region -------------------- French properties --------------------\n\n    public get originalFrench(): this['nameContainer']['originalFrench'] {\n        return this.nameContainer.originalFrench;\n    }\n\n    public get french(): this['nameContainer']['french'] {\n        return this.nameContainer.french;\n    }\n\n    public get canadianFrench(): this['nameContainer']['canadianFrench'] {\n        return this.nameContainer.canadianFrench;\n    }\n\n    public get europeanFrench(): this['nameContainer']['europeanFrench'] {\n        return this.nameContainer.europeanFrench;\n    }\n\n    //endregion -------------------- French properties --------------------\n    //region -------------------- German properties --------------------\n\n    public get german(): this['nameContainer']['german'] {\n        return this.nameContainer.german;\n    }\n\n    //endregion -------------------- German properties --------------------\n    //region -------------------- Spanish properties --------------------\n\n    public get originalSpanish(): this['nameContainer']['originalSpanish'] {\n        return this.nameContainer.originalSpanish;\n    }\n\n    public get spanish(): this['nameContainer']['spanish'] {\n        return this.nameContainer.spanish;\n    }\n\n    public get americanSpanish(): this['nameContainer']['americanSpanish'] {\n        return this.nameContainer.americanSpanish;\n    }\n\n    public get europeanSpanish(): this['nameContainer']['europeanSpanish'] {\n        return this.nameContainer.europeanSpanish;\n    }\n\n    //endregion -------------------- Spanish properties --------------------\n    //region -------------------- Italian properties --------------------\n\n    public get italian(): this['nameContainer']['italian'] {\n        return this.nameContainer.italian;\n    }\n\n    //endregion -------------------- Italian properties --------------------\n    //region -------------------- Dutch properties --------------------\n\n    public get dutch(): this['nameContainer']['dutch'] {\n        return this.nameContainer.dutch;\n    }\n\n    //endregion -------------------- Dutch properties --------------------\n    //region -------------------- Portuguese properties --------------------\n\n    public get originalPortuguese(): this['nameContainer']['originalPortuguese'] {\n        return this.nameContainer.originalPortuguese;\n    }\n\n    public get portuguese(): this['nameContainer']['portuguese'] {\n        return this.nameContainer.portuguese;\n    }\n\n    public get americanPortuguese(): this['nameContainer']['americanPortuguese'] {\n        return this.nameContainer.americanPortuguese;\n    }\n\n    public get europeanPortuguese(): this['nameContainer']['europeanPortuguese'] {\n        return this.nameContainer.europeanPortuguese;\n    }\n\n    //endregion -------------------- Portuguese properties --------------------\n    //region -------------------- Russian properties --------------------\n\n    public get russian(): this['nameContainer']['russian'] {\n        return this.nameContainer.russian;\n    }\n\n    //endregion -------------------- Russian properties --------------------\n    //region -------------------- Japanese properties --------------------\n\n    public get japanese(): this['nameContainer']['japanese'] {\n        return this.nameContainer.japanese;\n    }\n\n    //endregion -------------------- Japanese properties --------------------\n    //region -------------------- Chinese properties --------------------\n\n    public get originalChinese(): this['nameContainer']['originalChinese'] {\n        return this.nameContainer.originalChinese;\n    }\n\n    public get chinese(): this['nameContainer']['chinese'] {\n        return this.nameContainer.chinese;\n    }\n\n    public get traditionalChinese(): this['nameContainer']['traditionalChinese'] {\n        return this.nameContainer.traditionalChinese;\n    }\n\n    public get simplifiedChinese(): this['nameContainer']['simplifiedChinese'] {\n        return this.nameContainer.simplifiedChinese;\n    }\n\n    //endregion -------------------- Chinese properties --------------------\n    //region -------------------- Korean properties --------------------\n\n    public get korean(): this['nameContainer']['korean'] {\n        return this.nameContainer.korean;\n    }\n\n    //endregion -------------------- Korean properties --------------------\n    //region -------------------- Hebrew properties --------------------\n\n    public get isHebrewUsed(): this['nameContainer']['isHebrewUsed'] {\n        return this.nameContainer.isHebrewUsed;\n    }\n\n    public get hebrew(): this['nameContainer']['hebrew'] {\n        return this.nameContainer.hebrew;\n    }\n\n    //endregion -------------------- Hebrew properties --------------------\n    //region -------------------- Polish properties --------------------\n\n    public get isPolishUsed(): this['nameContainer']['isPolishUsed'] {\n        return this.nameContainer.isPolishUsed;\n    }\n\n    public get polish(): this['nameContainer']['polish'] {\n        return this.nameContainer.polish;\n    }\n\n    //endregion -------------------- Polish properties --------------------\n    //region -------------------- Ukrainian properties --------------------\n\n    public get isUkrainianUsed(): this['nameContainer']['isUkrainianUsed'] {\n        return this.nameContainer.isUkrainianUsed;\n    }\n\n    public get ukrainian(): this['nameContainer']['ukrainian'] {\n        return this.nameContainer.ukrainian;\n    }\n\n    //endregion -------------------- Ukrainian properties --------------------\n    //region -------------------- Greek properties --------------------\n\n    public get isGreekUsed(): this['nameContainer']['isGreekUsed'] {\n        return this.nameContainer.isGreekUsed;\n    }\n\n    public get greek(): this['nameContainer']['greek'] {\n        return this.nameContainer.greek;\n    }\n\n    //endregion -------------------- Greek properties --------------------\n\n    public get originalLanguages(): this['nameContainer']['originalLanguages'] {\n        return this.nameContainer.originalLanguages;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toNameMap(): ReadonlyMap<EveryLanguages, T> {\n        return this.nameContainer.toNameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                                                                   from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                     from '../ClassWithImagePath';\nimport type {PossibleOtherEntities}                                                                                                                                                                                                                  from '../entity/Entity';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImagePath, PossibleNonNullableValue, PossibleSimpleImagePath, PossibleStringValue, PossibleValue} from './Times.types';\nimport type {PropertyGetter, PropertyReferenceGetter}                                                                                                                                                                                                from '../PropertyGetter';\nimport type {StaticReference}                                                                                                                                                                                                                        from '../../util/enum/Enum.types';\nimport type {TimeProperty}                                                                                                                                                                                                                           from '../entity/properties/time/TimeProperty';\nimport type {TimeReferences}                                                                                                                                                                                                                         from '../entity/properties/time/TimeReferences';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {StringContainer} from '../../util/StringContainer';\nimport TimeComponent     from './Time.component';\n\nexport abstract class Times\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath>,\n        PropertyReferenceGetter<TimeReferences, PossibleOtherEntities>,\n        PropertyGetter<TimeProperty> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly DAY =   new class Times_Day extends Times {\n\n        public override get(property: TimeProperty,): boolean {\n            return property.isInDayTheme;\n        }\n\n        public override getReference(referenceProperty: TimeReferences,): TimeReferences['referenceInDayTheme'] {\n            return referenceProperty.referenceInDayTheme;\n        }\n\n    }('Day',   'Sun',);\n    public static readonly NIGHT = new class Times_Night extends Times {\n\n        public override get(property: TimeProperty,): boolean {\n            return property.isInNightTheme === true;\n        }\n\n        public override getReference(referenceProperty: TimeReferences,): TimeReferences['referenceInNightTheme'] {\n            return referenceProperty.referenceInNightTheme;\n        }\n\n    }('Night', 'Moon',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Times;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n    readonly #simpleImagePath: PossibleSimpleImagePath;\n    #imagePath?: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, imagePath: PossibleSimpleImagePath,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#simpleImagePath = imagePath;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath ??= `/${BASE_PATH}/time/${this.#simpleImagePath}.png`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract get(property: TimeProperty,): boolean;\n\n    public abstract getReference(referenceProperty: TimeReferences,): PossibleOtherEntities;\n\n    public get renderSingleComponent() {\n        return TimeComponent.renderSingleComponent(this);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Times> {\n        return Times;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Times = Times, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Times\n    public static getValue(value: PossibleValue,): | Times | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {Builder}                                                               from '../../util/builder/Builder';\nimport type {EntityNameTemplate}                                                    from '../entity/Entity.template';\nimport type {HasAReferenceInMarioMaker}                                             from '../entityTypes';\nimport type {NameTemplate, NameTemplateWithOptionalLanguages, PossibleNameTemplate} from '../../lang/name/Name.template';\nimport type {PartialGameEnumFrom1And2}                                              from './PartialGameEnumFrom1And2';\nimport type {PartialGameEnumFromAllGames}                                           from './PartialGameEnumFromAllGames';\nimport type {PossibleLanguagesDefinition}                                           from './PartialLanguageEnum';\nimport type {PropertiesArray, PropertiesArrayWithOptionalLanguages}                 from '../../lang/Loader.types';\nimport type {SimpleGameFrom1And2Template, SimpleGameFromAllGamesTemplate}           from '../game/SimpleGame.template';\n\n/**\n * An abstract template builder with a lot of utilities methods\n * to create other small templates\n */\nexport abstract class AbstractTemplateBuilder<TEMPLATE, ARRAY extends any[], HEADERS_INDEX_MAP, >\n    implements Builder<TEMPLATE> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EMPTY_HEBREW = null;\n    static readonly #EMPTY_POLISH = null;\n    static readonly #EMPTY_UKRAINIAN = null;\n    static readonly #EMPTY_GREEK = null;\n\n    readonly #content;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(content: ARRAY,) {\n        this.#content = content;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _content(): ARRAY {\n        return this.#content;\n    }\n\n    /**\n     * Get the headers indexes map for the template that will be received\n     * and for the content received.\n     *\n     * @protected\n     */\n    protected abstract get _headersIndexMap(): HEADERS_INDEX_MAP;\n\n    //endregion -------------------- Getter methods --------------------\n\n    //region -------------------- Headers methods --------------------\n\n    protected _getContent<N extends number, >(header: N,): ARRAY[N] {\n        return this.#content[header];\n    }\n\n    static #getContent<N extends number, ARRAY extends any[], >(content: ARRAY, header: N,): ARRAY[N] {\n        return content[header];\n    }\n\n    // protected getContent<N extends number, >(header: N,): ARRAY[N]\n    // protected getContent<S extends keyof HEADERS, N extends number ,>(header: S,): ARRAY[N]\n    // protected getContent<N extends number, >(header: |string|number,): ARRAY[N] {\n    //     return typeof header == 'string' ? this._content[this._headers[header]]:this._content[header];\n    // }\n\n    //endregion -------------------- Headers methods --------------------\n    //region -------------------- Name template methods --------------------\n\n    protected _createNameTemplate(): NameTemplate\n    protected _createNameTemplate(): NameTemplateWithOptionalLanguages\n    protected _createNameTemplate(): PossibleNameTemplate {\n        return AbstractTemplateBuilder.#createNameTemplateFromClass(this._headersIndexMap as unknown as PossibleLanguagesDefinition, this._content,);\n    }\n\n    static #createNameTemplateFromClass<ARRAY extends any[], >(headers: PossibleLanguagesDefinition, content: ARRAY,): PossibleNameTemplate {\n        const hebrew = 'hebrew' in headers ? content[headers.hebrew] : this.#EMPTY_HEBREW;\n        const polish = 'polish' in headers ? content[headers.polish] : this.#EMPTY_POLISH;\n        const ukrainian = 'ukrainian' in headers ? content[headers.ukrainian] : this.#EMPTY_UKRAINIAN;\n        const greek = 'greek' in headers ? content[headers.greek] : this.#EMPTY_GREEK;\n\n        const languages: PropertiesArrayWithOptionalLanguages = [\n            content[headers.english], content[headers.americanEnglish], content[headers.europeanEnglish],\n            content[headers.french], content[headers.canadianFrench], content[headers.europeanFrench],\n            content[headers.german],\n            content[headers.spanish], content[headers.americanSpanish], content[headers.europeanSpanish],\n            content[headers.italian],\n            content[headers.dutch],\n            content[headers.portuguese], content[headers.americanPortuguese], content[headers.europeanPortuguese],\n            content[headers.russian],\n            content[headers.japanese],\n            content[headers.chinese], content[headers.traditionalChinese], content[headers.simplifiedChinese],\n            content[headers.korean],\n            hebrew,\n            polish,\n            ukrainian,\n            greek,\n        ];\n\n        return this.#createNameTemplateFromArray(languages);\n    }\n\n    static #createNameTemplateFromArray([english, americanEnglish, europeanEnglish, french, canadianFrench, europeanFrench, german, spanish, americanSpanish, europeanSpanish, italian, dutch, portuguese, americanPortuguese, europeanPortuguese, russian, japanese, chinese, traditionalChinese, simplifiedChinese, korean,\n                                                     hebrew = this.#EMPTY_HEBREW, polish = this.#EMPTY_POLISH, ukrainian = this.#EMPTY_UKRAINIAN, greek = this.#EMPTY_GREEK,]: | PropertiesArray | PropertiesArrayWithOptionalLanguages,): PossibleNameTemplate {\n        return {\n            english: {\n                simple: english,\n                american: americanEnglish,\n                european: europeanEnglish,\n            },\n            french: {\n                simple: french,\n                canadian: canadianFrench,\n                european: europeanFrench,\n            },\n            german: german,\n            spanish: {\n                simple: spanish,\n                american: americanSpanish,\n                european: europeanSpanish,\n            },\n            italian: italian,\n            dutch: dutch,\n            portuguese: {\n                simple: portuguese,\n                american: americanPortuguese,\n                european: europeanPortuguese,\n            },\n            russian: russian,\n            chinese: {\n                simple: chinese,\n                traditional: traditionalChinese,\n                simplified: simplifiedChinese,\n            },\n            japanese: japanese,\n            korean: korean,\n            hebrew: hebrew,\n            polish: polish,\n            ukrainian: ukrainian,\n            greek: greek,\n        };\n    }\n\n    protected _createEntityNameTemplate(hasAReferenceInMarioMaker: | HasAReferenceInMarioMaker,): EntityNameTemplate {\n        const nameTemplateWithOptionalLanguages = this._createNameTemplate();\n        return {hasAReferenceInMarioMaker: hasAReferenceInMarioMaker, ...nameTemplateWithOptionalLanguages,};\n    }\n\n    //endregion -------------------- Name template methods --------------------\n    //region -------------------- Game methods --------------------\n\n    /**\n     * Create a game template (without any validations).\n     * It implies that has\n     * <ol>\n     *     <li>{@link Games.SUPER_MARIO_MAKER_1 SMM1} & {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS}</li>\n     *     <li>{@link Games.SUPER_MARIO_MAKER_2 SMM2}</li>\n     * </ol>\n     * properties that returns a {@link boolean}.\n     *\n     * @see PartialGameEnumFrom1And2\n     */\n    protected _createGameTemplateFrom1And2(): SimpleGameFrom1And2Template<boolean, boolean> {\n        const headers = this._headersIndexMap as unknown as PartialGameEnumFrom1And2;\n        return {\n            '1And3DS': AbstractTemplateBuilder.#getContent(this._content, headers.isInSuperMarioMaker1And3DS),\n            2: AbstractTemplateBuilder.#getContent(this._content, headers.isInSuperMarioMaker2),\n        };\n    }\n\n    /**\n     * Create a game template (without any validations).\n     * It implies that has\n     * <ol>\n     *     <li>{@link Games.SUPER_MARIO_MAKER_1 SMM1}</li>\n     *     <li>{@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS}</li>\n     *     <li>{@link Games.SUPER_MARIO_MAKER_2 SMM2}</li>\n     * </ol>\n     * properties that returns a {@link boolean}.\n     *\n     * @see PartialGameEnumFromAllGames\n     */\n    protected _createGameTemplateFromAllGames(): SimpleGameFromAllGamesTemplate<boolean, boolean, boolean> {\n        const headers = this._headersIndexMap as unknown as PartialGameEnumFromAllGames;\n        return {\n            1: AbstractTemplateBuilder.#getContent(this._content, headers.isInSuperMarioMaker1),\n            '3DS': AbstractTemplateBuilder.#getContent(this._content, headers.isInSuperMarioMakerFor3DS),\n            2: AbstractTemplateBuilder.#getContent(this._content, headers.isInSuperMarioMaker2),\n        };\n    }\n\n    //endregion -------------------- Game methods --------------------\n\n    public abstract build(): TEMPLATE;\n\n}\n","import type {Converter} from './Converter';\n\nexport abstract class AbstractStringConverter<T>\n    implements Converter<string, T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #originalValue;\n    #convertedValue?: T;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(originalValue: string,) {\n        this.#originalValue = originalValue;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get convertedValue(): T {\n        return this.#convertedValue ??= this.convertTheValue(this.originalValue);\n    }\n\n    public get originalValue() {\n        return this.#originalValue;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public convertTheValue(value: string,): T {\n        if (this.isValueValid(value))\n            return this._convertTheValue(value);\n        throw this._newError();\n    }\n\n    protected abstract _convertTheValue(validValue: string,): T;\n\n    public abstract isValueValid(value: string,): boolean;\n\n    protected abstract _newError(): TypeError;\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\n\nexport class GenericStringToAnyConverter<T>\n    extends AbstractStringConverter<T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #typeName;\n    readonly #isValueValidCallback;\n    readonly #convertTheValueCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(originalValue: string,\n                       typeName: string,\n                       isValueValidCallback: (value: string) => boolean,\n                       convertTheValueCallback: (validValue: string) => T,) {\n        super(originalValue);\n        this.#typeName = typeName;\n        this.#isValueValidCallback = isValueValidCallback;\n        this.#convertTheValueCallback = convertTheValueCallback;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _typeName() {\n        return this.#typeName;\n    }\n\n    protected get _isValueValidCallback() {\n        return this.#isValueValidCallback;\n    }\n\n    protected get _convertTheValueCallback() {\n        return this.#convertTheValueCallback;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return this._convertTheValueCallback(validValue);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" could not be converted to a \"${this._typeName}\".`);\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return this._isValueValidCallback(value);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {GenericStringToAnyConverter} from './GenericStringToAnyConverter';\n\nexport class GenericStringToAnyNullableConverter<T>\n    extends GenericStringToAnyConverter<| T | null> {\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return validValue === ''\n            ? null\n            : super._convertTheValue(validValue);\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return value === '' || super.isValueValid(value);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","export class ConverterPatterns {\n\n    private constructor() {\n        throw new EvalError('The converter patterns cannot be constructed');\n    }\n\n    /**\n     * Any value inside the possibilities true,false,0 or 1.\n     * All of that in case insensitive.\n     */\n    public static readonly BOOLEAN_PATTERN = /^(true|false|0|1)$/i;\n    /**\n     * Any number in a string regex\n     */\n    public static readonly NUMBER_PATTERN = /^\\d+$/;\n    /**\n     * A non empty string regex\n     */\n    public static readonly EMPTYABLE_STRING_PATTERN = /./;\n    /**\n     * An empty string or the value null.\n     * All of that in case insensitive.\n     */\n    public static readonly NULLABLE_STRING_PATTERN = /.|null|undefined/i;\n\n\n}\n","export class ConverterUtil {\n\n    private constructor() {\n        throw new EvalError('The converter util class cannot be created');\n    }\n\n\n    public static convertToBoolean(value: string,): boolean {\n        value = value.toLowerCase();\n        return value === 'true' || value === '1';\n    }\n\n    public static convertToNullableString(value: string,): | string | null {\n        let lowerCaseValue = value.toLowerCase();\n        return lowerCaseValue === '' || lowerCaseValue === 'null' || lowerCaseValue === 'undefined' ? null : value;\n    }\n\n    public static convertToEmptyableString(value: string,): | string | null {\n        return value === '' ? null : value;\n    }\n\n    public static convertToNumber(value: string,): number {\n        return Number(value);\n    }\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\nimport {ConverterPatterns}       from './ConverterPatterns';\nimport {ConverterUtil}           from './ConverterUtil';\n\nexport class StringToBooleanConverter\n    extends AbstractStringConverter<boolean> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToBoolean(validValue);\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return ConverterPatterns.BOOLEAN_PATTERN.test(value);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a boolean`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\n\nexport abstract class AbstractEmptyableStringConverter<T>\n    extends AbstractStringConverter<T | null> {\n\n    protected constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    public override convertTheValue(value: string,): | T | null {\n        return value === '' ? null : super.convertTheValue(value);\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return value === '' || this._isValueValid(value);\n    }\n\n    protected abstract _isValueValid(nonEmptyValue: string,): boolean\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractEmptyableStringConverter} from './AbstractEmptyableStringConverter';\n\nexport class StringToEmptyableStringConverter\n    extends AbstractEmptyableStringConverter<| string | null> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(nonEmptyValue: string,) {\n        return nonEmptyValue;\n    }\n\n    protected override _isValueValid(value: string,) {\n        return true;\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a non empty value`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractEmptyableStringConverter} from './AbstractEmptyableStringConverter';\nimport {ConverterPatterns}                from './ConverterPatterns';\nimport {ConverterUtil}                    from './ConverterUtil';\n\nexport class StringToNullableBooleanConverter\n    extends AbstractEmptyableStringConverter<boolean> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToBoolean(validValue);\n    }\n\n    protected override _isValueValid(nonEmptyValue: string,) {\n        return ConverterPatterns.BOOLEAN_PATTERN.test(nonEmptyValue);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a nullable boolean`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractEmptyableStringConverter} from './AbstractEmptyableStringConverter';\nimport {ConverterPatterns}                from './ConverterPatterns';\nimport {ConverterUtil}                    from './ConverterUtil';\n\nexport class StringToNullableNumberConverter\n    extends AbstractEmptyableStringConverter<number> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToNumber(validValue);\n    }\n\n    protected override _isValueValid(nonEmptyValue: string,) {\n        return ConverterPatterns.NUMBER_PATTERN.test(nonEmptyValue);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a number`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractEmptyableStringConverter} from './AbstractEmptyableStringConverter';\nimport {ConverterPatterns}                from './ConverterPatterns';\nimport {ConverterUtil}                    from './ConverterUtil';\n\nexport class StringToNullableStringConverter\n    extends AbstractEmptyableStringConverter<| string | null> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToNullableString(validValue);\n    }\n\n    protected override _isValueValid(nonEmptyValue: string,) {\n        return ConverterPatterns.NULLABLE_STRING_PATTERN.test(nonEmptyValue);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a nullable string`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\nimport {ConverterPatterns}       from './ConverterPatterns';\n\nexport class StringToNumberConverter\n    extends AbstractStringConverter<number> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue.toLowerCase());\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return Number(validValue);\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return ConverterPatterns.NUMBER_PATTERN.test(value);\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a number`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\n\nexport class StringToStringConverter\n    extends AbstractStringConverter<string> {\n\n    public constructor(originalValue: string,) {\n        super(originalValue);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return validValue;\n\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return true;\n    }\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not convertible to a string`);\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {AbstractStringConverter} from './AbstractStringConverter';\n\nexport abstract class AbstractStringToSingleValueConvertor<V>\n    extends AbstractStringConverter<V> {\n\n    readonly #singleValue: V;\n\n    protected constructor(originalValue: string, singleValue: V,) {\n        super(originalValue);\n        this.#singleValue = singleValue;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get singleValue(): V {\n        return this.#singleValue;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected abstract override _convertTheValue(validValue: string,): V;\n\n    public abstract override isValueValid(value: string,): boolean;\n\n    protected override _newError() {\n        return new TypeError(`The value \"${this.originalValue}\" is not \"${this.singleValue}\".`);\n    }\n\n\n}","import {AbstractStringToSingleValueConvertor} from './AbstractStringToSingleValueConvertor';\nimport {ConverterPatterns}                    from './ConverterPatterns';\nimport {ConverterUtil}                        from './ConverterUtil';\n\nexport class StringToSingleNumberConverter<N extends number, >\n    extends AbstractStringToSingleValueConvertor<N> {\n\n    public constructor(originalValue: string, singleValue: N,) {\n        super(originalValue, singleValue,);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToNumber(validValue) as N;\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return ConverterPatterns.NUMBER_PATTERN.test(value)\n            && ConverterUtil.convertToNumber(value) === this.singleValue;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}","import {AbstractStringToSingleValueConvertor} from './AbstractStringToSingleValueConvertor';\n\nexport class StringToSingleStringConverter<S extends string, >\n    extends AbstractStringToSingleValueConvertor<S> {\n\n    public constructor(originalValue: string, singleValue: S,) {\n        super(originalValue, singleValue,);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return validValue as S;\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return value === this.singleValue;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}","import {AbstractStringToSingleValueConvertor} from './AbstractStringToSingleValueConvertor';\nimport {ConverterPatterns}                    from './ConverterPatterns';\nimport {ConverterUtil}                        from './ConverterUtil';\n\nexport class StringToSingleBooleanConverter<B extends boolean, >\n    extends AbstractStringToSingleValueConvertor<B> {\n\n    public constructor(originalValue: string, singleValue: B,) {\n        super(originalValue, singleValue,);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _convertTheValue(validValue: string,) {\n        return ConverterUtil.convertToBoolean(validValue) as B;\n    }\n\n    public override isValueValid(value: string,): boolean {\n        return ConverterPatterns.NUMBER_PATTERN.test(value)\n            && ConverterUtil.convertToBoolean(value) === this.singleValue;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}","import type {BasicPredefinedConversion, EnumArray, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue, PredefinedConversion} from './PredefinedConverter.types';\nimport type {Converter}                                                                                                                                 from './Converter';\nimport type {ConversionCallbackToAny, ValidationCallback}                                                                                               from '../CSVLoader.types';\nimport type {StaticReference}                                                                                                                           from '../../enum/Enum.types';\n\nimport {assert}                           from '../../utilitiesMethods';\nimport {ConverterPatterns}                from './ConverterPatterns';\nimport {ConverterUtil}                    from './ConverterUtil';\nimport {Enum}                             from '../../enum/Enum';\nimport {StringToBooleanConverter}         from './StringToBooleanConverter';\nimport {StringToEmptyableStringConverter} from './StringToEmptyableStringConverter';\nimport {StringToNullableBooleanConverter} from './StringToNullableBooleanConverter';\nimport {StringToNullableNumberConverter}  from './StringToNullableNumberConverter';\nimport {StringToNullableStringConverter}  from './StringToNullableStringConverter';\nimport {StringToNumberConverter}          from './StringToNumberConverter';\nimport {StringToStringConverter}          from './StringToStringConverter';\nimport {StringToSingleNumberConverter}    from './StringToSingleNumberConverter';\nimport {StringToSingleStringConverter}    from './StringToSingleStringConverter';\nimport {StringToSingleBooleanConverter}   from './StringToSingleBooleanConverter';\n\nexport abstract class PredefinedConverter\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly NUMBER =           new class PredefinedConverter_Number extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, number> {\n            return new StringToNumberConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return value => ConverterPatterns.NUMBER_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): number {\n            return ConverterUtil.convertToNumber(value);\n        }\n\n    }('number',);\n    public static readonly NULLABLE_NUMBER =  new class PredefinedConverter_NullableNumber extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, | number | null> {\n            return new StringToNullableNumberConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return value => value === '' || ConverterPatterns.NUMBER_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): | number | null {\n            return value === '' ? null : PredefinedConverter.NUMBER.newConversion(value);\n        }\n\n    } ('nullable number', 'number',);\n\n    public static readonly BOOLEAN =          new class PredefinedConverter_Boolean extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, boolean> {\n            return new StringToBooleanConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return value => ConverterPatterns.BOOLEAN_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): boolean {\n            return ConverterUtil.convertToBoolean(value);\n        }\n\n    }('boolean',);\n    public static readonly NULLABLE_BOOLEAN = new class PredefinedConverter_NullableBoolean extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, | boolean | null> {\n            return new StringToNullableBooleanConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return value => value === '' || ConverterPatterns.BOOLEAN_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): | boolean | null {\n            return value === '' ? null : PredefinedConverter.BOOLEAN.newConversion(value);\n        }\n\n    }('nullable boolean', 'boolean',);\n\n    public static readonly STRING =           new class PredefinedConverter_String extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, string> {\n            return new StringToStringConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return () => true;\n        }\n\n        public newConversion(value: string,): string {\n            return value;\n        }\n\n    }('string',);\n    public static readonly EMPTYABLE_STRING = new class PredefinedConverter_EmptyableString extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, | string | null> {\n            return new StringToEmptyableStringConverter(value);\n        }\n\n        public newValidation(): ValidationCallback {\n            return value => ConverterPatterns.EMPTYABLE_STRING_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): | string | null {\n            return ConverterUtil.convertToEmptyableString(value);\n        }\n\n    }('emptyable string', 'string',);\n    public static readonly NULLABLE_STRING =  new class PredefinedConverter_NullableString extends PredefinedConverter {\n\n        public newConvertor(value: string,): Converter<string, | string | null> {\n            return new StringToNullableStringConverter(value);\n        }\n\n        public newValidation(): (value: string,) => boolean {\n            return value => ConverterPatterns.NULLABLE_STRING_PATTERN.test(value);\n        }\n\n        public newConversion(value: string,): | string | null {\n            return ConverterUtil.convertToNullableString(value);\n        }\n\n    }('nullable string', 'string',);\n\n    public static readonly SINGLE_NUMBER =    new class PredefinedConverter_SingleString extends PredefinedConverter {\n\n        public newConvertor(value: string, validatingValue: number,): Converter<string, number>\n        public newConvertor(value: string, validatingValue: any[],): never\n        public newConvertor(value: string, validatingValue: any,): | Converter<string, number> | never\n        public newConvertor(value: string, validatingValue: | any | any[],): | Converter<string, number> | never {\n            assert(typeof validatingValue == 'number', 'The validating value cannot be a different value than a number',);\n            return new StringToSingleNumberConverter(value, validatingValue,);\n        }\n\n        public newValidation(validatingValue: number,): ValidationCallback\n        public newValidation(validatingValue: any[],): never\n        public newValidation(validatingValue: any,): | ValidationCallback | never\n        public newValidation(validatingValue: | any | any[],): | ValidationCallback | never {\n            assert(typeof validatingValue == 'number', 'The validating value cannot be a different value than a number',);\n            return value => Number(value) === validatingValue;\n        }\n\n        public newConversion(value: string,): string {\n            return value;\n        }\n\n    }('single number',);\n    public static readonly SINGLE_STRING =    new class PredefinedConverter_SingleString extends PredefinedConverter {\n\n        public newConvertor(value: string, validatingValue: boolean,): Converter<string, string>\n        public newConvertor(value: string, validatingValue: any[],): never\n        public newConvertor(value: string, validatingValue: any,): | Converter<string, string> | never\n        public newConvertor(value: string, validatingValue: | any | any[],): | Converter<string, string> | never {\n            assert(typeof validatingValue == 'string', 'The validating value cannot be a different value than a string',);\n            return new StringToSingleStringConverter(value, validatingValue,);\n        }\n\n        public newValidation(validatingValue: boolean,): ValidationCallback\n        public newValidation(validatingValue: any[],): never\n        public newValidation(validatingValue: any,): | ValidationCallback | never\n        public newValidation(validatingValue: | any | any[],): | ValidationCallback | never {\n            assert(typeof validatingValue == 'string', 'The validating value cannot be a different value than a string',);\n            return value => value === validatingValue;\n        }\n\n        public newConversion(value: string,): string {\n            return value;\n        }\n\n    }('single string',);\n    public static readonly SINGLE_BOOLEAN =   new class PredefinedConverter_SingleString extends PredefinedConverter {\n\n        public newConvertor(value: string, validatingValue: string,): Converter<string, boolean>\n        public newConvertor(value: string, validatingValue: any[],): never\n        public newConvertor(value: string, validatingValue: any,): | Converter<string, boolean> | never\n        public newConvertor(value: string, validatingValue: | any | any[],): | Converter<string, boolean> | never {\n            assert(typeof validatingValue == 'boolean', 'The validating value cannot be a different value than a boolean',);\n            return new StringToSingleBooleanConverter(value, validatingValue,);\n        }\n\n        public newValidation(validatingValue: string,): ValidationCallback\n        public newValidation(validatingValue: any[],): never\n        public newValidation(validatingValue: any,): | ValidationCallback | never\n        public newValidation(validatingValue: | any | any[],): | ValidationCallback | never {\n            assert(typeof validatingValue == 'boolean', 'The validating value cannot be a different value than a boolean',);\n            return value => Boolean(value) === validatingValue;\n        }\n\n        public newConversion(value: string,): string {\n            return value;\n        }\n\n    }('single boolean',);\n    //TODO add string to emptyable single string converter\n    //TODO add string to array of string converter\n    //TODO add string to array of nullable string converter\n    //TODO add string to array of emptyable string converter\n    //TODO add string to array of boolean converter\n    //TODO add string to array of nullable boolean converter\n    //TODO add string to array of number converter\n    //TODO add string to array of nullable number converter\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: PredefinedConverter;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #simpleName;\n    readonly #simpleNameAsNonNullable;\n    #parent?: PredefinedConverter;\n    readonly #parentCallback: () => PredefinedConverter;\n    readonly #callbackToCreateNewValidationAsNonNullable: (validatingValue: | any | any[],) => ValidationCallback;\n    readonly #callbackToCreateNewConversionAsNonNullable: () => ConversionCallbackToAny;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(simpleName: BasicPredefinedConversion,)\n    private constructor(simpleName: PredefinedConversion, simpleNameAsNonNullable: BasicPredefinedConversion,)\n    private constructor(simpleName: PredefinedConversion, simpleNameAsNonNullable?: BasicPredefinedConversion,) {\n        super();\n        this.#simpleName = simpleName;\n        this.#simpleNameAsNonNullable = (simpleNameAsNonNullable ?? simpleName) as BasicPredefinedConversion;\n        if (simpleNameAsNonNullable === undefined) {\n            this.#parentCallback = () => this;\n            this.#callbackToCreateNewValidationAsNonNullable = validatingValue => this.newValidation(validatingValue);\n            this.#callbackToCreateNewConversionAsNonNullable = () => value => this.newConversion(value);\n        } else {\n            this.#parentCallback = () => PredefinedConverter.getValue(this.simpleName);\n            this.#callbackToCreateNewValidationAsNonNullable = validatingValue => this.parent.newValidation(validatingValue);\n            this.#callbackToCreateNewConversionAsNonNullable = () => value => this.parent.newConversion(value);\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PredefinedConversion {\n        return this.#simpleName;\n    }\n\n    public get simpleNameAsNonNullable(): BasicPredefinedConversion {\n        return this.#simpleNameAsNonNullable;\n    }\n\n    public get parent(): | PredefinedConverter | this {\n        return this.#parent ??= this.#parentCallback();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract newConvertor(value: string, singleValue: | any | any[],): Converter<string, any>;\n\n    public abstract newValidation(validatingValue: | any | any[],): ValidationCallback;\n\n    public newValidationAsNonNullable(validatingValue: | any | any[],): ValidationCallback {\n        return this.#callbackToCreateNewValidationAsNonNullable(validatingValue);\n    }\n\n    public abstract newConversion(value: string,): any;\n\n    public newConversionAsNonNullable(value: string,): any {\n        return this.#callbackToCreateNewConversionAsNonNullable()(value);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<PredefinedConverter> {\n        return PredefinedConverter;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value.toLowerCase())\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumArray[O]\n    public static getValue<O extends number = number, >(ordinal: O,): NonNullable<EnumArray[O]> | null\n    public static getValue<N extends Names = Names, >(name: N,): typeof PredefinedConverter[N]\n    public static getValue(name: PossibleStringValue,): PredefinedConverter\n    public static getValue(name: string,): | PredefinedConverter | null\n    public static getValue(value: PossibleNonNullableValue,): PredefinedConverter\n    public static getValue(value: PossibleValue,): | PredefinedConverter | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {ArrayOfHeaders, ArrayOrSimpleHeaderTypeOrConvertor, ConversionCallbackToConverter, SimpleHeader, SimpleHeaderReceived, SimpleHeaderTypeOrConvertor} from './CSVLoader.types';\nimport {PredefinedConverter}                                                                                                                                from './converter/PredefinedConverter';\nimport {GenericStringToAnyConverter}                                                                                                                        from './converter/GenericStringToAnyConverter';\nimport {CSVLoader}                                                                                                                                          from './CSVLoader';\n\nexport class HeaderContainer<H extends string, A extends ArrayOfHeaders = ArrayOfHeaders, > {\n\n    readonly #header: SimpleHeader<H>;\n    readonly #otherHeaders: A;\n\n    readonly #originalValues: Set<SimpleHeaderTypeOrConvertor>;\n    readonly #headerTypeOrConvertorSet: Set<(| PredefinedConverter | SimpleHeader<A[number]> | number | boolean | string | ConversionCallbackToConverter)>;\n    readonly #predefinedConvertors: Set<PredefinedConverter>;\n    readonly #followingHeaders: Set<SimpleHeader<A[number]>>;\n    readonly #singleValuesToValidate: Set<| number | boolean | string>;\n    readonly #convertorCallbacks: Set<ConversionCallbackToConverter>;\n\n    public constructor(header: SimpleHeaderReceived<H>, otherHeaders: A,) {\n        this.#header = header.toLowerCase() as SimpleHeader<H>;\n        this.#otherHeaders = otherHeaders;\n        this.#originalValues = new Set();\n        this.#headerTypeOrConvertorSet = new Set();\n        this.#predefinedConvertors = new Set();\n        this.#followingHeaders = new Set();\n        this.#singleValuesToValidate = new Set();\n        this.#convertorCallbacks = new Set();\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    /**\n     * The header computed for this instance.\n     */\n    public get header(): SimpleHeader<H> {\n        return this.#header;\n    }\n\n    /**\n     * Every headers used as a comparison on the {@link followingHeaders following headers method}.\n     */\n    public get otherHeaders(): A {\n        return this.#otherHeaders;\n    }\n\n\n    /**\n     * The values received in order of addition by {@link addHeaderTypeOrConvertor}.\n     */\n    public get originalValues(): ReadonlySet<SimpleHeaderTypeOrConvertor> {\n        return this.#originalValues;\n    }\n\n    /**\n     * The values received somewhat in order from the {@link originalValues},\n     * but as a {@link PredefinedConverter predefined convertor}, {@link SimpleHeader header}, a direct value or a {@link ConversionCallbackToConverter callback}.\n     *\n     * @see _addPredefinedConvertor\n     * @see _reorderPredefinedConvertorIfContainStringConvertor\n     * @see _addFollowingHeader\n     * @see _addSingleValueToValidate\n     * @see _addConvertorCallbacks\n     */\n    public get headerTypeOrConvertorSet(): ReadonlySet<| PredefinedConverter | SimpleHeader<A[number]> | number | boolean | string | ConversionCallbackToConverter> {\n        return this.#headerTypeOrConvertorSet;\n    }\n\n\n    /**\n     * The predefined convertors to be used to convert to a conversion.\n     *\n     *  @see PredefinedConverter\n     */\n    public get predefinedConvertors(): ReadonlySet<PredefinedConverter> {\n        return this.#predefinedConvertors;\n    }\n\n    /**\n     * The headers to be followed as a type (while not doing validations)\n     * or a reference (while doing validations)\n     */\n    public get followingHeaders(): ReadonlySet<SimpleHeader<A[number]>> {\n        return this.#followingHeaders;\n    }\n\n    /**\n     * The single values to be used while doing validations.\n     */\n    public get singleValuesToValidate(): ReadonlySet<| boolean | number | string> {\n        return this.#singleValuesToValidate;\n    }\n\n    /**\n     * A custom callback used to do some conversions.\n     */\n    public get convertorCallbacks(): ReadonlySet<ConversionCallbackToConverter> {\n        return this.#convertorCallbacks;\n    }\n\n    /**\n     * The total amount of validations to be used.\n     *\n     * @see predefinedConvertors\n     * @see followingHeaders\n     * @see singleValuesToValidate\n     * @see convertorCallbacks\n     */\n    public get amountOfValidator(): this['headerTypeOrConvertorSet']['size'] {\n        return this.headerTypeOrConvertorSet.size;\n    }\n\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Addition methods --------------------\n\n    protected _addPredefinedConvertor(originalValue: string, predefinedConvertor: PredefinedConverter,): this {\n        this.#originalValues.add(originalValue);\n        this.#headerTypeOrConvertorSet.add(predefinedConvertor);\n        this.#predefinedConvertors.add(predefinedConvertor);\n        return this.predefinedConvertors.has(PredefinedConverter.STRING) || this.predefinedConvertors.has(PredefinedConverter.NULLABLE_STRING) || this.predefinedConvertors.has(PredefinedConverter.EMPTYABLE_STRING)\n            ? this._reorderPredefinedConvertorIfContainStringConvertor()\n            : this;\n    }\n\n    protected _reorderPredefinedConvertorIfContainStringConvertor(): this {\n        if (this.predefinedConvertors.size === 1)\n            return this;\n\n        const temporaryPredefinedConvertors = Array.from(this.predefinedConvertors);\n        const predefinedStringConvertor = temporaryPredefinedConvertors.find(predefinedConvertor => predefinedConvertor === PredefinedConverter.STRING || predefinedConvertor === PredefinedConverter.NULLABLE_STRING || predefinedConvertor === PredefinedConverter.EMPTYABLE_STRING);\n        if (predefinedStringConvertor == null)\n            return this;\n        const predefinedStringConvertorIndex = temporaryPredefinedConvertors.findIndex(predefinedConvertor => predefinedConvertor === predefinedStringConvertor);\n        if (predefinedStringConvertorIndex === this.predefinedConvertors.size - 1)\n            return this;\n\n        this.#predefinedConvertors.delete(predefinedStringConvertor);\n        this.#predefinedConvertors.add(predefinedStringConvertor);\n\n        return this;\n    }\n\n    protected _addFollowingHeader(originalValue: string, header: SimpleHeader<A[number]>,): this {\n        this.#originalValues.add(originalValue);\n        this.#headerTypeOrConvertorSet.add(header);\n        this.#followingHeaders.add(header);\n        return this;\n    }\n\n    protected _addSingleValueToValidate(value: | string | number | boolean,): this {\n        this.#originalValues.add(value);\n        this.#headerTypeOrConvertorSet.add(value);\n        this.#singleValuesToValidate.add(value);\n        return this;\n    }\n\n    protected _addConvertorCallbacks(convertorCallback: ConversionCallbackToConverter,): this {\n        this.#originalValues.add(convertorCallback);\n        this.#headerTypeOrConvertorSet.add(convertorCallback);\n        this.#convertorCallbacks.add(convertorCallback);\n        return this;\n    }\n\n    //endregion -------------------- Addition methods --------------------\n\n    public addHeaderTypeOrConvertor(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeOrConvertor,): this {\n        switch (typeof headerTypeOrConvertor) {\n            case 'string':\n                const predefinedConvertor = PredefinedConverter.getValue(headerTypeOrConvertor);\n                if (predefinedConvertor == null) {\n                    if (this.otherHeaders.includes(headerTypeOrConvertor))\n                        this._addFollowingHeader(headerTypeOrConvertor, headerTypeOrConvertor.toLowerCase() as SimpleHeader<A[number]>);\n                    else\n                        this._addSingleValueToValidate(headerTypeOrConvertor,);\n                } else\n                    this._addPredefinedConvertor(headerTypeOrConvertor, predefinedConvertor);\n                break;\n            case 'boolean':\n            case 'number':\n                this._addSingleValueToValidate(headerTypeOrConvertor,);\n                break;\n            case 'object':\n                headerTypeOrConvertor.forEach(headerTypeOrConvertor => this.addHeaderTypeOrConvertor(headerTypeOrConvertor));\n                break;\n            default:\n                this._addConvertorCallbacks(headerTypeOrConvertor,);\n                break;\n        }\n        return this;\n    }\n\n    public createConversionCallbacks(): readonly ConversionCallbackToConverter[] {\n        return Array.from(this.headerTypeOrConvertorSet).map(headerTypeOrConvertor => this._createSingleConversionCallback(headerTypeOrConvertor));\n    }\n\n    protected _createSingleConversionCallback(headerTypeOrConvertor: | PredefinedConverter | SimpleHeader<A[number]> | number | boolean | string | ConversionCallbackToConverter,): ConversionCallbackToConverter {\n        switch (typeof headerTypeOrConvertor) {\n            case 'string':\n                // if(this.followingHeaders.includes(predefinedConvertorOrHeaderOrValueOrConversionCallback))\n                //     //TODO create header following callback;\n                return value => PredefinedConverter.SINGLE_STRING.newConvertor(value, headerTypeOrConvertor,);\n            case 'boolean':\n                return value => PredefinedConverter.SINGLE_BOOLEAN.newConvertor(value, headerTypeOrConvertor,);\n            case 'number':\n                return value => PredefinedConverter.SINGLE_NUMBER.newConvertor(value, headerTypeOrConvertor,);\n        }\n        if (headerTypeOrConvertor instanceof PredefinedConverter)\n            return value => headerTypeOrConvertor.newConvertor(value, null,);\n        return value => new GenericStringToAnyConverter(value, CSVLoader.CUSTOM_CALLBACK_NAME, CSVLoader.TRUE_CALLBACK, headerTypeOrConvertor,);\n    }\n\n}","import type {ArrayHeaderTypeOrConvertor, ArrayOfHeadersReceived, ArrayOfMixedConvertorInstance, ArrayOfValidationsArrayOfValidations, ArrayOrSimpleHeaderTypeConvertorExcluding, ArrayOrSimpleHeaderTypeOrConvertor, CallbackOnAfterFinalObjectCreated, CallbackOnAfterSingleContentConverted, CallbackOnBeforeFinalObjectCreated, CallbackOnBeforeSingleContentConverted, CallbackOnInitialisationEnd, CallbackOnInitialisationStart, CallbackOnLoader, CallbackToCreateObject, ConversionCallbackToConverter, CustomConversionCallbackToAnyCallback, CustomConversionCallbackToAnyCallbackWithError, CustomValidationCallback, HeadersConverterHolder, PossiblePredefinedConversionWithoutValues, SimpleHeader, SimpleHeaderReceived} from './CSVLoader.types';\nimport type {EmptyableString, NullablePredefinedConversion, PredefinedConversion}from './converter/PredefinedConverter.types';\n\nimport {assert}                              from '../utilitiesMethods';\nimport {GenericStringToAnyConverter}         from './converter/GenericStringToAnyConverter';\nimport {GenericStringToAnyNullableConverter} from './converter/GenericStringToAnyNullableConverter';\nimport {HeaderContainer}                     from './HeaderContainer';\nimport {PredefinedConverter}                 from './converter/PredefinedConverter';\n\nexport class CSVLoader<A extends any[] = any[], T = any, H extends string = string, > {\n\n    //region -------------------- Fields --------------------\n\n    //region -------------------- Static fields --------------------\n\n    /**\n     * Any {@link PossiblePredefinedConversionWithoutValues} in new instance when it will be constructed.\n     */\n    public static GENERIC_DEFAULT_CONVERSION: PossiblePredefinedConversionWithoutValues = 'emptyable string';\n    public static readonly NULLABLE_STRING = 'nullable';\n    public static readonly COMMA_AND_SPACE_STRING = ', ';\n    /**\n     * Whenever a new instance will throw an error or ignore every possible errors.\n     *\n     * @note It is recommended in <u>development</u> and <u>testing</u> to have it enable, but not in <u>production</u>.\n     */\n    public static GENERIC_DOES_THROW_ERROR: boolean = true;\n    /**\n     * Whenever a new instance will have\n     * the original content received in the constructor is a reference\n     * or a copy of the original content.\n     */\n    public static GENERIC_HAS_ORIGINAL_CONTENT_AS_REFERENCE: boolean = false;\n\n    //endregion -------------------- Static fields --------------------\n    //region -------------------- Static custom callback fields --------------------\n\n    /**\n     * The custom callback name used in the {@link HeaderContainer}.\n     */\n    public static readonly CUSTOM_CALLBACK_NAME = 'custom callback';\n    public static readonly TRUE_CALLBACK = () => true as const;\n    public static readonly CUSTOM_VALIDATION_CALLBACK: CustomValidationCallback = (value, conversionCallbacksToConverter,) => {\n        for (const conversionCallbackToConverter of conversionCallbacksToConverter) {\n            if (conversionCallbackToConverter(value).isValueValid(value))\n                return true;\n        }\n        return false;\n    };\n    public static readonly CUSTOM_VALIDATION_CALLBACK_WITH_EMPTYABLE_STRING: CustomValidationCallback = (value, conversionCallbacksToConverter,) =>\n        value === '' || CSVLoader.CUSTOM_VALIDATION_CALLBACK(value, conversionCallbacksToConverter,);\n\n    static readonly #CONVERSION_CALLBACK_LOOP = (value: string, conversionCallbacksToConverter: readonly ConversionCallbackToConverter[],) => {\n        for (const conversionCallbackToConverter of conversionCallbacksToConverter) {\n            if (conversionCallbackToConverter(value).isValueValid(value))\n                return conversionCallbackToConverter(value).convertTheValue(value);\n        }\n    };\n    public static readonly CUSTOM_CONVERSION_CALLBACK: CustomConversionCallbackToAnyCallback = (value, conversionCallbacksToConverter,) =>\n        CSVLoader.#CONVERSION_CALLBACK_LOOP(value, conversionCallbacksToConverter,);\n    public static readonly CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING: CustomConversionCallbackToAnyCallback = (value, conversionCallbacksToConverter,) =>\n        value === '' ? null : CSVLoader.CUSTOM_CONVERSION_CALLBACK(value, conversionCallbacksToConverter,);\n    public static readonly CUSTOM_CONVERSION_CALLBACK_WITH_ERRORS: CustomConversionCallbackToAnyCallbackWithError = (value, mixedTypeOnConverter, conversionCallbacksToConverter,) => {\n        const returnValue = CSVLoader.#CONVERSION_CALLBACK_LOOP(value, conversionCallbacksToConverter,);\n        assert(returnValue != null, `The value could not be converted to the possible values: ${mixedTypeOnConverter}.`,);\n        return returnValue;\n    };\n    public static readonly CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING_WITH_ERRORS: CustomConversionCallbackToAnyCallbackWithError = (value, mixedTypeOnConverter, conversionCallbacksToConverter,) =>\n        value === '' ? null : CSVLoader.CUSTOM_CONVERSION_CALLBACK_WITH_ERRORS(value, mixedTypeOnConverter, conversionCallbacksToConverter,);\n\n    //endregion -------------------- Static custom callback fields --------------------\n    //region -------------------- Instance fields --------------------\n\n    readonly #hasOriginalContentAsReference: boolean;\n    #doesThrowError?: boolean;\n    #defaultConversion?: PossiblePredefinedConversionWithoutValues;\n\n    readonly #originalHeaders: readonly H[];\n    readonly #headers: ReadonlySet<SimpleHeader<H>>;\n    readonly #originalContent: string[][];\n    readonly #callbackToCreateObject: CallbackToCreateObject<A, T>;\n\n    readonly #headerContainerMap: Map<SimpleHeader<H>, HeaderContainer<H, this['headersAsArray']>>;\n    readonly #convertedContent: A[];\n    readonly #content: T[];\n\n    #callbackOnBeforeFinalObjectCreated: CallbackOnBeforeFinalObjectCreated<A>;\n    #callbackOnAfterFinalObjectCreated: CallbackOnAfterFinalObjectCreated<A, T>;\n    #callbackOnBeforeSingleContentConverted: CallbackOnBeforeSingleContentConverted<H>;\n    #callbackOnAfterSingleContentConverted: CallbackOnAfterSingleContentConverted<H, A>;\n    #callbackOnInitialisationStart: CallbackOnInitialisationStart;\n    #callbackOnInitialisationEnd: CallbackOnInitialisationEnd<A, T>;\n\n    //endregion -------------------- Instance fields --------------------\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(originalContent: string[][], callbackToCreateObject: CallbackToCreateObject<A, T>, hasOriginalContentAsReference: boolean = CSVLoader.GENERIC_HAS_ORIGINAL_CONTENT_AS_REFERENCE,) {\n        this.#hasOriginalContentAsReference = hasOriginalContentAsReference;\n        if (!this.hasOriginalContentAsReference)\n            originalContent = [...originalContent.map(originalValue => [...originalValue])];\n\n        this.#originalHeaders = originalContent.shift()! as unknown as H[];\n        this.#headers = new Set(this.originalHeaders.map(originalHeader => originalHeader.toLowerCase() as SimpleHeader<H>));\n        this.#assert(this.originalHeaders.length === this.headers.size, `There is one or more duplicate header in the csv file. (${this.headers.size}/${this.originalHeaders.length})\\n[${this.originalHeaders.join(CSVLoader.COMMA_AND_SPACE_STRING)}]`,);\n        this.#originalContent = originalContent;\n        this.#callbackToCreateObject = callbackToCreateObject;\n\n        this.#headerContainerMap = new Map();\n        this.#convertedContent = [];\n        this.#content = [];\n\n        this.#callbackOnBeforeFinalObjectCreated = null;\n        this.#callbackOnAfterFinalObjectCreated = null;\n        this.#callbackOnBeforeSingleContentConverted = null;\n        this.#callbackOnAfterSingleContentConverted = null;\n        this.#callbackOnInitialisationStart = null;\n        this.#callbackOnInitialisationEnd = null;\n    }\n\n    //region -------------------- Assertion methods --------------------\n\n    #assert(condition: boolean, message: string,): asserts condition {\n        if (this.doesThrowError)\n            assert(condition, message,);\n    }\n\n    //endregion -------------------- Assertion methods --------------------\n    //region -------------------- Getter and setter methods --------------------\n\n    //region -------------------- Has original content as reference methods --------------------\n\n    public get hasOriginalContentAsReference(): boolean {\n        return this.#hasOriginalContentAsReference;\n    }\n\n    //endregion -------------------- Has original content as reference methods --------------------\n    //region -------------------- Default values methods --------------------\n\n    //region -------------------- Default does throw error methods --------------------\n\n    public get doesThrowError(): boolean {\n        return this.#doesThrowError ?? CSVLoader.GENERIC_DOES_THROW_ERROR;\n    }\n\n    public set doesThrowError(value: boolean,) {\n        this.setDoesThrowError(value);\n    }\n\n    public setDoesThrowError(doesThrowError: boolean,): this {\n        this.#doesThrowError = doesThrowError;\n        return this;\n    }\n\n    //endregion -------------------- Default does throw error methods --------------------\n    //region -------------------- Default conversion methods --------------------\n\n    public get defaultConversion(): PossiblePredefinedConversionWithoutValues {\n        return this.#defaultConversion ?? CSVLoader.GENERIC_DEFAULT_CONVERSION;\n    }\n\n    public set defaultConversion(value: PossiblePredefinedConversionWithoutValues,) {\n        this.setDefaultConversion(value);\n    }\n\n    /**\n     * Set the default {@link PredefinedConversion} on the current {@link CSVLoader loader instance}.\n     * If the current default conversion is not defined,\n     * then the {@link GENERIC_DEFAULT_CONVERSION generic default conversion} is used.\n     *\n     * @param defaultConversion\n     * @see GENERIC_DEFAULT_CONVERSION\n     */\n    public setDefaultConversion(defaultConversion: PossiblePredefinedConversionWithoutValues,): this {\n        this.#defaultConversion = defaultConversion;\n        return this;\n    }\n\n    //endregion -------------------- Default conversion methods --------------------\n\n    //endregion -------------------- Default values methods --------------------\n\n    //region -------------------- Headers methods --------------------\n\n    /**\n     * The original headers on the {@link this.originalContent original content}.\n     */\n    public get originalHeaders(): readonly H[] {\n        return this.#originalHeaders;\n    }\n\n    /**\n     * The headers on the {@link this.originalContent original content}\n     * used by the Loader to interact with every comparisons.\n     */\n    public get headers(): ReadonlySet<SimpleHeader<H>> {\n        return this.#headers;\n    }\n\n    public get headersAsArray(): readonly SimpleHeader<H>[] {\n        return Array.from(this.headers);\n    }\n\n    //endregion -------------------- Headers methods --------------------\n    //region -------------------- Original content methods --------------------\n\n    /**\n     * The original content received via the constructor.\n     */\n    public get originalContent(): readonly string[][] {\n        return this.#originalContent;\n    }\n\n    //endregion -------------------- Original content methods --------------------\n    //region -------------------- Converted content methods --------------------\n\n    /**\n     * The converted content with the sames structure as the {@link this.originalContent},\n     * but converted based on the {@link this.headerContainerMap} on each associated <u>header index</u>.\n     */\n    public get convertedContent(): readonly A[] {\n        return this._convertedContent;\n    }\n\n    protected get _convertedContent(): A[] {\n        return this.#convertedContent;\n    }\n\n    //endregion -------------------- Converted content methods --------------------\n    //region -------------------- Headers to convert methods --------------------\n\n    /**\n     * A map of every headers to convert.\n     * For the titles not included in it, it use the {@link GENERIC_DEFAULT_CONVERSION} for the conversion.\n     */\n    public get headerContainerMap(): ReadonlyMap<SimpleHeader<H>, HeaderContainer<H, this['headersAsArray']>> {\n        return this._headerContainerMap;\n    }\n\n    protected get _headerContainerMap(): Map<SimpleHeader<H>, HeaderContainer<H, this['headersAsArray']>> {\n        return this.#headerContainerMap;\n    }\n\n    //endregion -------------------- Headers to convert methods --------------------\n    //region -------------------- Content methods --------------------\n\n    /**\n     * Get the content stored inside this {@link CSVLoader loader}.\n     * It use the {@link load} method to retrieve the data only once.\n     *\n     * @see load\n     */\n    public get content(): readonly T[] {\n        return this.load().#content;\n    }\n\n    protected get _content(): T[] {\n        return this.#content;\n    }\n\n    //endregion -------------------- Content methods --------------------\n    //region -------------------- Callback to create the object --------------------\n\n    public get callbackToCreateObject(): CallbackToCreateObject<A, T> {\n        return this.#callbackToCreateObject;\n    }\n\n    //endregion -------------------- Callback to create the object --------------------\n\n    //region -------------------- Triggers methods --------------------\n\n    //region -------------------- On before final object created methods --------------------\n\n    public get callbackOnBeforeFinalObjectCreated() {\n        return this.#callbackOnBeforeFinalObjectCreated;\n    }\n\n    public set callbackOnBeforeFinalObjectCreated(callback: CallbackOnBeforeFinalObjectCreated<A>,) {\n        this.onBeforeFinalObjectCreated(callback);\n    }\n\n    /**\n     * <p>\n     *  A trigger called before inserting the content\n     *  and before the {@link callbackToCreateObject callback received in the construction}\n     *  on the {@link addContent addition of content} in the initialisation process.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>The content converted</li>\n     *    <li>The original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onBeforeFinalObjectCreated(callback: CallbackOnBeforeFinalObjectCreated<A>,): this {\n        this.#callbackOnBeforeFinalObjectCreated = callback;\n        return this;\n    }\n\n    //endregion -------------------- On before final object created methods --------------------\n    //region -------------------- On after final object created methods --------------------\n\n    public get callbackOnAfterFinalObjectCreated() {\n        return this.#callbackOnAfterFinalObjectCreated;\n    }\n\n    public set callbackOnAfterFinalObjectCreated(callback: CallbackOnAfterFinalObjectCreated<A, T>,) {\n        this.onAfterFinalObjectCreated(callback);\n    }\n\n    /**\n     * <p>\n     *  A trigger called before inserting the content\n     *  and after the {@link callbackToCreateObject callback received in the construction}\n     *  on the {@link addContent addition of content} in the initialisation process.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>The final content</li>\n     *    <li>The content converted</li>\n     *    <li>The original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onAfterFinalObjectCreated(callback: CallbackOnAfterFinalObjectCreated<A, T>,): this {\n        this.#callbackOnAfterFinalObjectCreated = callback;\n        return this;\n    }\n\n    //endregion -------------------- On after final object created methods --------------------\n\n    //region -------------------- On before single content has been converted methods --------------------\n\n    public get callbackOnBeforeSingleContentConverted() {\n        return this.#callbackOnBeforeSingleContentConverted;\n    }\n\n    public set callbackOnBeforeSingleContentConverted(callback: CallbackOnBeforeSingleContentConverted<H>,) {\n        this.onBeforeSingleContentConverted(callback);\n    }\n\n    /**\n     * <p>\n     *  A trigger called before each individual conversion\n     *  on the {@link _initialiseContent initialisation method}.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>A single original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onBeforeSingleContentConverted(callback: CallbackOnBeforeSingleContentConverted<H>,): this {\n        this.#callbackOnBeforeSingleContentConverted = callback;\n        return this;\n    }\n\n    //endregion -------------------- On before single content has been converted methods --------------------\n    //region -------------------- On after single content has been converted methods --------------------\n\n    public get callbackOnAfterSingleContentConverted() {\n        return this.#callbackOnAfterSingleContentConverted;\n    }\n\n    public set callbackOnAfterSingleContentConverted(callback: CallbackOnAfterSingleContentConverted<H, A>,) {\n        this.onAfterSingleContentConverted(callback);\n    }\n\n    /**\n     * <p>\n     *  A trigger called after each individual conversion\n     *  on the {@link _initialiseContent initialisation method}.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>A single converted content</li>\n     *    <li>A single original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onAfterSingleContentConverted(callback: CallbackOnAfterSingleContentConverted<H, A>,): this {\n        this.#callbackOnAfterSingleContentConverted = callback;\n        return this;\n    }\n\n    //endregion -------------------- On after single content has been converted methods --------------------\n\n    //region -------------------- On initialisation start methods --------------------\n\n    public get callbackOnInitialisationStart() {\n        return this.#callbackOnInitialisationStart;\n    }\n\n    public set callbackOnInitialisationStart(callback: CallbackOnInitialisationStart,) {\n        this.onInitialisationStart(callback);\n    }\n\n    /**\n     * <p>\n     *   A trigger called at the start of\n     *   the {@link _initialiseContent initialisation method}.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>The original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onInitialisationStart(callback: CallbackOnInitialisationStart,): this {\n        this.#callbackOnInitialisationStart = callback;\n        return this;\n    }\n\n    //endregion -------------------- On initialisation start methods --------------------\n    //region -------------------- On initialisation end methods --------------------\n\n    public get callbackOnInitialisationEnd() {\n        return this.#callbackOnInitialisationEnd;\n    }\n\n    public set callbackOnInitialisationEnd(callback: CallbackOnInitialisationEnd<A, T>,) {\n        this.onInitialisationEnd(callback);\n    }\n\n    /**\n     * <p>\n     *   A trigger called at the end of\n     *   the {@link _initialiseContent initialisation method}.\n     * </p>\n     *\n     * <p>\n     *  It receive as a parameter:\n     *  <ol>\n     *    <li>The final array of content</li>\n     *    <li>The array of converted content</li>\n     *    <li>The original content</li>\n     *  </ol>\n     * </p>\n     *\n     * @param callback the callback to set\n     */\n    public onInitialisationEnd(callback: CallbackOnInitialisationEnd<A, T>,): this {\n        this.#callbackOnInitialisationEnd = callback;\n        return this;\n    }\n\n    //endregion -------------------- On initialisation end methods --------------------\n\n    //endregion -------------------- Triggers methods --------------------\n\n    //endregion -------------------- Getter and setter methods --------------------\n    //region -------------------- Direct use on private members methods --------------------\n\n    /**\n     * Load the content only once, and then do nothing.\n     *\n     * @see _initialiseContent\n     */\n    public load(): this {\n        if (this.#content.length === 0)\n            this._initialiseContent();\n        return this;\n    }\n\n    protected addHeaderToConvert(header: SimpleHeader<H>, headerTypeOrConvertor: ArrayOrSimpleHeaderTypeOrConvertor): this {\n        if (!this._headerContainerMap.has(header))\n            this._headerContainerMap.set(header, new HeaderContainer(header, this.headersAsArray,));\n        this._headerContainerMap.get(header)!.addHeaderTypeOrConvertor(headerTypeOrConvertor);\n        return this;\n    }\n\n    protected addContent(originalContent: string[], arrayContent: A,): this {\n        this.callbackOnBeforeFinalObjectCreated?.(arrayContent, originalContent,);\n        const convertContent = this.callbackToCreateObject(arrayContent);\n        this.callbackOnAfterFinalObjectCreated?.(convertContent, arrayContent, originalContent,);\n        this._convertedContent.push(arrayContent);\n        this._content.push(convertContent);\n        return this;\n    }\n\n    //endregion -------------------- Direct use on private members methods --------------------\n    //region -------------------- Callback usage methods --------------------\n\n    /**\n     * Execute any callbacks on the current {@link CSVLoader}.\n     *\n     * @note The callbacks will be executed on the method call.\n     * @param callbacks the callbacks to execute on the {@link CSVLoader} instance (this instance).\n     */\n    public executeCallbackOnLoader(...callbacks: CallbackOnLoader<this, A, T, H>[]): this {\n        callbacks.forEach(callback => callback(this));\n        return this;\n    }\n\n    //endregion -------------------- Callback usage methods --------------------\n    //region -------------------- Convertor usage methods --------------------\n\n    /**\n     * <p>\n     *  Add the type to the possible header type or simple convertor array.\n     * </p>\n     *\n     * <p>\n     *  If the valid value or the convertor is an array:\n     *  <ul>\n     *   <li>it will add the type in the front of the array</li>\n     *   <li>it return a simple double tuple with the type and the valid value or convertor</li>\n     *  </ul>\n     * </p>\n     *\n     * @param typeOrHeader the type to add in front of the header type or the header name\n     * @param validValueOrConvertor an array or a simple header or convertor\n     */\n    protected _addTypeToHeaderTypeOrConvertor<T extends | number | boolean | string>(typeOrHeader: PredefinedConversion | SimpleHeader<H>, validValueOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<T>,): ArrayHeaderTypeOrConvertor {\n        return [typeOrHeader, validValueOrConvertor,].flat();\n    }\n\n    //region -------------------- Boolean conversion methods --------------------\n\n    public convertToBoolean(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.BOOLEAN.simpleName, ...headers,);\n    }\n\n    public convertToNullableBoolean(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.NULLABLE_BOOLEAN.simpleName, ...headers,);\n    }\n\n\n    public convertToBooleanAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'boolean' | 'nullable boolean' | boolean>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.BOOLEAN.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    public convertToNullableBooleanAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'boolean' | boolean | NullablePredefinedConversion | EmptyableString>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.NULLABLE_BOOLEAN.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    //endregion -------------------- Boolean conversion methods --------------------\n    //region -------------------- Number conversion methods --------------------\n\n    public convertToNumber(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.NUMBER.simpleName, ...headers,);\n    }\n\n    public convertToNullableNumber(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.NULLABLE_NUMBER.simpleName, ...headers,);\n    }\n\n\n    public convertToNumberAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'number' | 'nullable number' | number>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.NUMBER.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    public convertToNullableNumberAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'number' | number | NullablePredefinedConversion | EmptyableString>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.NULLABLE_NUMBER.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    //endregion -------------------- Number conversion methods --------------------\n    //region -------------------- String conversion methods --------------------\n\n    public convertToString(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.STRING.simpleName, ...headers,);\n    }\n\n    public convertToEmptyableString(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.EMPTYABLE_STRING.simpleName, ...headers,);\n    }\n\n    public convertToNullableString(...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(PredefinedConverter.NULLABLE_STRING.simpleName, ...headers,);\n    }\n\n\n    public convertToStringAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'string' | 'nullable string' | EmptyableString>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.STRING.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    /**\n     * <p>\n     *  Convert the headers received into the valid values (any {@link String}),\n     *  the specific value received\n     *  or from a predefined conversion ({@link PrimitiveConversion} excluding the 'string' since it is already referenced).\n     * </p>\n     *\n     * <p>\n     *  It can either be an empty string (''), <u>not</u> the <u><b>null</b></u> or <u><b>undefined</b></u> values,\n     *  any possible predefined value (if a 'boolean' or 'number').\n     *  It also validate if the value can be at least it is the value received (if it's any string).\n     * </p>\n     *\n     * @param headerTypeOrConvertor\n     * @param headers\n     * @see StringToEmptyableStringConverter\n     * @see ConverterPatterns.EMPTYABLE_STRING_PATTERN\n     * @see this.convertTo\n     */\n    public convertToEmptyableStringAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'string' | NullablePredefinedConversion | EmptyableString>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.EMPTYABLE_STRING.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    /**\n     * <p>\n     *  Convert the headers received into the valid values (any {@link String}),\n     *  the specific value received\n     *  or from a predefined conversion ({@link PrimitiveConversion} excluding the 'string' since it is already referenced).\n     * </p>\n     *\n     * <p>\n     *  It can either be a <u><b>null</b></u> or <u><b>undefined</b></u> ignoring the case or\n     *  any possible predefined value (if a 'boolean' or 'number').\n     *  It also validate if the value can be at least it is the value received (if it's any string).\n     * </p>\n     *\n     * @param headerTypeOrConvertor\n     * @param headers\n     * @see StringToNullableStringConverter\n     * @see ConverterPatterns.NULLABLE_STRING_PATTERN\n     * @see this.convertTo\n     */\n    public convertToNullableStringAnd(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<| 'string' | NullablePredefinedConversion | EmptyableString>, ...headers: ArrayOfHeadersReceived<H>): this {\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(PredefinedConverter.NULLABLE_STRING.simpleName, headerTypeOrConvertor,), ...headers,);\n    }\n\n    //endregion -------------------- String conversion methods --------------------\n    //region -------------------- Header conversion methods --------------------\n\n    protected _validateHeaderNotIncludedInArrayOfHeadersReceived(header: SimpleHeader<H>, headers: ArrayOfHeadersReceived<H>,): void | never {\n        this.#assert(!headers.includes(header), `Recursive error. A header referenced (\"${header}\") cannot be included within the possible headers (${headers.map(header => `\"${header}\"`).join(CSVLoader.COMMA_AND_SPACE_STRING)})`,);\n    }\n\n    public convertToHeader(header: SimpleHeaderReceived<H>, ...headers: ArrayOfHeadersReceived<H>): this | never {\n        this._validateHeaderNotIncludedInArrayOfHeadersReceived(header.toLowerCase() as SimpleHeader<H>, headers,);\n        return this.convertTo(header, ...headers,);\n    }\n\n    public convertToHeaderAnd(header: SimpleHeaderReceived<H>, validValueOrConvertor: ArrayOrSimpleHeaderTypeConvertorExcluding<H>, ...headers: ArrayOfHeadersReceived<H>): this | never {\n        this._validateHeaderNotIncludedInArrayOfHeadersReceived(header.toLowerCase() as SimpleHeader<H>, headers,);\n        return this.convertTo(this._addTypeToHeaderTypeOrConvertor(header.toLowerCase() as SimpleHeader<H>, validValueOrConvertor,), ...headers,);\n    }\n\n    //endregion -------------------- Header conversion methods --------------------\n\n    /**\n     * Add a conversion on each headers received with <u>only one</u> of:\n     * <ul>\n     *     <li>a predefined conversion type ({@link PredefinedConversion})</li>\n     *     <li>a custom convertor ({@link ConversionCallbackToConverter})</li>\n     *     <li>an {@link Array array} of any string and / or the {@link PredefinedConversion predefined conversion type}</li>\n     * </ul>\n     *\n     * @param headerTypeOrConvertor <u>the predefined conversion</u>, <u>custom convertor</u> or <u>the array of string and / or predefined conversion</u>\n     * @param headers the headers to have the validation\n     */\n    public convertTo(headerTypeOrConvertor: ArrayOrSimpleHeaderTypeOrConvertor, ...headers: ArrayOfHeadersReceived<H>): this {\n        headers.map(header => header.toLowerCase() as SimpleHeader<H>).forEach(header => this.addHeaderToConvert(header, headerTypeOrConvertor,));\n        return this;\n    }\n\n    //endregion -------------------- Convertor usage methods --------------------\n    //region -------------------- Initialisation methods --------------------\n\n    protected _convertOriginalContent(headerConverterHolder: HeadersConverterHolder<H>, content: string,): keyof A {\n        return headerConverterHolder.convertor(content).convertedValue as keyof A;\n    }\n\n    protected _initialiseContent(): this {\n        this.callbackOnInitialisationStart?.(this.originalContent);\n        //TODO verify every headers to include them as those followed.\n        const headersConverterHolders: readonly HeadersConverterHolder<H>[] = this.headersAsArray.map((header, index,) => ({\n            index: index,\n            originalHeader: this.originalHeaders[index],\n            header: header.toLowerCase() as SimpleHeader<H>,\n            convertor: this._getConverterBasedOnHeader(header.toLowerCase() as SimpleHeader<H>),\n        }));\n        //TODO add temporary variable to hold the values in their proper order\n        this.originalContent.forEach(\n            originalContent => this.addContent(originalContent, originalContent\n                .map((content, index,) => {\n                    const headerConverterHolder = headersConverterHolders[index];\n                    this.callbackOnBeforeSingleContentConverted?.(content, headerConverterHolder.originalHeader,);\n                    const convertedValue = this._convertOriginalContent(headerConverterHolder, content,);\n                    this.callbackOnAfterSingleContentConverted?.(convertedValue, content, headerConverterHolder.originalHeader,);\n                    return convertedValue;\n                }) as A)\n        );\n        this.callbackOnInitialisationEnd?.(this.content, this.convertedContent, this.originalContent,);\n        return this;\n    }\n\n    protected _getConverterBasedOnHeader(header: SimpleHeader<H>,): ConversionCallbackToConverter {\n        const headerContainer = this.headerContainerMap.get(header);\n        if (headerContainer == null)\n            return value => PredefinedConverter.getValue(this.defaultConversion).newConvertor(value, null,);\n        if (headerContainer.amountOfValidator === 1)\n            return this._createSingleConvertor(headerContainer);\n        return this._createMixedConvertor(headerContainer);\n    }\n\n    //region -------------------- Convertor creation methods --------------------\n\n    //region -------------------- Single Convertor creation methods --------------------\n\n    /**\n     * Create the {@link Converter} based on the {@link PredefinedConversion}\n     * and the create a new basic {@link Converter}.\n     *\n     * @param headerContainer the header container\n     */\n    protected _createSingleConvertor(headerContainer: HeaderContainer<H, this['headersAsArray']>,): ConversionCallbackToConverter {\n        return headerContainer.createConversionCallbacks()[0];\n    }\n\n    //endregion -------------------- Single Convertor creation methods --------------------\n    //region -------------------- Mixed Convertor creation methods --------------------\n\n    protected _createContainValidations(headerContainer: HeaderContainer<H, this['headersAsArray']>,): ArrayOfValidationsArrayOfValidations {\n        return [\n            Array.from(headerContainer.predefinedConvertors).find(predefinedConvertor => predefinedConvertor.simpleName.includes(CSVLoader.NULLABLE_STRING)) != null,\n            headerContainer.predefinedConvertors.has(PredefinedConverter.EMPTYABLE_STRING) != null,\n        ];\n    }\n\n    protected _createMixedConvertorInstance(headerContainer: HeaderContainer<H, this['headersAsArray']>, validations: ArrayOfValidationsArrayOfValidations,): ArrayOfMixedConvertorInstance {\n        return [\n            headerContainer.createConversionCallbacks(),\n            this._createMixedConvertorInstanceTypes(headerContainer, validations,),\n        ];\n    }\n\n    protected _createMixedConvertorInstanceTypes(headerContainer: HeaderContainer<H, this['headersAsArray']>, [containNullable, containEmptyableString,]: ArrayOfValidationsArrayOfValidations,): string {\n        return (containNullable ? CSVLoader.NULLABLE_STRING : '')\n            + ' ('\n            + (containEmptyableString ? '\"\", ' : '')\n            + (headerContainer.predefinedConvertors.size === 0 ? '' : `predefined convertor: (${Array.from(headerContainer.predefinedConvertors).map(predefinedConvertor => predefinedConvertor.simpleNameAsNonNullable).join(CSVLoader.COMMA_AND_SPACE_STRING)})`)\n            + (headerContainer.followingHeaders.size === 0 ? '' : `headers: (${Array.from(headerContainer.followingHeaders).join(CSVLoader.COMMA_AND_SPACE_STRING)})`)\n            + (headerContainer.singleValuesToValidate.size === 0 ? '' : `values: (${Array.from(headerContainer.singleValuesToValidate).map(singleValue => `\"${singleValue}\"`).join(CSVLoader.COMMA_AND_SPACE_STRING)})`)\n            + (headerContainer.convertorCallbacks.size === 0 ? '' : `${CSVLoader.CUSTOM_CALLBACK_NAME} x${headerContainer.convertorCallbacks.size}`)\n            + ')';\n    }\n\n    protected _interpretConvertorInstance([containNullable, containEmptyableString,]: ArrayOfValidationsArrayOfValidations, [conversionCallbacksToConverter, mixedTypeOnConverter,]: ArrayOfMixedConvertorInstance,): ConversionCallbackToConverter {\n        if (!this.doesThrowError)\n            return containNullable\n                ? value => new GenericStringToAnyNullableConverter(value, mixedTypeOnConverter, CSVLoader.TRUE_CALLBACK,\n                    value => CSVLoader.CUSTOM_VALIDATION_CALLBACK(value, conversionCallbacksToConverter,),)\n                : containEmptyableString\n                    ? value => new GenericStringToAnyConverter(value, mixedTypeOnConverter, CSVLoader.TRUE_CALLBACK,\n                        value => CSVLoader.CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING(value, conversionCallbacksToConverter,),)\n                    : value => new GenericStringToAnyConverter(value, mixedTypeOnConverter, CSVLoader.TRUE_CALLBACK,\n                        value => CSVLoader.CUSTOM_CONVERSION_CALLBACK(value, conversionCallbacksToConverter,),);\n\n        return containNullable\n            ? value => new GenericStringToAnyNullableConverter(value, mixedTypeOnConverter,\n                value => CSVLoader.CUSTOM_VALIDATION_CALLBACK(value, conversionCallbacksToConverter,),\n                value => CSVLoader.CUSTOM_CONVERSION_CALLBACK_WITH_ERRORS(value, mixedTypeOnConverter, conversionCallbacksToConverter,),)\n            : containEmptyableString\n                ? value => new GenericStringToAnyConverter(value, mixedTypeOnConverter,\n                    value => CSVLoader.CUSTOM_VALIDATION_CALLBACK_WITH_EMPTYABLE_STRING(value, conversionCallbacksToConverter,),\n                    value => CSVLoader.CUSTOM_CONVERSION_CALLBACK_WITH_EMPTYABLE_STRING_WITH_ERRORS(value, mixedTypeOnConverter, conversionCallbacksToConverter,),)\n                : value => new GenericStringToAnyConverter(value, mixedTypeOnConverter,\n                    value => CSVLoader.CUSTOM_VALIDATION_CALLBACK(value, conversionCallbacksToConverter,),\n                    value => CSVLoader.CUSTOM_CONVERSION_CALLBACK_WITH_ERRORS(value, mixedTypeOnConverter, conversionCallbacksToConverter,),);\n    }\n\n    protected _createMixedConvertor(headerContainer: HeaderContainer<H, this['headersAsArray']>,): ConversionCallbackToConverter {\n        const validations = this._createContainValidations(headerContainer);\n        const mixedConvertorInstance = this._createMixedConvertorInstance(headerContainer, validations,);\n\n        return this._interpretConvertorInstance(validations, mixedConvertorInstance);\n    }\n\n    //endregion -------------------- Mixed Convertor creation methods --------------------\n\n    //endregion -------------------- Convertor creation methods --------------------\n\n    //endregion -------------------- Initialisation methods --------------------\n\n}\n","import type {BooleanPropertyWithAmountAndComment} from '../PropertyWithAmountAndComment';\nimport type {PossibleAmount}                      from '../ClassWithAmount';\nimport type {PossibleBoolean}                     from '../Property';\nimport type {PossibleComment}                     from '../ClassWithComment';\nimport type {PossibleValueOnObjectHolder}         from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithAmountAndCommentContainer} from '../PropertyWithAmountAndComment.container';\n\nexport class BooleanPropertyWithAmountAndCommentContainer<B extends PossibleBoolean = PossibleBoolean, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithAmountAndCommentContainer<B, AMOUNT, COMMENT>\n    implements BooleanPropertyWithAmountAndComment<B, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<B>, amount: AMOUNT, comment: COMMENT,) {\n        super(value, amount, comment,);\n    }\n\n}\n","import type {DEFAULT_IS_UNKNOWN}           from './Property';\nimport type {PossibleAmount}               from './ClassWithAmount';\nimport type {PossibleComment}              from './ClassWithComment';\nimport type {PossibleValueOnObjectHolder}  from '../../util/holder/ObjectHolder';\nimport type {PropertyWithAmountAndComment} from './PropertyWithAmountAndComment';\n\nimport {PropertyContainer} from './Property.container';\n\nexport class PropertyWithAmountAndCommentContainer<T, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyContainer<T, DEFAULT_IS_UNKNOWN, AMOUNT, COMMENT>\n    implements PropertyWithAmountAndComment<T, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, amount: AMOUNT, comment: COMMENT,) {\n        super(value, amount, comment,);\n    }\n\n}\n","import type {BooleanPropertyWithAmount}   from '../PropertyWithAmount';\nimport type {PossibleAmount}              from '../ClassWithAmount';\nimport type {PossibleBoolean}             from '../Property';\nimport type {PossibleValueOnObjectHolder} from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithAmountContainer} from '../PropertyWithAmount.container';\n\nexport class BooleanPropertyWithAmountContainer<B extends PossibleBoolean = PossibleBoolean, AMOUNT extends PossibleAmount = PossibleAmount, >\n    extends PropertyWithAmountContainer<B, AMOUNT>\n    implements BooleanPropertyWithAmount<B, AMOUNT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<B>, amount: AMOUNT,) {\n        super(value, amount,);\n    }\n\n}\n","import type {DEFAULT_IS_UNKNOWN}          from './Property';\nimport type {PossibleAmount}              from './ClassWithAmount';\nimport type {PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\nimport type {PropertyWithAmount}          from './PropertyWithAmount';\n\nimport {PropertyContainer} from './Property.container';\n\nexport class PropertyWithAmountContainer<T, AMOUNT extends PossibleAmount = PossibleAmount, >\n    extends PropertyContainer<T, DEFAULT_IS_UNKNOWN, AMOUNT>\n    implements PropertyWithAmount<T, AMOUNT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, amount: AMOUNT,) {\n        super(value, amount,);\n    }\n\n}\n","import type {DEFAULT_AMOUNT, DEFAULT_IS_UNKNOWN} from './Property';\nimport type {PossibleComment}                    from './ClassWithComment';\nimport type {PossibleValueOnObjectHolder}        from '../../util/holder/ObjectHolder';\nimport type {PropertyWithComment}                from './PropertyWithComment';\n\nimport {PropertyContainer} from './Property.container';\n\nexport class PropertyWithCommentContainer<T, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyContainer<T, DEFAULT_IS_UNKNOWN, DEFAULT_AMOUNT, COMMENT>\n    implements PropertyWithComment<T, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, comment: COMMENT,) {\n        super(value, comment,);\n    }\n\n}\n","import type {BooleanPropertyWithComment}  from '../PropertyWithComment';\nimport type {PossibleBoolean}             from '../Property';\nimport type {PossibleComment}             from '../ClassWithComment';\nimport type {PossibleValueOnObjectHolder} from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithCommentContainer} from '../PropertyWithComment.container';\n\nexport class BooleanPropertyWithCommentContainer<B extends PossibleBoolean = PossibleBoolean, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithCommentContainer<B, COMMENT>\n    implements BooleanPropertyWithComment<B, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<B>, comment: COMMENT,) {\n        super(value, comment,);\n    }\n\n}\n","import type {PossibleAmount}              from './ClassWithAmount';\nimport type {PossibleComment}             from './ClassWithComment';\nimport type {PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\nimport type {PropertyWithEverything}      from './PropertyWithEverything';\n\nimport {PropertyContainer} from './Property.container';\n\nexport class PropertyWithEverythingContainer<T, IS_UNKNOWN extends boolean = boolean, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyContainer<T, IS_UNKNOWN, AMOUNT, COMMENT>\n    implements PropertyWithEverything<T, IS_UNKNOWN, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN, amount: AMOUNT, comment: COMMENT,) {\n        super(value, isUnknown, amount, comment,);\n    }\n\n}\n","import type {BooleanPropertyWithEverything} from '../PropertyWithEverything';\nimport type {PossibleAmount}                from '../ClassWithAmount';\nimport type {PossibleBoolean}               from '../Property';\nimport type {PossibleComment}               from '../ClassWithComment';\nimport type {PossibleValueOnObjectHolder}   from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithEverythingContainer} from '../PropertyWithEverything.container';\n\nexport class BooleanPropertyWithEverythingContainer<B extends PossibleBoolean = PossibleBoolean, IS_UNKNOWN extends boolean = boolean, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithEverythingContainer<B, IS_UNKNOWN, AMOUNT, COMMENT>\n    implements BooleanPropertyWithEverything<B, IS_UNKNOWN, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<B>, isUnknown: IS_UNKNOWN, amount: AMOUNT, comment: COMMENT,) {\n        super(value, isUnknown, amount, comment,);\n    }\n\n}\n","import type {NumberPropertyWithComment}   from '../PropertyWithComment';\nimport type {PossibleComment}             from '../ClassWithComment';\nimport type {PossibleNumber}              from '../Property';\nimport type {PossibleValueOnObjectHolder} from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithCommentContainer} from '../PropertyWithComment.container';\n\nexport class NumberPropertyWithCommentContainer<N extends PossibleNumber = PossibleNumber, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithCommentContainer<N, COMMENT>\n    implements NumberPropertyWithComment<N, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<N>, comment: COMMENT,) {\n        super(value, comment,);\n    }\n\n}\n","import type {NumberPropertyWithEverything} from '../PropertyWithEverything';\nimport type {PossibleAmount}               from '../ClassWithAmount';\nimport type {PossibleComment}              from '../ClassWithComment';\nimport type {PossibleNumber}               from '../Property';\nimport type {PossibleValueOnObjectHolder}  from '../../../util/holder/ObjectHolder';\n\nimport {PropertyWithEverythingContainer} from '../PropertyWithEverything.container';\n\nexport class NumberPropertyWithEverythingContainer<N extends PossibleNumber = PossibleNumber, IS_UNKNOWN extends boolean = boolean, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithEverythingContainer<N, IS_UNKNOWN, AMOUNT, COMMENT>\n    implements NumberPropertyWithEverything<N, IS_UNKNOWN, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<N>, isUnknown: IS_UNKNOWN, amount: AMOUNT, comment: COMMENT,) {\n        super(value, isUnknown, amount, comment,);\n    }\n\n}\n","import type {NumberProperty, PossibleNumber} from '../Property';\nimport type {PossibleValueOnObjectHolder}    from '../../../util/holder/ObjectHolder';\n\nimport {PropertyContainer} from '../Property.container';\n\nexport class NumberPropertyContainer<N extends PossibleNumber = PossibleNumber, >\n    extends PropertyContainer<N>\n    implements NumberProperty<N> {\n\n    public constructor(value: PossibleValueOnObjectHolder<N>,) {\n        super(value,);\n    }\n\n}\n","import type {PossibleString, StringProperty} from '../Property';\nimport type {PossibleValueOnObjectHolder}    from '../../../util/holder/ObjectHolder';\n\nimport {PropertyContainer} from '../Property.container';\n\nexport class StringPropertyContainer<S extends PossibleString = PossibleString, >\n    extends PropertyContainer<S>\n    implements StringProperty<S> {\n\n    public constructor(value: PossibleValueOnObjectHolder<S>,) {\n        super(value,);\n    }\n\n}\n","import type {PossibleComment}             from '../ClassWithComment';\nimport type {PossibleString}              from '../Property';\nimport type {PossibleValueOnObjectHolder} from '../../../util/holder/ObjectHolder';\nimport type {StringPropertyWithComment}   from '../PropertyWithComment';\n\nimport {PropertyWithCommentContainer} from '../PropertyWithComment.container';\n\nexport class StringPropertyWithCommentContainer<S extends PossibleString = PossibleString, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithCommentContainer<S, COMMENT>\n    implements StringPropertyWithComment<S, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<S>, comment: COMMENT,) {\n        super(value, comment,);\n    }\n\n}\n","import type {PossibleAmount}               from '../ClassWithAmount';\nimport type {PossibleComment}              from '../ClassWithComment';\nimport type {PossibleString}               from '../Property';\nimport type {PossibleValueOnObjectHolder}  from '../../../util/holder/ObjectHolder';\nimport type {StringPropertyWithEverything} from '../PropertyWithEverything';\n\nimport {PropertyWithEverythingContainer} from '../PropertyWithEverything.container';\n\nexport class StringPropertyWithEverythingContainer<S extends PossibleString = PossibleString, IS_UNKNOWN extends boolean = boolean, AMOUNT extends PossibleAmount = PossibleAmount, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyWithEverythingContainer<S, IS_UNKNOWN, AMOUNT, COMMENT>\n    implements StringPropertyWithEverything<S, IS_UNKNOWN, AMOUNT, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<S>, isUnknown: IS_UNKNOWN, amount: AMOUNT, comment: COMMENT,) {\n        super(value, isUnknown, amount, comment,);\n    }\n\n}\n","import type {PossibleComment}                                                                                                                                                                                                                                          from './ClassWithComment';\nimport type {NumberProperty, PossibleBooleanValuesByInferredProperty, PossibleInferredBooleanProperty, PossibleInferredNumberProperty, PossibleInferredStringProperty, PossibleNumberValuesByInferredProperty, PossibleStringValuesByInferredProperty, StringProperty} from './Property';\nimport type {BooleanPropertyWithAmountAndComment}                                                                                                                                                                                                                      from './PropertyWithAmountAndComment';\nimport type {BooleanPropertyWithAmount}                                                                                                                                                                                                                                from './PropertyWithAmount';\nimport type {BooleanPropertyWithComment, NumberPropertyWithComment}                                                                                                                                                                                                    from './PropertyWithComment';\n\nimport {BooleanPropertyWithAmountAndCommentContainer} from './boolean/BooleanPropertyWithAmountAndComment.container';\nimport {BooleanPropertyWithAmountContainer}           from './boolean/BooleanPropertyWithAmount.container';\nimport {BooleanPropertyWithCommentContainer}          from './boolean/BooleanPropertyWithComment.container';\nimport {BooleanPropertyWithEverythingContainer}       from './boolean/BooleanPropertyWithEverything.container';\nimport {NumberPropertyWithCommentContainer}           from './number/NumberPropertyWithComment.container';\nimport {NumberPropertyWithEverythingContainer}        from './number/NumberPropertyWithEverything.container';\nimport {NumberPropertyContainer}                      from './number/NumberProperty.container';\nimport {PropertyContainer}                            from './Property.container';\nimport {StringPropertyContainer}                      from './string/StringProperty.container';\nimport {StringPropertyWithCommentContainer}           from './string/StringPropertyWithComment.container';\nimport {StringPropertyWithEverythingContainer}        from './string/StringPropertyWithEverything.container';\n\nexport class PropertyProvider {\n\n    //region -------------------- Predefined properties maps --------------------\n\n    static readonly #BOOLEAN_FROM_STRING_MAP = new Map<string, BooleanPropertyFromString>();\n    static readonly #BOOLEAN_FROM_NUMBER_MAP = new Map<number, BooleanPropertyFromNumber>();\n    static readonly #STRING_FROM_STRING_MAP = new Map<string, StringPropertyFromString>();\n    static readonly #NUMBER_FROM_STRING_MAP = new Map<string, NumberPropertyFromString>();\n    static readonly #NUMBER_FROM_NUMBER_MAP = new Map<number, NumberPropertyFromNumber>();\n\n    //endregion -------------------- Predefined properties maps --------------------\n\n    private constructor() {\n        throw new EvalError('This class cannot be created');\n    }\n\n    public static newNumberContainer<T extends PossibleNumberValuesByInferredProperty, CAN_BE_NOT_APPLICABLE extends boolean = boolean, HAVE_A_COMMENT extends boolean = boolean, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE,): PossibleInferredNumberProperty<T, CAN_BE_NOT_APPLICABLE, HAVE_A_COMMENT, null>\n    public static newNumberContainer<T extends | number | null, CAN_BE_NOT_APPLICABLE extends boolean = boolean, COMMENT extends PossibleComment = PossibleComment, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE, comment: COMMENT,): PossibleInferredNumberProperty<T, CAN_BE_NOT_APPLICABLE, true, COMMENT>\n    public static newNumberContainer(value: PossibleNumberValuesByInferredProperty, canBeNotApplicable: boolean, comment?: PossibleComment,) {\n        return this.#newContainer('number', value, canBeNotApplicable, false, comment,);\n    }\n\n    public static newStringContainer<T extends PossibleStringValuesByInferredProperty, CAN_BE_NOT_APPLICABLE extends boolean = boolean, HAVE_A_COMMENT extends boolean = boolean, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE,): PossibleInferredStringProperty<T, CAN_BE_NOT_APPLICABLE, HAVE_A_COMMENT, null>\n    public static newStringContainer<T extends PossibleStringValuesByInferredProperty, CAN_BE_NOT_APPLICABLE extends boolean = boolean, COMMENT extends PossibleComment = PossibleComment, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE, comment: COMMENT,): PossibleInferredStringProperty<T, CAN_BE_NOT_APPLICABLE, true, COMMENT>\n    public static newStringContainer(value: PossibleStringValuesByInferredProperty, canBeNotApplicable: boolean, comment?: PossibleComment,) {\n        return this.#newContainer('string', value, canBeNotApplicable, false, comment,);\n    }\n\n    public static newBooleanContainer<T extends PossibleBooleanValuesByInferredProperty, CAN_BE_NOT_APPLICABLE extends boolean = boolean, DOES_HAVE_AN_AMOUNT extends boolean = boolean, HAVE_A_COMMENT extends boolean = boolean, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE, doesHaveAnAmount: DOES_HAVE_AN_AMOUNT,): PossibleInferredBooleanProperty<T, CAN_BE_NOT_APPLICABLE, DOES_HAVE_AN_AMOUNT, HAVE_A_COMMENT, null>\n    // @ts-ignore\n    public static newBooleanContainer<T extends | boolean | number | null, CAN_BE_NOT_APPLICABLE extends boolean = boolean, DOES_HAVE_AN_AMOUNT extends boolean = boolean, COMMENT extends PossibleComment = PossibleComment, >(value: T, canBeNotApplicable: CAN_BE_NOT_APPLICABLE, doesHaveAnAmount: DOES_HAVE_AN_AMOUNT, comment: COMMENT,): PossibleInferredBooleanProperty<T, CAN_BE_NOT_APPLICABLE, DOES_HAVE_AN_AMOUNT, true, COMMENT>\n    public static newBooleanContainer(value: PossibleBooleanValuesByInferredProperty, canBeNotApplicable: boolean, doesHaveAnAmount: boolean, comment?: PossibleComment,) {\n        return this.#newContainer('boolean', value, canBeNotApplicable, doesHaveAnAmount, comment,);\n    }\n\n    static #newContainer(type: | 'string' | 'boolean' | 'number', value: boolean | string | number | null, canBeNotApplicable: boolean, doesHaveAnAmount: boolean, comment: | string | null = null,) {\n        if (value == null)\n            return canBeNotApplicable ? PropertyContainer.NOT_APPLICABLE_CONTAINER : PropertyContainer.NULL_CONTAINER;\n        if (value === PropertyContainer.UNKNOWN) {\n            if (comment == null)\n                return PropertyContainer.UNKNOWN_CONTAINER;\n            switch (type) {\n                case 'string':\n                    return new StringPropertyWithEverythingContainer('', true, null, comment,);\n                case 'boolean':\n                    return new BooleanPropertyWithEverythingContainer(false, true, null, comment,);\n                case 'number':\n                    return new NumberPropertyWithEverythingContainer(NaN, true, null, comment);\n            }\n        }\n\n        switch (type) {\n            case 'boolean':\n                switch (typeof value) {\n                    case 'string':\n                        return this.#getOrSetMap<string, BooleanPropertyFromString>(\n                            value,\n                            this.#BOOLEAN_FROM_STRING_MAP,\n                            value => doesHaveAnAmount\n                                ? new BooleanPropertyWithAmountAndCommentContainer(true, 1, value,)\n                                : new BooleanPropertyWithCommentContainer(true, value,),\n                        );\n                    case 'boolean':\n                        return doesHaveAnAmount\n                            ? value ? PropertyContainer.TRUE_WITH_AMOUNT_CONTAINER : PropertyContainer.FALSE_WITH_AMOUNT_CONTAINER\n                            : value ? PropertyContainer.TRUE_CONTAINER : PropertyContainer.FALSE_CONTAINER;\n                    case 'number':\n                        return this.#getOrSetMap<number, BooleanPropertyFromNumber>(\n                            value,\n                            this.#BOOLEAN_FROM_NUMBER_MAP, value => comment == null ? new BooleanPropertyWithAmountContainer(true, value,) : new BooleanPropertyWithAmountAndCommentContainer(true, value, comment,),);\n                }\n                throw new ReferenceError(`The boolean container cannot be created with this value \"${value}\".`);\n            case 'string':\n                if (typeof value == 'string')\n                    return this.#getOrSetMap<string, StringPropertyFromString>(value, this.#STRING_FROM_STRING_MAP, value => comment == null ? new StringPropertyContainer(value,) : new StringPropertyWithCommentContainer(value, comment,),);\n                throw new TypeError(`The string container cannot have a value from a number or a boolean (${value})`);\n            case 'number':\n                switch (typeof value) {\n                    case 'string':\n                        return this.#getOrSetMap<string, NumberPropertyFromString>(value, this.#NUMBER_FROM_STRING_MAP, value => new NumberPropertyWithCommentContainer(null, value,),);\n                    case 'number':\n                        return this.#getOrSetMap<number, NumberPropertyFromNumber>(value, this.#NUMBER_FROM_NUMBER_MAP, value => comment == null ? new NumberPropertyContainer(value,) : new NumberPropertyWithCommentContainer(value, comment,),);\n                }\n                throw new ReferenceError(`The number container cannot be created with the value \"${value}\".`);\n        }\n        throw new TypeError(`The ${type} container could not be created with the value \"${value}\".`);\n    }\n\n    static #getOrSetMap<K, V, MAP extends Map<K, V> = Map<K, V>, >(key: K, map: MAP, callbackToCreateNew: (key: K,) => V,): V {\n        if (!map.has(key))\n            map.set(key, callbackToCreateNew(key));\n        return map.get(key)!;\n    }\n\n}\n\ntype BooleanPropertyFromString<S extends string = string, > = BooleanPropertyWithComment<true, S>;\ntype BooleanPropertyFromNumber<N extends number = number, COMMENT extends PossibleComment = null, > = COMMENT extends null ? BooleanPropertyWithAmount<true, N> : BooleanPropertyWithAmountAndComment<true, N, COMMENT>;\ntype StringPropertyFromString<S extends string = string, COMMENT extends PossibleComment = null, > = COMMENT extends null ? StringProperty<S> : StringPropertyWithCommentContainer<S, COMMENT>;\ntype NumberPropertyFromNumber<COMMENT extends PossibleComment = null, > = COMMENT extends null ? NumberProperty : NumberPropertyWithComment<null, COMMENT>;\ntype NumberPropertyFromString<S extends string = string, > = NumberPropertyWithComment<null, S>;\n","export const EMPTY_REACT_ELEMENT = <></>;\n","import {EmptyLanguage} from './EmptyLanguage';\n\n/**\n * @singleton\n */\nexport class EmptyLanguageContainer\n    implements EmptyLanguage {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyLanguageContainer;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get isUsed(): false {\n        return false;\n    }\n\n    public get original(): null {\n        return null;\n    }\n\n    public get(): null\n    public get<INDEX extends number = number, >(index: INDEX,): null\n    public get(): null {\n        return null;\n    }\n\n}\n","import type {Language} from './Language';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @provider\n */\nexport class LanguageContainer<T, S extends T = T, A extends readonly T[] = readonly [], >\n    implements Language<T, S, A> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #original;\n    readonly #singleValue;\n    readonly #arrayValue;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(value: | S | A,) {\n        this.#original = value;\n        if (value instanceof Array) {\n            this.#singleValue = null;\n            this.#arrayValue = value;\n        } else {\n            this.#singleValue = value;\n            this.#arrayValue = EMPTY_ARRAY;\n        }\n    }\n\n    public get original() {\n        return this.#original;\n    }\n\n    protected get _singleValue(): | S | null {\n        return this.#singleValue;\n    }\n\n    protected get _arrayValue(): | A | readonly [] {\n        return this.#arrayValue;\n    }\n\n    public get(): S\n    public get<INDEX extends number = number, >(index: INDEX,): | NonNullable<A[INDEX]> | S\n    public get<INDEX extends number = number, >(index?: INDEX,) {\n        if (index == null)\n            return this._singleValue ?? this._arrayValue[0];\n        return this._arrayValue[index] ?? this._singleValue;\n    }\n\n}\n\nexport namespace LanguageContainer {\n\n    export function newInstance<T, S extends T, >(value: T,): Language<T, S, never>\n    export function newInstance<T, A extends readonly T[], >(value: A,): Language<T, never, A>\n    export function newInstance<T, S extends T, A extends readonly T[], >(value: | T | A,): Language<T, S, A>\n    export function newInstance<T, >(value: | T | readonly T[],): Language<T, T, readonly T[]> {\n        return new LanguageContainer<T, T, readonly T[]>(value);\n    }\n\n}\n","import type {OptionalLanguage} from './OptionalLanguage';\n\nimport {LanguageContainer} from './LanguageContainer';\n\n/**\n * @provider\n */\nexport class OptionalLanguageContainer<T, S extends T = T, A extends readonly T[] = readonly [], U extends boolean = boolean, >\n    extends LanguageContainer<T, S, A>\n    implements OptionalLanguage<T, S, A, U> {\n\n    readonly #isUsed;\n\n    public constructor(value: | S | A,) {\n        super(value);\n        this.#isUsed = isEmptyStringOrUndefined(this.get()) && isEmptyStringOrUndefined(this.get(0)) && isEmptyStringOrUndefined(this.get(2));\n    }\n\n    public get isUsed() {\n        return this.#isUsed as U;\n    }\n\n}\n\nexport namespace OptionalLanguageContainer {\n\n    export function newInstance<T, U extends boolean, S extends T, >(value: T,): OptionalLanguage<T, S, never, U>\n    export function newInstance<T, U extends boolean, A extends readonly T[], >(value: A,): OptionalLanguage<T, never, A, U>\n    export function newInstance<T, U extends boolean, S extends T, A extends readonly T[], >(value: | S | A,): OptionalLanguage<T, S, A, U>\n    export function newInstance<T, >(value: | T | readonly T[],): OptionalLanguage<T, T, readonly T[]> {\n        return new OptionalLanguageContainer<T, T, readonly T[]>(value);\n    }\n\n}\n\nfunction isEmptyStringOrUndefined<T, >(value: | T | undefined | null,): boolean {\n    return typeof value == 'string'\n        ? value !== ''\n        : value != null;\n}\n","import type {AmericanOrEuropeanArray, AmericanOrEuropeanOriginal, CanadianOrEuropeanArray, CanadianOrEuropeanOriginal, ChineseArray, Language, PossibleAmericanOrEuropeanValue, PossibleChineseValue} from './containers/Language';\nimport type {EmptyableOptionalLanguage}                                                                                                                                                               from './containers/EmptyableOptionalLanguage';\nimport type {EmptyableLanguage}                                                                                                                                                                       from './containers/EmptyableLanguage';\nimport type {Name}                                                                                                                                                                                    from './Name';\nimport type {OptionalLanguage}                                                                                                                                                                        from './containers/OptionalLanguage';\nimport type {PossibleLanguageValue}                                                                                                                                                                   from '../ClassWithOnlyProjectLanguages';\n\nimport {assert}                    from '../../util/utilitiesMethods';\nimport {EmptyLanguageContainer}    from './containers/EmptyLanguageContainer';\nimport {EveryLanguages}            from '../EveryLanguages';\nimport {LanguageContainer}         from './containers/LanguageContainer';\nimport {OptionalLanguageContainer} from './containers/OptionalLanguageContainer';\nimport {ProjectLanguages}          from '../ProjectLanguages';\n\nexport class NameContainer<T, >\n    implements Name<T> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #OPTIONAL_LANGUAGES = [EveryLanguages.HEBREW, EveryLanguages.POLISH,\n        EveryLanguages.UKRAINIAN, EveryLanguages.GREEK,] as const;\n\n    readonly #originalLanguages: readonly EveryLanguages[];\n    #map?: Map<EveryLanguages, T>;\n\n    readonly #englishContainer: Language<T, T, AmericanOrEuropeanArray<T>>;\n    readonly #frenchContainer: Language<T, T, CanadianOrEuropeanArray<T>>;\n    readonly #germanContainer: EmptyableLanguage<T, T, never>;\n    readonly #spanishContainer: EmptyableLanguage<T, T, AmericanOrEuropeanArray<T>>;\n    readonly #italianContainer: EmptyableLanguage<T, T, never>;\n    readonly #dutchContainer: EmptyableLanguage<T, T, never>;\n    readonly #portugueseContainer: EmptyableLanguage<T, T, AmericanOrEuropeanArray<T>>;\n    readonly #russianContainer: EmptyableLanguage<T, T, never>;\n    readonly #japaneseContainer: EmptyableLanguage<T, T, never>;\n    readonly #chineseContainer: EmptyableLanguage<T, T, ChineseArray<T>>;\n    readonly #koreanContainer: EmptyableLanguage<T, T, never>;\n    readonly #hebrewContainer: EmptyableOptionalLanguage<T, T, never>;\n    readonly #polishContainer: EmptyableOptionalLanguage<T, T, never>;\n    readonly #ukrainianContainer: EmptyableOptionalLanguage<T, T, never>;\n    readonly #greekContainer: EmptyableOptionalLanguage<T, T, never>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(english: AmericanOrEuropeanOriginal<T>,\n                       french: CanadianOrEuropeanOriginal<T>,\n                       german: PossibleLanguageValue<T>,\n                       spanish: PossibleAmericanOrEuropeanValue<T>,\n                       italian: PossibleLanguageValue<T>,\n                       dutch: PossibleLanguageValue<T>,\n                       portuguese: PossibleAmericanOrEuropeanValue<T>,\n                       russian: PossibleLanguageValue<T>,\n                       japanese: PossibleLanguageValue<T>,\n                       chinese: PossibleChineseValue<T>,\n                       korean: PossibleLanguageValue<T>,\n                       hebrew: PossibleLanguageValue<T>,\n                       polish: PossibleLanguageValue<T>,\n                       ukrainian: PossibleLanguageValue<T>,\n                       greek: PossibleLanguageValue<T>,) {\n        const originalLanguages: EveryLanguages[] = [];\n\n        this.#englishContainer = NameContainer.#newLanguageContainer<T, T, AmericanOrEuropeanArray<T>>(EveryLanguages.ENGLISH, originalLanguages, english,);\n        this.#frenchContainer = NameContainer.#newLanguageContainer<T, T, CanadianOrEuropeanArray<T>>(EveryLanguages.FRENCH, originalLanguages, french,);\n        this.#germanContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.GERMAN, originalLanguages, german,);\n        this.#spanishContainer = NameContainer.#newLanguageContainer<T, T, AmericanOrEuropeanArray<T>>(EveryLanguages.SPANISH, originalLanguages, spanish,);\n        this.#italianContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.ITALIAN, originalLanguages, italian,);\n        this.#dutchContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.DUTCH, originalLanguages, dutch,);\n        this.#portugueseContainer = NameContainer.#newLanguageContainer<T, T, AmericanOrEuropeanArray<T>>(EveryLanguages.PORTUGUESE, originalLanguages, portuguese,);\n        this.#russianContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.RUSSIAN, originalLanguages, russian,);\n        this.#japaneseContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.JAPANESE, originalLanguages, japanese,);\n        this.#chineseContainer = NameContainer.#newLanguageContainer<T, T, ChineseArray<T>>(EveryLanguages.CHINESE, originalLanguages, chinese,);\n        this.#koreanContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.KOREAN, originalLanguages, korean,);\n        this.#hebrewContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.HEBREW, originalLanguages, hebrew,);\n        this.#polishContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.POLISH, originalLanguages, polish,);\n        this.#ukrainianContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.UKRAINIAN, originalLanguages, ukrainian,);\n        this.#greekContainer = NameContainer.#newLanguageContainer<T, T>(EveryLanguages.GREEK, originalLanguages, greek,);\n\n        this.#originalLanguages = originalLanguages;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Name properties --------------------\n\n    /**\n     * The optional languages on the {@link Name} used in the project:\n     * <ol>\n     *  <li>{@link EveryLanguages.HEBREW}</li>\n     *  <li>{@link EveryLanguages.POLISH}</li>\n     *  <li>{@link EveryLanguages.UKRAINIAN}</li>\n     *  <li>{@link EveryLanguages.GREEK}</li>\n     * </ol>\n     *\n     * @see ProjectLanguages.isInEverySuperMarioMakerGame\n     */\n    public static get optionalLanguages(): readonly [EveryLanguages, EveryLanguages, EveryLanguages, EveryLanguages,] {\n        return this._optionalLanguages;\n    }\n\n    /**\n     * The options languages on the {@link NameContainer},\n     * but as the type used by the private static fields.\n     */\n    protected static get _optionalLanguages() {\n        return this.#OPTIONAL_LANGUAGES;\n    }\n\n    public get languageValue(): T {\n        return ProjectLanguages.currentLanguage.get<T>(this);\n    }\n\n    //region -------------------- English properties --------------------\n\n    public get originalEnglish(): AmericanOrEuropeanOriginal<T> {\n        return this.#englishContainer.original;\n    }\n\n    public get english(): T {\n        return this.#englishContainer.get();\n    }\n\n    public get americanEnglish(): T {\n        return this.#englishContainer.get(0);\n    }\n\n    public get europeanEnglish(): T {\n        return this.#englishContainer.get(1);\n    }\n\n    //endregion -------------------- English properties --------------------\n    //region -------------------- French properties --------------------\n\n    public get originalFrench(): CanadianOrEuropeanOriginal<T> {\n        return this.#frenchContainer.original;\n    }\n\n    public get french(): T {\n        return this.#frenchContainer.get();\n    }\n\n    public get canadianFrench(): T {\n        return this.#frenchContainer.get(0);\n    }\n\n    public get europeanFrench(): T {\n        return this.#frenchContainer.get(1);\n    }\n\n    //endregion -------------------- French properties --------------------\n    //region -------------------- German properties --------------------\n\n    public get german(): PossibleLanguageValue<T> {\n        return this.#germanContainer.original;\n    }\n\n    //endregion -------------------- German properties --------------------\n    //region -------------------- Spanish properties --------------------\n\n    public get originalSpanish(): PossibleAmericanOrEuropeanValue<T> {\n        return this.#spanishContainer.original;\n    }\n\n    public get spanish(): PossibleLanguageValue<T> {\n        return this.#spanishContainer.get();\n    }\n\n    public get americanSpanish(): PossibleLanguageValue<T> {\n        return this.#spanishContainer.get(0);\n    }\n\n    public get europeanSpanish(): PossibleLanguageValue<T> {\n        return this.#spanishContainer.get(1);\n    }\n\n    //endregion -------------------- Spanish properties --------------------\n    //region -------------------- Italian properties --------------------\n\n    public get italian(): PossibleLanguageValue<T> {\n        return this.#italianContainer.original;\n    }\n\n    //endregion -------------------- Italian properties --------------------\n    //region -------------------- Dutch properties --------------------\n\n    public get dutch(): PossibleLanguageValue<T> {\n        return this.#dutchContainer.original;\n    }\n\n    //endregion -------------------- Dutch properties --------------------\n    //region -------------------- Portuguese properties --------------------\n\n    public get originalPortuguese(): PossibleAmericanOrEuropeanValue<T> {\n        return this.#portugueseContainer.original;\n    }\n\n    public get portuguese(): PossibleLanguageValue<T> {\n        return this.#portugueseContainer.get();\n    }\n\n    public get americanPortuguese(): PossibleLanguageValue<T> {\n        return this.#portugueseContainer.get(0);\n    }\n\n    public get europeanPortuguese(): PossibleLanguageValue<T> {\n        return this.#portugueseContainer.get(1);\n    }\n\n    //endregion -------------------- Portuguese properties --------------------\n    //region -------------------- Russian properties --------------------\n\n    public get russian(): PossibleLanguageValue<T> {\n        return this.#russianContainer.original;\n    }\n\n    //endregion -------------------- Russian properties --------------------\n    //region -------------------- Japanese properties --------------------\n\n    public get japanese(): PossibleLanguageValue<T> {\n        return this.#japaneseContainer.original;\n    }\n\n    //endregion -------------------- Japanese properties --------------------\n    //region -------------------- Chinese properties --------------------\n\n    public get originalChinese(): PossibleChineseValue<T> {\n        return this.#chineseContainer.original;\n    }\n\n    public get chinese(): PossibleLanguageValue<T> {\n        return this.#chineseContainer.get();\n    }\n\n    public get traditionalChinese(): PossibleLanguageValue<T> {\n        return this.#chineseContainer.get(1);\n    }\n\n    public get simplifiedChinese(): PossibleLanguageValue<T> {\n        return this.#chineseContainer.get(0);\n    }\n\n    //endregion -------------------- Chinese properties --------------------\n    //region -------------------- Korean properties --------------------\n\n    public get korean(): PossibleLanguageValue<T> {\n        return this.#koreanContainer.original;\n    }\n\n    //endregion -------------------- Korean properties --------------------\n    //region -------------------- Hebrew properties --------------------\n\n    public get isHebrewUsed(): boolean {\n        return this.#hebrewContainer.isUsed;\n    }\n\n    public get hebrew(): PossibleLanguageValue<T> {\n        return this.#hebrewContainer.original;\n    }\n\n    //endregion -------------------- Hebrew properties --------------------\n    //region -------------------- Polish properties --------------------\n\n    public get isPolishUsed(): boolean {\n        return this.#polishContainer.isUsed;\n    }\n\n    public get polish(): PossibleLanguageValue<T> {\n        return this.#polishContainer.original;\n    }\n\n    //endregion -------------------- Polish properties --------------------\n    //region -------------------- Ukrainian properties --------------------\n\n    public get isUkrainianUsed(): boolean {\n        return this.#ukrainianContainer.isUsed;\n    }\n\n    public get ukrainian(): PossibleLanguageValue<T> {\n        return this.#ukrainianContainer.original;\n    }\n\n    //endregion -------------------- Ukrainian properties --------------------\n    //region -------------------- Greek properties --------------------\n\n    public get isGreekUsed(): boolean {\n        return this.#greekContainer.isUsed;\n    }\n\n    public get greek(): PossibleLanguageValue<T> {\n        return this.#greekContainer.original;\n    }\n\n    //endregion -------------------- Greek properties --------------------\n\n    public get originalLanguages(): readonly EveryLanguages[] {\n        return this.#originalLanguages;\n    }\n\n    //endregion -------------------- Name properties --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toNameMap(): ReadonlyMap<EveryLanguages, T> {\n        return this.#map ??= new Map(this.originalLanguages.map(language => [language, language.get(this)!,]));\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    static #newLanguageContainer<T, S extends T, >(language: OptionalLanguages, originalLanguages: EveryLanguages[], value: S,): EmptyableOptionalLanguage<T, S, never>\n    static #newLanguageContainer<T, S extends T, >(language: OptionalLanguages, originalLanguages: EveryLanguages[], value: | S | null,): OptionalLanguage<T, S, never>\n    static #newLanguageContainer<T, S extends T, >(language: EveryLanguages, originalLanguages: EveryLanguages[], value: | S,): EmptyableLanguage<T, S, never>\n    static #newLanguageContainer<T, S extends T, >(language: EveryLanguages, originalLanguages: EveryLanguages[], value: | S | null,): Language<T, S, never>\n    static #newLanguageContainer<T, S extends T, A extends readonly T[], >(language: OptionalLanguages, originalLanguages: EveryLanguages[], value: | S | A,): OptionalLanguage<T, S, A>\n    static #newLanguageContainer<T, S extends T, A extends readonly T[], >(language: OptionalLanguages, originalLanguages: EveryLanguages[], value: | S | A | null,): EmptyableOptionalLanguage<T, S, A>\n    static #newLanguageContainer<T, S extends T, A extends readonly T[], >(language: EveryLanguages, originalLanguages: EveryLanguages[], value: | S | A | null,): Language<T, S, A>\n    static #newLanguageContainer<T, S extends T, A extends readonly T[], >(language: EveryLanguages, originalLanguages: EveryLanguages[], value: | S | A,): EmptyableLanguage<T, S, A>\n    static #newLanguageContainer<T, >(language: EveryLanguages, originalLanguages: EveryLanguages[], value: | T | readonly T[] | null,) {\n        if (value == null) {\n            assert(!language.isACompleteLanguage, `The language \"${language.englishName}\" cannot be null if it is a complete language.`,);\n            return EmptyLanguageContainer.get;\n        }\n\n        const languageContainer = this.optionalLanguages.includes(language) ? OptionalLanguageContainer.newInstance(value) : LanguageContainer.newInstance(value);\n        const isValueArray = value instanceof Array;\n\n        switch (language) {\n            case EveryLanguages.ENGLISH:\n            case EveryLanguages.FRENCH:\n            case EveryLanguages.SPANISH:\n            case EveryLanguages.CHINESE:\n            case EveryLanguages.PORTUGUESE:\n                if (isValueArray)\n                    originalLanguages.push(...language.children);\n                else\n                    originalLanguages.push(language);\n                break;\n            case EveryLanguages.HEBREW:\n            case EveryLanguages.POLISH:\n            case EveryLanguages.UKRAINIAN:\n            case EveryLanguages.GREEK:\n                if ((languageContainer as OptionalLanguage<T>).isUsed)\n                    originalLanguages.push(language);\n                break;\n            default:\n                originalLanguages.push(language);\n        }\n\n        return languageContainer;\n    }\n\n}\n\ntype OptionalLanguages = typeof NameContainer['optionalLanguages'][number];\n","import type {AmericanOrEuropeanOriginal, CanadianOrEuropeanOriginal, PossibleAmericanOrEuropeanValue, PossibleChineseValue} from './containers/Language';\nimport type {EnumArray as GameArray}                                                                                        from '../../core/game/Games.types';\nimport type {IsACompleteNameCallback, PossibleGameReceived}                                                                 from './Name.builder.types';\nimport type {Name}                                                                                                          from './Name';\nimport type {NameBuilder}                                                                                                   from './Name.builder';\nimport type {PossibleNameTemplate}                                                                                          from './Name.template';\nimport type {PossibleLanguageValue}                                                                                         from '../ClassWithOnlyProjectLanguages';\n\nimport {assert}         from '../../util/utilitiesMethods';\nimport {EveryLanguages} from '../EveryLanguages';\nimport {Games}          from '../../core/game/Games';\nimport {NameContainer}  from './Name.container';\n\nexport class NameBuilderContainer<TEMPLATE extends PossibleNameTemplate, >\n    implements NameBuilder<string, TEMPLATE> {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * A constant meant to signify a complete language.\n     *\n     * As it stands, only the english and french language are complete.\n     *\n     * @see EveryLanguages.isACompleteLanguage\n     */\n    static readonly #IS_NULLABLE_FOR_COMPLETED_LANGUAGES = false;\n    /**\n     * A constant meant to signify an optional language.\n     *\n     * As it stands, only the greek is optional.\n     *\n     * @see ProjectLanguages.isInEverySuperMarioMakerGame\n     */\n    static readonly #IS_NULLABLE_FOR_OPTIONAL_LANGUAGES = true;\n\n    static readonly #SMM1_LANGUAGES: readonly EveryLanguages[] = [EveryLanguages.ENGLISH, EveryLanguages.FRENCH, EveryLanguages.GERMAN, EveryLanguages.SPANISH, EveryLanguages.ITALIAN, EveryLanguages.DUTCH, EveryLanguages.PORTUGUESE, EveryLanguages.RUSSIAN, EveryLanguages.JAPANESE,];\n    static readonly #SMM2_LANGUAGES: readonly EveryLanguages[] = [EveryLanguages.ENGLISH, EveryLanguages.FRENCH, EveryLanguages.GERMAN, EveryLanguages.SPANISH, EveryLanguages.ITALIAN, EveryLanguages.DUTCH, EveryLanguages.RUSSIAN, EveryLanguages.JAPANESE, EveryLanguages.CHINESE, EveryLanguages.KOREAN,];\n    static readonly #IS_A_COMPLETE_NAME_BASED_ON_GAME: (game: Games, language: EveryLanguages,) => boolean\n        = (game, language,) => game === Games.SUPER_MARIO_MAKER_1 ? this.#SMM1_LANGUAGES.includes(language) : this.#SMM2_LANGUAGES.includes(language);\n\n\n    #english?: AmericanOrEuropeanOriginal<string>;\n    #french?: CanadianOrEuropeanOriginal<string>;\n    #german?: PossibleLanguageValue<string>;\n    #spanish?: PossibleAmericanOrEuropeanValue<string>;\n    #italian?: PossibleLanguageValue<string>;\n    #dutch?: PossibleLanguageValue<string>;\n    #portuguese?: PossibleAmericanOrEuropeanValue<string>;\n    #russian?: PossibleLanguageValue<string>;\n    #japanese?: PossibleLanguageValue<string>;\n    #chinese?: PossibleChineseValue<string>;\n    #korean?: PossibleLanguageValue<string>;\n    #hebrew?: PossibleLanguageValue<string>;\n    #polish?: PossibleLanguageValue<string>;\n    #ukrainian?: PossibleLanguageValue<string>;\n    #greek?: PossibleLanguageValue<string>;\n\n    readonly #template;\n    readonly #game;\n    readonly #isACompleteName: IsACompleteNameCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    /**\n     * Create a new {@link Builder builder} instance to create a {@link Name}.\n     *\n     * @param template the {@link PossibleNameTemplate name template}\n     * @param game the game received\n     * @param isACompleteName tell whenever it is a complete name\n     *\n     * @note When it receive the game as {@link AllGameReceived \"all\"}, then it will only be the value received by the 3rd argument (is a complete name).\n     */\n    public constructor(template: TEMPLATE, game: PossibleGameReceived, isACompleteName: boolean,) {\n        this.#template = template;\n        if (game === 'all') {\n            this.#game = Games.values;\n            this.#isACompleteName = () => isACompleteName;\n        } else if (game === 'notSMM2') {\n            this.#game = [Games.SUPER_MARIO_MAKER_1, Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS,] as const;\n            this.#isACompleteName = () => isACompleteName;\n        } else {\n            const _game = this.#game = game;\n            this.#isACompleteName = language => NameBuilderContainer.#IS_A_COMPLETE_NAME_BASED_ON_GAME(_game, language,) && isACompleteName;\n        }\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- English getter & setter methods --------------------\n\n    public get english() {\n        return this.#english;\n    }\n\n    public setEnglish(value: AmericanOrEuropeanOriginal<string>,): this {\n        this.#english = value;\n        return this;\n    }\n\n    //endregion -------------------- English getter & setter methods --------------------\n    //region -------------------- French getter & setter methods --------------------\n\n    public get french() {\n        return this.#french;\n    }\n\n    public setFrench(value: CanadianOrEuropeanOriginal<string>,): this {\n        this.#french = value;\n        return this;\n    }\n\n    //endregion -------------------- French getter & setter methods --------------------\n    //region -------------------- German getter & setter methods --------------------\n\n    public get german() {\n        return this.#german;\n    }\n\n    public setGerman(value: PossibleLanguageValue<string>,): this {\n        this.#german = value;\n        return this;\n    }\n\n    //endregion -------------------- German getter & setter methods --------------------\n    //region -------------------- Spanish getter & setter methods --------------------\n\n    public get spanish() {\n        return this.#spanish;\n    }\n\n    public setSpanish(value: PossibleAmericanOrEuropeanValue<string>,): this {\n        this.#spanish = value;\n        return this;\n    }\n\n    //endregion -------------------- Spanish getter & setter methods --------------------\n    //region -------------------- Italian getter & setter methods --------------------\n\n    public get italian() {\n        return this.#italian;\n    }\n\n    public setItalian(value: PossibleLanguageValue<string>,): this {\n        this.#italian = value;\n        return this;\n    }\n\n    //endregion -------------------- Italian getter & setter methods --------------------\n    //region -------------------- Dutch getter & setter methods --------------------\n\n    public get dutch() {\n        return this.#dutch;\n    }\n\n    public setDutch(value: PossibleLanguageValue<string>,): this {\n        this.#dutch = value;\n        return this;\n    }\n\n    //endregion -------------------- Dutch getter & setter methods --------------------\n    //region -------------------- Portuguese getter & setter methods --------------------\n\n    public get portuguese() {\n        return this.#portuguese;\n    }\n\n    public setPortuguese(value: PossibleAmericanOrEuropeanValue<string>,): this {\n        this.#portuguese = value;\n        return this;\n    }\n\n    //endregion -------------------- Portuguese getter & setter methods --------------------\n    //region -------------------- Russian getter & setter methods --------------------\n\n    public get russian() {\n        return this.#russian;\n    }\n\n    public setRussian(value: PossibleLanguageValue<string>,): this {\n        this.#russian = value;\n        return this;\n    }\n\n    //endregion -------------------- Russian getter & setter methods --------------------\n    //region -------------------- Japanese getter & setter methods --------------------\n\n    public get japanese() {\n        return this.#japanese;\n    }\n\n    public setJapanese(value: PossibleLanguageValue<string>,): this {\n        this.#japanese = value;\n        return this;\n    }\n\n    //endregion -------------------- Japanese getter & setter methods --------------------\n    //region -------------------- Chinese getter & setter methods --------------------\n\n    public get chinese() {\n        return this.#chinese;\n    }\n\n    public setChinese(value: |PossibleChineseValue<string>,): this {\n        this.#chinese = value;\n        return this;\n    }\n\n    //endregion -------------------- Chinese getter & setter methods --------------------\n    //region -------------------- Korean getter & setter methods --------------------\n\n    public get korean() {\n        return this.#korean;\n    }\n\n    public setKorean(value: PossibleLanguageValue<string>,): this {\n        this.#korean = value;\n        return this;\n    }\n\n    //endregion -------------------- Korean getter & setter methods --------------------\n    //region -------------------- Hebrew getter & setter methods --------------------\n\n    public get hebrew() {\n        return this.#hebrew;\n    }\n\n    public setHebrew(value: PossibleLanguageValue<string>,): this {\n        this.#hebrew = value;\n        return this;\n    }\n\n    //endregion -------------------- Hebrew getter & setter methods --------------------\n    //region -------------------- Polish getter & setter methods --------------------\n\n    public get polish() {\n        return this.#polish;\n    }\n\n    public setPolish(value: PossibleLanguageValue<string>,): this {\n        this.#polish = value;\n        return this;\n    }\n\n    //endregion -------------------- Polish getter & setter methods --------------------\n    //region -------------------- Ukrainian getter & setter methods --------------------\n\n    public get ukrainian() {\n        return this.#ukrainian;\n    }\n\n    public setUkrainian(value: PossibleLanguageValue<string>,): this {\n        this.#ukrainian = value;\n        return this;\n    }\n\n    //endregion -------------------- Ukrainian getter & setter methods --------------------\n    //region -------------------- Greek getter & setter methods --------------------\n\n    public get greek() {\n        return this.#greek;\n    }\n\n    public setGreek(value: PossibleLanguageValue<string>,): this {\n        this.#greek = value;\n        return this;\n    }\n\n    //endregion -------------------- Greek getter & setter methods --------------------\n\n    public get template(): TEMPLATE {\n        return this.#template;\n    }\n\n    public get game(): | Games | readonly [Games, Games,] | GameArray {\n        return this.#game;\n    }\n\n    public get isACompleteName(): IsACompleteNameCallback {\n        return this.#isACompleteName;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n\n    #get<S extends string = string, >(language: EveryLanguages, value: | S | null,): | S | null\n    #get<S1 extends string = string, S2 extends string = string, S3 extends string = string, >(language: EveryLanguages, value1: | S1 | null, value2: | S2 | null, value3: | S3 | null,): | S1 | [S2, S3,]\n    #get(language: EveryLanguages, value1: PossibleLanguageValue<string>, value2?: PossibleLanguageValue<string>, value3?: PossibleLanguageValue<string>,) {\n        const canBeNullable = (() => {\n            //TODO change to the ProjectLanguages.isACompleteLanguage instead\n            switch (language) {\n                case EveryLanguages.ENGLISH:\n                case EveryLanguages.FRENCH:\n                    return NameBuilderContainer.#IS_NULLABLE_FOR_COMPLETED_LANGUAGES;\n                case EveryLanguages.HEBREW:\n                case EveryLanguages.POLISH:\n                case EveryLanguages.UKRAINIAN:\n                case EveryLanguages.GREEK:\n                    return NameBuilderContainer.#IS_NULLABLE_FOR_OPTIONAL_LANGUAGES;\n                default:\n                    return !this.isACompleteName(language,);\n            }\n        })();\n        if (value2 === undefined) {\n            assert(canBeNullable || value1 != null, `The value cannot be null on the ${language.englishName} field.`,);\n            return value1;\n        }\n\n        const all3ValuesAreNull = value1 == null && value2 == null && value3 == null;\n        assert(canBeNullable || !all3ValuesAreNull, `The 3 values received cannot be null on the ${language.englishName} field.`,);\n        return all3ValuesAreNull ? null : value1 ?? [value2, value3,];\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    public build(): Name<string> {\n        const {english, french, german, spanish, italian, dutch, portuguese, russian, japanese, chinese, korean, hebrew, polish, ukrainian, greek,} = this.template;\n\n        this.setEnglish(this.#get(EveryLanguages.ENGLISH, english.simple, english.american, english.european,))\n            .setFrench(this.#get(EveryLanguages.FRENCH, french.simple, french.canadian, french.european,))\n            .setGerman(this.#get(EveryLanguages.GERMAN, german,))\n            .setSpanish(this.#get(EveryLanguages.SPANISH, spanish.simple, spanish.american, spanish.european,))\n            .setItalian(this.#get(EveryLanguages.ITALIAN, italian,))\n            .setDutch(this.#get(EveryLanguages.DUTCH, dutch,))\n            .setPortuguese(this.#get(EveryLanguages.PORTUGUESE, portuguese.simple, portuguese.american, portuguese.european,))\n            .setRussian(this.#get(EveryLanguages.RUSSIAN, russian,))\n            .setJapanese(this.#get(EveryLanguages.JAPANESE, japanese,))\n            .setChinese(this.#get(EveryLanguages.CHINESE, chinese.simple, chinese.simplified, chinese.traditional,))\n            .setKorean(this.#get(EveryLanguages.KOREAN, korean,))\n            .setHebrew(this.#get(EveryLanguages.HEBREW, hebrew,))\n            .setPolish(this.#get(EveryLanguages.POLISH, polish,))\n            .setUkrainian(this.#get(EveryLanguages.UKRAINIAN, ukrainian,))\n            .setGreek(this.#get(EveryLanguages.GREEK, greek,));\n\n        assert(this.english !== undefined, 'The english reference has not been initialised.',);\n        assert(this.french !== undefined, 'The french reference has not been initialised.',);\n        assert(this.german !== undefined, 'The german reference has not been initialised.',);\n        assert(this.spanish !== undefined, 'The spanish reference has not been initialised.',);\n        assert(this.italian !== undefined, 'The italian reference has not been initialised.',);\n        assert(this.dutch !== undefined, 'The dutch reference has not been initialised.',);\n        assert(this.portuguese !== undefined, 'The portuguese reference has not been initialised.',);\n        assert(this.russian !== undefined, 'The russian reference has not been initialised.',);\n        assert(this.japanese !== undefined, 'The japanese reference has not been initialised.',);\n        assert(this.chinese !== undefined, 'The chinese reference has not been initialised.',);\n        assert(this.korean !== undefined, 'The korean reference has not been initialised.',);\n        assert(this.hebrew !== undefined, 'The hebrew reference has not been initialised.',);\n        assert(this.polish !== undefined, 'The polish reference has not been initialised.',);\n        assert(this.ukrainian !== undefined, 'The ukrainian reference has not been initialised.',);\n        assert(this.greek !== undefined, 'The greek reference has not been initialised.',);\n\n\n        return new NameContainer(\n            this.english,\n            this.french,\n            this.german,\n            this.spanish,\n            this.italian,\n            this.dutch,\n            this.portuguese,\n            this.russian,\n            this.japanese,\n            this.chinese,\n            this.korean,\n            this.hebrew,\n            this.polish,\n            this.ukrainian,\n            this.greek,\n        );\n    }\n\n}\n","import type {PossibleNameTemplate} from './Name.template';\n\nimport {assert} from '../../util/utilitiesMethods';\n\n/**\n * A class made to help the {@link PossibleNameTemplate names templates}.\n */\nexport class NameCreator {\n\n    static readonly #INSTANCE_MAP = new Map<object, Set<string>>();\n\n    static #testName(name: PossibleNameTemplate,): PossibleNameTemplate {\n        //README since some references are still not complete, they are in comment\n        assert(name.english.simple != null || !(name.english.american == null || name.english.european == null), `The english name (\"${name.english.simple}\") can either have a single english name or both \"american\"(\"${name.english.american}\") and \"european\"(\"${name.english.european}\") name separated.`,);\n        assert(name.french.simple != null || !(name.french.canadian == null || name.french.european == null), `The french name (\"${name.french.simple}\") can either have a single french name or both \"canadian\"(\"${name.french.canadian}\") and \"european\"(\"${name.french.european}\") name separated.`,);\n        // assert(name.spanish.simple != null || !(name.spanish.american == null || name.spanish.european == null), `The spanish name (\"${name.spanish.simple}\") can either have a single spanish name or both \"american\"(\"${name.spanish.american}\") and \"european\"(\"${name.spanish.european}\") name separated.`,);\n        // assert(name.portuguese.simple != null || !(name.portuguese.american == null || name.portuguese.european == null), `The portuguese name (\"${name.portuguese.simple}\") can either have a single portuguese name or both \"american\"(\"${name.portuguese.american}\") and \"european\"(\"${name.portuguese.european}\") name separated.`,);\n        // assert(name.chinese.simple != null || !(name.chinese.traditional == null || name.chinese.simplified == null), `The chinese name (\"${name.chinese.simple}\") can either have a single chinese name or both \"traditional\"(\"${name.chinese.traditional}\") and \"simplified\"(\"${name.chinese.simplified}\") name separated.`,);\n\n        return name;\n    }\n\n    static #testEnglishNameInSet(set: Set<string>, name: PossibleNameTemplate, uniqueName: | string | null,): string {\n        const englishReferenceName = uniqueName ?? name.english.simple ?? name.english.american;\n\n        assert(englishReferenceName != null, 'No english name can be null since they are used as a key for the references.',);\n        assert(!set.has(englishReferenceName), `The english name (\"${englishReferenceName}\") can't be used as a reference since there is already another value.`,);\n        return englishReferenceName;\n    }\n\n    /**\n     * <p>\n     *  Add the english reference used by the <b>name</b> received into the <b>templateMap</b> reference.\n     *  It also add the <b>template</b> received into the <b>templateMap</b>.\n     * </p>\n     *\n     * <p>\n     *  The possible ways that it can fail (only in development, not in production)\n     *  is when the english name (simple or american) don't have either a value\n     *  or when the reference is already existing in the <b>templateMap</b>.\n     * </p>\n     *\n     * @param name the template name to retrieve the english name (simple or american) or a simple unique name\n     * @param instance instance to verify the name\n     * @param uniqueName the unique name to set the name\n     */\n    public static addEnglishReference(name: PossibleNameTemplate, instance: object, uniqueName: | string | null = null,): void {\n        const map = this.#INSTANCE_MAP;\n        if (!map.has(instance))\n            map.set(instance, new Set());\n        const set = map.get(instance)!;\n        this.#testEnglishNameInSet(set, this.#testName(name), uniqueName,);\n    }\n\n}\n","import type {Builder}                                              from '../../util/builder/Builder';\nimport type {Name}                                                 from '../../lang/name/Name';\nimport type {ObjectHolder}                                         from '../../util/holder/ObjectHolder';\nimport type {PossibleGameReceived as OriginalPossibleGameReceived} from '../../lang/name/Name.builder.types';\nimport type {PossibleGameReceived}                                 from './TemplateWithName.builder.types';\nimport type {TemplateWithNameTemplate}                             from './TemplateWithName.template';\n\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\nimport {NameBuilderContainer}         from '../../lang/name/Name.builder.container';\nimport {NameCreator}                  from '../../lang/name/Name.creator';\nimport {TemplateBuilder}              from './Template.builder';\n\n/**\n *\n * @property T the {@link TemplateWithNameBuilder template builder}\n * @property U the object to create\n */\nexport abstract class TemplateWithNameBuilder<T extends TemplateWithNameTemplate, U, >\n    extends TemplateBuilder<T, U> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isACompleteName;\n    readonly #game: ObjectHolder<OriginalPossibleGameReceived>;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(templateBuilder_or_template: | T | Builder<T>, game: PossibleGameReceived<T>, isACompleteName: boolean,) {\n        super(templateBuilder_or_template);\n        this.#game = new DelayedObjectHolderContainer(() => typeof game == 'function' ? game(this.template) : game);\n        this.#isACompleteName = isACompleteName;\n    }\n\n\n    public get isACompleteName() {\n        return this.#isACompleteName;\n    }\n\n    private get __game() {\n        return this.#game.get;\n    }\n\n    protected /*static*/ abstract get _static(): object;\n\n    protected /*static*/ _uniqueName(template: T,): | string | null {\n        return null;\n    }\n\n    protected _createName() {\n        const template = this.template;\n        const nameTemplate = template.name;\n        const nameBuilder = new NameBuilderContainer(nameTemplate, this.__game, this.isACompleteName,);\n\n        NameCreator.addEnglishReference(nameTemplate, this._static, this._uniqueName(template),);\n        return nameBuilder.build();\n    }\n\n\n    public build(): U {\n        return this._build(this._createName());\n    }\n\n    protected abstract _build(name: Name<string>,): U;\n\n}\n","import type {EntrySet} from './EntrySet';\n\nexport class EntrySetContainer<K, V, >\n    implements EntrySet<K, V> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #key;\n    #value;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(key: K, value: V,)\n    public constructor(entry: EntrySet<K, V>,)\n    public constructor(key_or_entry: | K | EntrySet<K, V>, value?: V,) {\n        if (key_or_entry == null) {\n            this.#key = key_or_entry;\n            this.#value = value as V;\n        } else if (typeof key_or_entry == 'object' && 'key' in key_or_entry) {\n            this.#key = key_or_entry.key;\n            this.#value = key_or_entry.value;\n        } else {\n            this.#key = key_or_entry;\n            this.#value = value!;\n        }\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get key() {\n        return this.#key;\n    }\n\n    public get value() {\n        return this.#value;\n    }\n\n    public set value(value: V,) {\n        this.#value = value;\n    }\n\n    public setValue(value: V,): this {\n        this.value = value;\n        return this;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toArray(): readonly [K, V,] {\n        return [this.key, this.value,];\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {DefaultValueIfNotFound} from './ClassThatCanGetItems';\nimport type {EntrySet}               from './EntrySet';\nimport type {ExtendedMap}            from './ExtendedMap';\nimport type {ExtendedSet}            from './ExtendedSet';\nimport type {VariableReturnValue}    from './ClassThatCanSearchItems';\n\nimport {ConditionalIntermediate} from './tools/ConditionalIntermediate';\nimport {isArrayEquals}           from '../utilitiesMethods';\nimport {EntrySetContainer}       from './EntrySet.container';\nimport {ExtendedSetContainer}    from './ExtendedSet.container';\n\nexport class ExtendedMapContainer<K, V, LENGTH extends number = number, >\n    implements ExtendedMap<K, V, LENGTH> {\n\n    //region -------------------- Fields --------------------\n\n    public static DEFAULT_SEPARATOR = ',';\n    public static readonly DEFAULT_VALUE_IF_NOT_FOUND: DefaultValueIfNotFound = null;\n    public static readonly EMPTY: ExtendedMap<any, never, 0> = new ExtendedMapContainer<any, never, 0>();\n\n    readonly #map: Map<K, EntrySet<K, V>>;\n    public defaultSeparator = ExtendedMapContainer.DEFAULT_SEPARATOR;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(iterable?: Iterable<readonly [K, V] | EntrySet<K, V>>,) {\n        this.#map = iterable == null\n            ? new Map()\n            : new Map([...iterable].map((arrayOrEntrySet,) =>\n                arrayOrEntrySet instanceof Array\n                    ? [arrayOrEntrySet[0], new EntrySetContainer(arrayOrEntrySet[0], arrayOrEntrySet[1],),]\n                    : [arrayOrEntrySet.key, new EntrySetContainer(arrayOrEntrySet),]));\n    }\n\n    protected get _map(): Map<K, EntrySet<K, V>> {\n        return this.#map;\n    }\n\n    //region -------------------- Length methods --------------------\n\n    /**\n     * @see Map.size\n     */\n    public get size(): this['length'] {\n        return this.length;\n    }\n\n    /**\n     * @see Map.size\n     */\n    public get length(): LENGTH {\n        return this._map.size as LENGTH;\n    }\n\n    //endregion -------------------- Length methods --------------------\n    //region -------------------- Addition methods --------------------\n\n    /**\n     *\n     * @param key\n     * @param value\n     * @see Map.set\n     */\n    public set(key: K, value: V,): this {\n        this._map.set(key, new EntrySetContainer(key, value,));\n        return this;\n    }\n\n    /**\n     * Add an item to the {@link Map internal Map}.\n     *\n     * @param values\n     */\n    #add(...values: readonly (readonly [K, V,])[]): this {\n        values.forEach(([key, value,]) => this.set(key, value,));\n        return this;\n    }\n\n    /**\n     *\n     * @param values\n     * @see Map.set\n     */\n    public add(...values: readonly (readonly [K, V,])[]): this {\n        return this.#add(...values);\n    }\n\n    public push = this.add;\n\n    //region -------------------- & Get --------------------\n\n    public addAndGet<V2 extends readonly [K, V,] = readonly [K, V,], >(value: V2,): V2\n    public addAndGet<V2 extends (readonly [K, V,])[] = (readonly [K, V,])[], >(...values: V2): V2\n    public addAndGet<V2 extends readonly (readonly [K, V,])[] = readonly (readonly [K, V,])[], >(...values: V2): V2\n    public addAndGet(...values: (readonly [K, V,])[]) {\n        this.add(...values);\n        return values.length === 1 ? values[0] : values;\n    }\n\n    public pushAndGet = this.addAndGet;\n\n    //endregion -------------------- & Get --------------------\n\n    //endregion -------------------- Addition methods --------------------\n    //region -------------------- Removal methods --------------------\n\n    #delete(...keys: readonly K[]): boolean {\n        let everyValuesHasBeenDeleted = this.has(...keys);\n\n        keys.forEach(value => everyValuesHasBeenDeleted = this._map.delete(value));\n\n        return everyValuesHasBeenDeleted;\n    }\n\n    /**\n     *\n     * @param values\n     * @see Map.delete\n     */\n    public delete(...values: K[]): boolean {\n        return this.#delete(...values);\n    }\n\n    public drop = this.delete;\n\n    public remove = this.delete;\n\n\n    /**\n     * @see Map.clear\n     */\n    public clear(): this {\n        this._map.clear();\n        return this;\n    }\n\n    //endregion -------------------- Removal methods --------------------\n    //region -------------------- Loop methods --------------------\n\n    public if(callback: (map: this,) => boolean,): ConditionalIntermediate<this> {\n        return new ConditionalIntermediate(this, () => callback(this,));\n    }\n\n    #has(value: any,): boolean {\n        if (value instanceof Array) {\n            for (const internalValue of this)\n                if (internalValue instanceof Array && isArrayEquals(internalValue, value,))\n                    return true;\n            return false;\n        }\n        return this._map.has(value as never);\n    }\n\n    /**\n     *\n     * @param values\n     * @see Map.has\n     */\n    public has(...values: readonly K[]): boolean\n    public has(...values: readonly any[]): boolean\n    public has(...values: readonly any[]): boolean {\n        for (const value of values)\n            if (!this.#has(value))\n                return false;\n        return true;\n    }\n\n    public includes = this.has;\n\n\n    public get(key: K,): V\n    public get(key: any,): | V | DefaultValueIfNotFound\n    public get(key: any) {\n        return this.find(internalKey => internalKey === key);\n    }\n\n    public getKey(value: V,): K\n    public getKey(value: any,): K | DefaultValueIfNotFound\n    public getKey(value: any,) {\n        return this.findKey((internalKey, internalValue,) => internalValue === value);\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.find\n     */\n    public find<B extends boolean, >(callback: (key: K, value: V,) => B,): VariableReturnValue<B, V, DefaultValueIfNotFound>\n    /**\n     *\n     * @param callback\n     * @see Array.find\n     */\n    public find<U extends V, >(callback: (key: K, value: V,) => value is U,): | U | DefaultValueIfNotFound\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.find\n     */\n    public find<B extends boolean, U, >(callback: (key: K, value: V,) => B, callbackIfNotFound: () => U,): VariableReturnValue<B, V, U>\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.find\n     */\n    public find<U extends V, V2, >(callback: (key: K, value: V,) => value is U, callbackIfNotFound: () => V2,): | U | V2\n    public find(callback: (key: K, value: V,) => boolean, callbackIfNotFound?: () => V,) {\n        for (const [key, value,] of this)\n            if (callback(key, value,))\n                return value;\n\n        return callbackIfNotFound == null\n            ? ExtendedMapContainer.DEFAULT_VALUE_IF_NOT_FOUND\n            : callbackIfNotFound();\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.findIndex\n     */\n    public findKey<B extends boolean, >(callback: (key: K, value: V,) => B,): VariableReturnValue<B, K, DefaultValueIfNotFound>\n    /**\n     *\n     * @param callback\n     * @see Array.findIndex\n     */\n    public findKey<U extends K, >(callback: (key: K, value: V,) => key is U,): | U | DefaultValueIfNotFound\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.findIndex\n     */\n    public findKey<B extends boolean, U, >(callback: (key: K, value: V,) => boolean, callbackIfNotFound: () => U,): VariableReturnValue<B, K, U>\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.findIndex\n     */\n    public findKey<U extends K, V2, >(callback: (key: K, value: V,) => key is U, callbackIfNotFound: () => V2,): | U | V2\n    public findKey(callback: (key: K, value: V,) => boolean, callbackIfNotFound?: () => K,) {\n        for (const [key, value,] of this)\n            if (callback(key, value,))\n                return key;\n\n        return callbackIfNotFound == null\n            ? ExtendedMapContainer.DEFAULT_VALUE_IF_NOT_FOUND\n            : callbackIfNotFound();\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Map.forEach\n     */\n    public forEach(callback: (key: K, value: V,) => void,): this {\n        this._map.forEach(({key, value,},) => callback(key, value,));\n        return this;\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.map\n     */\n    public map<V2, >(callback: (key: K, value: V,) => V2,): ExtendedMap<K, V2, LENGTH> {\n        const newArray = [] as [K, V2][];\n        this.forEach((key, value,) => newArray.push([key, callback(key, value,),]));\n        return new ExtendedMapContainer<K, V2, number>(newArray) as unknown as ExtendedMap<K, V2, LENGTH>;\n    }\n\n    //endregion -------------------- Loop methods --------------------\n    //region -------------------- Conversion methods --------------------\n\n    /**\n     * @see Map.entries\n     */\n    public get entries(): IterableIterator<readonly [K, V,]> {\n        return [...this._map.entries()].map(([, entry,]) => entry.toArray()).values();\n    }\n\n    /**\n     * @see Map.keys\n     */\n    public get keys(): IterableIterator<K> {\n        return this._map.keys();\n    }\n\n    /**\n     * @see Map.values\n     */\n    public get values(): IterableIterator<V> {\n        return [...this._map.values()].map(entry => entry.value).values();\n    }\n\n\n    /**\n     *\n     * @param separator\n     * @see Array.join\n     */\n    public join(separator: string = this.defaultSeparator,): string {\n        return this.toArray().join(separator);\n    }\n\n    //region -------------------- Convertor methods --------------------\n\n    public toArray(): EntrySet<K, V>[] {\n        return [...this._map.values()];\n    }\n\n\n    public toSet(): Set<EntrySet<K, V>> {\n        return new Set(this._map.values());\n    }\n\n    public toExtendedSet(): ExtendedSet<EntrySet<K, V>, LENGTH> {\n        return new ExtendedSetContainer(this._map.values()) as unknown as ExtendedSet<EntrySet<K, V>, LENGTH>;\n    }\n\n\n    public toMap(): Map<K, V> {\n        return new Map(this.map((key, value,) => value));\n    }\n\n    public toExtendedMap(): ExtendedMap<K, V, LENGTH> {\n        return new ExtendedMapContainer(this) as unknown as ExtendedMap<K, V, LENGTH>;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    /**\n     * @see Map.toString\n     */\n    public toString(): string {\n        return this._map.toString();\n    }\n\n    /**\n     * @see Map.toLocalString\n     */\n    public toLocalString(): string {\n        return this._map.toLocaleString();\n    }\n\n    //endregion -------------------- Conversion methods --------------------\n    //region -------------------- Javascript only methods --------------------\n\n    public [Symbol.iterator](): Iterator<readonly [K, V,]> {\n        return [...this._map.values()].map(entry => entry.toArray())[Symbol.iterator]();\n    }\n\n    public [Symbol.toStringTag](): string {\n        return this._map[Symbol.toStringTag];\n    }\n\n    //endregion -------------------- Javascript only methods --------------------\n\n}\n","import type {ClassWithAcronym}                                                                                                                                                                                            from '../ClassWithAcronym';\nimport type {ClassWithEnglishName}                                                                                                                                                                                        from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                                          from '../ClassWithReference';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAcronym, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './GameReferences.types';\nimport type {GameReference}                                                                                                                                                                                               from './GameReference';\nimport type {StaticReference}                                                                                                                                                                                             from '../../util/enum/Enum.types';\n\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link GameReferenceLoader}\n * @classWithDynamicImport {@link GameReferenceLoader}\n */\nexport class GameReferences\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<GameReference>,\n        ClassWithAcronym<PossibleAcronym>,\n        ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER_1 =                         new GameReferences('SMM',      'Super Mario Maker',);\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS =          new GameReferences('SMM3DS',   'Super Mario Maker for Nintendo 3DS',);\n    public static readonly SUPER_MARIO_MAKER_2 =                         new GameReferences('SMM2',     'Super Mario Maker 2',);\n\n    public static readonly SUPER_MARIO_BROS =                            new GameReferences('SMB',      'Super Mario Bros.',);\n    public static readonly SUPER_MARIO_BROS_3 =                          new GameReferences('SMB3',     'Super Mario Bros. 3',);\n    public static readonly SUPER_MARIO_WORLD =                           new GameReferences('SMW',      'Super Mario World',);\n    public static readonly NEW_SUPER_MARIO_BROS_U =                      new GameReferences('NSMBU',    'New Super Mario Bros. U',);\n    public static readonly SUPER_MARIO_3D_WORLD =                        new GameReferences('SM3DW',    'Super Mario 3D World',);\n\n    public static readonly SUPER_MARIO_KART =                            new GameReferences('SMK',      'Super Mario Kart',);\n    public static readonly SUPER_MARIO_64 =                              new GameReferences('SM64',     'Super Mario 64');\n    public static readonly SUPER_MARIO_SUNSHINE =                        new GameReferences('SMS',      'Super Mario Sunshine',);\n    public static readonly SUPER_MARIO_GALAXY =                          new GameReferences('SMG',      'Super Mario Galaxy',);\n\n\n    public static readonly MARIO_BROS =                                  new GameReferences('MB',       'Mario Bros.',);\n    public static readonly SUPER_MARIO_BROS_2 =                          new GameReferences('SMB2',     'Super Mario Bros. 2',);\n    public static readonly SUPER_MARIO_WORLD_2_YOSHI_ISLAND =            new GameReferences('SMW2:YI',  'Super Mario World 2: Yoshi\\'s Island',);\n    public static readonly SUPER_MARIO_LAND =                            new GameReferences('SML',      'Super Mario Land',);\n    public static readonly WARIO_LAND_SUPER_MARIO_LAND_3 =               new GameReferences('WL:SML3',  'Wario Land: Super Mario Land 3',);\n    public static readonly MARIO_TENNIS =                                new GameReferences('MT',       'Mario Tennis',);\n    public static readonly DR_MARIO =                                    new GameReferences('DM',       'Dr. Mario',);\n    public static readonly DR_MARIO_64 =                                 new GameReferences('DM64',     'Dr. Mario 64',);\n    public static readonly LUIGI_MANSION =                               new GameReferences('LM',       'Luigi\\'s Mansion',);\n    public static readonly YOSHI_WOOLLY_WORLD =                          new GameReferences('YWW',      'Yoshi\\'s Woolly World',);\n    public static readonly CAPTAIN_TOAD_TREASURE_TRACKER =               new GameReferences('CT:TT',    'Captain Toad: Treasure Tracker',);\n    public static readonly WARIOWARE_TOUCHED =                           new GameReferences('WW:T',     'WarioWare: Touched!',);\n    public static readonly MARIO_AND_LUIGI_PAPER_JAM =                   new GameReferences('M&L:PJ',   'Mario & Luigi: Paper Jam',);\n\n    public static readonly DONKEY_KONG =                                 new GameReferences('DK',       'Donkey Kong',);\n    public static readonly DONKEY_KONG_JR =                              new GameReferences('DKJ',      'Donkey Kong Jr.',);\n    public static readonly DONKEY_KONG_COUNTRY =                         new GameReferences('DKC',      'Donkey Kong Country',);\n\n    public static readonly KIRBY_DREAM_LAND =                            new GameReferences('KDL',      'Kirby\\'s Dream Land',);\n    public static readonly KIRBY_ADVENTURE =                             new GameReferences('KA',       'Kirby\\'s Adventure',);\n\n    public static readonly KID_ICARIUS =                                 new GameReferences('KI',       'Kid Icarius',);\n    public static readonly KID_ICARIUS_UPRISING =                        new GameReferences('KI:U',     'Kid Icarius: Uprising',);\n\n    public static readonly MEGA_MAN =                                    new GameReferences('MeM',      'Mega Man',);\n\n    public static readonly METROID =                                     new GameReferences('M',        'Metroid',);\n    public static readonly METROID_ZERO_MISSION =                        new GameReferences('M:ZM',     'Metroid: Zero Mission',);\n\n    public static readonly NINTENDO_ENTERTAINMENT_SYSTEM_ROB =           new GameReferences('NES ROB',  'Nintendo Entertainment System R.O.B.',);\n\n    public static readonly FIRE_EMBLEM_SHADOW_DRAGON =                   new GameReferences('FE:SD',    'Fire Emblem: Shadow Dragon',);\n    public static readonly FIRE_EMBLEM_RADIANT_DAWN =                    new GameReferences('FE:RD',    'Fire Emblem: Radiant Dawn',);\n    public static readonly FIRE_EMBLEM_AWAKENING =                       new GameReferences('FEA',      'Fire Emblem Awakening',);\n\n    public static readonly POKEMON_RED =                                 new GameReferences('PR',       'Pokémon Red Version',);\n    public static readonly POKEMON_GREEN =                               new GameReferences('PG',       '(Pokémon Green Version)',);\n    public static readonly POKEMON_BLUE =                                new GameReferences('PB',       'Pokémon Blue Version',);\n    public static readonly POKEMON_YELLOW =                              new GameReferences('PYe',      'Pokémon Yellow Version',);\n    public static readonly POKEMON_DIAMOND =                             new GameReferences('PD',       'Pokémon Diamond',);\n    public static readonly POKEMON_PEARL =                               new GameReferences('PP',       'Pokémon Pearl',);\n    public static readonly POKEMON_X =                                   new GameReferences('PX',       'Pokémon X',);\n    public static readonly POKEMON_Y =                                   new GameReferences('PY',       'Pokémon Y',);\n\n    public static readonly PIKMIN =                                      new GameReferences('Pi',        'Pikmin',);\n    public static readonly PIKMIN_3 =                                    new GameReferences('Pi3',       'Pikmin 3',);\n\n    public static readonly THE_LEGEND_OF_ZELDA =                         new GameReferences('TLZ',      'The Legend of Zelda',);\n    public static readonly ZELDA_II_THE_ADVENTURE_OF_LINK =              new GameReferences('Z2:TAL',   'Zelda II: The Adventure of Link',);\n    public static readonly THE_LEGEND_OF_ZELDA_A_LINK_TO_THE_PAST =      new GameReferences('TLZ:ALP',  'The Legend of Zelda: A Link to the Past',);\n    public static readonly THE_LEGEND_OF_ZELDA_OCARINA_OF_TIME =         new GameReferences('TLZ:OT',   'The Legend of Zelda: Ocarina of Time',);\n    public static readonly THE_LEGEND_OF_ZELDA_MAJORA_MASK =             new GameReferences('TLZ:MM',   'The Legend of Zelda: Majora\\'s Mask',);\n    public static readonly THE_LEGEND_OF_ZELDA_THE_WIND_WAKER =          new GameReferences('TLZ:TWW',  'The Legend of Zelda: The Wind Waker',);\n    public static readonly THE_LEGEND_OF_ZELDA_TWILIGHT_PRINCESS =       new GameReferences('TLZ:TP',   'The Legend of Zelda: Twilight Princess',);\n    public static readonly THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES =        new GameReferences('TLZ:TFH',  'The Legend of Zelda: Tri Force Heroes',);\n\n    public static readonly XENOBLADE_CHRONICLES =                        new GameReferences('XC',       'Xenoblade Chronicles',);\n\n    public static readonly EARTHBOUND =                                  new GameReferences('EB',       'EarthBound',);\n    public static readonly MOTHER3 =                                     new GameReferences('M3',       'MOTHER3',);\n\n    public static readonly SPLATOON =                                    new GameReferences('Sp',       'Splatoon',);\n\n    public static readonly WII_FIT =                                     new GameReferences('WF',       'Wii Fit',);\n\n    public static readonly CHIBI_ROBO =                                  new GameReferences('CR',       'Chibi-Robo!',);\n\n    public static readonly ANIMAL_CROSSING =                             new GameReferences('AC',       'Animal Crossing',);\n    public static readonly ANIMAL_CROSSING_WILD_WORLD =                  new GameReferences('AC:WW',    'Animal Crossing: Wild World',);\n    public static readonly ANIMAL_CROSSING_CITY_FOLK =                   new GameReferences('AC:CF',    'Animal Crossing: City Folk',);\n    public static readonly ANIMAL_CROSSING_NEW_LEAF =                    new GameReferences('AC:NL',    'Animal Crossing: New Leaf',);\n    public static readonly ANIMAL_CROSSING_HAPPY_HOME_DESIGNER =         new GameReferences('AC:HHD',   'Animal Crossing: Happy Home Designer',);\n\n    public static readonly F_ZERO =                                      new GameReferences('F-Z',      'F-Zero',);\n\n    public static readonly GAME_AND_WATCH =                              new GameReferences('G&W',      'Game & Watch',);\n\n    public static readonly SONIC_THE_HEDGEHOG =                          new GameReferences('STH',      'Sonic The Hedgehog',);\n\n    public static readonly DUCK_HUNT =                                   new GameReferences('DH',       'Duck Hunt',);\n\n    public static readonly PAC_MAN =                                     new GameReferences('PM',       'PAC-MAN',);\n\n    public static readonly WRECKING_CREW =                               new GameReferences('WC',       'Wrecking Crew',);\n\n    public static readonly PUNCH_OUT =                                   new GameReferences('PO',       'Punch-out!!',);\n\n    public static readonly STAR_FOX =                                    new GameReferences('SF',       'Star Fox',);\n    public static readonly STAR_FOX_ZERO =                               new GameReferences('SFZ',      'Star Fox Zero',);\n\n    public static readonly YAKUMAN_HO_O =                                new GameReferences('YH-O',     'Yakuman Ho-o',);\n\n    public static readonly BIG_BRAIN_ACADEMY =                           new GameReferences('BBA',      'Big Brain Academy',);\n\n    public static readonly SWAPNOTE =                                    new GameReferences('Sn',       'Swapnote',);\n    public static readonly NINTENDO_BADGE_ARCADE =                       new GameReferences('NBA',      'Nintendo Badge Arcade',);\n    public static readonly MONSTER_MANOR =                               new GameReferences('MoM',      'Monster Manor',);\n\n    public static readonly GAMECENTER_CX =                               new GameReferences('GCCX',     'GAMECENTER CX',);\n    public static readonly CORO_COR0_COMIC =                             new GameReferences('CCC',      'CORO CORO COMIC',);\n    public static readonly FAMITSU =                                     new GameReferences('F',        'Famitsu',);\n    public static readonly MERCENDES_BENZ =                              new GameReferences('M-B',      'Mercendes-Benz',);\n    public static readonly FAMICOM_DISK_SYSTEM =                         new GameReferences('FDS',      'Famicom Disk System',);\n    public static readonly BABYMETAL =                                   new GameReferences('BM',       'BABYMETAL',);\n\n    public static readonly MONSTER_HUNTER =                              new GameReferences('MH',       'Monster Hunter',);\n\n    public static readonly EXCITEBIKE =                                  new GameReferences('E',        'Excitebike',);\n\n    public static readonly NISEKOI =                                     new GameReferences('N',        'Nisekoi',);\n\n    public static readonly JAM_WITH_THE_BAND =                           new GameReferences('JB',       'Jam with the Band',);\n\n    public static readonly DAIGASSO_BAND_BROS_P =                        new GameReferences('DBBP',     'Daigasso! Band Bros. P',);\n\n    public static readonly THE_LEGENDARY_STARFY =                        new GameReferences('TLS',      'The Legendary Starfy',);\n\n    public static readonly BALLOON_FIGHT =                               new GameReferences('BF',       'Balloon Fight',);\n\n    public static readonly SHIN_ONIGASHIMA =                             new GameReferences('SO',       'Shin Onigashima',);\n\n    public static readonly FAMICOM_DETECTIVE_CLUB_PART_II =              new GameReferences('FDCP2',    'Famicom Detective Club Part II',);\n\n    public static readonly PUSHMO =                                      new GameReferences('Pu',       'Pushmo',);\n\n    public static readonly CLU_CLU_LAND =                                new GameReferences('CCL',      'Clu Clu Land',);\n\n    public static readonly VOLLEYBALL =                                  new GameReferences('V',        'Volleyball',);\n\n    public static readonly ICE_CLIMBER =                                 new GameReferences('IC',       'Ice Climber',);\n\n    public static readonly HELLO_KITTY =                                 new GameReferences('HK',       'Hello Kitty',);\n    public static readonly MY_MELODY =                                   new GameReferences('MyM',      'My Melody',);\n    public static readonly SHAUN_THE_SHEEP =                             new GameReferences('SS',       'Shaun the Sheep',);\n\n    public static readonly BRAIN_AGE_TRAIN_YOUR_BRAIN_IN_MINUTES_A_DAY = new GameReferences('BA:TYBMD', 'Brain Age: Train Your Brain in Minutes a Day!',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GameReferences;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, GameReference>;\n\n    #reference?: GameReference;\n    readonly #acronym;\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(acronym: PossibleAcronym, englishName: PossibleEnglishName,) {\n        super();\n        this.#acronym = acronym;\n        this.#englishName = new StringContainer(englishName);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, GameReference> {\n        return this.#REFERENCE_MAP ??= Import.GameReferenceLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): GameReference {\n        return this.#reference ??= GameReferences.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n    public get acronym(): PossibleAcronym {\n        return this.#acronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyAcronyms(): readonly PossibleAcronym[] {\n        return this.values.map(limit => limit.acronym);\n    }\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<GameReferences> {\n        return GameReferences;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.acronym === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends GameReferences = GameReferences, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): GameReferences\n    public static getValue(value: PossibleValue,): | GameReferences | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ExtendedMap}            from '../extended/ExtendedMap';\nimport type {PossibleKeys, Provider} from './Provider';\n\nimport {ExtendedMapContainer} from '../extended/ExtendedMap.container';\n\nexport class AbstractProvider<K extends PossibleKeys, V>\n    implements Provider<K, V> {\n\n    //region -------------------- Fields --------------------\n\n    #everyContainers?: ExtendedMap<K, V>;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor() {\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get everyContainers(): ExtendedMap<K, V> {\n        return this.#everyContainers ??= new ExtendedMapContainer();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ContentNamespace, PossibleTranslationPropertyReceived} from './TranslationProperty';\n\nimport AnyTranslationComponent from './AnyTranslationComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function ContentTranslationComponent(properties: PossibleTranslationPropertyReceived<ContentNamespace>,) {\n    return <AnyTranslationComponent namespace=\"content\" {...properties}/>;\n}\n","import type {ObjectHolder, PossibleValueOnObjectHolder} from './ObjectHolder';\n\nexport class ObjectHolderContainer<T>\n    implements ObjectHolder<T> {\n\n    readonly #value;\n\n    public constructor(value: PossibleValueOnObjectHolder<T>,) {\n        this.#value = ObjectHolderContainer.#retrieveValue(value,);\n    }\n\n    static #retrieveValue<T, >(value: PossibleValueOnObjectHolder<T>,): T {\n        return value == null\n            ? value\n            : value instanceof Function\n                ? value()\n                : typeof value == 'object' && 'get' in value\n                    ? this.#retrieveValue(value.get,)\n                    : value;\n    }\n\n    public get get(): T {\n        return this.#value;\n    }\n\n}\n","import './AnimatedImages.scss';\nimport './VariableImage.scss';\n\nimport type {AnimatedImagesProperties}    from './properties/AnimatedImagesProperties';\nimport type {ImageFromVariableProperties} from './properties/ImageFromVariableProperties';\nimport type {ImageProperties}             from './properties/ImageProperties';\n\nimport {assert} from '../../../util/utilitiesMethods';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function Image(properties: | ImageFromVariableProperties | ImageProperties | AnimatedImagesProperties,) {\n    return 'variable' in properties\n        ? <ImageFromVariable {...properties}/>\n        : 'source' in properties\n            ? <SingleImage {...properties}/>\n            : <AnimatedImages {...properties}/>;\n}\n\nfunction ImageFromVariable({variable, isSquared, className, style, ...imagesProperties}: ImageFromVariableProperties,) {\n    const appliedStyle = style ?? {};\n    appliedStyle['--image-source'] = `var(--${variable}-image)`;\n    return <i className={`image-from-variable ${isSquared ? 'square-image-from-variable' : ''} ${className ?? ''}`}\n              style={appliedStyle} {...imagesProperties}/>;\n}\n\nfunction SingleImage({source, fallbackName, ...imageProperties}: ImageProperties,) {\n    return <img src={source} alt={fallbackName} {...imageProperties}/>;\n}\n\n\nconst MINIMUM_AMOUNT_OF_IMAGES = 2;\nconst MAXIMUM_AMOUNT_OF_IMAGES = 10;\n\nfunction AnimatedImages({partialId, className = '', images, displayAnimations = true, displayEveryImages = true, ...otherParameters}: AnimatedImagesProperties,) {\n    assert(images.length >= MINIMUM_AMOUNT_OF_IMAGES && images.length <= MAXIMUM_AMOUNT_OF_IMAGES, `The array received for \"${partialId}\" is required to have between than ${MINIMUM_AMOUNT_OF_IMAGES} & ${MAXIMUM_AMOUNT_OF_IMAGES} items. The length received is ${images.length}.`,);\n\n    if (!displayEveryImages)\n        return <div key={`${partialId} - 1st image`} id={partialId} className={`${className} non-animated-image`} {...otherParameters}><Image {...images[0]}/></div>;\n\n    if (!displayAnimations)\n        return <div key={`${partialId} - not animated`} id={partialId} className={`${className} non-animated-image non-animated-image-${images.length}`} {...otherParameters}>\n            {images.map(({source, fallbackName,}, index,) => <SingleImage className={`image image-${index + 1}`} source={source} fallbackName={`${fallbackName} ${index + 1}`}/>)}\n        </div>;\n\n    const {style = {}, ...otherParametersExcludingStyle} = otherParameters;\n    images.forEach(({source,}, index) => style[`--image-${index + 1}`] = `url('${source}')`);\n    return <div key={`${partialId} - animated`} id={partialId} className={`${className} animated-image animated-image-${images.length}`} style={style} {...otherParametersExcludingStyle}/>;\n}\n","import type {ObjectHolder} from './ObjectHolder';\n\nimport {ObjectHolderContainer} from './ObjectHolder.container';\n\nexport class ObjectHolders {\n\n    private constructor() {\n        throw new Error('This class cannot be instantiated.');\n    }\n\n    /**\n     * A callback holder that only return null.\n     */\n    public static readonly NULL: ObjectHolder<null> = new ObjectHolderContainer(null);\n    /**\n     * A callback holder that only return true.\n     */\n    public static readonly TRUE: ObjectHolder<true> = new ObjectHolderContainer(true);\n    /**\n     * A callback holder that only return false.\n     */\n    public static readonly FALSE: ObjectHolder<false> = new ObjectHolderContainer(false);\n    /**\n     * A callback holder that only return an empty string.\n     */\n    public static readonly EMPTY_STRING: ObjectHolder<''> = new ObjectHolderContainer('');\n    /**\n     * A callback holder that only return an empty array.\n     * @note that the never type is used to be used for any possible array.\n     */\n    public static readonly EMPTY_ARRAY: ObjectHolder<never[]> = new ObjectHolderContainer([]);\n\n}\n","import type {GameContentNamespace, PossibleTranslationPropertyReceived} from './TranslationProperty';\n\nimport AnyTranslationComponent from './AnyTranslationComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function GameContentTranslationComponent(properties: PossibleTranslationPropertyReceived<GameContentNamespace>,) {\n    // @ts-ignore\n    return <AnyTranslationComponent namespace=\"gameContent\" {...properties}/>;\n}\n","import type {GameProperty}  from './GameProperty';\nimport type {GameStructure} from '../../../game/GameStructure';\n\nimport {Games} from '../../../game/Games';\n\nexport class GamePropertyContainer\n    implements GameProperty {\n\n    //region -------------------- Fields --------------------\n\n    #map?: ReadonlyMap<Games, boolean>;\n    readonly #structure;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(structure: GameStructure<boolean, boolean, boolean>,) {\n        this.#structure = structure;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isInSuperMarioMaker1() {\n        return this.#structure.superMarioMaker;\n    }\n\n    public get isInSuperMarioMakerFor3DS() {\n        return this.#structure.superMarioMakerForNintendo3DS;\n    }\n\n    public get isInSuperMarioMaker2() {\n        return this.#structure.superMarioMaker2;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap(): ReadonlyMap<Games, boolean> {\n        return this.#map ??= new Map(Games.values.map(game => [game, game.get(this),]));\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {GameProperty}       from './GameProperty';\nimport type {ProviderWithoutKey} from '../../../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}      from '../../../../util/provider/AbstractProvider';\nimport {GamePropertyContainer} from './GameProperty.container';\nimport {GameStructureProvider} from '../../../game/GameStructure.provider';\n\n/**\n * @singleton\n */\nexport class GamePropertyProvider\n    extends AbstractProvider<ArgumentsReceived, GameProperty>\n    implements ProviderWithoutKey<GameProperty, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: GamePropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /** Get (or create) a property where it is in only {@link Games.SUPER_MARIO_MAKER_2}. */\n    public get smm2Only() {\n        return this.get(false, true,);\n    }\n\n    /** Get (or create) a property where is it in every {@link Games}. */\n    public get all() {\n        return this.get(true, true,);\n    }\n\n\n    /**\n     * Get (or create) a property where the {@link Games} is separated by group.\n     *\n     * @param isInSuperMarioMaker1And3DS is in {@link Games.SUPER_MARIO_MAKER_1 SMM1} & {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS}\n     * @param isInSuperMarioMaker2 is in {@link Games.SUPER_MARIO_MAKER_2 SMM2}\n     */\n    public get<SMM1 extends boolean = boolean, SMM2 extends boolean = boolean, >(isInSuperMarioMaker1And3DS: SMM1, isInSuperMarioMaker2: SMM2,): GameProperty<SMM1, SMM1, SMM2>\n    /**\n     * Get a property where every {@link Games} is specified individually.\n     *\n     * @param isInSuperMarioMaker1 is in {@link Games.SUPER_MARIO_MAKER_1 SMM1}\n     * @param isInSuperMarioMakerFor3DS is in {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS}\n     * @param isInSuperMarioMaker2 is in {@link Games.SUPER_MARIO_MAKER_2 SMM2}\n     */\n    public get<SMM1 extends boolean = boolean, SMM3DS extends boolean = boolean, SMM2 extends boolean = boolean, >(isInSuperMarioMaker1: SMM1, isInSuperMarioMakerFor3DS: SMM3DS, isInSuperMarioMaker2: SMM2,): GameProperty<SMM1, SMM3DS, SMM2>\n    public get(...argumentsReceived: | ArgumentsReceived | ArgumentsReceived_Simplified): GameProperty {\n        if (argumentsReceived.length === 2)\n            return this.get(argumentsReceived[0], argumentsReceived[0], argumentsReceived[1],);\n\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new GamePropertyContainer(GameStructureProvider.get.get(...argumentsReceived),),))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [isInSuperMarioMaker1: boolean, isInSuperMarioMakerFor3DS: boolean, isInSuperMarioMaker2: boolean,];\ntype ArgumentsReceived_Simplified = readonly [isInSuperMarioMaker1: boolean, isInSuperMarioMaker2: boolean,];\n","import type {ClassWithNullObjectPattern, EmptyNameName} from '../../util/ClassWithNullObjectPattern';\nimport type {Name}                                      from './Name';\n\nimport {EMPTY_ARRAY, EMPTY_MAP, EMPTY_STRING} from '../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyStringName\n    implements Name<string>, ClassWithNullObjectPattern<EmptyNameName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyStringName;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Name properties --------------------\n\n    public readonly languageValue = EMPTY_STRING;\n\n    //region -------------------- English properties --------------------\n\n    public readonly originalEnglish = EMPTY_STRING;\n    public readonly english = EMPTY_STRING;\n    public readonly americanEnglish = EMPTY_STRING;\n    public readonly europeanEnglish = EMPTY_STRING;\n\n    //endregion -------------------- English properties --------------------\n    //region -------------------- French properties --------------------\n\n    public readonly originalFrench = EMPTY_STRING;\n    public readonly french = EMPTY_STRING;\n    public readonly canadianFrench = EMPTY_STRING;\n    public readonly europeanFrench = EMPTY_STRING;\n\n    //endregion -------------------- French properties --------------------\n    //region -------------------- German properties --------------------\n\n    public readonly german = EMPTY_STRING;\n\n    //endregion -------------------- German properties --------------------\n    //region -------------------- Spanish properties --------------------\n\n    public readonly originalSpanish = EMPTY_STRING;\n    public readonly spanish = EMPTY_STRING;\n    public readonly americanSpanish = EMPTY_STRING;\n    public readonly europeanSpanish = EMPTY_STRING;\n\n    //endregion -------------------- Spanish properties --------------------\n    //region -------------------- Italian properties --------------------\n\n    public readonly italian = EMPTY_STRING;\n\n    //endregion -------------------- Italian properties --------------------\n    //region -------------------- Dutch properties --------------------\n\n    public readonly dutch = EMPTY_STRING;\n\n    //endregion -------------------- Dutch properties --------------------\n    //region -------------------- Portuguese properties --------------------\n\n    public readonly originalPortuguese = EMPTY_STRING;\n    public readonly portuguese = EMPTY_STRING;\n    public readonly americanPortuguese = EMPTY_STRING;\n    public readonly europeanPortuguese = EMPTY_STRING;\n\n    //endregion -------------------- Portuguese properties --------------------\n    //region -------------------- Russian properties --------------------\n\n    public readonly russian = EMPTY_STRING;\n\n    //endregion -------------------- Russian properties --------------------\n    //region -------------------- Japanese properties --------------------\n\n    public readonly japanese = EMPTY_STRING;\n\n    //endregion -------------------- Japanese properties --------------------\n    //region -------------------- Chinese properties --------------------\n\n    public readonly originalChinese = EMPTY_STRING;\n    public readonly chinese = EMPTY_STRING;\n    public readonly traditionalChinese = EMPTY_STRING;\n    public readonly simplifiedChinese = EMPTY_STRING;\n\n    //endregion -------------------- Chinese properties --------------------\n    //region -------------------- Korean properties --------------------\n\n    public readonly korean = EMPTY_STRING;\n\n    //endregion -------------------- Korean properties --------------------\n    //region -------------------- Greek properties --------------------\n\n    public readonly isGreekUsed = false;\n    public readonly greek = EMPTY_STRING;\n\n    //endregion -------------------- Greek properties --------------------\n    //region -------------------- Hebrew properties --------------------\n\n    public readonly isHebrewUsed = false;\n    public readonly hebrew = EMPTY_STRING;\n\n    //endregion -------------------- Hebrew properties --------------------\n    //region -------------------- Polish properties --------------------\n\n    public readonly isPolishUsed = false;\n    public readonly polish = EMPTY_STRING;\n\n    //endregion -------------------- Polish properties --------------------\n    //region -------------------- Ukrainian properties --------------------\n\n    public readonly isUkrainianUsed = false;\n    public readonly ukrainian = EMPTY_STRING;\n\n    //endregion -------------------- Ukrainian properties --------------------\n\n    public readonly originalLanguages = EMPTY_ARRAY;\n\n    //endregion -------------------- Name properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toNameMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public toString(): EmptyNameName {\n        return 'Empty name';\n    }\n\n}\n","import type {EveryPossibleRouteNames, EveryPossibleRoutePartialPaths, EveryPossibleRoutes} from './everyRoutes.types';\nimport type {Location}                                                                     from 'history';\n\nimport {assert}            from '../util/utilitiesMethods';\nimport {everySimpleRoutes} from './everyRoutes';\nimport {ProjectLanguages}  from '../lang/ProjectLanguages';\n\nexport function route(partialPath: EveryPossibleRoutePartialPaths, language?: ProjectLanguages,): EveryPossibleRoutes\nexport function route(name: EveryPossibleRouteNames, language?: ProjectLanguages,): EveryPossibleRoutes\nexport function route(partialPath_or_name: | EveryPossibleRoutePartialPaths | EveryPossibleRouteNames, language?: ProjectLanguages,): EveryPossibleRoutes\nexport function route({pathname: pathName,}: Location, languageToReplace?: ProjectLanguages,): EveryPossibleRoutes\n/**\n * <p>\n *  Retrieve the route from a {@link EveryPossibleRoutePartialPaths partial path (EveryPossibleRoutePartialPaths)}\n *  or a {@link EveryPossibleRouteNames name (EveryPossibleRouteNames)}.\n * </p>\n *\n * <p>\n *  It can throw an {@link EvalError} if the route received is not within the possible values of {@link everySimpleRoutes every simple routes}.\n * </p>\n *\n * @param partialPath_or_name_or_location the {@link Location location} or the {@link EveryPossibleRoutePartialPaths partial path (EveryPossibleRoutePartialPaths)} or the {@link EveryPossibleRouteNames name (EveryPossibleRouteNames)}\n * @param language the language used (or by default {@link ProjectLanguages.currentLanguage the current language})\n */\nexport function route(partialPath_or_name_or_location: PossibleParameterReceived, language: ProjectLanguages = ProjectLanguages.currentLanguage,): EveryPossibleRoutes {\n    if (typeof partialPath_or_name_or_location === 'string') {\n        const simpleRoute = everySimpleRoutes.find(simpleRoute => simpleRoute.path === partialPath_or_name_or_location || simpleRoute.name === partialPath_or_name_or_location);\n\n        assert(simpleRoute != null, `The route could not be found with the value \"${partialPath_or_name_or_location}\".`,);\n        return `/${language.projectAcronym}${simpleRoute.path}`;\n    }\n\n    const {pathname: pathName} = partialPath_or_name_or_location;\n\n    return language.isCurrentLanguage\n        ? pathName as EveryPossibleRoutes\n        : pathName.replace(ProjectLanguages.currentLanguage.projectAcronym, language.projectAcronym,) as EveryPossibleRoutes;\n}\n\ntype PossibleParameterReceived = | EveryPossibleRoutePartialPaths | EveryPossibleRouteNames | Location;\n","import type {ClassWithEnglishName}                                                                                                                                                                                                                                                                                                                                                                                                                                                from '../ClassWithEnglishName';\nimport type {ClassWithNullableAcronym}                                                                                                                                                                                                                                                                                                                                                                                                                                            from '../ClassWithAcronym';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                                                                                                                                                                                                                  from '../ClassWithReference';\nimport type {Entity}                                                                                                                                                                                                                                                                                                                                                                                                                                                              from '../entity/Entity';\nimport type {EntityLimit, EntityLimitWithPossibleAlternativeEntityLimit}                                                                                                                                                                                                                                                                                                                                                                                                          from './EntityLimit';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAcronym, PossibleAcronymInBothEditorAndWhilePlaying, PossibleAlternativeAcronym, PossibleAlternativeEnglishName, PossibleEnglishName, PossibleNonNullableValue, PossibleStartingEnglishName, PossibleStartingEnglishNameInBothEditorAndWhilePlaying, PossibleStartingEnglishNameNotInBothEditorAndWhilePlaying, PossibleStringValue, PossibleValue} from './EntityLimits.types';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                                                                                     from '../../util/enum/Enum.types';\n\nimport {Enum}             from '../../util/enum/Enum';\nimport {EmptyEntity}      from '../entity/EmptyEntity';\nimport type {Entities}    from '../entity/Entities';\nimport {EntityLimitTypes} from './EntityLimitTypes';\nimport {Import}           from '../../util/DynamicImporter';\nimport {StringContainer}  from '../../util/StringContainer';\n\n/**\n * @recursiveReferenceVia {@link EntityLimitBuilder} → {@link EntityLimitLoader}\n * @recursiveReference {@link EntityLimitLoader}\n * @classWithDynamicImport {@link EntityLimitLoader}, {@link Entities}\n */\nexport class EntityLimits\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<EntityLimitWithPossibleAlternativeEntityLimit>,\n        ClassWithNullableAcronym<PossibleAcronym>,\n        ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GENERAL_ENTITY_LIMIT_WHILE_PLAYING =                       new EntityLimits(['GEL (WP)', 'General Entity', true,], ['ELB', 'Entity Limit B',],);\n    public static readonly POWER_UP_ENTITY_LIMIT_WHILE_PLAYING =                      new EntityLimits(['PEL (WP)', 'Power-up Entity', true,], ['ELC', 'Entity Limit C',],);\n\n    public static readonly LOOSE_COIN_LIMIT =                                         new class EntityLimits_LooseCoinLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.COIN;\n        }\n\n    }(['LCL', 'Loose Coin',],);\n    public static readonly SOUND_EFFECT_LIMIT =                                       new EntityLimits(['SEL', 'Sound Effect',],);\n    public static readonly CORPSE_LIMIT =                                             new EntityLimits(['CL', 'Corpse',],);\n    public static readonly PROJECTILE_LIMIT =                                         new EntityLimits(['PJL', 'Projectile',],);\n    public static readonly LIGHT_SOURCE_LIMIT =                                       new EntityLimits(['LSL', 'Light Source',],);\n\n    public static readonly GROUND_LIMIT =                                             new class EntityLimits_GroundLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.GROUND;\n        }\n\n    }('Ground', 'Ground Limit 1',);\n    public static readonly BLOCK_LIMIT =                                              new EntityLimits('Block', 'Ground Limit 2',);\n    public static readonly PLATFORM_OR_SLOPE_OR_CONVEYOR_BELT_OR_PIPE_OR_VINE_LIMIT = new class EntityLimits_PlatformOrSlopeOrConveyorBeltOrPipeOrVineLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Platform / Slope / Conveyor Belt / Pipe / Vine\" group\n        }\n\n    }('Platform / Slope / Conveyor Belt / Pipe / Vine', 'Ground Limit 3',);\n    public static readonly CLEAR_PIPE_LIMIT =                                         new class EntityLimits_ClearPipeLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.CLEAR_PIPE;\n        }\n\n    }('Clear Pipe',);\n\n    public static readonly GROWN_VINE_LIMIT =                                         new class EntityLimits_GrownVineLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.VINE;\n        }\n\n    }(['GVL', 'Grown Vine',],);\n    public static readonly CHECKPOINT_FLAG_LIMIT =                                    new class EntityLimits_CheckpointFlagLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.CHECKPOINT_FLAG;\n        }\n\n    }('Checkpoint Flag',);\n    public static readonly TRACK_LIMIT =                                              new class EntityLimits_TrackLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.TRACK;\n        }\n\n    }('Track',);\n    public static readonly SNAKE_BLOCK_LIMIT =                                        new class EntityLimits_SnakeBlockLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.SNAKE_BLOCK;\n        }\n\n    }('Snake Block',);\n    public static readonly EXCLAMATION_BLOCK_LIMIT =                                  new class EntityLimits_ExclamationBlockLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.EXCLAMATION_MARK_BLOCK;\n        }\n\n    }('! Block',);\n    public static readonly TRACK_BLOCK_LIMIT =                                        new class EntityLimits_TrackBlockLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.TRACK_BLOCK;\n        }\n\n    }('Track Block',);\n    public static readonly ICICLE_LIMIT =                                             new class EntityLimits_IcicleLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.ICICLE;\n        }\n\n    }('Icicle',);\n    public static readonly ONE_WAY_WALL_OR_ARROW_SIGN_OR_DASH_BLOCK_LIMIT =           new class EntityLimits_OneWayWallOrArrowSignOrDashBlockLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"One-Way Wall / Arrow Sign / Dash Block\" group\n        }\n\n    }('One-Way Wall / Arrow Sign / Dash Block',);\n\n    public static readonly ENTITY_HELD_BY_A_TWISTER_LIMIT =                           new class EntityLimits_EntityHeldByATwisterLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.TWISTER;\n        }\n\n    }('Entity Held By A Twister',);\n    public static readonly SNOWBALL_THROWN_BY_A_SPIKE_LIMIT =                         new class EntityLimits_SnowballThrownByASpikeLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return [Import.Entities.SNOWBALL, Import.Entities.SPIKE,];\n        }\n\n    }('Snowball Thrown By A Spike',);\n    public static readonly CLEAR_CONDITION_ENTITY_AMOUNT_LIMIT =                      new EntityLimits('Clear Condition Entity Amount',);\n    public static readonly RENDERED_OBJECT_LIMIT =                                    new EntityLimits('Rendered Object', 'Object Displayed Limit',);\n\n    public static readonly KEY_COLLECTED_LIMIT =                                      new class EntityLimits_KeyCollectedLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"(Cursed) Key\" groups\n        }\n\n    }('Key Collected',);\n    public static readonly _10_OR_30_OR_50_COIN_LIMIT =                               new class EntityLimits_PlatformOrSlopeOrConveyorBeltOrPipeOrVineLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"[10- / 30- / 50-]Coin\" group\n        }\n\n    }('[10- / 30- / 50-]Coin',);\n    public static readonly PINK_COIN_LIMIT =                                          new class EntityLimits_PinkCoinLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.PINK_COIN;\n        }\n\n    }('Pink Coin',);\n\n    public static readonly POWER_UP_ENTITY_LIMIT_EDITOR =                             new EntityLimits(['PEL (E)', 'Power-up Entity', false,],);\n    public static readonly PLAYER_FIREBALL =                                          new class EntityLimits_FireballThrownByAPlayerLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.FIREBALL_THROWN_BY_A_PLAYER;\n        }\n\n    }('Player\\'s Fireball',);\n    public static readonly PLAYER_SUPERBALL =                                         new class EntityLimits_SuperballThrownByAPlayerLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.SUPERBALL_THROWN_BY_A_PLAYER;\n        }\n\n    }('Player\\'s Superball',);\n    public static readonly PLAYER_BOMB =                                              new class EntityLimits_BombThrownByALinkLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.BOMB_THROWN_BY_A_LINK;\n        }\n\n    }('Player\\'s Bomb',);\n    public static readonly PLAYER_BUILDER_BOX =                                       new class EntityLimits_BuilderBoxThrownByAPlayerLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.BUILDER_BOX_THROWN_BY_A_PLAYER;\n        }\n\n    }('Player\\'s Builder Box',);\n    public static readonly PLAYER_BOOMERANG =                                         new class EntityLimits_BoomerangThrownByAPlayerLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.BOOMERANG_THROWN_BY_A_PLAYER;\n        }\n\n    }('Player\\'s Boomerang',);\n    public static readonly PLAYER_CANNONBALL =                                        new class EntityLimits_CannonballThrownByAPlayerLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.CANNONBALL_THROWN_BY_A_PLAYER;\n        }\n\n    }('Player\\'s Cannonball',);\n    public static readonly HATCHED_YOSHI_LIMIT =                                      new class EntityLimits_HatchedYoshiLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"(Red) Yoshi\" group\n        }\n\n    }(['HYL', 'Hatched Yoshi',],);\n\n    public static readonly GENERAL_ENTITY_LIMIT_EDITOR =                              new EntityLimits(['GEL (WP)', 'General Entity', false,], 'General Enemy Limit',);\n    public static readonly CHARVAARGH_LIMIT =                                         new class EntityLimits_CharvaarghLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.CHARVAARGH;\n        }\n\n    }('Charvaargh',);\n    public static readonly PIRANHA_CREEPER_LIMIT =                                    new class EntityLimits_PiranhaCreeperLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.PIRANHA_CREEPER;\n        }\n\n    }('Piranha Creeper',);\n    public static readonly BOWSER_AND_BOWSER_JR_LIMIT =                               new class EntityLimits_BowserAndBowserJrLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Bowser (Jr.)\" group\n        }\n\n    }('Bowser (Jr.)',);\n    public static readonly BOOM_BOOM_AND_POM_POM_LIMIT =                              new class EntityLimits_BoomBoomAndPomPomLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Boom Boom / Pom Pom\" group\n        }\n\n    }('Boom Boom / Pom Pom',);\n    public static readonly KOOPALING_LIMIT =                                          new class EntityLimits_KoopalingLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Koopalings\" group\n        }\n\n    }('Koopaling',);\n    public static readonly ANGRY_SUN_OR_MOON_LIMIT =                                  new class EntityLimits_AngrySunOrMoonLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Angry Sun / Moon\" group\n        }\n\n    }('Angry Sun / Moon',);\n    public static readonly PHANTO_LIMIT =                                             new class EntityLimits_PhantoLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.PHANTO;\n        }\n\n    }('Phanto',);\n    public static readonly KOOPA_TROOPA_CAR_LIMIT =                                   new class EntityLimits_KoopaTroopaCarLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.KOOPA_TROOPA_CAR;\n        }\n\n    }('Koopa Troopa Car',);\n\n    public static readonly WARP_DOOR_LIMIT =                                          new class EntityLimits_WarpDoorLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Warp Doors\" group\n        }\n\n    }('Warp Door',);\n    public static readonly WARP_BOX_LIMIT =                                           new class EntityLimits_WarpBoxLimit extends EntityLimits {\n\n        protected override get _groupLink(): PossibleGroupLinkInitialisation {\n            return null;//TODO change to \"Warp Boxes\" group\n        }\n\n    }('Warp Box',);\n    public static readonly WARP_PIPE_LIMIT =                                          new class EntityLimits_WarpBoxLimit extends EntityLimits {\n\n        protected override get _entityLink(): PossibleEntityLinkInitialisation {\n            return Import.Entities.PIPE;\n        }\n\n    } ('Warp Pipe',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityLimits;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, EntityLimit>;\n    static readonly #LIMIT_LENGTH = ' Limit'.length;\n    static readonly #LIMIT_WHILE_PLAYING_LENGTH = ` Limit (While Playing)`.length;\n    static readonly #LIMIT_IN_EDITOR_LENGTH = ` Limit (Editor)`.length;\n\n    #reference?: EntityLimitWithPossibleAlternativeEntityLimit;\n    readonly #acronym: PossibleAcronym | null;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n    readonly #alternativeAcronym: PossibleAlternativeAcronym | null;\n    readonly #alternativeEnglishName: StringContainer<PossibleAlternativeEnglishName> | null;\n    #entityLink?: | readonly [Entity] | readonly [Entity, Entity,];\n    #groupLink?: object;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishNameReceived, alternativeEnglishName: | AlternativeEnglishNameReceived | null = null,) {\n        super();\n        if (typeof englishName == 'string') {\n            this.#acronym = null;\n            this.#englishName = new StringContainer(`${englishName as PossibleStartingEnglishNameNotInBothEditorAndWhilePlaying} Limit`);\n        } else {\n            this.#acronym = englishName[0];\n            const isWhilePlaying = englishName[2];\n            this.#englishName = new StringContainer(isWhilePlaying == null\n                ? `${englishName[1] as PossibleStartingEnglishNameNotInBothEditorAndWhilePlaying} Limit`\n                : `${englishName[1] as PossibleStartingEnglishNameInBothEditorAndWhilePlaying} Limit (${isWhilePlaying ? EntityLimitTypes.WHILE_PLAYING.englishName : EntityLimitTypes.EDITOR.englishName})`\n            );\n        }\n        if (alternativeEnglishName instanceof Array) {\n            this.#alternativeAcronym = alternativeEnglishName[0];\n            this.#alternativeEnglishName = new StringContainer(alternativeEnglishName[1]);\n        } else {\n            this.#alternativeAcronym = null;\n            this.#alternativeEnglishName = alternativeEnglishName == null ? null : new StringContainer(alternativeEnglishName);\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, EntityLimit> {\n        return this.#REFERENCE_MAP ??= Import.EntityLimitLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): EntityLimitWithPossibleAlternativeEntityLimit {\n        return this.#reference ??= EntityLimits.REFERENCE_MAP.get(this.englishName)! as EntityLimitWithPossibleAlternativeEntityLimit;\n    }\n\n\n    public get acronym(): | PossibleAcronym | null {\n        return this.#acronym;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get alternativeAcronym(): | PossibleAlternativeAcronym | null {\n        return this.#alternativeAcronym;\n    }\n\n    public get alternativeEnglishName(): | PossibleAlternativeEnglishName | null {\n        return this.#alternativeEnglishName?.get ?? null;\n    }\n\n    public get alternativeEnglishNameInHtml(): string {\n        return this.#alternativeEnglishName?.getInHtml ?? '';\n    }\n\n\n    //region -------------------- Group link --------------------\n\n    protected get _groupLink(): PossibleGroupLinkInitialisation {\n        return null;\n    }\n\n    public get groupLink(): object {\n        if (this.#groupLink == null) {\n            const link = this._groupLink;\n            this.#groupLink = link == null\n                ? {}\n                : link;//.reference;\n        }\n        return this.#groupLink;\n    }\n\n    //endregion -------------------- Group link --------------------\n    //region -------------------- Entity link --------------------\n\n    protected get _entityLink(): PossibleEntityLinkInitialisation {\n        return null;\n    }\n\n    public get entityLink(): readonly [Entity] | readonly [Entity, Entity,] {\n        if (this.#entityLink == null) {\n            const link = this._entityLink;\n            this.#entityLink = link == null\n                ? [EmptyEntity.get]\n                : link instanceof Array\n                    ? [link[0].reference, link[1].reference,]\n                    : [link.reference,];\n        }\n        return this.#entityLink;\n    }\n\n    //endregion -------------------- Entity link --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyAcronyms(): readonly PossibleAcronym[] {\n        return this.values.map(limit => limit.acronym).filter(acronym => acronym != null) as PossibleAcronym[];\n    }\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    public static get everyAlternativeAcronyms(): readonly PossibleAlternativeAcronym[] {\n        return this.values.map(limit => limit.alternativeAcronym).filter(alternativeAcronym => alternativeAcronym != null) as PossibleAlternativeAcronym[];\n    }\n\n    public static get everyAlternativeEnglishNames(): readonly PossibleAlternativeEnglishName[] {\n        return this.values.map(limit => limit.alternativeEnglishName).filter(alternativeEnglishName => alternativeEnglishName != null) as PossibleAlternativeEnglishName[];\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityLimits> {\n        return EntityLimits;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.englishName.substring(0, enumerable.englishName.length - this.#LIMIT_LENGTH) === value\n                || enumerable.englishName.substring(0, enumerable.englishName.length - this.#LIMIT_IN_EDITOR_LENGTH) === value\n                || enumerable.englishName.substring(0, enumerable.englishName.length - this.#LIMIT_WHILE_PLAYING_LENGTH) === value\n                || enumerable.alternativeEnglishName === value\n                || enumerable.acronym === value\n                || enumerable.alternativeAcronym === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityLimits = EntityLimits, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityLimits\n    public static getValue(value: PossibleValue,): | EntityLimits | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleGroupLinkInitialisation = | object | null;\ntype PossibleEntityLinkInitialisation = | Entities | readonly [Entities, Entities,] | null;\ntype EnglishNameReceived = | PossibleStartingEnglishName | [englishName: PossibleAcronym, englishAcronym: PossibleStartingEnglishName,] | [englishName: PossibleAcronymInBothEditorAndWhilePlaying, englishAcronym: PossibleStartingEnglishNameInBothEditorAndWhilePlaying, isWhilePlaying: boolean,];\ntype AlternativeEnglishNameReceived = | PossibleAlternativeEnglishName | [alternativeEnglishName: PossibleAlternativeAcronym, alternativeEnglishAcronym: PossibleAlternativeEnglishName,];\n","import {useEffect} from 'react';\n\nimport type {TooltipConfiguration}                            from './Tooltip.types';\nimport type {ReactElement, ReactPropertyWithOptionalChildren} from '../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {TooltipInstance}     from './TooltipInstance';\n\n/**\n * Create a new {@link bootstrap.Tooltip Tooltip} instance.\n *\n * @param properties the properties received (containing the content, the option, the triggers & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/tooltips/\n */\nexport default function Tooltip<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertyWithOptionalChildren<TooltipConfiguration, T>): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new TooltipInstance(elementId, option, triggers,)));\n    return children;\n}\n","import type {DefaultIndexIfNotFound, DefaultValueIfNotFound} from './ClassThatCanGetItems';\nimport type {ExtendedSet}                                    from './ExtendedSet';\nimport type {ExtendedMap}                                    from './ExtendedMap';\nimport type {VariableReturnValue}                            from './ClassThatCanSearchItems';\n\nimport {ConditionalIntermediate} from './tools/ConditionalIntermediate';\nimport {isArrayEquals}           from '../utilitiesMethods';\nimport {ExtendedMapContainer}    from './ExtendedMap.container';\n\nexport class ExtendedSetContainer<T, LENGTH extends number = number, >\n    implements ExtendedSet<T, LENGTH> {\n\n    //region -------------------- Fields --------------------\n\n    public static DEFAULT_SEPARATOR = ',';\n    public static DEFAULT_STARTING_INDEX = 0;\n    public static readonly DEFAULT_VALUE_IF_NOT_FOUND: DefaultValueIfNotFound = null;\n    public static readonly DEFAULT_INDEX_IF_NOT_FOUND: DefaultIndexIfNotFound = -1;\n    public static readonly EMPTY: ExtendedSet<never, 0> = new ExtendedSetContainer();\n\n    readonly #set: Set<T>;\n    #indexMapReference: T[];\n    public defaultStartingIndex = ExtendedSetContainer.DEFAULT_STARTING_INDEX;\n    public defaultSeparator = ExtendedSetContainer.DEFAULT_SEPARATOR;\n\n    [index: number]: T;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(values?: Iterable<T> | null | undefined,) {\n        this.#set = new Set(values);\n        this.#indexMapReference = new Array(...values ?? []);\n    }\n\n    protected get _set(): Set<T> {\n        return this.#set;\n    }\n\n    get #array(): T[] {\n        return this.#indexMapReference;\n    }\n\n    //region -------------------- Length methods --------------------\n\n    public get size(): this['length'] {\n        return this.length;\n    }\n\n    /**\n     * @see Set.size\n     */\n    public get length(): LENGTH {\n        return this._set.size as LENGTH;\n    }\n\n    //endregion -------------------- Length methods --------------------\n    //region -------------------- Addition methods --------------------\n\n    /**\n     * Add an item to the {@link Set internal Set} and the {@link this.indexMapReference internal indexMapReference}.\n     * It also adds reflectively the index to the class itself.\n     * @param values\n     */\n    #add(...values: readonly T[]): this {\n        const oldLength = this.length;\n\n        values.forEach(value => this._set.add(value));\n        this.#indexMapReference = [...new Set([...this.#array, ...values,])];\n\n        this.forEach((value, index,) => {\n            if (index > oldLength)\n                Reflect.deleteProperty(this, index,);\n            else\n                this[index] = value;\n        });\n        return this;\n    }\n\n    /**\n     *\n     * @param values\n     * @see Set.add\n     */\n    public add(...values: readonly T[]): this {\n        return this.#add(...values);\n    }\n\n    public push = this.add;\n\n    //region -------------------- & Get --------------------\n\n    public addAndGet<V extends T = T, >(value: V,): V\n    public addAndGet<V extends T[] = T[], >(...values: V): V\n    public addAndGet<V extends readonly T[] = readonly T[], >(...values: V): V\n    public addAndGet(...values: T[]) {\n        this.add(...values);\n        return values.length === 1 ? values[0] : values;\n    }\n\n    public pushAndGet = this.addAndGet;\n\n    //endregion -------------------- & Get --------------------\n\n    //endregion -------------------- Addition methods --------------------\n    //region -------------------- Removal methods --------------------\n\n    #delete(...values: readonly T[]): boolean {\n        const oldLength = this.length;\n        let everyValuesHasBeenDeleted = this.has(...values);\n\n        values.forEach(value => everyValuesHasBeenDeleted = this._set.delete(value));\n        this.#indexMapReference = this.#array.filter(value => !values.includes(value));\n\n        values.forEach((value, index,) => {\n            if (index > oldLength)\n                Reflect.deleteProperty(this, index,);\n            else\n                this[index] = value;\n        });\n        return everyValuesHasBeenDeleted;\n    }\n\n    /**\n     *\n     * @param values\n     * @see Set.delete\n     */\n    public delete(...values: T[]): boolean {\n        return this.#delete(...values);\n    }\n\n    public drop = this.delete;\n\n    public remove = this.delete;\n\n\n    /**\n     * @see Set.clear\n     */\n    public clear(): this {\n        this._set.clear();\n        return this;\n    }\n\n    //endregion -------------------- Removal methods --------------------\n    //region -------------------- Loop methods --------------------\n\n    public if(callback: (set: this,) => boolean,): ConditionalIntermediate<this> {\n        return new ConditionalIntermediate(this, () => callback(this,));\n    }\n\n    public range(startingIndex?: number, endingIndex?: number,): | this | ExtendedSet<T> {\n        const defaultStartingValue = this.defaultStartingIndex;\n        const defaultLength = this.length;\n        startingIndex ??= defaultStartingValue;\n        endingIndex ??= defaultLength;\n\n        return startingIndex === defaultStartingValue && endingIndex === defaultLength\n            ? this\n            : new ExtendedSetContainer(this.#array.filter((value, index,) => index > startingIndex! && index < endingIndex!));\n    }\n\n\n    #has(value: any,): boolean {\n        if (value instanceof Array) {\n            for (const internalValue of this)\n                if (internalValue instanceof Array && isArrayEquals(internalValue, value,))\n                    return true;\n            return false;\n        }\n        return this._set.has(value);\n    }\n\n    /**\n     *\n     * @param values\n     * @see Set.has\n     * @see Array.includes\n     */\n    public has(...values: readonly T[]): boolean\n    public has(...values: readonly any[]): boolean\n    public has(...values: readonly T[]): boolean {\n        for (const value of values)\n            if (!this.#has(value))\n                return false;\n        return true;\n    }\n\n    public includes = this.has;\n\n    public get(index: LENGTH,): T\n    public get(index: any,): | T | DefaultValueIfNotFound\n    public get(index: any,) {\n        return this.find((internalValue, internalIndex,) => internalIndex === index);\n    }\n\n    public getIndex(value: T,): LENGTH\n    public getIndex(value: any,): LENGTH | DefaultIndexIfNotFound\n    public getIndex(value: any,) {\n        return this.findIndex(internalValue => internalValue === value);\n    }\n\n\n    /**\n     *\n     * @param callback\n     * @see Array.find\n     */\n    public find<B extends boolean, >(callback: (value: T, index: LENGTH,) => B,): VariableReturnValue<B, T, DefaultValueIfNotFound>\n    /**\n     *\n     * @param callback\n     * @see Array.find\n     */\n    public find<U extends T, >(callback: (value: T, index: LENGTH,) => value is U,): | U | DefaultValueIfNotFound\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.find\n     */\n    public find<B extends boolean, U, >(callback: (value: T, index: LENGTH,) => B, callbackIfNotFound: () => U,): VariableReturnValue<B, T, U>\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.find\n     */\n    public find<U extends T, V, >(callback: (value: T, index: LENGTH,) => value is U, callbackIfNotFound: () => V,): | U | V\n    public find(callback: (value: T, index: LENGTH,) => boolean, callbackIfNotFound?: () => T,) {\n        const valueFound = this.#array.find((value, index,) => callback(value, index as LENGTH,));\n        return valueFound != null\n            ? valueFound\n            : callbackIfNotFound == null\n                ? ExtendedSetContainer.DEFAULT_VALUE_IF_NOT_FOUND\n                : callbackIfNotFound();\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.findIndex\n     */\n    public findIndex<B extends boolean, >(callback: (value: T, index: LENGTH,) => B,): VariableReturnValue<B, LENGTH, DefaultIndexIfNotFound>\n    /**\n     *\n     * @param callback\n     * @see Array.findIndex\n     */\n    public findIndex<U extends LENGTH, >(callback: (value: T, index: LENGTH,) => index is U,): | U | DefaultIndexIfNotFound\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.findIndex\n     */\n    public findIndex<B extends boolean, U, >(callback: (value: T, index: LENGTH,) => boolean, callbackIfNotFound: () => U,): VariableReturnValue<B, LENGTH, U>\n    /**\n     *\n     * @param callback\n     * @param callbackIfNotFound\n     * @see Array.findIndex\n     */\n    public findIndex<U extends LENGTH, V, >(callback: (value: T, index: LENGTH,) => index is U, callbackIfNotFound: () => V,): | U | V\n    public findIndex(callback: (value: T, key: LENGTH,) => boolean, callbackIfNotFound?: () => LENGTH,) {\n        const valueFound = this.#array.findIndex((value, index,) => callback(value, index as LENGTH,));\n        return valueFound != null\n            ? valueFound\n            : callbackIfNotFound == null\n                ? ExtendedSetContainer.DEFAULT_INDEX_IF_NOT_FOUND\n                : callbackIfNotFound();\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.forEach\n     */\n    public forEach(callback: (value: T, index: LENGTH,) => void,): this {\n        this.#array.forEach((value, index,) => callback(value, index as LENGTH,));\n        return this;\n    }\n\n    /**\n     *\n     * @param callback\n     * @see Array.map\n     */\n    public map<V>(callback: (value: T, index: LENGTH,) => V,): ExtendedSet<V, LENGTH> {\n        return new ExtendedSetContainer(this.#array.map((value, index,) => callback(value, index as LENGTH,))) as unknown as ExtendedSet<V, LENGTH>;\n    }\n\n    //endregion -------------------- Loop methods --------------------\n    //region -------------------- Conversion methods --------------------\n\n    /**\n     * @see Array.entries\n     */\n    public get entries(): IterableIterator<readonly [number, T,]> {\n        return this.#array.entries();\n    }\n\n    /**\n     * @see Array.keys\n     */\n    public get keys(): IterableIterator<number> {\n        return this.#array.keys();\n    }\n\n    /**\n     * @see Set.values\n     */\n    public get values(): IterableIterator<T> {\n        return this._set.values();\n    }\n\n\n    /**\n     *\n     * @param separator\n     * @see Array.join\n     */\n    public join(separator: string = this.defaultSeparator,): string {\n        return this.#array.join(separator);\n    }\n\n    //region -------------------- Convertor methods --------------------\n\n    public toArray(): T[] {\n        return [...this];\n    }\n\n\n    public toSet(): Set<T> {\n        return new Set(this);\n    }\n\n    public toExtendedSet(): ExtendedSet<T, LENGTH> {\n        return new ExtendedSetContainer(this);\n    }\n\n\n    public toMap(): Map<LENGTH, T> {\n        return new Map(this.map((value, index,) => [index, value,]));\n    }\n\n    public toExtendedMap(): ExtendedMap<LENGTH, T, LENGTH> {\n        return new ExtendedMapContainer(this.toMap()) as unknown as ExtendedMap<LENGTH, T, LENGTH>;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    /**\n     * @see Array.toString\n     */\n    public toString(): string {\n        return this.#array.toString();\n    }\n\n    /**\n     * @see Array.toLocalString\n     */\n    public toLocalString(): string {\n        return this.#array.toLocaleString();\n    }\n\n    //endregion -------------------- Conversion methods --------------------\n    //region -------------------- Javascript only methods --------------------\n\n    public [Symbol.iterator](): Iterator<T> {\n        return this._set[Symbol.iterator]();\n    }\n\n    public [Symbol.toStringTag](): string {\n        return this._set[Symbol.toStringTag];\n    }\n\n    //endregion -------------------- Javascript only methods --------------------\n\n}\n","import type {Enumerable}                                                                                                                                                                            from '../../../util/enum/Enumerable';\nimport type {GamePath_ClearCondition, GamePath_Editor, GamePath_InGameSMM1}                                                                                                                         from './GameStyles.types';\nimport type {GameStyleProperty}                                                                                                                                                                     from '../properties/gameStyle/GameStyleProperty';\nimport type {GameStyleReferences}                                                                                                                                                                   from '../properties/gameStyle/GameStyleReferences';\nimport type {EnumArray, EnumArray_SMM1, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from '../../gameStyle/GameStyles.types';\nimport type {StaticReference}                                                                                                                                                                       from '../../../util/enum/Enum.types';\nimport type {PossibleOtherEntities}                                                                                                                                                                 from '../Entity';\n\nimport {BASE_PATH}                        from '../../../variables';\nimport {Enum}                             from '../../../util/enum/Enum';\nimport {GameStyles as OriginalGameStyles} from '../../gameStyle/GameStyles';\n\nexport class GameStyles\n    extends OriginalGameStyles {\n\n    //region -------------------- Enum instances --------------------\n\n    public static override readonly SUPER_MARIO_BROS =       new GameStyles(OriginalGameStyles.SUPER_MARIO_BROS,      );\n    public static override readonly SUPER_MARIO_BROS_3 =     new GameStyles(OriginalGameStyles.SUPER_MARIO_BROS_3,    );\n    public static override readonly SUPER_MARIO_WORLD =      new GameStyles(OriginalGameStyles.SUPER_MARIO_WORLD,     );\n    public static override readonly NEW_SUPER_MARIO_BROS_U = new GameStyles(OriginalGameStyles.NEW_SUPER_MARIO_BROS_U,);\n    public static override readonly SUPER_MARIO_3D_WORLD =   new GameStyles(OriginalGameStyles.SUPER_MARIO_3D_WORLD,  );\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GameStyles;\n\n    protected static override _PARENT: StaticReference<OriginalGameStyles> = OriginalGameStyles;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #GAME_STYLES_SMM1?: EnumArray_SMM1<GameStyles>;\n\n    readonly #parent;\n    #gamePath_editor?: GamePath_Editor;\n    #gamePath_clearCondition?: GamePath_ClearCondition;\n    #gamePath_smm1?: GamePath_InGameSMM1;\n\n    //endregion -------------------- Fields --------------------\n\n    // @ts-ignore\n    protected constructor(enumeration: GameStyles,)\n    private constructor(enumeration: OriginalGameStyles,)\n    private constructor(enumeration: OriginalGameStyles,) {\n        super(enumeration);\n        this.#parent = enumeration;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get parent(): OriginalGameStyles {\n        return this.#parent;\n    }\n\n    public get gamePath_editor(): GamePath_Editor {\n        return this.#gamePath_editor ??= `/${BASE_PATH}/entity/${this.shortImagePath}/Editor/`;\n    }\n\n    public get gamePath_clearCondition(): GamePath_ClearCondition {\n        return this.#gamePath_clearCondition ??= `/${BASE_PATH}/entity/${this.shortImagePath}/Clear Condition/`;\n    }\n\n    public get gamePath_inGameSmm1(): GamePath_InGameSMM1 {\n        return this.#gamePath_smm1 ??= `/${BASE_PATH}/entity/${this.shortImagePath}/In game/SMM1/`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public override get(property: GameStyleProperty,): boolean {\n        return this.parent.get(property);\n    }\n\n    public override getReference(referenceProperty: GameStyleReferences,): PossibleOtherEntities {\n        return this.parent.getReference(referenceProperty);\n    }\n\n\n    public static override get gameStyles_smm1(): EnumArray_SMM1<GameStyles> {\n        return this.#GAME_STYLES_SMM1 ??= OriginalGameStyles.gameStyles_smm1.map(gameStyle => this.getValue(gameStyle)) as unknown as EnumArray_SMM1<GameStyles>;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<GameStyles> {\n        return GameStyles;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByEnumerable(value: Enumerable,) {\n        if (value instanceof OriginalGameStyles)\n            return GameStyles[value.ordinal];\n        return null;\n    }\n\n    public static override getValue(nullValue: | null | undefined,): null\n    public static override getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O, GameStyles>\n    public static override getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O, GameStyles>\n    public static override getValue<N extends Names = Names, >(name: N,): EnumByName<N, GameStyles>\n    public static override getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S, GameStyles>\n    public static override getValue<S extends string = string, >(name: S,): EnumByString<S, GameStyles>\n    public static override getValue<I extends GameStyles = GameStyles, >(instance: I,): I\n    public static override getValue(instance: OriginalGameStyles,): GameStyles\n    public static override getValue(value: PossibleNonNullableValue,): GameStyles\n    public static override getValue(value: PossibleValue,): | GameStyles | null\n    public static override getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static override get values(): EnumArray<GameStyles> {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static override [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {Builder}                          from '../../../util/builder/Builder';\nimport type {ExtendedList}                     from '../../../util/extended/ExtendedList';\nimport type {GameStyles as OriginalGameStyles} from '../../gameStyle/GameStyles';\nimport type {Image}                            from './Image';\n\nimport {ExtendedSetContainer} from '../../../util/extended/ExtendedSet.container';\nimport {GameStyles}           from './GameStyles';\n\nexport abstract class AbstractImageBuilder<NAME extends string = string, AMOUNT extends number = number, >\n    implements Builder<Image> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #GAME_STYLE_ARRAY = GameStyles.values;\n\n    readonly #simpleImageName;\n    readonly #imageNumber;\n\n    #gameStyles?: ExtendedList<GameStyles>;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(simpleImageName: NAME, imageNumber?: AMOUNT,)\n    protected constructor(simpleImageName: NAME, imageNumber: | AMOUNT | null = null,) {\n        this.#simpleImageName = simpleImageName;\n        this.#imageNumber = imageNumber;\n\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get simpleImageName(): NAME {\n        return this.#simpleImageName;\n    }\n\n    public get imageNumber(): | AMOUNT | null {\n        return this.#imageNumber;\n    }\n\n    //region -------------------- Game Style --------------------\n\n    private get __gameStyles(): ExtendedList<GameStyles> {\n        return this.#gameStyles ??= new ExtendedSetContainer();\n    }\n\n    protected get _gameStyles(): ExtendedList<GameStyles> {\n        return this.#gameStyles ?? ExtendedSetContainer.EMPTY;\n    }\n\n    protected _clearGameStyle(): this {\n        this.__gameStyles.clear();\n        return this;\n    }\n\n    protected _addGameStyle(gameStyle: OriginalGameStyles,): this\n    protected _addGameStyle(gameStyles: readonly OriginalGameStyles[],): this\n    protected _addGameStyle(gameStyles: | OriginalGameStyles | readonly OriginalGameStyles[],): this {\n        if (!(gameStyles instanceof Array))\n            return this._addGameStyle([gameStyles]);\n        this.__gameStyles.add(...gameStyles.map(gameStyle => GameStyles.getValue(gameStyle)));\n\n        return this;\n    }\n\n    protected _setGameStyle(gameStyle: OriginalGameStyles,): this\n    protected _setGameStyle(gameStyles: readonly OriginalGameStyles[],): this\n    protected _setGameStyle(gameStyles: readonly OriginalGameStyles[], notGameStyles: readonly OriginalGameStyles[],): this\n    protected _setGameStyle(gameStyles: | OriginalGameStyles | readonly OriginalGameStyles[], notGameStyles?: readonly OriginalGameStyles[],): this\n    protected _setGameStyle(gameStyles: | OriginalGameStyles | readonly OriginalGameStyles[], notGameStyles: readonly OriginalGameStyles[] = [],): this {\n        if (!(gameStyles instanceof Array))\n            return this._setGameStyle([gameStyles], notGameStyles,);\n\n        const _gameStyles = gameStyles.map(gameStyle => GameStyles.getValue(gameStyle));\n        const _notGameStyles = notGameStyles.map(gameStyle => GameStyles.getValue(gameStyle));\n\n        return this._clearGameStyle()\n            ._addGameStyle(_gameStyles.filter(gameStyle => !_notGameStyles.includes(gameStyle)),);\n    }\n\n\n    public setGameStyle(): never\n    public setGameStyle(...gameStyles: readonly OriginalGameStyles[]): this\n    public setGameStyle(...gameStyles: readonly OriginalGameStyles[]): this {\n        return this._setGameStyle(gameStyles,);\n    }\n\n    public setNotGameStyle(): never\n    public setNotGameStyle(...gameStyles: readonly OriginalGameStyles[]): this\n    public setNotGameStyle(...gameStyles: readonly OriginalGameStyles[]): this {\n        return this._setGameStyle(AbstractImageBuilder.#GAME_STYLE_ARRAY, gameStyles,);\n    }\n\n\n    public setAllGameStyles(): this {\n        return this._setGameStyle(AbstractImageBuilder.#GAME_STYLE_ARRAY);\n    }\n\n    public setOnlySM3DW(): this {\n        return this.setGameStyle(GameStyles.SUPER_MARIO_3D_WORLD,);\n    }\n\n    public setNotSM3DW(): this {\n        return this.setNotGameStyle(GameStyles.SUPER_MARIO_3D_WORLD,);\n    }\n\n    //endregion -------------------- Game Style --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    public abstract build(): Image;\n\n}\n","import type {GameStyles} from '../../../gameStyle/GameStyles';\n\nimport {ClearConditionImage} from './ClearConditionImage';\n\nexport class ClearConditionImageContainer\n    implements ClearConditionImage {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #map;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(map: ReadonlyMap<GameStyles, readonly string[]>,) {\n        this.#map = map;\n    }\n\n    public get(gameStyle: GameStyles,): readonly string[] {\n        return this.#map.get(gameStyle) ?? ClearConditionImageContainer.#EMPTY_ARRAY;\n    }\n}\n","import type {ImageNumber, PossibleAmountOfImages, SimpleImageName} from './ClearConditionImage.types';\nimport type {GameStyles as OriginalGameStyles}                     from '../../../gameStyle/GameStyles';\n\nimport {AbstractImageBuilder}         from '../AbstractImage.builder';\nimport {ClearConditionImageContainer} from './ClearConditionImage.container';\nimport {GameStyles}                   from '../GameStyles';\n\nexport class ClearConditionImageBuilder<NAME extends Exclude<SimpleImageName, null> = Exclude<SimpleImageName, null>, >\n    extends AbstractImageBuilder<NAME, PossibleAmountOfImages> {\n\n    public constructor(simpleImageName: NAME,)\n    public constructor(simpleImageName: NAME, imageNumber: PossibleAmountOfImages,)\n    public constructor(simpleImageName: NAME, imageNumber?: PossibleAmountOfImages,) {\n        super(simpleImageName, imageNumber,);\n    }\n\n    //region -------------------- Build utility methods --------------------\n\n    protected _getImagePath(gameStyle: GameStyles, ending: string = '',) {\n        return `${gameStyle.gamePath_clearCondition}${gameStyle.gameAcronym}_Lyt_M_${this.simpleImageName}${ending}.tiff`;\n    }\n\n    protected _getAmountBasedOnValue(amountOfImages: PossibleAmountOfImages,): readonly ImageNumber[] {\n        return [...new Array(amountOfImages)].map((_value, index,) => index as ImageNumber,);\n    }\n\n    protected _createNewMap(callbackThatReturnNumbers: () => readonly ImageNumber[],): ReadonlyMap<OriginalGameStyles, readonly string[]> {\n        return new Map(this._gameStyles.map(gameStyle => [\n            gameStyle.parent,\n            callbackThatReturnNumbers().map(number => this._getImagePath(gameStyle, `_0${number}`,)),\n        ]));\n    }\n\n    protected _createImages(): ReadonlyMap<OriginalGameStyles, readonly string[]> {\n        const imageNumber = this.imageNumber;\n\n        if (imageNumber != null)\n            return this._createNewMap(() => [imageNumber - 1 as ImageNumber]);\n\n        return this._createNewMap(() => this._getAmountBasedOnValue(1));\n    }\n\n    //endregion -------------------- Build utility methods --------------------\n\n    public override build(): ClearConditionImageContainer {\n        return new ClearConditionImageContainer(this._createImages(),);\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyClearConditionImageName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {ClearConditionImage}                                      from './ClearConditionImage';\n\nimport {EMPTY_ARRAY} from '../../../../util/emptyVariables';\n\nexport class EmptyClearConditionImage\n    implements ClearConditionImage, ClassWithNullObjectPattern<EmptyClearConditionImageName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyClearConditionImage;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(): typeof EMPTY_ARRAY {\n        return EMPTY_ARRAY;\n    }\n\n    public toString(): EmptyClearConditionImageName {\n        return 'Empty clear condition image';\n    }\n\n\n}\n","import type {ClearConditionImage}            from './ClearConditionImage';\nimport type {PossibleImageReceivedOnFactory} from './ClearConditionImage.types';\n\nimport {ClearConditionImageBuilder} from './ClearConditionImage.builder';\nimport {EmptyClearConditionImage}   from './EmptyClearConditionImage';\n\nexport class ClearConditionImageFactory {\n\n    private constructor() {\n        throw new TypeError('This class cannot be instantiated.');\n    }\n\n    /**\n     * Create the {@link ClearConditionImage image}\n     * based on the value received.\n     *\n     * @param builder_or_image the builder, the name or null\n     */\n    public static create(builder_or_image: PossibleImageReceivedOnFactory,): ClearConditionImage {\n        return builder_or_image == null\n            ? EmptyClearConditionImage.get\n            : typeof builder_or_image == 'string'\n                ? new ClearConditionImageBuilder(builder_or_image).setAllGameStyles().build()\n                : builder_or_image.build();\n    }\n\n}\n","import {EMPTY_ARRAY}                       from '../../../util/emptyVariables';\nimport {ImageWithTimesThemesAndGameStyles} from './ImageWithTimesThemesAndGameStyles';\nimport {GameStyles}                        from '../../gameStyle/GameStyles';\nimport {Themes}                            from '../../theme/Themes';\nimport {Times}                             from '../../time/Times';\n\nexport abstract class AbstractImageWithTimesThemesAndGameStyles\n    implements ImageWithTimesThemesAndGameStyles {\n\n    //region -------------------- Fields --------------------\n\n    readonly #map;\n    readonly #defaultImages;\n\n    #everyGameStyles?: readonly GameStyles[];\n    #everyThemes?: readonly Themes[];\n    #everyTimes?: readonly Times[];\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(map: ReadonlyMap<Times, ReadonlyMap<GameStyles, ReadonlyMap<Themes, readonly string[]>>>, defaultImages: ReadonlyMap<GameStyles, readonly string[]>,) {\n        this.#map = map;\n        this.#defaultImages = defaultImages;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _map(): ReadonlyMap<Times, ReadonlyMap<GameStyles, ReadonlyMap<Themes, readonly string[]>>> {\n        return this.#map;\n    }\n\n    protected get _defaultImages(): ReadonlyMap<GameStyles, readonly string[]> {\n        return this.#defaultImages;\n    }\n\n\n    /**\n     * Get every possible {@link GameStyles game style} in the instance.\n     */\n    protected abstract get _createEveryGameStyles(): readonly GameStyles[];\n\n    protected get _everyGameStyles(): readonly GameStyles[] {\n        return this.#everyGameStyles ??= this._createEveryGameStyles;\n    }\n\n    /**\n     * Get every possible {@link Themes theme} in the instance.\n     */\n    protected abstract get _createEveryThemes(): readonly Themes[]\n\n    protected get _everyThemes(): readonly Themes[] {\n        return this.#everyThemes ??= this._createEveryThemes;\n    }\n\n    /**\n     * Get every possible {@link Times time} in the instance.\n     */\n    protected abstract get _createEveryTimes(): readonly Times[]\n\n    protected get _everyTimes(): readonly Times[] {\n        return this.#everyTimes ??= this._createEveryTimes;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public get(expectEmpty: boolean, gameStyle: GameStyles,): readonly string[]\n    public get(expectEmpty: boolean, gameStyle: GameStyles, time: Times,): readonly string[]\n    public get(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes,): readonly string[]\n    public get(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes, time: Times,): readonly string[]\n    public get(expectEmpty: boolean, theme: Themes,): readonly string[]\n    public get(expectEmpty: boolean, theme: Themes, time: Times,): readonly string[]\n    public get(expectEmpty: boolean, time: Times,): readonly string[]\n    public get(expectEmpty: boolean, gameStyle_or_theme_or_time: | GameStyles | Themes | Times, theme_or_time?: | Themes | Times, time?: Times,): readonly string[] {\n        if (gameStyle_or_theme_or_time instanceof GameStyles) {\n            if (theme_or_time == null)\n                return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time,);\n            if (theme_or_time instanceof Themes) {\n                if (time instanceof Times)\n                    return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time, theme_or_time, time,);\n                return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time, theme_or_time,);\n            }\n            if (theme_or_time instanceof Times)\n                return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time, null, theme_or_time,);\n            if (time == null)\n                return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time,);\n            return this._getByGameStyle(expectEmpty, gameStyle_or_theme_or_time, null, time,);\n        }\n        if (gameStyle_or_theme_or_time instanceof Themes) {\n            if (theme_or_time == null)\n                return this._getByTheme(expectEmpty, gameStyle_or_theme_or_time,);\n            if (theme_or_time instanceof Times)\n                return this._getByTheme(expectEmpty, gameStyle_or_theme_or_time, theme_or_time,);\n            return this._getByTheme(expectEmpty, gameStyle_or_theme_or_time,);\n        }\n        return this._getByTime(expectEmpty, gameStyle_or_theme_or_time);\n    }\n\n\n    protected _getSpecificImage(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes, time: Times,): readonly string[] {\n        const imagesFromMap = this._map.get(time)?.get(gameStyle)?.get(theme);\n\n        if (theme === Themes.GROUND && time === Times.DAY)\n            return imagesFromMap ?? this._defaultImages.get(gameStyle)! ?? EMPTY_ARRAY;\n        return expectEmpty\n            ? imagesFromMap ?? EMPTY_ARRAY\n            : imagesFromMap ?? this._defaultImages.get(gameStyle) ?? EMPTY_ARRAY;\n    }\n\n    protected _getByGameStyle(expectEmpty: boolean, gameStyle: GameStyles,): readonly string[]\n    protected _getByGameStyle(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes,): readonly string[]\n    protected _getByGameStyle(expectEmpty: boolean, gameStyle: GameStyles, theme: null, time: Times,): readonly string[]\n    protected _getByGameStyle(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes, time: Times,): readonly string[]\n    protected _getByGameStyle(expectEmpty: boolean, gameStyle: GameStyles, theme?: | Themes | null, time?: Times,): readonly string[] {\n        if (theme == null)\n            return this._everyThemes.map(theme => this._getByGameStyle(expectEmpty, gameStyle, theme,)).flat();\n        if (time == null)\n            return this._everyTimes.map(time => this._getByGameStyle(expectEmpty, gameStyle, theme, time,)).flat();\n\n        return this._getSpecificImage(expectEmpty, gameStyle, theme, time,);\n    }\n\n    protected _getByTheme(expectEmpty: boolean, theme: Themes,): readonly string[]\n    protected _getByTheme(expectEmpty: boolean, theme: Themes, time: Times,): readonly string[]\n    protected _getByTheme(expectEmpty: boolean, theme: Themes, time?: Times,): readonly string[] {\n        if (time == null)\n            return this._everyTimes.map(time => this._getByTheme(expectEmpty, theme, time,)).flat();\n        return this._everyGameStyles.map(gameStyle => this._getByGameStyle(expectEmpty, gameStyle, theme, time,)).flat();\n    }\n\n    protected _getByTime(expectEmpty: boolean, time: Times,): readonly string[]\n    protected _getByTime(expectEmpty: boolean, time: Times,): readonly string[] {\n        return this._everyThemes.map(theme => this._getByTheme(expectEmpty, theme, time,)).flat();\n    }\n\n}","import type {EditorImage} from './EditorImage';\n\nimport {AbstractImageWithTimesThemesAndGameStyles} from '../AbstractImageWithTimesThemesAndGameStyles';\nimport {GameStyles}                                from '../../../gameStyle/GameStyles';\nimport {Themes}                                    from '../../../theme/Themes';\nimport {Times}                                     from '../../../time/Times';\n\nexport class EditorImageContainer\n    extends AbstractImageWithTimesThemesAndGameStyles\n    implements EditorImage {\n\n    public constructor(map: ReadonlyMap<Times, ReadonlyMap<GameStyles, ReadonlyMap<Themes, readonly string[]>>>, defaultImages: ReadonlyMap<GameStyles, readonly string[]>,) {\n        super(map, defaultImages,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected override get _createEveryGameStyles(): readonly GameStyles[] {\n        return GameStyles.values;\n    }\n\n    protected override get _createEveryThemes(): readonly Themes[] {\n        return Themes.courseThemes;\n    }\n\n    protected override get _createEveryTimes(): readonly Times[] {\n        return Times.values;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {Builder}                                                                          from '../../../../util/builder/Builder';\nimport type {EditorImage}                                                                      from './EditorImage';\nimport type {ExtendedList}                                                                     from '../../../../util/extended/ExtendedList';\nimport type {GameStyles as OriginalGameStyles}                                                 from '../../../gameStyle/GameStyles';\nimport type {ImageNumber, PossibleAmountOfImages, SimpleImageName, VariantEditorImage_PowerUp} from './EditorImage.types';\n\nimport {AbstractImageBuilder} from '../AbstractImage.builder';\nimport {EditorImageContainer} from './EditorImage.container';\nimport {EMPTY_MAP}            from '../../../../util/emptyVariables';\nimport {ExtendedSetContainer} from '../../../../util/extended/ExtendedSet.container';\nimport {GameStyles}           from '../GameStyles';\nimport {Themes}               from '../../../theme/Themes';\nimport {Times}                from '../../../time/Times';\n\nexport class EditorImageBuilder<NAME extends Exclude<SimpleImageName, null> = Exclude<SimpleImageName, null>, >\n    extends AbstractImageBuilder<NAME, PossibleAmountOfImages>\n    implements Builder<EditorImage> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #SIMPLE_POWER_UP_ENDING: VariantEditorImage_PowerUp = 'Uni';\n    static readonly #POWER_UP_ENDING: `${VariantEditorImage_PowerUp}_00` = `${this.#SIMPLE_POWER_UP_ENDING}_00`;\n\n    #type: PossibleType;\n    #defaultType: PossibleDefaultType;\n\n    #times?: ExtendedList<Times>;\n    #themes?: ExtendedList<Themes>;\n\n    readonly #selectedMap: Map<Times, Map<GameStyles, Map<Themes, boolean>>>;\n    #overrideDefaultAmount?: Map<GameStyles, PossibleAmountOfImages>;\n    #overrideMap?: Map<Times, Map<GameStyles, Map<Themes, PossibleAmountOfImages>>>;\n\n    //endregion -------------------- Fields --------------------\n\n    /**\n     * <p>\n     *  Create a new {@link Image} with every possible images\n     *  associated to every {@link OriginalGameStyles Game style}.\n     * </p>\n     * <p>\n     *  If the method {@link setAsPowerUp} is called,\n     *  then only 2 images will be created.\n     *  One with `${NAME}_00.png` and another with `${NAME}Uni_00.png`.\n     * </p>\n     * <p>\n     *  If the method {@link setAsSnow} is called,\n     *  then only 1 image will be created for each {@link OriginalGameStyles Game style} used.\n     *  One with `${NAME}_snow_00.png`.\n     * </p>\n     * <p>\n     *  Otherwise, it will depend on the amount of images (by default 1),\n     *  the themes associated to any {@link OriginalGameStyles Game style} used.\n     *  And the {@link OriginalGameStyles Game style} themselves (all by default).\n     * </p>\n     *\n     * @param simpleImageName the basic name\n     */\n    public constructor(simpleImageName: NAME,)\n    /**\n     * Create a new {@link Image} with only 1 image per {@link OriginalGameStyles Game style}.\n     *\n     * The method {@link setAsSnow} can be called to create an image from a specific image number.\n     *\n     * @param simpleImageName the basic name\n     * @param imageNumber the image number (from 1 to 4)\n     */\n    public constructor(simpleImageName: NAME, imageNumber: PossibleAmountOfImages,)\n    public constructor(simpleImageName: NAME, imageNumber?: PossibleAmountOfImages,) {\n        super(simpleImageName, imageNumber,);\n\n        if (imageNumber == null) {\n            this.#type = 1;\n            this.#defaultType = 'ground';\n        } else {\n            this.#type = null;\n            this.#defaultType = imageNumber;\n        }\n\n        this.#selectedMap = new Map(Times.values.map(time => [time,\n            new Map(GameStyles.values.map(gameStyle => [gameStyle,\n                new Map(Themes.courseThemes.map(theme => [theme, false,\n                ])),\n            ])),\n        ]));\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Selected map --------------------\n\n    protected get _selectedMap(): Map<Times, Map<GameStyles, Map<Themes, boolean>>> {\n        return this.#selectedMap;\n    }\n\n    public get selectedMap(): ReadonlyMap<Times, ReadonlyMap<GameStyles, ReadonlyMap<Themes, boolean>>> {\n        return this.#selectedMap;\n    }\n\n    protected _add(times: readonly Times[], gameStyles: readonly OriginalGameStyles[], themes: readonly Themes[],): this {\n        const map = this._selectedMap;\n        const _gameStyles = gameStyles.map(gameStyle => GameStyles.getValue(gameStyle));\n\n        times.forEach(time =>\n            _gameStyles.forEach(gameStyle =>\n                themes.forEach(theme =>\n                    map.get(time)!.get(gameStyle)!.set(theme, true,))\n            )\n        );\n        return this.#addTimes(times)._addGameStyle(_gameStyles).#addThemes(themes);\n    }\n\n    //endregion -------------------- Selected map --------------------\n    //region -------------------- Type / default type --------------------\n\n    protected get _type(): PossibleType {\n        return this.#type;\n    }\n\n    protected get _defaultType(): PossibleDefaultType {\n        return this.#defaultType;\n    }\n\n    protected _setType(value: PossibleType,): this {\n        this.#type = value;\n        return this;\n    }\n\n    protected _setDefaultType(value: PossibleDefaultType,): this {\n        this.#defaultType = value;\n        return this;\n    }\n\n\n    public setAsPowerUp(): this {\n        return this._setType(null)._setDefaultType('power-up');\n    }\n\n    /**\n     * Set the amount of images at the ending of the image name.\n     *\n     * @param value the total amount (excluding the game styles) of possible images\n     */\n    public setAmount(value: PossibleAmountOfImages,): this {\n        return this._setType(value);\n    }\n\n    public hasNoDefaultImage(): this {\n        return this._setDefaultType(null);\n    }\n\n    public setAsSnow(): this {\n        return this._setDefaultType('snow');\n    }\n\n    //endregion -------------------- Type / default type --------------------\n    //region -------------------- Time --------------------\n\n    private get __times(): ExtendedList<Times> {\n        return this.#times ??= new ExtendedSetContainer();\n    }\n\n    protected get _times(): ExtendedList<Times> {\n        return this.#times ?? ExtendedSetContainer.EMPTY;\n    }\n\n    #addTimes(time: Times,): this\n    #addTimes(times: readonly Times[],): this\n    #addTimes(times: | Times | readonly Times[],): this {\n        if (!(times instanceof Array))\n            return this.#addTimes([times]);\n        this.__times.add(...times);\n        return this;\n    }\n\n    //endregion -------------------- Time --------------------\n    //region -------------------- Game Style --------------------\n\n    protected override _setGameStyle(gameStyle: OriginalGameStyles,): this\n    protected override _setGameStyle(gameStyles: readonly OriginalGameStyles[],): this\n    protected override _setGameStyle(gameStyles: readonly OriginalGameStyles[], notGameStyles: readonly OriginalGameStyles[],): this\n    protected override _setGameStyle(gameStyles: | OriginalGameStyles | readonly OriginalGameStyles[], notGameStyles?: readonly OriginalGameStyles[],): this\n    protected override _setGameStyle(gameStyles: | OriginalGameStyles | readonly OriginalGameStyles[], notGameStyles: readonly OriginalGameStyles[] = [],): this {\n        if (!(gameStyles instanceof Array))\n            return this._setGameStyle([gameStyles], notGameStyles,);\n\n        const _gameStyles = gameStyles.map(gameStyle => GameStyles.getValue(gameStyle));\n        const _notGameStyles = notGameStyles.map(gameStyle => GameStyles.getValue(gameStyle));\n\n        return this._clearGameStyle()\n            ._add(Times.values, _gameStyles.filter(gameStyle => !_notGameStyles.includes(gameStyle)), [],);\n    }\n\n    //endregion -------------------- Game Style --------------------\n    //region -------------------- Theme --------------------\n\n    private get __themes(): ExtendedList<Themes> {\n        return this.#themes ??= new ExtendedSetContainer();\n    }\n\n    protected get _themes(): ExtendedList<Themes> {\n        return this.#themes ?? ExtendedSetContainer.EMPTY;\n    }\n\n    #addThemes(theme: Themes,): this\n    #addThemes(themes: readonly Themes[],): this\n    #addThemes(themes: Themes | readonly Themes[],): this {\n        if (!(themes instanceof Array))\n            return this.#addThemes([themes]);\n        this.__themes.add(...themes.map(theme => Themes.getValue(theme)));\n        return this;\n    }\n\n    #setThemes(time: Times, gameStyle: OriginalGameStyles, themes: readonly Themes[], notThemes: readonly Themes[] = [],): this {\n        this.__themes.clear();\n        return this._add([time], [gameStyle], themes.filter(theme => !notThemes.includes(theme)),);\n    }\n\n\n    public setTheme(gameStyle: OriginalGameStyles,): never\n    public setTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this\n    public setTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this {\n        return this.#setThemes(Times.DAY, gameStyle, themes,);\n    }\n\n    public setNotTheme(gameStyle: OriginalGameStyles,): never\n    public setNotTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this\n    public setNotTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this {\n        return this.#setThemes(Times.DAY, gameStyle, Themes.courseThemes, themes,);\n    }\n\n\n    public setNightTheme(gameStyle: OriginalGameStyles,): never\n    public setNightTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this\n    public setNightTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this {\n        return this.#setThemes(Times.NIGHT, gameStyle, themes,);\n    }\n\n    public setNotNightTheme(gameStyle: OriginalGameStyles,): never\n    public setNotNightTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this\n    public setNotNightTheme(gameStyle: OriginalGameStyles, ...themes: readonly Themes[]): this {\n        return this.#setThemes(Times.NIGHT, gameStyle, Themes.courseThemes, themes,);\n    }\n\n    //endregion -------------------- Theme --------------------\n    //region -------------------- Override images --------------------\n\n    private get __overrideImages(): Map<Times, Map<GameStyles, Map<Themes, PossibleAmountOfImages>>> {\n        return this.#overrideMap ??= new Map();\n    }\n\n    protected get _overrideImages(): ReadonlyMap<Times, ReadonlyMap<GameStyles, ReadonlyMap<Themes, PossibleAmountOfImages>>> {\n        return this.#overrideMap ?? EMPTY_MAP;\n    }\n\n    #setOverrideImages(imageNumber: PossibleAmountOfImages, time: | Times | null, gameStyle: OriginalGameStyles, theme: | Themes | null,): this {\n        if (!(gameStyle instanceof GameStyles))\n            return this.#setOverrideImages(imageNumber, time, GameStyles.getValue(gameStyle), theme,);\n\n        const times = time == null ? Times.values : [time] as const;\n        const themes = theme == null ? Themes.courseThemes : [theme] as const;\n\n        const overrideMap = this.__overrideImages;\n\n        times.forEach(time => {\n            if (!overrideMap.has(time))\n                overrideMap.set(time, new Map());\n            const timeMap = overrideMap.get(time)!;\n\n            if (!timeMap.has(gameStyle))\n                timeMap.set(gameStyle, new Map());\n            const gameStyleMap = timeMap.get(gameStyle)!;\n\n            themes.forEach(theme => gameStyleMap.set(theme, imageNumber,));\n        });\n\n        return this;\n    }\n\n\n    private get __overrideDefaultAmounts(): Map<GameStyles, PossibleAmountOfImages> {\n        return this.#overrideDefaultAmount ??= new Map();\n    }\n\n    protected get _overrideDefaultAmounts(): ReadonlyMap<GameStyles, PossibleAmountOfImages> {\n        return this.#overrideDefaultAmount ?? EMPTY_MAP;\n    }\n\n    protected _setOverrideDefaultAmounts(number: PossibleAmountOfImages, gameStyle: OriginalGameStyles,): this {\n        if (!(gameStyle instanceof GameStyles))\n            return this._setOverrideDefaultAmounts(number, GameStyles.getValue(gameStyle),);\n\n        this.__overrideDefaultAmounts.set(gameStyle, number,);\n        return this;\n    }\n\n\n    /**\n     * Set the image number for the specific {@link OriginalGameStyles game style}, {@link Themes theme} & {@link Times time}.\n     *\n     * @param gameStyle the game style\n     * @param theme the theme or every theme if <b>null</b> is received\n     * @param time the time or every time if <b>null</b> is received\n     * @param imageNumber the image number\n     */\n    public setImage(gameStyle: OriginalGameStyles, theme: | Themes | null, time: | Times | null, imageNumber: PossibleAmountOfImages,): this {\n        return this.#setOverrideImages(imageNumber, time, gameStyle, theme,);\n    }\n\n    /**\n     * Set the default amount for the selected {@link OriginalGameStyles game style}.\n     *\n     * @note This will do nothing if there is only 1 image.\n     *\n     * @param gameStyle the game style\n     * @param number the default amount\n     */\n    public setDefaultAmount(gameStyle: OriginalGameStyles, number: PossibleAmountOfImages,): this {\n        return this._setOverrideDefaultAmounts(number, gameStyle,);\n    }\n\n    //endregion -------------------- Override images --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Predefined utility methods --------------------\n\n    public setAsDifferentInSMBAndSMB3(): this {\n        return this\n            .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.GHOST_HOUSE, Themes.CASTLE,)\n            .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERGROUND, Themes.GHOST_HOUSE, Themes.CASTLE,)\n            .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.GROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.AIRSHIP,)\n            .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.GROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.AIRSHIP,);\n    }\n\n    //endregion -------------------- Predefined utility methods --------------------\n    //region -------------------- Build utility methods --------------------\n\n    protected _getImagePath(gameStyle: GameStyles, ending: string = '',) {\n        return `${gameStyle.gamePath_editor}${gameStyle.gameAcronym}_Lyt_P_${this.simpleImageName}${ending}.tiff`;\n    }\n\n    /**\n     * Return an array based on the amount of images received.\n     * They need to be in the specific override of {@link _overrideImages}.\n     *\n     * @param time the time\n     * @param gameStyle the game style\n     * @param theme the theme\n     * @param amountOfImages the amount of images\n     * @protected\n     */\n    protected _getAmountBasedOnValue(time: Times, gameStyle: GameStyles, theme: Themes, amountOfImages: PossibleAmountOfImages,): readonly ImageNumber[]\n    /**\n     * Return an array based on the amount of images received.\n     * But it can be overridden by {@link _overrideImages} if there is one.\n     *\n     * @param time the game style in every possible time (there can only be one)\n     * @param gameStyle the game style\n     * @param theme The game style in every possible theme (there can only be one)\n     * @param amountOfImages the amount of images\n     * @protected\n     */\n    protected _getAmountBasedOnValue(time: null, gameStyle: GameStyles, theme: null, amountOfImages: PossibleAmountOfImages,): readonly ImageNumber[]\n    protected _getAmountBasedOnValue(time: | Times | null, gameStyle: GameStyles, theme: | Themes | null, amountOfImages: PossibleAmountOfImages,): readonly ImageNumber[] {\n        if (time == null || theme == null) {\n            const timeIterator = Times.values.values();\n            let nextTime = timeIterator.next();\n            while (!nextTime.done) {\n                const amount = this._overrideImages.get(nextTime.value)?.get(gameStyle)?.get(Themes.GROUND);\n                if (amount != null)\n                    return [amount - 1 as ImageNumber];\n                nextTime = timeIterator.next();\n            }\n        } else {\n            const amount = this._overrideImages.get(time)?.get(gameStyle)?.get(theme);\n            if (amount != null)\n                return [amount - 1 as ImageNumber];\n        }\n        return [...new Array(this._overrideDefaultAmounts.get(gameStyle) ?? amountOfImages)].map((_value, index,) => index as ImageNumber,);\n    }\n\n\n    protected _createDefaultImages(): ReadonlyMap<OriginalGameStyles, readonly string[]> {\n        const defaultType = this._defaultType;\n\n        switch (typeof defaultType) {\n            case 'string'://ground / snow / power-up\n                const imageNumber = this.imageNumber;\n                const type = this._type;\n\n                switch (defaultType) {\n                    case 'ground':\n                        if (type == null)\n                            throw new TypeError(`The type cannot be null for \"${this.simpleImageName}\" when the default type is set to the ground images.`);\n                        return new Map(this._gameStyles.map(gameStyle => [gameStyle.parent, this._getAmountBasedOnValue(null, gameStyle, null, type,).map(index => this._getImagePath(gameStyle, `_0${index}`,)),]));\n                    case 'snow':\n                        if (imageNumber == null)\n                            throw new TypeError(`The image number cannot null for \"${this.simpleImageName}\" when the default type is set to the snow images.`);\n                        return new Map(this._gameStyles.map(gameStyle => [gameStyle.parent, [this._getImagePath(gameStyle, `_${Themes.SNOW.gameName}_0${imageNumber - 1}`,),],]));\n                    case 'power-up':\n                        if (imageNumber != null)\n                            return new Map(this._gameStyles.map(gameStyle => [\n                                gameStyle.parent,\n                                [this._getImagePath(gameStyle, `_0${imageNumber - 1}`,), this._getImagePath(gameStyle, `${EditorImageBuilder.#SIMPLE_POWER_UP_ENDING}_0${imageNumber - 1}`),],\n                            ]));\n                        return new Map(this._gameStyles.map(gameStyle => [\n                            gameStyle.parent,\n                            [this._getImagePath(gameStyle, '_00',), this._getImagePath(gameStyle, EditorImageBuilder.#POWER_UP_ENDING),],\n                        ]));\n                }\n                break;\n            case'number'://1-4\n                return new Map(this._gameStyles.map(gameStyle => [\n                    gameStyle.parent,\n                    [this._getImagePath(gameStyle, `_0${defaultType - 1}`,),],\n                ]));\n            default://null\n                return EMPTY_MAP;\n        }\n    }\n\n\n    protected _createNewMap(callbackThatReturnNumbers: (time: Times, gameStyle: GameStyles, theme: Themes,) => readonly ImageNumber[],): ReadonlyMap<Times, ReadonlyMap<OriginalGameStyles, ReadonlyMap<Themes, readonly string[]>>> {\n        const returnedMap = new Map<Times, Map<OriginalGameStyles, Map<Themes, readonly string[]>>>();\n\n        this._selectedMap.forEach((timeMap, time,) => {\n            const isNightTheme = time === Times.NIGHT;\n\n            timeMap.forEach((gameStyleMap, gameStyle,) => {\n                    const originalGameStyle = gameStyle.parent;\n\n                    gameStyleMap.forEach((isSelected, theme,) => {\n                        if (!isSelected)\n                            return;\n                        const images = callbackThatReturnNumbers(time, gameStyle, theme,).map(number => this._getImagePath(gameStyle, `${theme.getGameName('', isNightTheme,)}_0${number}`));\n                        if (images.length === 0)\n                            return;\n\n                        if (!returnedMap.has(time))\n                            returnedMap.set(time, new Map());\n                        const timeMap = returnedMap.get(time)!;\n\n                        if (!timeMap.has(originalGameStyle))\n                            timeMap.set(originalGameStyle, new Map());\n                        const gameStyleMap = timeMap.get(originalGameStyle)!;\n\n                        gameStyleMap.set(theme, images);\n                    });\n                }\n            );\n        });\n\n        return returnedMap;\n    }\n\n    protected _createImages(): ReadonlyMap<Times, ReadonlyMap<OriginalGameStyles, ReadonlyMap<Themes, readonly string[]>>> {\n        const imageNumber = this.imageNumber;\n\n        if (imageNumber != null)\n            return this._createNewMap(() => [imageNumber - 1 as ImageNumber]);\n\n        const type = this._type;\n        switch (typeof type) {\n            case 'number'://1-4\n                return this._createNewMap((time, gameStyle, theme,) => this._getAmountBasedOnValue(time, gameStyle, theme, type,),);\n            default://null\n                return EMPTY_MAP;\n        }\n    }\n\n    //endregion -------------------- Build utility methods --------------------\n\n    public build(): EditorImage {\n        return new EditorImageContainer(this._createImages(), this._createDefaultImages(),);\n    }\n\n}\n\n//region -------------------- Types --------------------\n\ntype PossibleType = | PossibleAmountOfImages | null;\ntype PossibleDefaultType = | 'ground' | 'power-up' | 'snow' | PossibleAmountOfImages | null;\n\n//endregion -------------------- Types --------------------\n","import type {EditorImage}                    from './EditorImage';\nimport type {PossibleImageReceivedOnFactory} from './EditorImage.types';\n\nimport {EditorImageBuilder} from './EditorImage.builder';\nimport {EmptyEditorImage}   from './EmptyEditorImage';\n\nexport class EditorImageFactory {\n\n    private constructor() {\n        throw new TypeError('This class cannot be instantiated.');\n    }\n\n    /**\n     * Create the {@link EditorImage image}\n     * based on the value received.\n     *\n     * @param builder_or_image the builder, the name or null\n     */\n    public static create(builder_or_image: PossibleImageReceivedOnFactory,): EditorImage {\n        return builder_or_image == null\n            ? EmptyEditorImage.get\n            : typeof builder_or_image == 'string'\n                ? new EditorImageBuilder(builder_or_image).setAllGameStyles().build()\n                : builder_or_image.build();\n    }\n\n}\n","import type {EditorVoiceSound, PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_European, PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_Regular} from './EditorVoiceSound';\n\nexport class EditorVoiceSoundRegionalContainer\n    implements EditorVoiceSound<PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_Regular, PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_European> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #regularFileName;\n    readonly #europeanFileName;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(regularFileName: PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_Regular, europeanFileName: PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_European,) {\n        this.#regularFileName = regularFileName;\n        this.#europeanFileName = europeanFileName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get fileName(): PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_Regular {\n        return this.#regularFileName;\n    }\n\n    public get europeanFileName(): PossibleFileName_WithVoiceBefore_WithEuropeanAlternative_European {\n        return this.#europeanFileName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {EditorVoiceSound, PossibleFileName, PossibleStartingName_WithVoiceBefore_WithoutEuropeanAlternative} from './EditorVoiceSound';\n\nexport class EditorVoiceSoundSingleContainer\n    implements EditorVoiceSound<PossibleFileName<PossibleStartingName_WithVoiceBefore_WithoutEuropeanAlternative>> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #fileName;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(fileName: PossibleFileName<PossibleStartingName_WithVoiceBefore_WithoutEuropeanAlternative>,) {\n        this.#fileName = fileName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get fileName(): PossibleFileName<PossibleStartingName_WithVoiceBefore_WithoutEuropeanAlternative> {\n        return this.#fileName;\n    }\n\n    public readonly europeanFileName = null;\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {EditorVoiceSound}                                      from './EditorVoiceSound';\nimport type {ClassWithNullObjectPattern, EmptyEditorVoiceSoundName} from '../../util/ClassWithNullObjectPattern';\n\nexport class EmptyEditorVoiceSound\n    implements EditorVoiceSound<null>, ClassWithNullObjectPattern<EmptyEditorVoiceSoundName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEditorVoiceSound;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly fileName = null;\n    public readonly europeanFileName = null;\n\n\n    public toString(): EmptyEditorVoiceSoundName {\n        return 'Empty \"editor voice\" sound';\n    }\n\n}\n","import type {EditorVoiceSound, PossibleSoundReceivedOnFactory} from './EditorVoiceSound';\n\nimport {EditorVoiceSoundRegionalContainer} from './EditorVoiceSound.regional.container';\nimport {EditorVoiceSoundSingleContainer}   from './EditorVoiceSound.single.container';\nimport {EmptyEditorVoiceSound}             from './EmptyEditorVoiceSound';\n\n/**\n * @factory\n */\nexport class EditorVoiceSoundFactory {\n\n    private constructor() {\n        throw new TypeError('This class cannot be instantiated.');\n    }\n\n    /**\n     * Create a new {@link EditorVoiceSound editor voice sound} container\n     * depending on the values received.\n     *\n     * @param sound a single or double {@link EditorVoiceSoundHolder editor voice sound holder} or <i>null</i>.\n     */\n    public static create(sound: PossibleSoundReceivedOnFactory,): EditorVoiceSound {\n        return sound == null\n            ? EmptyEditorVoiceSound.get\n            : sound instanceof Array\n                ? new EditorVoiceSoundRegionalContainer(sound[0].fileName, sound[1].fileName,)\n                : new EditorVoiceSoundSingleContainer(sound.fileName);\n    }\n\n}\n","import type {PossibleFileName, PossibleStartingName_WithSingingPartBefore, PossibleStartingName_WithVoiceBefore} from '../EditorVoiceSound';\nimport type {EditorVoiceSoundHolder}                                                                             from './EditorVoiceSoundHolder';\n\nexport abstract class AbstractEditorVoiceSoundHolder<T extends PossibleStartingName_WithVoiceBefore, U extends PossibleStartingName_WithSingingPartBefore, >\n    implements EditorVoiceSoundHolder<PossibleFileName<T, U>> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #simpleFileName;\n    #fileName?: PossibleFileName<T, U>;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(fileName: | T | U,) {\n        this.#simpleFileName = fileName;\n    }\n\n    //region -------------------- Getter & creator methods --------------------\n\n    protected get _simpleFileName(): | T | U {\n        return this.#simpleFileName;\n    }\n\n    protected abstract _createFileName(): PossibleFileName<T, U>;\n\n    public get fileName(): PossibleFileName<T, U> {\n        return this.#fileName ??= this._createFileName();\n    }\n\n    //endregion -------------------- Getter & creator methods --------------------\n\n}\n","import type {PossibleFileName, PossibleStartingName_WithSingingPartBefore} from '../EditorVoiceSound';\n\nimport {AbstractEditorVoiceSoundHolder} from './AbstractEditorVoiceSoundHolder';\nimport {BASE_PATH}                      from '../../../variables';\n\nexport class EditorVoiceSoundHolderWithSingingPartBefore<U extends PossibleStartingName_WithSingingPartBefore = PossibleStartingName_WithSingingPartBefore, >\n    extends AbstractEditorVoiceSoundHolder<never, U> {\n\n    public constructor(fileName: U,) {\n        super(fileName);\n    }\n\n    //region -------------------- Creator methods --------------------\n\n    protected override _createFileName(): PossibleFileName<never, U> {\n        return `/${BASE_PATH}/editor voice/se_ui_singingparts_${this._simpleFileName}.wav`;\n    }\n\n    //endregion -------------------- Creator methods --------------------\n\n}\n","import type {PossibleFileName, PossibleStartingName_WithVoiceBefore} from '../EditorVoiceSound';\n\nimport {AbstractEditorVoiceSoundHolder} from './AbstractEditorVoiceSoundHolder';\nimport {BASE_PATH}                      from '../../../variables';\n\nexport class EditorVoiceSoundHolderWithVoiceBefore<T extends PossibleStartingName_WithVoiceBefore = PossibleStartingName_WithVoiceBefore, >\n    extends AbstractEditorVoiceSoundHolder<T, never> {\n\n    public constructor(fileName: T) {\n        super(fileName);\n    }\n\n    //region -------------------- Creator methods --------------------\n\n    protected override _createFileName(): PossibleFileName<T, never> {\n        return `/${BASE_PATH}/editor voice/voice_${this._simpleFileName}.wav`;\n    }\n\n    //endregion -------------------- Creator methods --------------------\n\n}\n","import type {EntityReferenceHolder, PossibleEntityReferences, PossibleEntityReferences_Received} from './EntityReferenceHolder';\nimport type {ObjectHolder}                                                                       from '../../../util/holder/ObjectHolder';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_ARRAY}                  from '../../../util/emptyVariables';\nimport {Import}                       from '../../../util/DynamicImporter';\nimport {ObjectHolderContainer}        from '../../../util/holder/ObjectHolder.container';\n\n/**\n * @classWithDynamicImport {@link Entities}\n */\nexport class EntityReferenceHolderContainer\n    implements EntityReferenceHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #references: ObjectHolder<PossibleEntityReferences>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(references: PossibleEntityReferences_Received,) {\n        this.#references = references.length === 1\n            ? new DelayedObjectHolderContainer(() => {\n                const reference = Import.Entities.getValue(references[0]);\n                return reference == null ? EMPTY_ARRAY : [reference];\n            })\n            : new ObjectHolderContainer(references);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    public get references(): PossibleEntityReferences {\n        return this.#references.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ClassWithEditorVoiceSound}                                                                                                                                                                  from './ClassWithEditorVoiceSound';\nimport type {ClassWithEnglishName}                                                                                                                                                                       from '../ClassWithEnglishName';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EditorVoices.types';\nimport type {Enumerable}                                                                                                                                                                                 from '../../util/enum/Enumerable';\nimport type {EntityReferenceHolder, PossibleEntityReferences_Received}                                                                                                                                   from './holder/EntityReferenceHolder';\nimport type {EditorVoiceSound, PossibleSoundReceivedOnFactory}                                                                                                                                           from './EditorVoiceSound';\nimport type {StaticReference}                                                                                                                                                                            from '../../util/enum/Enum.types';\nimport type {ObjectHolder}                                                                                                                                                                               from '../../util/holder/ObjectHolder';\n\nimport {DelayedObjectHolderContainer}                from '../../util/holder/DelayedObjectHolder.container';\nimport {EditorVoiceSoundFactory}                     from './EditorVoiceSound.factory';\nimport {EditorVoiceSoundHolderWithSingingPartBefore} from './holder/EditorVoiceSoundHolderWithSingingPartBefore';\nimport {EditorVoiceSoundHolderWithVoiceBefore}       from './holder/EditorVoiceSoundHolderWithVoiceBefore';\nimport type {Entities}                               from '../entity/Entities';\nimport {EntityReferenceHolderContainer}              from './holder/EntityReferenceHolder.container';\nimport {Enum}                                        from '../../util/enum/Enum';\nimport {Import}                                      from '../../util/DynamicImporter';\nimport {StringContainer}                             from '../../util/StringContainer';\n\n/**\n * @todo change the english name to the enum name for the _createEntityReference\n * @recursiveReference {@link Entities}\n * @classWithDynamicImport {@link Entities}\n */\nexport class EditorVoices\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithEditorVoiceSound {\n\n    //region -------------------- Enum instances --------------------\n\n    //region -------------------- Ground / Pipe / Spike / Platform --------------------\n\n    public static readonly GROUND =                   new EditorVoices('Ground',                   () => new EditorVoiceSoundHolderWithVoiceBefore('ground',),);\n    public static readonly START_GROUND =             new EditorVoices('Start Ground',             () => new EditorVoiceSoundHolderWithVoiceBefore('startground',),);\n    public static readonly GOAL_GROUND =              new EditorVoices('Goal Ground',              () => new EditorVoiceSoundHolderWithVoiceBefore('goalground',),);\n    public static readonly STEEP_SLOPE =              new EditorVoices('Steep Slope',              () => new EditorVoiceSoundHolderWithSingingPartBefore('steepslope',),);\n    public static readonly GENTLE_SLOPE =             new EditorVoices('Gentle Slope',             () => new EditorVoiceSoundHolderWithSingingPartBefore('gentleslope',),);\n\n    public static readonly PIPE =                     new EditorVoices('Pipe',                     () => new EditorVoiceSoundHolderWithVoiceBefore('pipe',),);\n    public static readonly CLEAR_PIPE =               new EditorVoices('Clear Pipe',               () => new EditorVoiceSoundHolderWithSingingPartBefore('ClearPipe',),);\n\n    public static readonly SPIKE_TRAP =               new EditorVoices('Spike Trap',               () => new EditorVoiceSoundHolderWithVoiceBefore('spiketrap',),);\n    public static readonly JELECTRO =                 new EditorVoices('Jelectro',                 () => new EditorVoiceSoundHolderWithVoiceBefore('jellelectro',),);\n    public static readonly SEA_URCHIN =               new EditorVoices('Sea Urchin',               () => new EditorVoiceSoundHolderWithVoiceBefore('seaechinus',),);\n    public static readonly SPIKE_BLOCK =              new EditorVoices('Spike Block',              () => new EditorVoiceSoundHolderWithSingingPartBefore('SpikeBlock',),);\n\n    public static readonly MUSHROOM_PLATFORM =        new EditorVoices('Mushroom Platform',        () => new EditorVoiceSoundHolderWithVoiceBefore('mushroomplatform',),);\n    public static readonly SEMISOLID_PLATFORM =       new EditorVoices('Semisolid Platform',       () => new EditorVoiceSoundHolderWithVoiceBefore('semisolidplatform',),);\n    public static readonly BRIDGE =                   new EditorVoices('Bridge',                   () => new EditorVoiceSoundHolderWithVoiceBefore('bridge',),);\n\n    //endregion -------------------- Ground / Pipe / Spike / Platform --------------------\n    //region -------------------- Block / Coin --------------------\n\n    public static readonly BLOCK =                    new class EditorVoices_Block extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.BRICK_BLOCK, Import.Entities.CRISTAL_BLOCK, Import.Entities.ROTATING_BLOCK,];\n        }\n\n    }('Block', () => new EditorVoiceSoundHolderWithVoiceBefore('block',),);\n\n    public static readonly HARD_BLOCK =               new class EditorVoices_HardBlock extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.HARD_BLOCK, Import.Entities.ROCK_BLOCK,];\n        }\n\n    }('Hard Block', () => new EditorVoiceSoundHolderWithVoiceBefore('hardblock',),);\n\n    public static readonly QUESTION_MARK_BLOCK =      new EditorVoices('? Block',                  () => new EditorVoiceSoundHolderWithVoiceBefore('questionblock',),);\n    public static readonly HIDDEN_BLOCK =             new EditorVoices('Hidden Block',             () => new EditorVoiceSoundHolderWithVoiceBefore('hiddenblock',),);\n\n    public static readonly EXCLAMATION_MARK_BLOCK =   new EditorVoices('! Block',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('!Block',),);\n\n    public static readonly NOTE_BLOCK =               new EditorVoices('Note Block',               () => new EditorVoiceSoundHolderWithVoiceBefore('noteblock',),);\n\n    public static readonly DONUT_BLOCK =              new EditorVoices('Donut Block',              () => new EditorVoiceSoundHolderWithVoiceBefore('donutblock',),);\n\n    public static readonly CLOUD_BLOCK =              new EditorVoices('Cloud Block',              () => new EditorVoiceSoundHolderWithVoiceBefore('cloudblock',),);\n\n    public static readonly ON_OFF_SWITCH =            new EditorVoices('ON/OFF Switch',            () => new EditorVoiceSoundHolderWithSingingPartBefore('ONOFFswitch',),);\n    public static readonly DOTTED_LINE_BLOCK =        new EditorVoices('Dotted-Line Block',        () => new EditorVoiceSoundHolderWithSingingPartBefore('Dotted-LineBlock_nr',),);\n\n    public static readonly P_BLOCK =                  new EditorVoices('P Block',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('PBlock',),);\n\n    public static readonly BLINKING_BLOCK =           new EditorVoices('Blinking Block',           () => new EditorVoiceSoundHolderWithSingingPartBefore('BlinkingBlock',),);\n\n    public static readonly ICE_BLOCK =                new EditorVoices('Ice Block',                () => new EditorVoiceSoundHolderWithVoiceBefore('iceblock2',),);\n    public static readonly ICICLE =                   new EditorVoices('Icicle',                   () => new EditorVoiceSoundHolderWithSingingPartBefore('icicle',),);\n\n    public static readonly COIN =                     new EditorVoices('Coin',                     () => new EditorVoiceSoundHolderWithVoiceBefore('coin',),);\n    public static readonly FROZEN_COIN =              new EditorVoices('Frozen Coin',              () => new EditorVoiceSoundHolderWithSingingPartBefore('FrozenCoin',),);\n    public static readonly TEN_COIN =                 new EditorVoices('10-Coin',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('10-coin',),);\n    public static readonly THIRTY_COIN =              new EditorVoices('30-Coin',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('30-coin',),);\n    public static readonly FIFTY_COIN =               new EditorVoices('50-Coin',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('50-coin',),);\n    public static readonly PINK_COIN =                new EditorVoices('Pink Coin',                () => new EditorVoiceSoundHolderWithSingingPartBefore('pinkcoin',),);\n\n    //endregion -------------------- Block / Coin --------------------\n    //region -------------------- Power-up / Yoshi / Shoe + projectiles & player --------------------\n\n    public static readonly SUPER_MUSHROOM =           new EditorVoices('Super Mushroom',           () => new EditorVoiceSoundHolderWithVoiceBefore('supermushroom',),);\n    public static readonly SUPER_MARIO =              new EditorVoices('Super Mario',              () => new EditorVoiceSoundHolderWithVoiceBefore('supermario',),);\n    public static readonly SUPER_LUIGI =              new EditorVoices('Super Luigi',              () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperLuigi',),);\n    public static readonly SUPER_TOAD =               new EditorVoices('Super Toad',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperToad',),);\n    public static readonly SUPER_TOADETTE =           new EditorVoices('Super Toadette',           () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperToadette',),);\n\n    public static readonly FIRE_FLOWER =              new EditorVoices('Fire Flower',              () => new EditorVoiceSoundHolderWithVoiceBefore('fireflower',),);\n    public static readonly FIRE_MARIO =               new EditorVoices('Fire Mario',               () => new EditorVoiceSoundHolderWithVoiceBefore('firemario',),);\n    public static readonly FIRE_LUIGI =               new EditorVoices('Fire Luigi',               () => new EditorVoiceSoundHolderWithSingingPartBefore('FireLuigi',),);\n    public static readonly FIRE_TOAD =                new EditorVoices('Fire Toad',                () => new EditorVoiceSoundHolderWithSingingPartBefore('FireToad',),);\n    public static readonly FIRE_TOADETTE =            new EditorVoices('Fire Toadette',            () => new EditorVoiceSoundHolderWithSingingPartBefore('FireToadette',),);\n\n    public static readonly SUPERBALL_FLOWER =         new EditorVoices('Superball Flower',         () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperballFlower',),);\n    public static readonly SUPERBALL_MARIO =          new EditorVoices('Superball Mario',          () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperballMario',),);\n    public static readonly SUPERBALL_LUIGI =          new EditorVoices('Superball Luigi',          () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperballLuigi',),);\n    public static readonly SUPERBALL_TOAD =           new EditorVoices('Superball Toad',           () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperballToad',),);\n    public static readonly SUPERBALL_TOADETTE =       new EditorVoices('Superball Toadette',       () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperballToadette',),);\n\n    public static readonly MYSTERY_MUSHROOM =         new EditorVoices('Mystery Mushroom',         () => new EditorVoiceSoundHolderWithVoiceBefore('mysterymushroom',),);\n    public static readonly COSTUME_MARIO =            new EditorVoices('Costume Mario',            () => new EditorVoiceSoundHolderWithVoiceBefore('costumemario',),);\n\n    public static readonly WEIRD_MUSHROOM =           new EditorVoices('Weird Mushroom',           () => new EditorVoiceSoundHolderWithVoiceBefore('weiredmashroom',),);\n    public static readonly WEIRD_MARIO =              new EditorVoices('Weird Mario',              () => new EditorVoiceSoundHolderWithVoiceBefore('weiredmario',),);\n\n    public static readonly MASTER_SWORD =             new EditorVoices('Master Sword',             () => new EditorVoiceSoundHolderWithSingingPartBefore('MasterSword',),);\n    public static readonly LINK =                     new EditorVoices('Link',                     () => new EditorVoiceSoundHolderWithSingingPartBefore('Link',),);\n\n    public static readonly BIG_MUSHROOM_SMM1 =        new class EditorVoices_BigMushroomSMM1 extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.BIG_MUSHROOM_CLASSIC, Import.Entities.BIG_MUSHROOM_MODERN,];\n        }\n\n    }('Big Mushroom (SMM1)', () => new EditorVoiceSoundHolderWithVoiceBefore('bigmashroom',),);\n    public static readonly BIG_MUSHROOM_SMM2 =        new class EditorVoices_BigMushroomSMM2 extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.BIG_MUSHROOM,];\n        }\n\n    }('Big Mushroom (SMM2)', () => new EditorVoiceSoundHolderWithSingingPartBefore('BigMushroom',),);\n    public static readonly BIG_MARIO =                new EditorVoices('Big Mario',                () => new EditorVoiceSoundHolderWithVoiceBefore('bigmario',),);\n    public static readonly BIG_LUIGI =                new EditorVoices('Big Luigi',                () => new EditorVoiceSoundHolderWithSingingPartBefore('BigLuigi',),);\n    public static readonly BIG_TOAD =                 new EditorVoices('Big Toad',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('BigToad',),);\n    public static readonly BIG_TOADETTE =             new EditorVoices('Big Toadette',             () => new EditorVoiceSoundHolderWithSingingPartBefore('BigToadette',),);\n\n    public static readonly SMB2_MUSHROOM =            new EditorVoices('SMB2 Mushroom',            () => new EditorVoiceSoundHolderWithSingingPartBefore('SMB2Mushroom',),);\n    public static readonly SMB2_MARIO =               new EditorVoices('SMB2 Mario',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SMB2Mario',),);\n    public static readonly SMB2_LUIGI =               new EditorVoices('SMB2 Luigi',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SMB2Luigi',),);\n    public static readonly SMB2_TOAD =                new EditorVoices('SMB2 Toad',                () => new EditorVoiceSoundHolderWithSingingPartBefore('SMB2Toad',),);\n    public static readonly SMB2_TOADETTE =            new EditorVoices('SMB2 Toadette',            () => new EditorVoiceSoundHolderWithSingingPartBefore('SMB2Toadette',),);\n\n    public static readonly SUPER_LEAF =               new EditorVoices('Super Leaf',               () => new EditorVoiceSoundHolderWithVoiceBefore('superleaf',),);\n    public static readonly RACCOON_MARIO =            new EditorVoices('Raccoon Mario',            () => new EditorVoiceSoundHolderWithVoiceBefore('lacoonmario',),);\n    public static readonly RACCOON_LUIGI =            new EditorVoices('Raccoon Luigi',            () => new EditorVoiceSoundHolderWithSingingPartBefore('RaccoonLuigi',),);\n    public static readonly RACCOON_TOAD =             new EditorVoices('Raccoon Toad',             () => new EditorVoiceSoundHolderWithSingingPartBefore('RaccoonToad',),);\n    public static readonly RACCOON_TOADETTE =         new EditorVoices('Raccoon Toadette',         () => new EditorVoiceSoundHolderWithSingingPartBefore('RaccoonToadette',),);\n\n    public static readonly FROG_SUIT =                new EditorVoices('Frog Suit',                () => new EditorVoiceSoundHolderWithSingingPartBefore('FrogSuit',),);\n    public static readonly FROG_MARIO =               new EditorVoices('Frog Mario',               () => new EditorVoiceSoundHolderWithSingingPartBefore('FrogMario',),);\n    public static readonly FROG_LUIGI =               new EditorVoices('Frog Luigi',               () => new EditorVoiceSoundHolderWithSingingPartBefore('FrogLuigi',),);\n    public static readonly FROG_TOAD =                new EditorVoices('Frog Toad',                () => new EditorVoiceSoundHolderWithSingingPartBefore('FrogToad',),);\n    public static readonly FROG_TOADETTE =            new EditorVoices('Frog Toadette',            () => new EditorVoiceSoundHolderWithSingingPartBefore('FrogToadette',),);\n\n    public static readonly CAPE_FEATHER =             new EditorVoices('Cape Feather',             () => new EditorVoiceSoundHolderWithVoiceBefore('capefeather',),);\n    public static readonly CAPE_MARIO =               new EditorVoices('Cape Mario',               () => new EditorVoiceSoundHolderWithVoiceBefore('capemario',),);\n    public static readonly CAPE_LUIGI =               new EditorVoices('Cape Luigi',               () => new EditorVoiceSoundHolderWithSingingPartBefore('CapeLuigi',),);\n    public static readonly CAPE_TOAD =                new EditorVoices('Cape Toad',                () => new EditorVoiceSoundHolderWithSingingPartBefore('CapeToad',),);\n    public static readonly CAPE_TOADETTE =            new EditorVoices('Cape Toadette',            () => new EditorVoiceSoundHolderWithSingingPartBefore('CapeToadette',),);\n\n    public static readonly POWER_BALLOON =            new EditorVoices('Power Balloon',            () => new EditorVoiceSoundHolderWithSingingPartBefore('PowerBalloon',),);\n    public static readonly BALLOON_MARIO =            new EditorVoices('Balloon Mario',            () => new EditorVoiceSoundHolderWithSingingPartBefore('BalloonMario',),);\n    public static readonly BALLOON_LUIGI =            new EditorVoices('Balloon Luigi',            () => new EditorVoiceSoundHolderWithSingingPartBefore('BalloonLuigi',),);\n    public static readonly BALLOON_TOAD =             new EditorVoices('Balloon Toad',             () => new EditorVoiceSoundHolderWithSingingPartBefore('BalloonToad',),);\n    public static readonly BALLOON_TOADETTE =         new EditorVoices('Balloon Toadette',         () => new EditorVoiceSoundHolderWithSingingPartBefore('BalloonToadette',),);\n\n    public static readonly PROPELLER_MUSHROOM =       new EditorVoices('Propeller Mushroom',       () => new EditorVoiceSoundHolderWithVoiceBefore('propellermushroom',),);\n    public static readonly PROPELLER_MARIO =          new EditorVoices('Propeller Mario',          () => new EditorVoiceSoundHolderWithVoiceBefore('propellermario',),);\n    public static readonly PROPELLER_LUIGI =          new EditorVoices('Propeller Luigi',          () => new EditorVoiceSoundHolderWithSingingPartBefore('PropellerLuigi',),);\n    public static readonly PROPELLER_TOAD =           new EditorVoices('Propeller Toad',           () => new EditorVoiceSoundHolderWithSingingPartBefore('PropellerToad',),);\n    public static readonly PROPELLER_TOADETTE =       new EditorVoices('Propeller Toadette',       () => new EditorVoiceSoundHolderWithSingingPartBefore('PropellerToadette',),);\n\n    public static readonly SUPER_ACORN =              new EditorVoices('Super Acorn',              () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperAcorn',),);\n    public static readonly FLYING_SQUIRREL_MARIO =    new EditorVoices('Flying Squirrel Mario',    () => new EditorVoiceSoundHolderWithSingingPartBefore('FlyingSquirrelMario',),);\n    public static readonly FLYING_SQUIRREL_LUIGI =    new EditorVoices('Flying Squirrel Luigi',    () => new EditorVoiceSoundHolderWithSingingPartBefore('FlyingSquirrelLuigi',),);\n    public static readonly FLYING_SQUIRREL_TOAD =     new EditorVoices('Flying Squirrel Toad',     () => new EditorVoiceSoundHolderWithSingingPartBefore('FlyingSquirrelToad',),);\n    public static readonly FLYING_SQUIRREL_TOADETTE = new EditorVoices('Flying Squirrel Toadette', () => new EditorVoiceSoundHolderWithSingingPartBefore('FlyingSquirrelToadette',),);\n\n    public static readonly SUPER_BELL =               new EditorVoices('Super Bell',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperBell',),);\n    public static readonly CAT_MARIO =                new EditorVoices('Cat Mario',                () => new EditorVoiceSoundHolderWithSingingPartBefore('CatMario',),);\n    public static readonly CAT_LUIGI =                new EditorVoices('Cat Luigi',                () => new EditorVoiceSoundHolderWithSingingPartBefore('CatLuigi',),);\n    public static readonly CAT_TOAD =                 new EditorVoices('Cat Toad',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('CatToad',),);\n    public static readonly CAT_TOADETTE =             new EditorVoices('Cat Toadette',             () => new EditorVoiceSoundHolderWithSingingPartBefore('CatToadette',),);\n\n    public static readonly SUPER_HAMMER =             new EditorVoices('Super Hammer',             () => new EditorVoiceSoundHolderWithSingingPartBefore('SuperHammer',),);\n    public static readonly BUILDER_MARIO =            new EditorVoices('Builder Mario',            () => new EditorVoiceSoundHolderWithSingingPartBefore('BuilderMario',),);\n    public static readonly BUILDER_LUIGI =            new EditorVoices('Builder Luigi',            () => new EditorVoiceSoundHolderWithSingingPartBefore('BuilderLuigi',),);\n    public static readonly BUILDER_TOAD =             new EditorVoices('Builder Toad',             () => new EditorVoiceSoundHolderWithSingingPartBefore('BuilderToad',),);\n    public static readonly BUILDER_TOADETTE =         new EditorVoices('Builder Toadette',         () => new EditorVoiceSoundHolderWithSingingPartBefore('BuilderToadette',),);\n\n    public static readonly BOOMERANG_FLOWER =         new EditorVoices('Boomerang Flower',         () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomerangFlower',),);\n    public static readonly BOOMERANG_MARIO =          new EditorVoices('Boomerang Mario',          () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomerangMario',),);\n    public static readonly BOOMERANG_LUIGI =          new EditorVoices('Boomerang Luigi',          () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomerangLuigi',),);\n    public static readonly BOOMERANG_TOAD =           new EditorVoices('Boomerang Toad',           () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomerangToad',),);\n    public static readonly BOOMERANG_TOADETTE =       new EditorVoices('Boomerang Toadette',       () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomerangToadette',),);\n\n    public static readonly CANNON_BOX =               new EditorVoices('Cannon Box',               () => new EditorVoiceSoundHolderWithSingingPartBefore('CannonBox',),);\n    public static readonly PROPELLER_BOX =            new EditorVoices('Propeller Box',            () => new EditorVoiceSoundHolderWithSingingPartBefore('PropellerBox',),);\n    public static readonly GOOMBA_MASK =              new EditorVoices('Goomba Mask',              () => new EditorVoiceSoundHolderWithSingingPartBefore('GoombaMask',),);\n    public static readonly BULLET_BILL_MASK =         new EditorVoices('Bullet Bill Mask',         () => new EditorVoiceSoundHolderWithSingingPartBefore('BulletBillMask',),);\n    public static readonly RED_POW_BOX =              new EditorVoices('Red POW Box',              () => new EditorVoiceSoundHolderWithSingingPartBefore('RedPOWBox',),);\n\n    public static readonly SUPER_STAR =               new EditorVoices('Super Star',               () => new EditorVoiceSoundHolderWithVoiceBefore('superstar',),);\n\n    public static readonly ONE_UP_MUSHROOM =          new EditorVoices('1-Up Mushroom',            () => new EditorVoiceSoundHolderWithVoiceBefore('oneupmushroom',),);\n    public static readonly ROTTEN_MUSHROOM =          new EditorVoices('Rotten Mushroom',          () => new EditorVoiceSoundHolderWithSingingPartBefore('RottenMushroom',),);\n\n    public static readonly SHOE_GOOMBA =              new EditorVoices('Shoe Goomba',              () => new EditorVoiceSoundHolderWithVoiceBefore('shoegoomba',),);\n    public static readonly STILETTO_GOOMBA =          new EditorVoices('Stiletto Goomba',          () => new EditorVoiceSoundHolderWithVoiceBefore('stilettogoomba',),);\n    public static readonly YOSHI_EGG =                new EditorVoices('Yoshi\\'s Egg',             () => new EditorVoiceSoundHolderWithVoiceBefore('yoshiegg',),);\n    public static readonly RED_YOSHI_EGG =            new EditorVoices('Red Yoshi\\'s Egg',         () => new EditorVoiceSoundHolderWithSingingPartBefore('BigRedYoshisEgg',),);\n\n    //endregion -------------------- Power-up / Yoshi / Shoe + projectiles & player --------------------\n    //region -------------------- General enemies --------------------\n\n    public static readonly GOOMBA =                   new EditorVoices('Goomba',                   () => new EditorVoiceSoundHolderWithVoiceBefore('goomba',),);\n    public static readonly GALOOMBA =                 new EditorVoices('Galoomba',                 () => new EditorVoiceSoundHolderWithVoiceBefore('galoomba',),);\n    public static readonly GOOMBRAT =                 new EditorVoices('Goombrat',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('Goombrat',),);\n    public static readonly GOOMBUD =                  new EditorVoices('Goombud',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('Goombud',),);\n\n    public static readonly KOOPA_TROOPA =             new class EditorVoices_KoopaTroopa extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.GREEN_KOOPA_TROOPA, Import.Entities.RED_KOOPA_TROOPA,];\n        }\n\n    }('Koopa Troopa', () => new EditorVoiceSoundHolderWithVoiceBefore('koopatrooper',),);\n\n    public static readonly DRY_BONES =                new class EditorVoices_DryBones extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.DRY_BONES, Import.Entities.PARABONES,];\n        }\n\n    }('Dry Bones', () => new EditorVoiceSoundHolderWithVoiceBefore('drybones',),);\n    public static readonly DRY_BONES_SHELL =          new EditorVoices('Dry Bones Shell',          () => new EditorVoiceSoundHolderWithSingingPartBefore('DryBonesShell',),);\n\n    public static readonly BUZZY_BEETLE =             new class EditorVoices_BuzzyBeetle extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.BUZZY_BEETLE, Import.Entities.PARA_BEETLE, Import.Entities.BUZZY_SHELL,];\n        }\n\n    }('Buzzy Beetle', () => new EditorVoiceSoundHolderWithVoiceBefore('buzzybeatle',),);\n\n    public static readonly SPINY =                    new class EditorVoices_Spiny extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.SPINY, Import.Entities.WINGED_SPINY, Import.Entities.SPINY_EGG, Import.Entities.SPINY_SHELL,];\n        }\n\n    }('Spiny', () => new EditorVoiceSoundHolderWithVoiceBefore('spiny',),);\n\n    public static readonly SPIKE_TOP =                new class EditorVoices_SpikeTop extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.SPIKE_TOP, Import.Entities.WINGED_SPIKE_TOP, Import.Entities.FAST_SPIKE_TOP, Import.Entities.FAST_WINGED_SPIKE_TOP,];\n        }\n\n    }('Spike Top', () => new EditorVoiceSoundHolderWithVoiceBefore('spiketop',),);\n\n    public static readonly SKIPSQUEAK =               new EditorVoices('Skipsqueak',               () => new EditorVoiceSoundHolderWithSingingPartBefore('Skipsqueak',),);\n    public static readonly SPINY_SKIPSQUEAK =         new EditorVoices('Spiny Skipsqueak',         () => new EditorVoiceSoundHolderWithSingingPartBefore('SpinySkipsqueak',),);\n\n    public static readonly ANT_TROOPER =              new EditorVoices('Ant Trooper',              () => new EditorVoiceSoundHolderWithSingingPartBefore('AntTrooper',),);\n    public static readonly HORNED_ANT_TROOPER =       new EditorVoices('Horned Ant Trooper',       () => new EditorVoiceSoundHolderWithSingingPartBefore('HornedAntTrooper',),);\n\n    public static readonly STINGBY =                  new EditorVoices('Stingby',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('Stingby',),);\n\n    public static readonly CHEEP_CHEEP =              new class EditorVoices_CheepCheep extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.CHEEP_CHEEP, Import.Entities.BLURPS, Import.Entities.DEEP_CHEEP,];\n        }\n\n    }('Cheep Cheep', () => new EditorVoiceSoundHolderWithVoiceBefore('cheapcheap',),);\n    public static readonly FISH_BONE =                new EditorVoices('Fish Bone',                () => new EditorVoiceSoundHolderWithSingingPartBefore('FishBones',),);\n\n    public static readonly BLOOPER =                  new EditorVoices('Blooper',                  () => new EditorVoiceSoundHolderWithVoiceBefore('blooper',),);\n    public static readonly BLOOPER_NANNY =            new EditorVoices('Blooper Nanny',            () => new EditorVoiceSoundHolderWithSingingPartBefore('BlooperNanny',),);\n\n    public static readonly PORCUPUFFER =              new EditorVoices('Porcupuffer',              () => new EditorVoiceSoundHolderWithSingingPartBefore('Porcupuffer',),);\n\n    public static readonly WIGGLER =                  new EditorVoices('Wiggler',                  () => new EditorVoiceSoundHolderWithVoiceBefore('wiggler',),);\n    public static readonly ANGRY_WIGGLER =            new EditorVoices('Angry Wiggler',            () => new EditorVoiceSoundHolderWithSingingPartBefore('AngryWiggler',),);\n\n    public static readonly PIRANHA_PLANT =            new EditorVoices('Piranha Plant',            () => new EditorVoiceSoundHolderWithVoiceBefore('piranhaplant',),);\n    public static readonly JUMPING_PIRANHA_PLANT =    new EditorVoices('Jumping Piranha Plant',    () => new EditorVoiceSoundHolderWithVoiceBefore('jumpingpiranhaplant',),);\n    public static readonly FIRE_PIRANHA_PLANT =       new EditorVoices('Fire Piranha Plant',       () => new EditorVoiceSoundHolderWithVoiceBefore('firepiranhaplant',),);\n    public static readonly MUNCHER =                  new EditorVoices('Muncher',                  () => new EditorVoiceSoundHolderWithVoiceBefore('monchar',),);\n    public static readonly PIRANHA_CREEPER =          new EditorVoices('Piranha Creeper',          () => new EditorVoiceSoundHolderWithSingingPartBefore('PiranhaCreeper',),);\n\n    public static readonly CHAIN_CHOMP =              new EditorVoices('Chain Chomp',              () => new EditorVoiceSoundHolderWithVoiceBefore('chainchomp',),);\n    public static readonly UNCHAINED_CHOMP =          new EditorVoices('Unchained Chomp',          () => new EditorVoiceSoundHolderWithSingingPartBefore('UnchainedChomp',),);\n\n    public static readonly SPIKE =                    new EditorVoices('Spike',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Spike',),);\n    public static readonly SPIKE_BALL =               new EditorVoices('Spike Ball',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SpikeBall',),);\n    public static readonly SNOWBALL =                 new EditorVoices('Snowball',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('SnowBall',),);\n\n    public static readonly LAKITU =                   new EditorVoices('Lakitu',                   () => new EditorVoiceSoundHolderWithVoiceBefore('lakitu',),);\n    public static readonly LAKITU_CLOUD =             new EditorVoices('Lakitu\\'s Cloud',          () => new EditorVoiceSoundHolderWithVoiceBefore('lakitucloud',),);\n\n    public static readonly BOO =                      new EditorVoices('Boo',                      () => new EditorVoiceSoundHolderWithVoiceBefore('boo',),);\n    public static readonly STRETCH =                  new EditorVoices('Stretch',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('Stretch',),);\n    public static readonly BOO_BUDDIES =              new EditorVoices('Boo Buddies',              () => new EditorVoiceSoundHolderWithVoiceBefore('boobuddies',),);\n    public static readonly PEEPA =                    new EditorVoices('Peepa',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Peepa',),);\n\n    public static readonly BOB_OMB =                  new EditorVoices('Bob-omb',                  () => new EditorVoiceSoundHolderWithVoiceBefore('bombomb',),);\n    public static readonly LIT_BOB_OMB =              new EditorVoices('Lit Bob-omb',              () => new EditorVoiceSoundHolderWithSingingPartBefore('litBob-omb',),);\n\n    public static readonly POKEY =                    new EditorVoices('Pokey',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Pokey',),);\n    public static readonly SNOW_POKEY =               new EditorVoices('Snow Pokey',               () => new EditorVoiceSoundHolderWithSingingPartBefore('SnowPokey',),);\n\n    public static readonly THWOMP =                   new EditorVoices('Thwomp',                   () => new EditorVoiceSoundHolderWithVoiceBefore('thwomp',),);\n\n    public static readonly MONTY_MOLE =               new EditorVoices('Monty Mole',               () => new EditorVoiceSoundHolderWithVoiceBefore('montymole',),);\n    public static readonly ROCKY_WRENCH =             new EditorVoices('Rocky Wrench',             () => new EditorVoiceSoundHolderWithVoiceBefore('rockeyrench',),);\n\n    public static readonly MAGIKOOPA =                new EditorVoices('Magikoopa',                () => [new EditorVoiceSoundHolderWithVoiceBefore('magikoopa',), new EditorVoiceSoundHolderWithVoiceBefore('kameck_EU',),],);\n\n    public static readonly HAMMER_BRO =               new EditorVoices('Hammer Bro',               () => new EditorVoiceSoundHolderWithVoiceBefore('hammerbro',),);\n    public static readonly SLEDGE_BRO =               new EditorVoices('Sledge Bro',               () => new EditorVoiceSoundHolderWithVoiceBefore('sledgebro',),);\n    public static readonly FIRE_BRO =                 new EditorVoices('Fire Bro',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('FireBro',),);\n    public static readonly HEAVY_FIRE_BRO =           new EditorVoices('Heavy Fire Bro',           () => new EditorVoiceSoundHolderWithSingingPartBefore('HeavyFireBro',),);\n\n    public static readonly LAVA_BUBBLE =              new EditorVoices('Lava Bubble',              () => new EditorVoiceSoundHolderWithVoiceBefore('lavabubble',),);\n\n    public static readonly MECHAKOOPA =               new EditorVoices('Mechakoopa',               () => new EditorVoiceSoundHolderWithSingingPartBefore('Mechakoopa',),);\n    public static readonly BLASTA_MECHAKOOPA =        new EditorVoices('Blasta Mechakoopa',        () => new EditorVoiceSoundHolderWithSingingPartBefore('BlastaMechakoopa',),);\n    public static readonly ZAPPA_MECHAKOOPA =         new EditorVoices('Zappa Mechakoopa',         () => new EditorVoiceSoundHolderWithSingingPartBefore('ZappaMechakoopa',),);\n\n    public static readonly CHARVAARGH =               new EditorVoices('Charvaargh',               () => new EditorVoiceSoundHolderWithSingingPartBefore('Charvaargh',),);\n\n    public static readonly BULLY =                    new EditorVoices('Bully',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Bully',),);\n\n    //endregion -------------------- General enemies --------------------\n    //region -------------------- Dangerous gizmo + enemy-related gizmo + other enemies --------------------\n\n    public static readonly BILL_BLASTER =             new EditorVoices('Bill Blaster',             () => new EditorVoiceSoundHolderWithVoiceBefore('billblaster',),);\n    public static readonly BULL_EYE_BLASTER =         new EditorVoices('Bull\\'s-Eye Blaster',      () => new EditorVoiceSoundHolderWithSingingPartBefore('Bulls-EyeBlaster',),);\n\n    public static readonly BANZAI_BILL =              new EditorVoices('Banzai Bill',              () => new EditorVoiceSoundHolderWithSingingPartBefore('BanzaiBill',),);\n    public static readonly BULL_EYE_BANZAI =          new class EditorVoices_BullEyeBanzai extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.BULL_EYE_BANZAI, Import.Entities.CAT_BANZAI_BILL,];\n        }\n\n    }('Bull\\'s-Eye Banzai', () => new EditorVoiceSoundHolderWithSingingPartBefore('Bulls-EyeBanzai',),);\n\n    public static readonly CANNON =                   new EditorVoices('Cannon',                   () => new EditorVoiceSoundHolderWithVoiceBefore('cannon',),);\n    public static readonly RED_CANNON =               new EditorVoices('Red Cannon',               () => new EditorVoiceSoundHolderWithSingingPartBefore('redcannon',),);\n\n    public static readonly BURNER =                   new EditorVoices('Burner',                   () => new EditorVoiceSoundHolderWithVoiceBefore('burner',),);\n\n    public static readonly FIRE_BAR =                 new EditorVoices('Fire Bar',                 () => new EditorVoiceSoundHolderWithVoiceBefore('firebar',),);\n\n    public static readonly SKEWER =                   new EditorVoices('Skewer',                   () => [new EditorVoiceSoundHolderWithVoiceBefore('skewer'), new EditorVoiceSoundHolderWithVoiceBefore('spikepiller'),],);\n\n    public static readonly KOOPA_CLOWN_CAR =          new EditorVoices('Koopa Clown Car',          () => new EditorVoiceSoundHolderWithVoiceBefore('koopaclowncar',),);\n    public static readonly JUNIOR_CLOWN_CAR =         new EditorVoices('Junior Clown Car',         () => new EditorVoiceSoundHolderWithVoiceBefore('juniorclowncar',),);\n    public static readonly FIRE_KOOPA_CLOWN_CAR =     new EditorVoices('Fire Koopa Clown Car',     () => new EditorVoiceSoundHolderWithVoiceBefore('firekoopaclowncar',),);\n    public static readonly FIRE_JUNIOR_CLOWN_CAR =    new EditorVoices('Fire Junior Clown Car',    () => new EditorVoiceSoundHolderWithVoiceBefore('firejuniorclowncar',),);\n\n    public static readonly KOOPA_TROOPA_CAR =         new EditorVoices('Koopa Troopa Car',         () => new EditorVoiceSoundHolderWithSingingPartBefore('KoopaTroopaCar',),);\n\n    public static readonly GRINDER =                  new EditorVoices('Grinder',                  () => new EditorVoiceSoundHolderWithVoiceBefore('grinder',),);\n\n    public static readonly SUN =                      new class EditorVoices_Sun extends EditorVoices {\n\n        protected override get _createEntityReferences(): PossibleEntityReferences_Received {\n            return [Import.Entities.ANGRY_SUN,];\n        }\n\n    }('Sun', () => new EditorVoiceSoundHolderWithSingingPartBefore('Sun',),);\n    public static readonly MOON =                     new EditorVoices('Moon',                     () => new EditorVoiceSoundHolderWithSingingPartBefore('Moon',),);\n\n    //endregion -------------------- Dangerous gizmo + enemy-related gizmo + other enemies --------------------\n    //region -------------------- Bosses + projectiles --------------------\n\n    public static readonly BOWSER =                   new EditorVoices('Bowser',                   () => new EditorVoiceSoundHolderWithVoiceBefore('bowser',),);\n    public static readonly MEOWSER =                  new EditorVoices('Meowser',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('Meowser',),);\n\n    public static readonly BOWSER_JR =                new EditorVoices('Bowser Jr.',               () => new EditorVoiceSoundHolderWithVoiceBefore('bowserjr',),);\n\n    public static readonly BOOM_BOOM =                new EditorVoices('Boom Boom',                () => new EditorVoiceSoundHolderWithSingingPartBefore('BoomBoom',),);\n    public static readonly POM_POM =                  new EditorVoices('Pom Pom',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('PomPom',),);\n\n    public static readonly LARRY =                    new EditorVoices('Larry',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Larry',),);\n    public static readonly IGGY =                     new EditorVoices('Iggy',                     () => new EditorVoiceSoundHolderWithSingingPartBefore('Iggy',),);\n    public static readonly WENDY =                    new EditorVoices('Wendy',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Wendy',),);\n    public static readonly LEMMY =                    new EditorVoices('Lemmy',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('Lemmy',),);\n    public static readonly ROY =                      new EditorVoices('Roy',                      () => new EditorVoiceSoundHolderWithSingingPartBefore('Roy',),);\n    public static readonly MORTON =                   new EditorVoices('Morton',                   () => new EditorVoiceSoundHolderWithSingingPartBefore('Morton',),);\n    public static readonly LUDWIG =                   new EditorVoices('Ludwig',                   () => new EditorVoiceSoundHolderWithSingingPartBefore('Ludwig',),);\n\n    //endregion -------------------- Bosses + projectiles --------------------\n    //region -------------------- Passive gizmo / Key / Warp / Other --------------------\n\n    public static readonly BUMPER =                   new EditorVoices('Bumper',                   () => new EditorVoiceSoundHolderWithVoiceBefore('bumper',),);\n\n    public static readonly SWINGING_CLAW =            new EditorVoices('Swinging Claw',            () => new EditorVoiceSoundHolderWithSingingPartBefore('swingingclaw',),);\n\n    public static readonly TWISTER =                  new EditorVoices('Twister',                  () => new EditorVoiceSoundHolderWithSingingPartBefore('Twister',),);\n\n    public static readonly ONE_WAY_WALL =             new EditorVoices('One-Way Wall',             () => new EditorVoiceSoundHolderWithVoiceBefore('onewaywall',),);\n\n    public static readonly TRACK =                    new EditorVoices('Track',                    () => new EditorVoiceSoundHolderWithVoiceBefore('track',),);\n    public static readonly TRACK_BLOCK =              new EditorVoices('Track Block',              () => new EditorVoiceSoundHolderWithSingingPartBefore('TrackBlock',),);\n\n    public static readonly VINE =                     new EditorVoices('Vine',                     () => new EditorVoiceSoundHolderWithVoiceBefore('vine',),);\n    public static readonly TREE =                     new EditorVoices('Tree',                     () => new EditorVoiceSoundHolderWithSingingPartBefore('tree',),);\n\n    public static readonly ARROW_SIGN =               new EditorVoices('Arrow Sign',               () => new EditorVoiceSoundHolderWithSingingPartBefore('arrowsign',),);\n\n    public static readonly CHECKPOINT_FLAG =          new EditorVoices('Checkpoint Flag',          () => new EditorVoiceSoundHolderWithSingingPartBefore('CheckpointFlag',),);\n\n    public static readonly DASH_BLOCK =               new EditorVoices('Dash Block',               () => new EditorVoiceSoundHolderWithSingingPartBefore('DashBlock',),);\n\n    public static readonly SNAKE_BLOCK =              new EditorVoices('Snake Block',              () => new EditorVoiceSoundHolderWithSingingPartBefore('SnakeBlock',),);\n    public static readonly FAST_SNAKE_BLOCK =         new EditorVoices('Fast Snake Block',         () => new EditorVoiceSoundHolderWithSingingPartBefore('FastSnakeBlock',),);\n\n    public static readonly CONVEYOR_BELT =            new EditorVoices('Conveyor Belt',            () => new EditorVoiceSoundHolderWithVoiceBefore('conveyorbelt',),);\n    public static readonly FAST_CONVEYOR_BELT =       new EditorVoices('Fast Conveyor Belt',       () => new EditorVoiceSoundHolderWithSingingPartBefore('fastconveyorbelt',),);\n\n    public static readonly MUSHROOM_TRAMPOLINE =      new EditorVoices('Mushroom Trampoline',      () => new EditorVoiceSoundHolderWithSingingPartBefore('MushroomTrampoline',),);\n    public static readonly ON_OFF_TRAMPOLINE =        new EditorVoices('ON/OFF Trampoline',        () => new EditorVoiceSoundHolderWithSingingPartBefore('ONOFFTrampoline',),);\n\n    public static readonly LIFT =                     new EditorVoices('Lift',                     () => new EditorVoiceSoundHolderWithVoiceBefore('lift',),);\n    public static readonly FLIMSY_LIFT =              new EditorVoices('Flimsy Lift',              () => new EditorVoiceSoundHolderWithVoiceBefore('flimsylift',),);\n    public static readonly CLOUD_LIFT =               new EditorVoices('Cloud Lift',               () => new EditorVoiceSoundHolderWithSingingPartBefore('CloudLift',),);\n\n    public static readonly SEESAW =                   new EditorVoices('Seesaw',                   () => new EditorVoiceSoundHolderWithSingingPartBefore('seesaw',),);\n\n    public static readonly LAVA_LIFT =                new EditorVoices('Lava Lift',                () => new EditorVoiceSoundHolderWithVoiceBefore('lavalift',),);\n    public static readonly FAST_LAVA_LIFT =           new EditorVoices('Fast Lava Lift',           () => new EditorVoiceSoundHolderWithSingingPartBefore('FastLavaLift',),);\n\n    public static readonly CRATE =                    new EditorVoices('Crate',                    () => new EditorVoiceSoundHolderWithSingingPartBefore('crate',),);\n\n    public static readonly KEY =                      new EditorVoices('Key',                      () => new EditorVoiceSoundHolderWithSingingPartBefore('key',),);\n    public static readonly CURSED_KEY =               new EditorVoices('Cursed Key',               () => new EditorVoiceSoundHolderWithSingingPartBefore('cursedkey',),);\n\n    public static readonly TRAMPOLINE =               new EditorVoices('Trampoline',               () => new EditorVoiceSoundHolderWithVoiceBefore('trampline',),);\n    public static readonly HOP_CHOPS =                new EditorVoices('Hop-Chops',                () => new EditorVoiceSoundHolderWithSingingPartBefore('Hop-Chops',),);\n\n    public static readonly POW_BLOCK =                new EditorVoices('POW Block',                () => new EditorVoiceSoundHolderWithVoiceBefore('powblock',),);\n    public static readonly RED_POW_BLOCK =            new EditorVoices('Red POW Block',            () => new EditorVoiceSoundHolderWithSingingPartBefore('redPOWBlock',),);\n\n    public static readonly P_SWITCH =                 new EditorVoices('P Switch',                 () => new EditorVoiceSoundHolderWithVoiceBefore('pswitch',),);\n\n    public static readonly WARP_DOOR =                new EditorVoices('Warp Door',                () => new EditorVoiceSoundHolderWithVoiceBefore('warpdoor',),);\n    public static readonly P_WARP_DOOR =              new EditorVoices('P Warp Door',              () => new EditorVoiceSoundHolderWithVoiceBefore('pwarpdoor',),);\n    public static readonly KEY_DOOR =                 new EditorVoices('Key Door',                 () => new EditorVoiceSoundHolderWithVoiceBefore('keydoor',),);\n\n    public static readonly WARP_BOX =                 new EditorVoices('Warp Box',                 () => new EditorVoiceSoundHolderWithSingingPartBefore('WarpBox',),);\n    public static readonly WARP_BOX_WITH_KEY =        new EditorVoices('Warp Box (With Key)',      () => new EditorVoiceSoundHolderWithSingingPartBefore('WarpBox_withkey',),);\n\n    public static readonly WING =                     new EditorVoices('Wing',                     () => new EditorVoiceSoundHolderWithVoiceBefore('wings',),);\n\n    //endregion -------------------- Passive gizmo / Key / Warp / Other --------------------\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EditorVoices;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishNameContainer: StringContainer<PossibleEnglishName>;\n    #entityReferences?: EntityReferenceHolder;\n    readonly #editorVoiceSoundHolder: ObjectHolder<EditorVoiceSound>;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, editorVoiceSound: () => PossibleSoundReceivedOnFactory,) {\n        super();\n        this.#englishNameContainer = new StringContainer(englishName);\n        this.#editorVoiceSoundHolder = new DelayedObjectHolderContainer(() => EditorVoiceSoundFactory.create(editorVoiceSound()));\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishNameContainer.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishNameContainer.getInHtml;\n    }\n\n\n    public get editorVoiceSound(): EditorVoiceSound {\n        return this.#editorVoiceSoundHolder.get;\n    }\n\n    //region -------------------- Entity references --------------------\n\n    /**\n     * Create a temporary array containing the references applicable\n     * to create a {@link EntityReferenceHolder entity reference}\n     *\n     * @protected\n     * @onlyCalledOnce\n     */\n    protected get _createEntityReferences(): PossibleEntityReferences_Received {\n        return [this.englishName];\n    }\n\n    /**\n     * <p>\n     *  Get the {@link EntityReferenceHolder entity reference} applicable to a specific editor voice.\n     * </p>\n     *\n     * <p>\n     *  It can contain either the entity by the same name as {@link EditorVoices this instance},\n     *  a single {@link Entities entity instance} similar to {@link EditorVoices this instance} or\n     *  multiple {@link Entities entity instance} (from 2 to 4) associated to {@link EditorVoices this instance}.\n     * </p>\n     */\n    public get entityReferences(): EntityReferenceHolder {\n        return this.#entityReferences ??= new EntityReferenceHolderContainer(this._createEntityReferences);\n    }\n\n    //endregion -------------------- Entity references --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EditorVoices> {\n        return EditorVoices;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    protected static override _getValueByEnumerable(value: Enumerable,) {\n        return value instanceof Import.Entities\n            ? this.values.find(enumerable => (enumerable.entityReferences.references as readonly Entities[]).includes(value))\n            ?? null\n            : null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EditorVoices = EditorVoices, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EditorVoices\n    public static getValue(value: PossibleValue,): | EditorVoices | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn<EditorVoices>(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}\n","import {AbstractImageWithTimesThemesAndGameStyles} from '../AbstractImageWithTimesThemesAndGameStyles';\nimport {assert}                                    from '../../../../util/utilitiesMethods';\nimport {Themes}                                    from '../../../theme/Themes';\nimport {Times}                                     from '../../../time/Times';\nimport {GameStyles}                                from '../../../gameStyle/GameStyles';\n\nexport class InGameImage_SMM1Container\n    extends AbstractImageWithTimesThemesAndGameStyles {\n\n    public constructor(map: ReadonlyMap<GameStyles, ReadonlyMap<Themes, readonly string[]>>, defaultImages: ReadonlyMap<GameStyles, readonly string[]>,) {\n        super(new Map([[Times.DAY, map,]]), defaultImages,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected override get _createEveryGameStyles(): readonly GameStyles[] {\n        return GameStyles.gameStyles_smm1;\n    }\n\n    protected override get _createEveryThemes(): readonly Themes[] {\n        return Themes.courseThemes_smm1;\n    }\n\n    protected override get _createEveryTimes(): readonly Times[] {\n        return [Times.DAY,];\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override get(expectEmpty: boolean, gameStyle: GameStyles,): readonly string[]\n    public override get(expectEmpty: boolean, gameStyle: GameStyles,): readonly string[]\n    public override get(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes,): readonly string[]\n    public override get(expectEmpty: boolean, gameStyle: GameStyles, theme: Themes,): readonly string[]\n    public override get(expectEmpty: boolean, theme: Themes,): readonly string[]\n    public override get(expectEmpty: boolean, theme: Themes,): readonly string[]\n    public override get(expectEmpty: boolean,): readonly string[]\n    public override get(expectEmpty: boolean, gameStyle_or_theme?: | GameStyles | Themes, theme?: | Themes,): readonly string[] {\n        if (gameStyle_or_theme == null)\n            return super.get(expectEmpty, Times.DAY,);\n        if (theme == null) {\n            if (gameStyle_or_theme instanceof GameStyles)\n                return super.get(expectEmpty, gameStyle_or_theme,);\n            return super.get(expectEmpty, gameStyle_or_theme,);\n        }\n\n        assert(gameStyle_or_theme instanceof GameStyles, `The second argument received is required to be a GameStyle when the second argument is received.`);\n        return super.get(expectEmpty, gameStyle_or_theme, theme,);\n    }\n\n}\n","import type {Builder}                          from '../../../../util/builder/Builder';\nimport type {GameStyles as OriginalGameStyles} from '../../../gameStyle/GameStyles';\nimport type {ImageName_SMM1}                   from './InGameImage.types';\nimport type {Themes}                           from '../../../theme/Themes';\nimport type {InGameImage}                      from './InGameImage';\n\nimport {AbstractImageBuilder}      from '../AbstractImage.builder';\nimport {EMPTY_MAP}                 from '../../../../util/emptyVariables';\nimport {GameStyles}                from '../GameStyles';\nimport {InGameImage_SMM1Container} from './InGameImage_SMM1.container';\n\nexport class InGameImage_SMM1Builder\n    extends AbstractImageBuilder<ImageName_SMM1>\n    implements Builder<InGameImage> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #GAME_STYLE_ARRAY = GameStyles.gameStyles_smm1;\n    // static readonly #THEMES_ARRAY = Themes.courseThemes_smm1;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: ImageName_SMM1,) {\n        super(name);\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Game Style --------------------\n\n    public override setAllGameStyles(): this {\n        return this._setGameStyle(InGameImage_SMM1Builder.#GAME_STYLE_ARRAY);\n    }\n\n    //endregion -------------------- Game Style --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Build utility methods --------------------\n\n    protected _getImagePath(gameStyle: GameStyles,) {\n        return `${gameStyle.gamePath_inGameSmm1}Item - ${this.simpleImageName}/wait.0.png`;\n    }\n\n    protected _createDefaultImages(): ReadonlyMap<OriginalGameStyles, readonly [string]> {\n        return new Map(this._gameStyles.map(gameStyle => [gameStyle.parent, [this._getImagePath(gameStyle),],]));\n    }\n\n    protected _createNewMap(): ReadonlyMap<OriginalGameStyles, ReadonlyMap<Themes, readonly [string]>> {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Build utility methods --------------------\n\n    public override build(): InGameImage {\n        return new InGameImage_SMM1Container(this._createNewMap(), this._createDefaultImages(),);\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyInGameImageName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {InGameImage}                                      from './InGameImage';\n\nimport {EMPTY_ARRAY} from '../../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyInGameImage\n    implements InGameImage, ClassWithNullObjectPattern<EmptyInGameImageName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyInGameImage;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(): typeof EMPTY_ARRAY {\n        return EMPTY_ARRAY;\n    }\n\n    public toString(): EmptyInGameImageName {\n        return 'Empty \"in game\" image';\n    }\n\n}\n","import type {InGameImage}                    from './InGameImage';\nimport type {PossibleImageReceivedOnFactory} from './InGameImage.types';\n\nimport {EmptyInGameImage} from './EmptyInGameImage';\n\nexport class InGameImageFactory {\n\n    private constructor() {\n        throw new TypeError('This class cannot be instantiated.');\n    }\n\n    /**\n     * Create the {@link InGameImage image}\n     * based on the value received.\n     *\n     * @param builder_or_image the builder or null\n     */\n    public static create(builder_or_image: PossibleImageReceivedOnFactory,): InGameImage {\n        return builder_or_image == null\n            ? EmptyInGameImage.get\n            : builder_or_image.build();\n    }\n\n}\n","import type {UnusedImage_BigMushroom} from './UnusedImage_BigMushroom';\n\nexport class UnusedImage_BigMushroomContainer\n    implements UnusedImage_BigMushroom {\n\n    //region -------------------- Fields --------------------\n\n    readonly #all: readonly (readonly string[])[];\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(images: readonly (readonly string[])[]) {\n        this.#all = images;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get all() {\n        return this.#all;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import {Builder}     from '../../../../util/builder/Builder';\nimport {UnusedImage} from './UnusedImage';\n\nexport abstract class UnusedImageBuilder<T extends UnusedImage, N extends string, >\n    implements Builder<T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #simpleImageName: N;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(name: N,) {\n        this.#simpleImageName = name;\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get simpleImageName(): N {\n        return this.#simpleImageName;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    public abstract build(): T;\n\n}","import type {ImageName_BigMushroom_Unused_SMM1} from './UnusedImage';\nimport type {UnusedImage_BigMushroom}           from './UnusedImage_BigMushroom';\n\nimport {GameStyles}                       from '../GameStyles';\nimport {UnusedImage_BigMushroomContainer} from './UnusedImage_BigMushroom.container';\nimport {UnusedImageBuilder}               from './UnusedImage.builder';\n\n/**\n * @predefinedBuilder\n */\nexport class UnusedImage_BigMushroomBuilder\n    extends UnusedImageBuilder<UnusedImage_BigMushroom, ImageName_BigMushroom_Unused_SMM1> {\n\n    //region -------------------- Fields --------------------\n\n    #identifierMap = new Map<ImageIdentifier, PossibleImageNumber>();\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: ImageName_BigMushroom_Unused_SMM1,) {\n        super(name);\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    protected get _identifierMap(): ReadonlyMap<ImageIdentifier, PossibleImageNumber> {\n        return this.#identifierMap;\n    }\n\n    public setImage(identifier: ImageIdentifier, images: readonly ImageNumber[],): this\n    public setImage(identifier: ImageIdentifier, amount: AmountOfImages,): this\n    public setImage(identifier: ImageIdentifier,): this\n    public setImage(identifier: ImageIdentifier, amount_or_images?: | AmountOfImages | readonly ImageNumber[],): this {\n        if (amount_or_images == null)\n            this.#identifierMap.set(identifier, null,);\n        else if (typeof amount_or_images == 'number')\n            this.#identifierMap.set(identifier, [...new Array(amount_or_images)].map((_, index,) => index as ImageNumber),);\n        else\n            this.#identifierMap.set(identifier, amount_or_images,);\n        return this;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Build utility methods --------------------\n\n    protected _getImagePath(identifier: ImageIdentifier, images: PossibleImageNumber) {\n        if (images == null)\n            return [`${GameStyles.SUPER_MARIO_BROS.gameAcronym} A - ${this.simpleImageName}/${identifier}.tiff`,];\n        return images.map(number => `${GameStyles.SUPER_MARIO_BROS.gameAcronym} A - ${this.simpleImageName}/${identifier}.${number}.tiff`);\n    }\n\n\n    //endregion -------------------- Build utility methods --------------------\n\n    public override build(): UnusedImage_BigMushroom {\n        return new UnusedImage_BigMushroomContainer([...this._identifierMap.entries()].map(([identifier, images,]) => this._getImagePath(identifier, images,)));\n    }\n\n}\n\nexport type ImageIdentifier = | 'anger' | 'blink' | 'weep' | 'damage' | 'kutsu' | 'swim' | 'walk' | 'out' | 'wait' | 'fire' | 'senkan_houdai_ball';\nexport type ImageNumber = | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport type AmountOfImages = | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\ntype PossibleImageNumber = | readonly ImageNumber[] | null;","import type {UnusedImage_Regular} from './UnusedImage_Regular';\nimport type {GameStyles}          from '../../../gameStyle/GameStyles';\n\nexport class UnusedImage_RegularContainer\n    implements UnusedImage_Regular {\n\n    //region -------------------- Fields --------------------\n\n    readonly #all;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(images: ReadonlyMap<GameStyles, readonly (readonly string[])[]>,) {\n        this.#all = images;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get all() {\n        return this.#all;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ImageName_Unused_SMM1}            from './UnusedImage';\nimport type {ExtendedMap}                      from '../../../../util/extended/ExtendedMap';\nimport type {UnusedImage_Regular}              from './UnusedImage_Regular';\nimport type {GameStyles as OriginalGameStyles} from '../../../gameStyle/GameStyles';\n\nimport {ExtendedMapContainer}         from '../../../../util/extended/ExtendedMap.container';\nimport {GameStyles}                   from '../GameStyles';\nimport {UnusedImage_RegularContainer} from './UnusedImage_Regular.container';\nimport {UnusedImageBuilder}           from './UnusedImage.builder';\n\nexport class UnusedImage_RegularBuilder\n    extends UnusedImageBuilder<UnusedImage_Regular, ImageName_Unused_SMM1> {\n\n    //region -------------------- Fields --------------------\n\n    #identifierMap: ExtendedMap<OriginalGameStyles, ExtendedMap<ImageIdentifier, PossibleImageNumber>> = new ExtendedMapContainer();\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: ImageName_Unused_SMM1,) {\n        super(name,);\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    protected get _identifierMap(): ExtendedMap<OriginalGameStyles, ExtendedMap<ImageIdentifier, PossibleImageNumber>> {\n        return this.#identifierMap;\n    }\n\n    public setImage(gameStyle: OriginalGameStyles, identifier: ImageIdentifier, image: ImageNumber,): this\n    public setImage(gameStyle: OriginalGameStyles, identifier: ImageIdentifier, images: readonly ImageNumber[],): this\n    public setImage(gameStyle: OriginalGameStyles, identifier: ImageIdentifier, images: | ImageNumber | readonly ImageNumber[],): this {\n        const map = this.#identifierMap;\n        if (!map.has(gameStyle))\n            this.#identifierMap.set(gameStyle, new ExtendedMapContainer(),);\n        const imagesMap = map.get(gameStyle)!;\n\n        imagesMap.set(identifier, images instanceof Array ? images : [images],);\n        return this;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    protected _getImagePath(gameStyle: OriginalGameStyles, identifier: ImageIdentifier, numbers: readonly ImageNumber[],): readonly string[] {\n        return numbers.map(number => `${GameStyles.getValue(gameStyle).gamePath_inGameSmm1}Enemy - ${this.simpleImageName}/${identifier}.${number}.tiff`);\n    }\n\n\n    public override build(): UnusedImage_Regular {\n        return new UnusedImage_RegularContainer(new Map(this._identifierMap\n            .map((gameStyle, imagesMap,) => imagesMap.toArray()).toArray()\n            .map(({key: gameStyle, value: imagesArray,},) =>\n                [gameStyle, imagesArray.map(({key: identifier, value: images,},) => this._getImagePath(gameStyle, identifier, images,)),]))\n        );\n    }\n\n}\n\nexport type ImageIdentifier = | 'out' | 'wait' | 'weep' | 'down_switch_hatena_Alb';\nexport type ImageNumber = | 0 | 1 | 2 | 4 | 5 | 6 | 7 | `00${| 0 | 4}`;\ntype PossibleImageNumber = readonly ImageNumber[];\n","import type {ClassWithNullObjectPattern, EmptyUnusedImageName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {UnusedImage_BigMushroom}                          from './UnusedImage_BigMushroom';\n\nimport {EMPTY_ARRAY} from '../../../../util/emptyVariables';\n\nexport class EmptyUnusedImage_BigMushroom\n    implements UnusedImage_BigMushroom, ClassWithNullObjectPattern<EmptyUnusedImageName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyUnusedImage_BigMushroom;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly all = EMPTY_ARRAY;\n\n    public toString(): EmptyUnusedImageName {\n        return 'Empty \"unused\" image';\n    }\n\n}","import type {ClassWithNullObjectPattern, EmptyUnusedImageName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {UnusedImage_Regular}                              from './UnusedImage_Regular';\n\nimport {EMPTY_MAP} from '../../../../util/emptyVariables';\n\nexport class EmptyUnusedImage_Regular\n    implements UnusedImage_Regular, ClassWithNullObjectPattern<EmptyUnusedImageName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyUnusedImage_Regular;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly all = EMPTY_MAP;\n\n    public toString(): EmptyUnusedImageName {\n        return 'Empty \"unused\" image';\n    }\n\n}","import type {UnusedImages}                   from './UnusedImage';\nimport type {PossibleImageReceivedOnFactory} from './UnusedImage.types';\n\nimport {EmptyUnusedImage_BigMushroom} from './EmptyUnusedImage_BigMushroom';\nimport {EmptyUnusedImage_Regular}     from './EmptyUnusedImage_Regular';\n\nexport class UnusedImageFactory {\n\n    public static readonly EMPTY_UNUSED_IMAGES = [EmptyUnusedImage_Regular.get, EmptyUnusedImage_BigMushroom.get,] as const;\n\n    private constructor() {\n        throw new TypeError('This class cannot be instantiated.');\n    }\n\n    /**\n     * Create both unused images ({@link EmptyUnusedImage_BigMushroom Big Mushroom} & {@link EmptyUnusedImage_Regular Regular})\n     * based on the value received.\n     *\n     * @param builder_or_image the builder, both builder or null\n     */\n    public static create(builder_or_image: PossibleImageReceivedOnFactory,): UnusedImages {\n        return builder_or_image == null\n            ? this.EMPTY_UNUSED_IMAGES\n            : 'build' in builder_or_image\n                ? [builder_or_image.build(), EmptyUnusedImage_BigMushroom.get,]\n                : [\n                    builder_or_image[0]?.build() ?? EmptyUnusedImage_Regular.get,\n                    builder_or_image[1].build() ?? EmptyUnusedImage_BigMushroom.get,\n                ];\n\n    }\n\n}\n","import type {ClassWithEditorVoiceSound}                                                                                                                                                                  from '../editorVoice/ClassWithEditorVoiceSound';\nimport type {ClassWithEnglishName}                                                                                                                                                                       from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                         from '../ClassWithReference';\nimport type {ClearConditionImage}                                                                                                                                                                        from './images/clearCondition/ClearConditionImage';\nimport type {EditorImage}                                                                                                                                                                                from './images/editor/EditorImage';\nimport type {EditorVoiceSound}                                                                                                                                                                           from '../editorVoice/EditorVoiceSound';\nimport type {Entity}                                                                                                                                                                                     from './Entity';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Entities.types';\nimport type {InGameImage}                                                                                                                                                                                from './images/inGame/InGameImage';\nimport type {PossibleImageReceivedOnFactory as PossibleClearConditionImage}                                                                                                                              from './images/clearCondition/ClearConditionImage.types';\nimport type {PossibleImageReceivedOnFactory as PossibleEditorImage, SimpleImageName_GroundOrSlope}                                                                                                       from './images/editor/EditorImage.types';\nimport type {PossibleImageReceivedOnFactory as PossibleInGameImage}                                                                                                                                      from './images/inGame/InGameImage.types';\nimport type {PossibleImageReceivedOnFactory as PossibleUnusedImage}                                                                                                                                      from './images/unused/UnusedImage.types';\nimport type {StaticReference}                                                                                                                                                                            from '../../util/enum/Enum.types';\nimport type {UnusedImages}                                                                                                                                                                               from './images/unused/UnusedImage';\n\nimport {ClearConditionImageBuilder}     from './images/clearCondition/ClearConditionImage.builder';\nimport {ClearConditionImageFactory}     from './images/clearCondition/ClearConditionImage.factory';\nimport {EditorImageBuilder}             from './images/editor/EditorImage.builder';\nimport {EditorImageFactory}             from './images/editor/EditorImage.factory';\nimport {EditorVoices}                   from '../editorVoice/EditorVoices';\nimport {EmptyEditorVoiceSound}          from '../editorVoice/EmptyEditorVoiceSound';\nimport {Enum}                           from '../../util/enum/Enum';\nimport {GameStyles}                     from '../gameStyle/GameStyles';\nimport {Import}                         from '../../util/DynamicImporter';\nimport {InGameImage_SMM1Builder}        from './images/inGame/InGameImage_SMM1.builder';\nimport {InGameImageFactory}             from './images/inGame/InGameImage.factory';\nimport {Themes}                         from '../theme/Themes';\nimport {Times}                          from '../time/Times';\nimport {UnusedImage_BigMushroomBuilder} from './images/unused/UnusedImage_BigMushroom.builder';\nimport {UnusedImage_RegularBuilder}     from './images/unused/UnusedImage_Regular.builder';\nimport {UnusedImageFactory}             from './images/unused/UnusedImage.factory';\nimport {StringContainer}                from '../../util/StringContainer';\n\n//region -------------------- Utility methods (applicable only to Entities) --------------------\n\nfunction __createGroundEditorImage(simpleImageName: SimpleImageName_GroundOrSlope,): EditorImageBuilder {\n    return new EditorImageBuilder(simpleImageName,)\n        .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n        .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.AIRSHIP,)\n        .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n        .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW, Themes.AIRSHIP, Themes.CASTLE,)\n        .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n        .setNightTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERWATER, Themes.SNOW,)\n        .setTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n        .setNightTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.SNOW, Themes.AIRSHIP,)\n        .setTheme(GameStyles.SUPER_MARIO_3D_WORLD, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,);\n}\n\n//endregion -------------------- Utility methods (applicable only to Entities) --------------------\n\n/**\n * @recursiveReferenceVia {@link EntityBuilder} → {@link EntityLoader}\n * @recursiveReference {@link EntityLoader}, {@link EditorVoices}\n * @classWithDynamicImport {@link EntityLoader}\n */\nexport class Entities\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithReference<Entity>,\n        ClassWithEditorVoiceSound {\n\n    //region -------------------- Enum instances --------------------\n\n    //region -------------------- Ground / Pipe / Spike / Platform --------------------\n\n    public static readonly GROUND =                                        new class Entities_Ground extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return __createGroundEditorImage('Ground',);\n        }\n\n    }('Ground',);\n    public static readonly START_GROUND =                                  new Entities('Start Ground',);\n    public static readonly GOAL_GROUND =                                   new Entities('Goal Ground',);\n\n    public static readonly STEEP_SLOPE =                                   new class Entities_SteepSlope extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return __createGroundEditorImage('slope_l45',);\n        }\n\n    }('Steep Slope',);\n    public static readonly GENTLE_SLOPE =                                  new class Entities_GentleSlope extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return __createGroundEditorImage('slope_l30',);\n        }\n\n    }('Gentle Slope',);\n\n    public static readonly START_BLOCK =                                   new Entities('Start Block',);\n    public static readonly OCCLUDE_BLOCK =                                 new Entities('Occlude Block',);\n\n    public static readonly WATER =                                         new Entities('Water',);\n    public static readonly LAVA =                                          new Entities('Lava',);\n    public static readonly POISON =                                        new Entities('Poison',);\n\n    public static readonly PIPE =                                          new class Entities_Pipe extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Dokan',)\n                .setAmount(4)\n                .setAllGameStyles()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Pipe',);\n    public static readonly CLEAR_PIPE =                                    new class Entities_ClearPipe extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('ToumeiDokan',)\n                .setOnlySM3DW();\n        }\n\n    }('Clear Pipe',);\n\n    public static readonly SPIKE_TRAP =                                    new class Entities_SpikeTrap extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Toge',)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setNotSM3DW();\n        }\n\n    }('Spike Trap',);\n    public static readonly JELECTRO =                                      new class Entities_Jelectro extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Toge',)\n                .hasNoDefaultImage()\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERWATER,);\n        }\n\n    }('Jelectro',);\n    public static readonly SEA_URCHIN =                                    new class Entities_SeaUrchin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Toge',)\n                .hasNoDefaultImage()\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERWATER,);\n        }\n\n    }('Sea Urchin',);\n    public static readonly SPIKE_BLOCK =                                   new class Entities_SpikeBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('TogeBlock',)\n                .setAmount(3)\n                .setOnlySM3DW();\n        }\n\n    }('Spike Block',);\n\n    public static readonly MUSHROOM_PLATFORM =                             new class Entities_MushroomPlatform extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('GroundMushroom',)\n                .setAmount(3)\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERWATER, Themes.SNOW, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERWATER, Themes.SNOW, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERWATER, Themes.SNOW, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.SUPER_MARIO_WORLD, Themes.SNOW,)\n                .setTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.UNDERWATER, Themes.SNOW, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.SNOW,);\n        }\n\n    }('Mushroom Platform',);\n    public static readonly SEMISOLID_PLATFORM =                            new class Entities_SemisolidPlatform extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('GroundBox',)\n                .setAmount(3)\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW, Themes.AIRSHIP,)\n                .setImage(GameStyles.SUPER_MARIO_BROS, Themes.AIRSHIP, Times.NIGHT, 2,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERGROUND, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_WORLD, Themes.SNOW,)\n                .setTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_3D_WORLD, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setDefaultAmount(GameStyles.SUPER_MARIO_3D_WORLD, 1,);\n        }\n\n    }('Semisolid Platform',);\n    public static readonly BRIDGE =                                        new class Entities_Bridge extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bridge',)\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.GROUND, Themes.DESERT, Themes.SNOW, Themes.SKY, Themes.FOREST,)\n                .setNightTheme(GameStyles.SUPER_MARIO_WORLD, Themes.SNOW,)\n                .setTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.SNOW, Themes.FOREST, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.SNOW,);\n        }\n\n    }('Bridge',);\n\n    //endregion -------------------- Ground / Pipe / Spike / Platform --------------------\n    //region -------------------- Block / Coin --------------------\n\n    public static readonly BRICK_BLOCK =                                   new class Entities_BrickBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('RengaBlock',)\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.SNOW, Themes.GHOST_HOUSE, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Brick Block',);\n    public static readonly CRISTAL_BLOCK =                                 new class Entities_CristalBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('RengaBlock',)\n                .hasNoDefaultImage()\n                .setTheme(GameStyles.SUPER_MARIO_3D_WORLD, Themes.UNDERGROUND, Themes.FOREST,);\n        }\n\n    }('Cristal Block',);\n    public static readonly ROTATING_BLOCK =                                new class Entities_RotatingBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('RengaBlock',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Rotating Block',);\n\n    public static readonly HARD_BLOCK =                                    new class Entities_HardBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('HardBlock',)\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.SNOW, Themes.GHOST_HOUSE, Themes.AIRSHIP, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.GHOST_HOUSE, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.SUPER_MARIO_WORLD, Themes.AIRSHIP,)\n                .setTheme(GameStyles.NEW_SUPER_MARIO_BROS_U, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.SNOW, Themes.SKY, Themes.FOREST, Themes.CASTLE,)\n                .setNotSM3DW();\n        }\n\n    }('Hard Block',);\n    public static readonly ROCK_BLOCK =                                    new class Entities_RockBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('HardBlock',)\n                .setOnlySM3DW();\n        }\n\n    }('Rock Block',);\n\n    public static readonly QUESTION_MARK_BLOCK =                           new class Entities_QuestionMarkBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('HatenaBlock',)\n                .setAllGameStyles()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('? Block',);\n    public static readonly HIDDEN_BLOCK =                                  new class Entities_HiddenBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'ClearBlock';\n        }\n\n    }('Hidden Block',);\n    public static readonly EMPTY_BLOCK =                                   new Entities('Empty Block',);\n\n    public static readonly EXCLAMATION_MARK_BLOCK =                        new class Entities_ExclamationMarkBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BikkuriBlock',)\n                .setOnlySM3DW();\n        }\n\n    }('! Block',);\n\n    public static readonly NOTE_BLOCK =                                    new class Entities_NoteBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('OnpuBlock', 1,)\n                .setNotSM3DW()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Note Block',);\n    public static readonly MUSIC_BLOCK =                                   new class Entities_MusicBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('OnpuBlock', 2,)\n                .setNotSM3DW()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Music Block',);\n\n    public static readonly DONUT_BLOCK =                                   new class Entities_DonutBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('ChikuwaBlock',)\n                .setAllGameStyles()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Donut Block',);\n\n    public static readonly CLOUD_BLOCK =                                   new class Entities_CloudBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KumoBlock',)\n                .setAllGameStyles()\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERWATER,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERWATER,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,)\n                .setTheme(GameStyles.SUPER_MARIO_WORLD, Themes.UNDERWATER,);\n        }\n\n    }('Cloud Block',);\n\n    public static readonly ON_OFF_SWITCH =                                 new class Entities_OnOffBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'OnOffSwitch';\n        }\n\n    }('ON/OFF Switch',);\n    public static readonly DOTTED_LINE_BLOCK =                             new class Entities_DottedLineBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('OnOffBlock',)\n                .setAmount(2)\n                .setAllGameStyles();\n        }\n\n    }('Dotted-Line Block',);\n\n    public static readonly P_BLOCK =                                       new class Entities_PBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PBlock',)\n                .setAmount(2)\n                .setAllGameStyles();\n        }\n\n    }('P Block',);\n\n    public static readonly BLINKING_BLOCK =                                new class Entities_BlinkingBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Chikachika',)\n                .setAmount(2)\n                .setOnlySM3DW();\n        }\n\n    }('Blinking Block',);\n\n    public static readonly ICE_BLOCK =                                     new class Entities_IceBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('IceBlock',)\n                .setAllGameStyles()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Ice Block',);\n    public static readonly ICICLE =                                        new class Entities_Icicle extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Icicle',)\n                .setAmount(2)\n                .setAllGameStyles();\n        }\n\n    }('Icicle',);\n\n    public static readonly COIN =                                          new class Entities_Coin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Coin', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Coin';\n        }\n\n    }('Coin',);\n    public static readonly FROZEN_COIN =                                   new class Entities_FrozenCoin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Coin', 2,)\n                .setNotSM3DW()\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.SNOW,);\n        }\n\n    }('Frozen Coin',);\n    public static readonly TEN_COIN =                                      new class Entities_TenCoin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('10Coin', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('10Coin', 1,)\n                .setAllGameStyles();\n        }\n\n    }('10-Coin',);\n    public static readonly THIRTY_COIN =                                   new class Entities_ThirtyCoin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('10Coin', 2,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('10Coin', 2,)\n                .setAllGameStyles();\n        }\n\n    }('30-Coin',);\n    public static readonly FIFTY_COIN =                                    new class Entities_FiftyCoin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('10Coin', 3,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('10Coin', 3,)\n                .setAllGameStyles();\n        }\n\n    }('50-Coin',);\n    public static readonly PINK_COIN =                                     new class Entities_PinkCoin extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'PinkCoin';\n        }\n\n    }('Pink Coin',);\n\n    //endregion -------------------- Block / Coin --------------------\n    //region -------------------- Power-up / Yoshi / Shoe + projectiles --------------------\n\n    public static readonly SUPER_MUSHROOM =                                new class Entities_SuperMushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperKinoko', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperKinoko', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Super Mushroom',);\n\n    public static readonly FIRE_FLOWER =                                   new class Entities_FireFlower extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('FireFlower', 1,)\n                .setAsPowerUp()\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('FireFlower', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Fire Flower',);\n    public static readonly FIREBALL_THROWN_BY_A_PLAYER =                   new Entities('Fireball thrown by a player',);\n\n    public static readonly SUPERBALL_FLOWER =                              new class Entities_SuperballFlower extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('FireFlower', 2,)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('FireFlower', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS,);\n        }\n\n    }('Superball Flower',);\n    public static readonly SUPERBALL_THROWN_BY_A_PLAYER =                  new Entities('Superball thrown by a player',);\n\n    public static readonly MYSTERY_MUSHROOM =                              new class Entities_MysteryMushroom extends Entities {\n\n        protected override get _createInGameImage(): PossibleInGameImage {\n            return new InGameImage_SMM1Builder('Kinoko2',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Mystery Mushroom',);\n    public static readonly WEIRD_MUSHROOM =                                new class Entities_WeirdMushroom extends Entities {\n\n        protected override get _createInGameImage(): PossibleInGameImage {\n            return new InGameImage_SMM1Builder('KinokoFunny',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Weird Mushroom',);\n\n    public static readonly MASTER_SWORD =                                  new class Entities_MasterSword extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperKinoko', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperKinoko', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Master Sword',);\n    public static readonly BOMB_THROWN_BY_A_LINK =                         new Entities('Bomb thrown by a Link',);\n    public static readonly ARROW_THROWN_BY_A_LINK =                        new Entities('Arrow thrown by a Link',);\n\n    public static readonly BIG_MUSHROOM =                                  new class Entities_BigMushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('DekaKinoko',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('DekaKinoko',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Big Mushroom',);\n    public static readonly BIG_MUSHROOM_CLASSIC =                          new class Entities_BigMushroom_Classic extends Entities {\n\n        protected override get _createInGameImage(): PossibleInGameImage {\n            return new InGameImage_SMM1Builder('MegaKinoko')\n                .setAllGameStyles();\n        }\n\n    }('Big Mushroom (classic)',);\n    public static readonly BIG_MUSHROOM_MODERN =                           new class Entities_BigMushroom_Modern extends Entities {\n\n        protected override get _createInGameImage(): PossibleInGameImage {\n            return new InGameImage_SMM1Builder('MegaKinoko2')\n                .setAllGameStyles();\n        }\n\n    }('Big Mushroom (modern)',);\n\n    public static readonly SMB2_MUSHROOM =                                 new class Entities_SMB2Mushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KinokoUSA')\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KinokoUSA')\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('SMB2 Mushroom',);\n\n    public static readonly SUPER_LEAF =                                    new class Entities_SuperLeaf extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperKonoha',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS_3,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperKonoha',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS_3);\n        }\n\n    }('Super Leaf',);\n\n    public static readonly FROG_SUIT =                                     new class Entities_FrogSuit extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('FrogSuit',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS_3,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('FrogSuit',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS_3);\n        }\n\n    }('Frog Suit',);\n\n    public static readonly CAPE_FEATHER =                                  new class Entities_CapeFeather extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MantleWing',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('MantleWing',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD);\n        }\n\n    }('Cape Feather',);\n\n    public static readonly POWER_BALLOON =                                 new class Entities_PowerBalloon extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PowerBalloon',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('PowerBalloon',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD);\n        }\n\n    }('Power Balloon',);\n\n    public static readonly PROPELLER_MUSHROOM =                            new class Entities_PropellerMushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PropellerKinoko',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('PropellerKinoko',)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U);\n        }\n\n    }('Propeller Mushroom',);\n\n    public static readonly SUPER_ACORN =                                   new class Entities_SuperAcorn extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperDonguri',)\n                .setAsPowerUp()\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperDonguri',)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U);\n        }\n\n    }('Super Acorn',);\n\n    public static readonly SUPER_BELL =                                    new class Entities_SuperBell extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperBell',)\n                .setAsPowerUp()\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperBell',)\n                .setOnlySM3DW();\n        }\n\n    }('Super Bell',);\n\n    public static readonly SUPER_HAMMER =                                  new class Entities_SuperHammer extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SuperHammer',)\n                .setAsPowerUp()\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SuperHammer',)\n                .setOnlySM3DW();\n        }\n\n    }('Super Hammer',);\n    public static readonly BUILDER_BOX_THROWN_BY_A_PLAYER =                new Entities('Builder Box thrown by a player',);\n\n    public static readonly BOOMERANG_FLOWER =                              new class Entities_BoomerangFlower extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoomerangFlower',)\n                .setAsPowerUp()\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoomerangFlower',)\n                .setOnlySM3DW();\n        }\n\n    }('Boomerang Flower',);\n    public static readonly BOOMERANG_THROWN_BY_A_PLAYER =                  new Entities('Boomerang thrown by a player',);\n\n    public static readonly CANNON_BOX =                                    new class Entities_CannonBox extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoxKiller',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoxKiller',)\n                .setOnlySM3DW();\n        }\n\n    }('Cannon Box',);\n    public static readonly CANNONBALL_THROWN_BY_A_PLAYER =                 new Entities('Cannonball thrown by a player',);\n\n    public static readonly PROPELLER_BOX =                                 new class Entities_PropellerBox extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoxPropeller',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoxPropeller',)\n                .setOnlySM3DW();\n        }\n\n    }('Propeller Box',);\n\n    public static readonly GOOMBA_MASK =                                   new class Entities_GoombaMask extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoxKuribo',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoxKuribo',)\n                .setOnlySM3DW();\n        }\n\n    }('Goomba Mask',);\n\n    public static readonly BULLET_BILL_MASK =                              new class Entities_BulletBillMask extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoxKillerPlayer',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoxKillerPlayer',)\n                .setOnlySM3DW();\n        }\n\n    }('Bullet Bill Mask',);\n\n    public static readonly RED_POW_BOX =                                   new class Entities_RedPowBox extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BoxPow',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BoxPow',)\n                .setOnlySM3DW();\n        }\n\n    }('Red POW Box',);\n\n    public static readonly SUPER_STAR =                                    new class Entities_SuperStar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'SuperStar';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'SuperStar';\n        }\n\n    }('Super Star',);\n\n    public static readonly ONE_UP_MUSHROOM =                               new class Entities_OneUpMushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return '1upKinoko';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return '1upKinoko';\n        }\n\n    }('1-Up Mushroom',);\n    public static readonly ROTTEN_MUSHROOM =                               new class Entities_RottenMushroom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('DokuKinoko',)\n                .setNotSM3DW();\n        }\n\n    }('Rotten Mushroom',);\n\n    public static readonly SHOE_GOOMBA =                                   new class Entities_ShoeGoomba extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KutsuKuribo', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS, GameStyles.SUPER_MARIO_BROS_3,);\n        }\n\n    }('Shoe Goomba',);\n    public static readonly SHOE =                                          new class Entities_Shoe extends Entities {\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KutsuKuribo',)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS, GameStyles.SUPER_MARIO_BROS_3,);\n        }\n\n    }('Shoe',);\n    public static readonly STILETTO_GOOMBA =                               new class Entities_StilettoGoomba extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KutsuKuribo', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS, GameStyles.SUPER_MARIO_BROS_3,);\n        }\n\n    }('Stiletto Goomba',);\n    public static readonly STILETTO =                                      new Entities('Stiletto',);\n    public static readonly YOSHI_EGG =                                     new class Entities_YoshiEgg extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('YosshiEgg',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('YosshiEgg',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Yoshi\\'s Egg',);\n    public static readonly YOSHI =                                         new Entities('Yoshi',);\n    public static readonly FIRE_THROWN_BY_A_YOSHI =                        new Entities('Fire thrown by a Yoshi',);\n    public static readonly POISON_THROWN_BY_A_YOSHI =                      new Entities('Poison thrown by a Yoshi',);\n    public static readonly BONE_THROWN_BY_A_YOSHI =                        new Entities('Bone thrown by a Yoshi',);\n    public static readonly WRENCH_THROWN_BY_A_YOSHI =                      new Entities('Wrench thrown by a Yoshi',);\n    public static readonly HAMMER_THROWN_BY_A_YOSHI =                      new Entities('Hammer thrown by a Yoshi',);\n    public static readonly RED_YOSHI_EGG =                                 new class Entities_RedYoshiEgg extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('YosshiEggRed',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Red Yoshi\\'s Egg',);\n    public static readonly RED_YOSHI =                                     new Entities('Red Yoshi',);\n    public static readonly FIRE_THROWN_BY_A_RED_YOSHI =                    new Entities('Fire thrown by a Red Yoshi',);\n\n    //endregion -------------------- Power-up / Yoshi / Shoe + projectiles --------------------\n    //region -------------------- General enemies --------------------\n\n    public static readonly GOOMBA =                                        new class Entities_Goomba extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Kuribo', 1,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Kuribo', 1,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD);\n        }\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            return [\n                null,\n                new UnusedImage_BigMushroomBuilder('Kuribo D',)\n                    .setImage('damage', 1,)\n                    .setImage('swim', 2,)\n                    .setImage('walk', 2,)\n                    .setImage('kutsu', 1,),\n            ];\n        }\n\n    }('Goomba',);\n    public static readonly GALOOMBA =                                      new class Entities_Galoomba extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Kuribo', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Kuribo', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Galoomba',);\n    public static readonly GOOMBRAT =                                      new class Entities_Goombrat extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Kuribo', 2,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.SUPER_MARIO_3D_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Kuribo', 2,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.SUPER_MARIO_3D_WORLD,);\n        }\n\n    }('Goombrat',);\n    public static readonly GOOMBUD =                                       new class Entities_Goombud extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Kuribo', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Kuribo', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Goombud',);\n\n    public static readonly GREEN_KOOPA_TROOPA =                            new class Entities_GreenKoopaTroopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Nokonoko',1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Nokonoko';\n        }\n\n    }('Green Koopa Troopa',);\n    public static readonly RED_KOOPA_TROOPA =                              new class Entities_RedKoopaTroopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Nokonoko',2,)\n                .setAllGameStyles();\n        }\n\n    }('Red Koopa Troopa',);\n    public static readonly GREEN_BEACH_KOOPA =                             new Entities('Green Beach Koopa',);\n    public static readonly RED_BEACH_KOOPA =                               new Entities('Red Beach Koopa',);\n    public static readonly GREEN_KOOPA_SHELL =                             new class Entities_GreenKoopaShell extends Entities {\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('NokonokoShell',)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Green Koopa Shell',);\n    public static readonly RED_KOOPA_SHELL =                               new Entities('Red Koopa Shell',);\n\n    public static readonly DRY_BONES =                                     new class Entities_DryBones extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Karon', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Karon', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Dry Bones',);\n    public static readonly PARABONES =                                     new Entities('Parabones',);\n    public static readonly BONE_THROWN_BY_A_DRY_BONES =                    new Entities('Bone thrown by a Dry Bones',);\n    public static readonly DRY_BONES_SHELL =                               new class Entities_DryBonesShell extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Karon', 2,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Karon', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Dry Bones Shell',);\n\n    public static readonly BUZZY_BEETLE =                                  new class Entities_BuzzyBeetle extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Met', 1,)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Met', 1,)\n                .setNotSM3DW();\n        }\n\n    }('Buzzy Beetle',);\n    public static readonly PARA_BEETLE =                                   new Entities('Para-Beetle',);\n    public static readonly BUZZY_SHELL =                                   new class Entities_BuzzyShell extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Met', 2,)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Met', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Buzzy Shell',);\n\n    public static readonly SPINY =                                         new class Entities_Spiny extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Togezo', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Togezo', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Spiny',);\n    public static readonly WINGED_SPINY =                                  new Entities('Winged Spiny',);\n    public static readonly WINGED_SPINY_PROJECTILE =                       new Entities('(Winged Spiny\\'s projectile)',);\n    public static readonly SPINY_EGG =                                     new Entities('Spiny Egg',);\n    public static readonly SPINY_SHELL =                                   new class Entities_SpinyShell extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Togezo', 2,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Togezo', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Spiny Shell',);\n\n    public static readonly SPIKE_TOP =                                     new class Entities_SpikeTop extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('TogeMet',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('TogeMet')\n                .setNotSM3DW();\n        }\n\n    }('Spike Top',);\n    public static readonly WINGED_SPIKE_TOP =                              new Entities('Winged Spike Top',);\n    public static readonly FAST_SPIKE_TOP =                                new class Entities_FastSpikeTop extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('TogeMet', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Fast Spike Top',);\n    public static readonly FAST_WINGED_SPIKE_TOP =                         new Entities('Fast Winged Spike Top',);\n\n    public static readonly SKIPSQUEAK =                                    new class Entities_Skipsqueak extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pyonchu', 1,)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pyonchu',)\n                .setOnlySM3DW();\n        }\n\n    }('Skipsqueak',);\n    public static readonly SPINY_SKIPSQUEAK =                              new class Entities_SpinySkipsqueak extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pyonchu', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Spiny Skipsqueak',);\n\n    public static readonly ANT_TROOPER =                                   new class Entities_AntTrooper extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Arihei', 1,)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Arihei',)\n                .setOnlySM3DW();\n        }\n\n    }('Ant Trooper',);\n    public static readonly HORNED_ANT_TROOPER =                            new class Entities_HornedAntTrooper extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Arihei', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Horned Ant Trooper',);\n\n    public static readonly STINGBY =                                       new class Entities_Stingby extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Hacchin',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Hacchin',)\n                .setOnlySM3DW();\n        }\n\n    }('Stingby',);\n\n    public static readonly CHEEP_CHEEP =                                   new class Entities_CheepCheep extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pukupuku',)\n                .setAmount(2)\n                .setAllGameStyles()\n                .setImage(GameStyles.SUPER_MARIO_WORLD, null, null, 2,)\n                .setImage(GameStyles.NEW_SUPER_MARIO_BROS_U, null, null, 2,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pukupuku',)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD, GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Cheep Cheep',);\n    public static readonly BLURPS =                                        new class Entities_Blurps extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pukupuku', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pukupuku',)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Blurps',);\n    public static readonly DEEP_CHEEP =                                    new class Entities_DeepCheep extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pukupuku', 1,)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pukupuku',)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Deep Cheep',);\n    public static readonly FISH_BONE =                                     new class Entities_FishBone extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'FishBone';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'FishBone';\n        }\n\n    }('Fish Bone',);\n\n    public static readonly BLOOPER =                                       new class Entities_Blooper extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Gesso', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Gesso';\n        }\n\n    }('Blooper',);\n    public static readonly BLOOPER_NANNY =                                 new class Entities_BlooperNanny extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Gesso', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Blooper Nanny',);\n    public static readonly BABY_BLOOPER =                                  new Entities('Baby Blooper',);\n\n    public static readonly PORCUPUFFER =                                   new class Entities_Porcupuffer extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Fugumannen',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Fugumannen',)\n                .setOnlySM3DW();\n        }\n\n    }('Porcupuffer',);\n\n    public static readonly WIGGLER =                                       new class Entities_Wiggler extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Hanachan', 1,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Hanachan',)\n                .setNotSM3DW();\n        }\n\n    }('Wiggler',);\n    public static readonly ANGRY_WIGGLER =                                 new class Entities_AngryWiggler extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Hanachan', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Angry Wiggler',);\n\n    public static readonly PIRANHA_PLANT =                                 new class Entities_PiranhaPlant extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pakkun', 1,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pakkun', 1,)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Piranha Plant',);\n    public static readonly JUMPING_PIRANHA_PLANT =                         new class Entities_JumpingPiranhaPlant extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pakkun', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pakkun', 1,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Jumping Piranha Plant',);\n    public static readonly FIRE_PIRANHA_PLANT =                            new class Entities_FirePiranhaPlant extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Pakkun', 2,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Pakkun', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_WORLD,);\n        }\n\n    }('Fire Piranha Plant',);\n    public static readonly FIREBALL_THROWN_BY_A_FIRE_PIRANHA_PLANT =       new Entities('Fireball thrown by a Fire Piranha Plant',);\n    public static readonly MUNCHER =                                       new class Entities_Muncher extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BlackPakkun',)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BlackPakkun',)\n                .setNotSM3DW();\n        }\n\n    }('Muncher',);\n    public static readonly PIRANHA_CREEPER =                               new class Entities_PiranhaCreeper extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PackunPipe',)\n                .setAmount(2)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('PackunPipe',)\n                .setOnlySM3DW();\n        }\n\n    }('Piranha Creeper',);\n\n    public static readonly CHAIN_CHOMP =                                   new class Entities_ChainChomp extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Wanwan', 1,)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n    }('Chain Chomp',);\n    public static readonly UNCHAINED_CHOMP =                               new class Entities_UnchainedChomp extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Wanwan', 2,)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Wanwan')\n                .setNotSM3DW();\n        }\n\n    }('Unchained Chomp',);\n    public static readonly CHAIN_CHOMP_STUMP =                             new Entities('Chain Chomp\\'s Stump',);\n\n    public static readonly SPIKE =                                         new class Entities_Spike extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Gabon', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Gabon';\n        }\n\n    }('Spike',);\n    public static readonly SPIKE_BALL =                                    new class Entities_SpikeBall extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Gabon', 2,)\n                .setAllGameStyles()\n                .setTheme(GameStyles.SUPER_MARIO_BROS, Themes.UNDERGROUND, Themes.GHOST_HOUSE, Themes.CASTLE,)\n                .setTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.UNDERGROUND, Themes.GHOST_HOUSE, Themes.CASTLE,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS, Themes.GROUND, Themes.DESERT, Themes.SKY, Themes.FOREST, Themes.AIRSHIP,)\n                .setNightTheme(GameStyles.SUPER_MARIO_BROS_3, Themes.GROUND, Themes.DESERT, Themes.SKY, Themes.FOREST, Themes.AIRSHIP,);\n        }\n\n    }('Spike Ball',);\n    public static readonly SNOWBALL =                                      new class Entities_Snowball extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Gabon', 2,)\n                .setAllGameStyles()\n                .setAsSnow();\n        }\n\n    }('Snowball',);\n\n    public static readonly LAKITU =                                        new class Entities_Lakitu extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Jugem', 1,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Jugem', 1,)\n                .setNotSM3DW();\n        }\n\n    }('Lakitu',);\n    public static readonly LAKITU_CLOUD =                                  new class Entities_LakituCloud extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Jugem', 2,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Jugem', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Lakitu\\'s Cloud',);\n\n    public static readonly BOO =                                           new class Entities_Boo extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Teresa', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Teresa';\n        }\n\n    }('Boo',);\n    public static readonly STRETCH =                                       new class Entities_Stretch extends Entities {\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            const waitImages = ['out', 1,] as const;\n            const outImages = ['wait', 4,] as const;\n            return [\n                new UnusedImage_RegularBuilder('Necchi',)\n                    .setImage(GameStyles.SUPER_MARIO_BROS, ...waitImages,)\n                    .setImage(GameStyles.SUPER_MARIO_BROS, ...outImages,)\n                    .setImage(GameStyles.SUPER_MARIO_BROS_3, ...waitImages,)\n                    .setImage(GameStyles.SUPER_MARIO_BROS_3, ...outImages,)\n                    .setImage(GameStyles.SUPER_MARIO_WORLD, ...waitImages,)\n                    .setImage(GameStyles.SUPER_MARIO_WORLD, ...outImages,),\n                new UnusedImage_BigMushroomBuilder('Necchi',)\n                    .setImage('wait', [1,],)\n                    .setImage('wait', [2,],)\n                    .setImage('out', [4,],),\n            ];\n        }\n\n    }('Stretch',);\n    public static readonly BOO_BUDDIES =                                   new class Entities_BooBuddies extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Teresa', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Boo Buddies',);\n    public static readonly PEEPA =                                         new class Entities_Peepa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Teresa', 2,)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Teresa', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Peepa',);\n\n    public static readonly BOB_OMB =                                       new class Entities_BobOmb extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bombhei', 1,)\n                .setAsDifferentInSMBAndSMB3()\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Bombhei';\n        }\n\n    }('Bob-omb',);\n    public static readonly LIT_BOB_OMB =                                   new class Entities_LitBobOmb extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bombhei', 2,)\n                .setAllGameStyles();\n        }\n\n    }('Lit Bob-omb',);\n\n    public static readonly POKEY =                                         new class Entities_Pokey extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Sambo';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Sambo';\n        }\n\n    }('Pokey',);\n    public static readonly SNOW_POKEY =                                    new class Entities_SnowPokey extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Sambo', 1,)\n                .setAllGameStyles()\n                .setAsSnow();\n        }\n\n    }('Snow Pokey',);\n\n    public static readonly THWOMP =                                        new class Entities_Thwomp extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Dossun';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Dossun';\n        }\n\n    }('Thwomp',);\n\n    public static readonly MONTY_MOLE =                                    new class Entities_MontyMole extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('ChoroPoo',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('ChoroPoo',)\n                .setNotSM3DW();\n        }\n\n    }('Monty Mole',);\n    public static readonly ROCKY_WRENCH =                                  new class Entities_RockyWrench extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Poo',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Poo',)\n                .setNotSM3DW();\n        }\n\n    }('Rocky Wrench',);\n    public static readonly WRENCH_THROWN_BY_A_ROCKY_WRENCH =               new Entities('Wrench thrown by a Rocky Wrench',);\n\n    public static readonly MAGIKOOPA =                                     new class Entities_Magikoopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Kameck';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Kameck';\n        }\n\n    }('Magikoopa',);\n    public static readonly MAGIKOOPA_PROJECTILE =                          new Entities('(Magikoopa\\'s projectile)',);\n\n    public static readonly HAMMER_BRO =                                    new class Entities_HammerBro extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bros', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Bros';\n        }\n\n    }('Hammer Bro',);\n    public static readonly SLEDGE_BRO =                                    new class Entities_SledgeBro extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MegaBros', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'MegaBros';\n        }\n\n    }('Sledge Bro',);\n    public static readonly HAMMER_THROWN_BY_A_HAMMER_SLEDGE_BRO =          new Entities('Hammer thrown by a Hammer / Sledge Bro',);\n    public static readonly FIRE_BRO =                                      new class Entities_FireBro extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bros', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Fire Bro',);\n    public static readonly HEAVY_FIRE_BRO =                                new class Entities_HeavyFireBro extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MegaBros', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Heavy Fire Bro',);\n    public static readonly FIREBALL_THROWN_BY_A_HEAVY_FIRE_BRO =           new Entities('Fireball thrown by a (Heavy) Fire Bro',);\n\n    public static readonly LAVA_BUBBLE =                                   new class Entities_LavaBubble extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Bubble';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Bubble';\n        }\n\n    }('Lava Bubble',);\n\n    public static readonly MECHAKOOPA =                                    new class Entities_Mechakoopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaMecha', 1,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KoopaMecha',)\n                .setNotSM3DW();\n        }\n\n    }('Mechakoopa',);\n    public static readonly BLASTA_MECHAKOOPA =                             new class Entities_BlastaMechakoopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaMecha', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Blasta Mechakoopa',);\n    public static readonly HOMING_MISSILE_THROWN_BY_A_BLASTA_MECHAKOOPA =  new Entities('Homing Missile thrown by a Blasta Mechakoopa',);\n    public static readonly ZAPPA_MECHAKOOPA =                              new class Entities_ZappaMechakoopa extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaMecha', 3,)\n                .setNotSM3DW();\n        }\n\n    }('Zappa Mechakoopa',);\n    public static readonly ELECTRICITY_BEAM_THROWN_BY_A_ZAPPA_MECHAKOOPA = new Entities('Electricity Beam thrown by a Zappa Mechakoopa',);\n\n    public static readonly CHARVAARGH =                                    new class Entities_Charvaargh extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MagmaFish',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('MagmaFish',)\n                .setOnlySM3DW();\n        }\n\n    }('Charvaargh',);\n\n    public static readonly BULLY =                                         new class Entities_Bully extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Donketsu',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Donketsu',)\n                .setOnlySM3DW();\n        }\n\n    }('Bully',);\n\n    //endregion -------------------- General enemies --------------------\n    //region -------------------- Dangerous gizmo + enemy-related gizmo + other enemies --------------------\n\n    public static readonly BILL_BLASTER =                                  new class Entities_BillBlaster extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KillerHoudai', 1,)\n                .setAllGameStyles()\n                .setAsDifferentInSMBAndSMB3();\n        }\n\n    }('Bill Blaster',);\n    public static readonly BULLET_BILL =                                   new class Entities_BulletBill extends Entities {\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'Killer';\n        }\n\n    }('Bullet Bill',);\n    public static readonly BULL_EYE_BLASTER =                              new class Entities_BullEyeBlaster extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KillerHoudai', 2,)\n                .setAllGameStyles();\n        }\n\n    }('Bull\\'s-Eye Blaster',);\n    public static readonly BULL_EYE_BILL =                                 new Entities('Bull\\'s-Eye Bill',);\n    public static readonly CAT_BULLET_BILL =                               new Entities('Cat Bullet Bill',);\n\n    public static readonly BANZAI_BILL =                                   new class Entities_BanzaiBill extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MagnumKiller', 1,)\n                .setAllGameStyles()\n                .setAsDifferentInSMBAndSMB3();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'MagnumKiller';\n        }\n\n    }('Banzai Bill',);\n    public static readonly BULL_EYE_BANZAI =                               new class Entities_BullEyeBanzai extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MagnumKiller', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Bull\\'s-Eye Banzai',);\n    public static readonly CAT_BANZAI_BILL =                               new class Entities_CatBanzaiBill extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('MagnumKiller', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Cat Banzai Bill',);\n\n    public static readonly CANNON =                                        new class Entities_Cannon extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Houdai', 1,)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n    }('Cannon',);\n    public static readonly CANNONBALL =                                    new class Entities_Cannonball extends Entities {\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            return [\n                null,\n                new UnusedImage_BigMushroomBuilder('SenkanHoudai D',)\n                    .setImage('senkan_houdai_ball',),\n            ];\n        }\n\n    }('Cannonball',);\n    public static readonly RED_CANNON =                                    new class Entities_RedCannon extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Houdai', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Red Cannon',);\n    public static readonly RED_CANNONBALL =                                new Entities('Red Cannonball',);\n\n    public static readonly BURNER =                                        new class Entities_Burner extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Burner',)\n                .setAmount(2)\n                .setNotSM3DW();\n        }\n\n    }('Burner',);\n\n    public static readonly FIRE_BAR =                                      new class Entities_FireBar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('FireBar',)\n                .setNotSM3DW();\n        }\n\n    }('Fire Bar',);\n\n    public static readonly SKEWER =                                        new class Entities_Skewer extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('TogeKonbo',)\n                .setAsDifferentInSMBAndSMB3()\n                .setNotSM3DW();\n        }\n\n    }('Skewer',);\n\n    public static readonly KOOPA_CLOWN_CAR =                               new class Entities_KoopaClownCar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaClown', 1,)\n                .setNotGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U, GameStyles.SUPER_MARIO_3D_WORLD,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KoopaClown',)\n                .setNotGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U, GameStyles.SUPER_MARIO_3D_WORLD,);\n        }\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            const images = [4, 5, 6, 7,] as const;\n            return [\n                new UnusedImage_RegularBuilder('KoopaClown',)\n                    .setImage(GameStyles.SUPER_MARIO_WORLD, 'weep', images,),\n                new UnusedImage_BigMushroomBuilder('KoopaClown',)\n                    .setImage('wait', images,)\n                    .setImage('anger', images,)\n                    .setImage('blink', images,)\n                    .setImage('weep', images,),\n            ];\n        }\n\n    }('Koopa Clown Car',);\n    public static readonly JUNIOR_CLOWN_CAR =                              new class Entities_JuniorClownCar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaClown', 1,)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KoopaClown',)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Junior Clown Car',);\n    public static readonly FIRE_KOOPA_CLOWN_CAR =                          new class Entities_FireKoopaClownCar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaClown', 2,)\n                .setNotGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U, GameStyles.SUPER_MARIO_3D_WORLD,);\n        }\n\n    }('Fire Koopa Clown Car',);\n    public static readonly FIRE_JUNIOR_CLOWN_CAR =                         new class Entities_FireJuniorClownCar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaClown', 2,)\n                .setGameStyle(GameStyles.NEW_SUPER_MARIO_BROS_U,);\n        }\n\n    }('Fire Junior Clown Car',);\n    public static readonly FIRE_THROWN_BY_A_FIRE_KOOPA_JUNIOR_CLOWN_CAR =  new Entities('Fire thrown by a Fire [Koopa / Junior] Clown Car',);\n\n    public static readonly KOOPA_TROOPA_CAR =                              new class Entities_KoopaTroopaCar extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaCar',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KoopaCar',)\n                .setOnlySM3DW();\n        }\n\n    }('Koopa Troopa Car',);\n    public static readonly CAR =                                           new Entities('Car',);\n\n    public static readonly GRINDER =                                       new class Entities_Grinder extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Saw',)\n                .setNotSM3DW();\n        }\n\n    }('Grinder',);\n\n    public static readonly ANGRY_SUN =                                     new class Entities_AngrySun extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SunMoon', 1,)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('SunMoon',)\n                .setNotSM3DW();\n        }\n\n    }('Angry Sun',);\n    public static readonly MOON =                                          new class Entities_Moon extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SunMoon', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Moon',);\n\n    //endregion -------------------- Dangerous gizmo + enemy-related gizmo + other enemies --------------------\n    //region -------------------- Bosses + projectiles --------------------\n\n    public static readonly BOWSER =                                        new class Entities_Bowser extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Koopa',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Koopa',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            return [\n                null,\n                new UnusedImage_BigMushroomBuilder('Koopa',)\n                    .setImage('fire', [1,],),\n            ];\n        }\n\n    }('Bowser',);\n    public static readonly MEOWSER =                                       new class Entities_Meowser extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Koopa',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Koopa',)\n                .setOnlySM3DW();\n        }\n\n    }('Meowser',);\n    public static readonly FIRE_THROWN_BY_A_BOWSER =                       new Entities('Fire thrown by a Bowser',);\n    public static readonly FALLING_FIRE_THROWN_BY_A_BOWSER =               new Entities('Falling Fire thrown by a Bowser',);\n\n    public static readonly BOWSER_JR =                                     new class Entities_BowserJr extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('KoopaJr',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('KoopaJr',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            return [\n                null,\n                new UnusedImage_BigMushroomBuilder('KoopaJr',)\n                    .setImage('fire', [1,],),\n            ];\n        }\n\n    }('Bowser Jr.',);\n    public static readonly FIRE_THROWN_BY_A_BOWSER_JR =                    new Entities('Fire thrown by a Bowser Jr.',);\n\n    public static readonly BOOM_BOOM =                                     new class Entities_BoomBoom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bunbun', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Bunbun', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Boom Boom',);\n    public static readonly POM_POM =                                       new class Entities_PomPom extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Bunbun', 2,)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Bunbun', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Pom Pom',);\n    public static readonly POM_POM_CLONE =                                 new Entities('Pom Pom\\'s clone',);\n    public static readonly SHURIKEN_THROWN_BY_A_POM_POM =                  new Entities('Shuriken thrown by a Pom Pom',);\n\n    public static readonly LARRY =                                         new class Entities_Larry extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Larry',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Larry',)\n                .setNotSM3DW();\n        }\n\n    }('Larry',);\n    public static readonly LARRY_WAND =                                    new Entities('Larry\\'s Wand',);\n    public static readonly LARRY_PROJECTILE =                              new Entities('(Larry\\'s projectile)',);\n\n    public static readonly IGGY =                                          new class Entities_Iggy extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Iggy',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Iggy',)\n                .setNotSM3DW();\n        }\n\n    }('Iggy',);\n    public static readonly IGGY_WAND =                                     new Entities('Iggy\\'s Wand',);\n    public static readonly IGGY_PROJECTILE =                               new Entities('(Iggy\\'s projectile)',);\n\n    public static readonly WENDY =                                         new class Entities_Wendy extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Wendy',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Wendy',)\n                .setNotSM3DW();\n        }\n\n    }('Wendy',);\n    public static readonly WENDY_WAND =                                    new Entities('Wendy\\'s Wand',);\n    public static readonly CANDY_RING_THROWN_BY_A_WENDY =                  new Entities('Candy Ring thrown by a Wendy',);\n\n    public static readonly LEMMY =                                         new class Entities_Lemmy extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Lemmy',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Lemmy',)\n                .setNotSM3DW();\n        }\n\n    }('Lemmy',);\n    public static readonly LEMMY_WAND =                                    new Entities('Lemmy\\'s Wand',);\n    public static readonly MAGIC_BALL_THROWN_BY_A_LEMMY =                  new Entities('Magic Ball thrown by a Lemmy',);\n\n    public static readonly ROY =                                           new class Entities_Roy extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Roy',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Roy',)\n                .setNotSM3DW();\n        }\n\n    }('Roy',);\n    public static readonly ROY_WAND =                                      new Entities('Roy\\'s Wand',);\n    public static readonly ROY_PROJECTILE =                                new Entities('(Roy\\'s projectile)',);\n\n    public static readonly MORTON =                                        new class Entities_Morton extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Morton',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Morton',)\n                .setNotSM3DW();\n        }\n\n    }('Morton',);\n    public static readonly MORTON_WAND =                                   new Entities('Morton\\'s Wand',);\n    public static readonly MORTON_THROWN_PROJECTILE =                      new Entities('(Morton\\'s Thrown projectile)',);\n    public static readonly MORTON_GROUND_PROJECTILE =                      new Entities('(Morton\\'s Ground projectile)',);\n\n    public static readonly LUDWIG =                                        new class Entities_Ludwig extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Ludwig',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Ludwig',)\n                .setNotSM3DW();\n        }\n\n    }('Ludwig',);\n    public static readonly LUDWIG_WAND =                                   new Entities('Ludwig\\'s Wand',);\n    public static readonly LUDWIG_PROJECTILE =                             new Entities('(Ludwig\\'s projectile)',);\n\n    //endregion -------------------- Bosses + projectiles --------------------\n    //region -------------------- Passive gizmo / Key / Warp / Other --------------------\n\n    public static readonly BUMPER =                                        new class Entities_Bumper extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Marumaru',)\n                .setNotSM3DW();\n        }\n\n    }('Bumper',);\n\n    public static readonly SWINGING_CLAW =                                 new class Entities_SwingingClaw extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BurankoCrane',)\n                .setNotSM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BurankoCrane',)\n                .setNotSM3DW();\n        }\n\n    }('Swinging Claw',);\n\n    public static readonly TWISTER =                                       new class Entities_Twister extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Tornado';\n        }\n\n    }('Twister',);\n\n    public static readonly ONE_WAY_WALL =                                  new class Entities_OneWayWall extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Hanatari',)\n                .setNotSM3DW();\n        }\n\n    }('One-Way Wall',);\n\n    public static readonly TRACK =                                         new class Entities_Track extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Rail',)\n                .setNotSM3DW();\n        }\n\n    }('Track',);\n    public static readonly TRACK_BLOCK =                                   new class Entities_TrackBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('OrbitBlock',)\n                .setAmount(2)\n                .setOnlySM3DW();\n        }\n\n    }('Track Block',);\n\n    public static readonly VINE =                                          new class Entities_Vine extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('TsutaBlock',)\n                .setNotSM3DW();\n        }\n\n    }('Vine',);\n    public static readonly TREE =                                          new class Entities_Tree extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BellTree',)\n                .setTheme(GameStyles.SUPER_MARIO_3D_WORLD, Themes.UNDERGROUND, Themes.UNDERWATER, Themes.DESERT, Themes.SNOW, Themes.FOREST,);\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('BellTree',)\n                .setOnlySM3DW();\n        }\n\n    }('Tree',);\n\n    public static readonly ARROW_SIGN =                                    new class Entities_ArrowSign extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Yajirushi';\n        }\n\n    }('Arrow Sign',);\n\n    public static readonly CHECKPOINT_FLAG =                               new class Entities_CheckpointFlag extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'MiddleFlag';\n        }\n\n    }('Checkpoint Flag',);\n    public static readonly GOAL_POLE =                                     new Entities('Goal Pole',);\n    public static readonly GOAL_WITH_CARDS =                               new Entities('Cards Roulette',);\n    public static readonly GIANT_GATE =                                    new Entities('Giant Gate',);\n\n    public static readonly DASH_BLOCK =                                    new class Entities_DashBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('DashBlock',)\n                .setOnlySM3DW();\n        }\n\n    }('Dash Block',);\n\n    public static readonly SNAKE_BLOCK =                                   new class Entities_SnakeBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SnakeBlock', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Snake Block',);\n    public static readonly FAST_SNAKE_BLOCK =                              new class Entities_FastSnakeBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('SnakeBlock', 2,)\n                .setAllGameStyles();\n        }\n\n    }('Fast Snake Block',);\n\n    public static readonly CONVEYOR_BELT =                                 new class Entities_ConveyorBelt extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BeltConveyor', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Conveyor Belt',);\n    public static readonly FAST_CONVEYOR_BELT =                            new class Entities_FastConveyorBelt extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('BeltConveyor', 2,)\n                .setAllGameStyles();\n        }\n\n    }('Fast Conveyor Belt',);\n\n    public static readonly MUSHROOM_TRAMPOLINE =                           new class Entities_MushroomTrampoline extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Trampoline',)\n                .setAmount(2)\n                .setOnlySM3DW();\n        }\n\n    }('Mushroom Trampoline',);\n    public static readonly ON_OFF_TRAMPOLINE =                             new class Entities_OnOffTrampoline extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('OnOffTrampoline',)\n                .setAmount(2)\n                .setOnlySM3DW();\n        }\n\n    }('ON/OFF Trampoline',);\n\n    public static readonly LIFT =                                          new class Entities_List extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Lift', 1,)\n                .setNotSM3DW();\n        }\n\n    }('Lift',);\n    public static readonly FLIMSY_LIFT =                                   new class Entities_FlimsyLift extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Lift', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Flimsy Lift',);\n    public static readonly CLOUD_LIFT =                                    new class Entities_CloudLift extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Lift', 1,)\n                .setOnlySM3DW();\n        }\n\n    }('Cloud Lift',);\n\n    public static readonly SEESAW =                                        new class Entities_Seesaw extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Seesaw',)\n                .setNotSM3DW();\n        }\n\n    }('Seesaw',);\n\n    public static readonly LAVA_LIFT =                                     new class Entities_LavaLift extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('YouganLift', 1,)\n                .setNotSM3DW();\n        }\n\n    }('Lava Lift',);\n    public static readonly FAST_LAVA_LIFT =                                new class Entities_FastLavaLift extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('YouganLift', 2,)\n                .setNotSM3DW();\n        }\n\n    }('Fast Lava Lift',);\n\n    public static readonly CRATE =                                         new class Entities_Crate extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('WoodBox',)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('WoodBox',)\n                .setOnlySM3DW();\n        }\n\n    }('Crate',);\n\n    public static readonly KEY =                                           new class Entities_Key extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Key', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Key',);\n    public static readonly CURSED_KEY =                                    new class Entities_CursedKey extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Key', 2,)\n                .setGameStyle(GameStyles.SUPER_MARIO_BROS);\n        }\n\n    }('Cursed Key',);\n    public static readonly PHANTO =                                        new Entities('Phanto',);\n\n    public static readonly TRAMPOLINE =                                    new class Entities_Trampoline extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('JumpStep',)\n                .setAmount(2)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('JumpStep',)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_BROS,);\n        }\n\n    }('Trampoline',);\n    public static readonly HOP_CHOPS =                                     new class Entities_HopChops extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Hopper',)\n                .setOnlySM3DW();\n        }\n\n    }('Hop-Chops',);\n\n    public static readonly POW_BLOCK =                                     new class Entities_PowBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PowBlock', 1,)\n                .setAllGameStyles();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('PowBlock', 1,)\n                .setAllGameStyles();\n        }\n\n    }('POW Block',);\n    public static readonly RED_POW_BLOCK =                                 new class Entities_RedPowBlock extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('PowBlock', 2,)\n                .setOnlySM3DW();\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('PowBlock', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Red POW Block',);\n\n    public static readonly P_SWITCH =                                      new class Entities_PSwitch extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'PSwitch';\n        }\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return 'PSwitch';\n        }\n\n        protected override get _createUnusedImage(): PossibleUnusedImage {\n            return new UnusedImage_RegularBuilder('PSwitch',)\n                .setImage(GameStyles.SUPER_MARIO_BROS, 'wait', [0, 1, 2,],)\n                .setImage(GameStyles.NEW_SUPER_MARIO_BROS_U, 'down_switch_hatena_Alb', ['000', '004',],);\n        }\n\n    }('P Switch',);\n\n    public static readonly STONE =                                         new class Entities_Stone extends Entities {\n\n        protected override get _createClearConditionImage(): PossibleClearConditionImage {\n            return new ClearConditionImageBuilder('Stone',)\n                .setNotGameStyle(GameStyles.SUPER_MARIO_BROS,);\n        }\n\n    }('Stone',);\n\n    public static readonly WARP_DOOR =                                     new class Entities_WarpDoor extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Door', 1,)\n                .setAllGameStyles();\n        }\n\n    }('Warp Door',);\n    public static readonly P_WARP_DOOR =                                   new class Entities_PWarpDoor extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Door', 2,)\n                .setAllGameStyles();\n        }\n\n    }('P Warp Door',);\n    public static readonly KEY_DOOR =                                      new class Entities_KeyDoor extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('Door', 3,)\n                .setAllGameStyles();\n        }\n\n    }('Key Door',);\n\n    public static readonly WARP_BOX =                                      new class Entities_WarpBox extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('WarpBox', 1,)\n                .setOnlySM3DW();\n        }\n\n    }('Warp Box',);\n    public static readonly WARP_BOX_WITH_KEY =                             new class Entities_WarpBoxWithKey extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return new EditorImageBuilder('WarpBox', 2,)\n                .setOnlySM3DW();\n        }\n\n    }('Warp Box (With Key)',);\n\n    public static readonly WING =                                          new class Entities_Wing extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'Wing';\n        }\n\n    }('Wing',);\n    public static readonly PARACHUTE =                                     new class Entities_Parachute extends Entities {\n\n        protected override get _createEditorImage(): PossibleEditorImage {\n            return 'parachute';\n        }\n\n    }('Parachute',);\n\n    public static readonly TOAD =                                          new Entities('Toad',);\n    public static readonly CAGED_TOADETTE =                                new Entities('Caged Toadette',);\n\n    public static readonly BUBBLE =                                        new Entities('Bubble',);\n\n    //endregion -------------------- Passive gizmo / Key / Warp / Other --------------------\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Entities;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, Entity>;\n\n    #reference?: Entity;\n    readonly #englishNameContainer;\n    #editorImage?: EditorImage;\n    #clearConditionImage?: ClearConditionImage;\n    #whilePlayingImage?: InGameImage;\n    #unusedImages?: UnusedImages;\n    #editorVoiceSound?: EditorVoiceSound;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName,) {\n        super();\n        this.#englishNameContainer = new StringContainer(englishName);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, Entity> {\n        return this.#REFERENCE_MAP ??= Import.EntityLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): Entity {\n        return this.#reference ??= Entities.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishNameContainer.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishNameContainer.getInHtml;\n    }\n\n    //region -------------------- editor image --------------------\n\n    /**\n     * Get the editor image in a string form or in a builder form.\n     *\n     * @protected\n     * @onlyCalledOnce\n     */\n    protected get _createEditorImage(): PossibleEditorImage {\n        return null;\n    }\n\n    public get editorImage(): EditorImage {\n        return this.#editorImage ??= EditorImageFactory.create(this._createEditorImage);\n    }\n\n    //endregion -------------------- editor image --------------------\n\n    public get editorVoiceSound(): EditorVoiceSound {\n        return this.#editorVoiceSound ??= EditorVoices.getValue(this)?.editorVoiceSound ?? EmptyEditorVoiceSound.get;\n    }\n\n    //region -------------------- clear condition image --------------------\n\n    /**\n     * Get the clear condition image in a string form or in a builder form.\n     *\n     * @protected\n     * @onlyCalledOnce\n     */\n    protected get _createClearConditionImage(): PossibleClearConditionImage {\n        return null;\n    }\n\n    public get clearConditionImage(): ClearConditionImage {\n        return this.#clearConditionImage ??= ClearConditionImageFactory.create(this._createClearConditionImage);\n    }\n\n    //endregion -------------------- clear condition image --------------------\n    //region -------------------- while playing image --------------------\n\n    /**\n     * Get the \"in game\" image in a string form or in a builder form.\n     *\n     * @protected\n     * @onlyCalledOnce\n     */\n    protected get _createInGameImage(): PossibleInGameImage {\n        return null;\n    }\n\n    public get inGameImage(): InGameImage {\n        return this.#whilePlayingImage ??= InGameImageFactory.create(this._createInGameImage);\n    }\n\n    //endregion -------------------- while playing image --------------------\n    //region -------------------- unused image --------------------\n\n    /**\n     * Get the \"unused\" image in a string form or in a builder form.\n     *\n     * @protected\n     * @onlyCalledOnce\n     */\n    protected get _createUnusedImage(): PossibleUnusedImage {\n        return null;\n    }\n\n    public get unusedImages(): UnusedImages {\n        return this.#unusedImages ??= UnusedImageFactory.create(this._createUnusedImage);\n    }\n\n    //endregion -------------------- unused image --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Entities> {\n        return Entities;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Entities = Entities, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Entities\n    public static getValue(value: PossibleValue,): | Entities | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\n//TODO remove this test variable when the entities will be complete\n// @ts-ignore\n(window.test ??= {}).Entities = Entities;\n","import type {ClassThatIsAvailableFromTheStart, InferredClassThatIsAvailableFromTheStartBySMM1, PossibleIsAvailableFromTheStart} from './ClassThatIsAvailableFromTheStart';\nimport type {ProviderForNullable}                                                                                               from '../../util/provider/ProviderForNullable';\nimport type {ProviderWithoutKey}                                                                                                from '../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}                          from '../../util/provider/AbstractProvider';\nimport {ClassThatIsAvailableFromTheStartContainer} from './ClassThatIsAvailableFromTheStart.container';\nimport {GameStructureProvider}                     from '../game/GameStructure.provider';\n\n/**\n * @singleton\n */\nexport class ClassThatIsAvailableFromTheStartProvider\n    extends AbstractProvider<ArgumentsReceived, ClassThatIsAvailableFromTheStart>\n    implements ProviderWithoutKey<ClassThatIsAvailableFromTheStart, ArgumentsReceived>, ProviderForNullable<ClassThatIsAvailableFromTheStart, ClassThatIsAvailableFromTheStart<null, null, null>, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: ClassThatIsAvailableFromTheStartProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * A fast way to retrieve an empty {@link ClassThatIsAvailableFromTheStart} with only null as their parameters\n     */\n    public get null() {\n        return this.get(null, null, null,);\n    }\n\n    /**\n     * <p>\n     *  Get the arguments to know if this is available from the start or not.\n     * </p>\n     * <p>\n     *  It will create an instance of {@link ClassThatIsAvailableFromTheStart}\n     *  based on the argument received.\n     *  And depending on the value received, it will return a specific instance:\n     *  <ol>\n     *      <li>null → {@link ClassThatIsAvailableFromTheStart}&#60;null, null, true&#62;</li>\n     *      <li>boolean → {@link ClassThatIsAvailableFromTheStart}&#60;boolean, true, true&#62;</li>\n     *  <ol/>\n     * </p>\n     *\n     * @param isAvailableInSMM1 is available from the start in {@link Games.SUPER_MARIO_MAKER_1}\n     * @noDuplicateInstanceCreation\n     */\n    public get<SMM1 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, >(isAvailableInSMM1: SMM1,): InferredClassThatIsAvailableFromTheStartBySMM1<SMM1>\n    /**\n     * <p>\n     *  Get the arguments to know if this is available from the start or not.\n     * </p>\n     * <p>\n     *  It will create or get an instance of {@link ClassThatIsAvailableFromTheStart}\n     *  based on the 3 arguments received.\n     * </p>\n     *\n     * @param isAvailableFromTheStart_SMM1 is available from the start in {@link Games.SUPER_MARIO_MAKER_1}\n     * @param isAvailableFromTheStart_SMM3DS is available from the start in {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS}\n     * @param isAvailableFromTheStart_SMM2 is available from the start in {@link Games.SUPER_MARIO_MAKER_2}\n     * @noDuplicateInstanceCreation\n     */\n    public get<SMM1 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM3DS extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM2 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, >(isAvailableFromTheStart_SMM1: SMM1, isAvailableFromTheStart_SMM3DS: SMM3DS, isAvailableFromTheStart_SMM2: SMM2,): ClassThatIsAvailableFromTheStart<SMM1, SMM3DS, SMM2>\n    public get(...argumentsReceived: | ArgumentsReceived | ArgumentsReceived_Simplified): ClassThatIsAvailableFromTheStart {\n        if (argumentsReceived.length === 1)\n            return argumentsReceived[0] == null\n                ? this.get(null, null, true,)\n                : this.get(argumentsReceived[0], true, true,);\n\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new ClassThatIsAvailableFromTheStartContainer(GameStructureProvider.get.get(...argumentsReceived),)))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived<SMM1 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM3DS extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM2 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, > = readonly [\n    SMM1,\n    SMM3DS,\n    SMM2,\n];\ntype ArgumentsReceived_Simplified<SMM1 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, > = readonly [\n    SMM1,\n];\n","import {Tooltip} from 'bootstrap';\n\nimport type {TooltipEventCallbackReceived, TooltipEvents, TooltipEventsReceived} from './Tooltip.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class TooltipInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof TooltipInstance, Tooltip, Tooltip.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Tooltip.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Tooltip.Event.SHOW as Tooltip.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Tooltip.Event.SHOWN as Tooltip.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Tooltip.Event.HIDE as Tooltip.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Tooltip.Event.HIDDEN as Tooltip.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Tooltip.Event.INSERTED as Tooltip.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Tooltip.Options> = TooltipInstance.DEFAULT_OPTIONS, callbacks: TooltipEventsReceived = null,) {\n        super(TooltipInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected _createInstance(options: Partial<Tooltip.Options>,): Tooltip {\n        return Tooltip.getOrCreateInstance(this.element, options,);\n    }\n\n\n    #addEventListener(type: string, callback: TooltipEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/tooltips/#events\n     */\n    protected override _on(callbacks: Partial<TooltipEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Tooltip.Events.show\n     */\n    public override onShow(callback: TooltipEventCallbackReceived<this>,): this {\n        return this.#addEventListener(TooltipInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Tooltip.Events.shown\n     */\n    public override onShown(callback: TooltipEventCallbackReceived<this>,): this {\n        return this.#addEventListener(TooltipInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Tooltip.Events.hide\n     */\n    public override onHide(callback: TooltipEventCallbackReceived<this>,): this {\n        return this.#addEventListener(TooltipInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Tooltip.Events.hidden\n     */\n    public override onHidden(callback: TooltipEventCallbackReceived<this>,): this {\n        return this.#addEventListener(TooltipInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Tooltip.Events.inserted\n     */\n    public onInserted(callback: TooltipEventCallbackReceived<this>,): this {\n        return this.#addEventListener(TooltipInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): TooltipInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(TooltipInstance, element);\n    }\n\n}\n","import type {EveryLanguages}                            from '../EveryLanguages';\nimport type {Name}                                      from './Name';\nimport type {NameTrait}                                 from './NameTrait';\nimport type {NameTraitFromACategory}                    from './NameTraitFromACategory';\nimport type {ObjectHolder, PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\n\nimport {ClassContainingAName}         from './ClassContainingAName';\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\n\nexport class ClassContainingANameAndACategory<T, U, CATEGORY extends NameTrait<U>, >\n    extends ClassContainingAName<T>\n    implements NameTraitFromACategory<U, CATEGORY> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #categoryContainer: ObjectHolder<CATEGORY>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<T>>, category: PossibleValueOnObjectHolder<CATEGORY>,) {\n        super(name,);\n        this.#categoryContainer = new DelayedObjectHolderContainer(category);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get categoryContainer(): CATEGORY {\n        return this.#categoryContainer.get;\n    }\n\n    public get categoryNameContainer(): this['categoryContainer']['nameContainer'] {\n        return this.categoryContainer.nameContainer;\n    }\n\n\n    public get categoryLanguageValue(): this['categoryNameContainer']['languageValue'] {\n        return this.categoryNameContainer.languageValue;\n    }\n\n    //region -------------------- English properties --------------------\n\n    public get categoryOriginalEnglish(): this['categoryNameContainer']['originalEnglish'] {\n        return this.categoryNameContainer.originalEnglish;\n    }\n\n    public get categoryEnglish(): this['categoryNameContainer']['english'] {\n        return this.categoryNameContainer.english;\n    }\n\n    public get categoryAmericanEnglish(): this['categoryNameContainer']['americanEnglish'] {\n        return this.categoryNameContainer.americanEnglish;\n    }\n\n    public get categoryEuropeanEnglish(): this['categoryNameContainer']['europeanEnglish'] {\n        return this.categoryNameContainer.europeanEnglish;\n    }\n\n    //endregion -------------------- English properties --------------------\n    //region -------------------- French properties --------------------\n\n    public get categoryOriginalFrench(): this['categoryNameContainer']['originalFrench'] {\n        return this.categoryNameContainer.originalFrench;\n    }\n\n    public get categoryFrench(): this['categoryNameContainer']['french'] {\n        return this.categoryNameContainer.french;\n    }\n\n    public get categoryCanadianFrench(): this['categoryNameContainer']['canadianFrench'] {\n        return this.categoryNameContainer.canadianFrench;\n    }\n\n    public get categoryEuropeanFrench(): this['categoryNameContainer']['europeanFrench'] {\n        return this.categoryNameContainer.europeanFrench;\n    }\n\n    //endregion -------------------- French properties --------------------\n    //region -------------------- German properties --------------------\n\n    public get categoryGerman(): this['categoryNameContainer']['german'] {\n        return this.categoryNameContainer.german;\n    }\n\n    //endregion -------------------- German properties --------------------\n    //region -------------------- Spanish properties --------------------\n\n    public get categoryOriginalSpanish(): this['categoryNameContainer']['originalSpanish'] {\n        return this.categoryNameContainer.originalSpanish;\n    }\n\n    public get categorySpanish(): this['categoryNameContainer']['spanish'] {\n        return this.categoryNameContainer.spanish;\n    }\n\n    public get categoryAmericanSpanish(): this['categoryNameContainer']['americanSpanish'] {\n        return this.categoryNameContainer.americanSpanish;\n    }\n\n    public get categoryEuropeanSpanish(): this['categoryNameContainer']['europeanSpanish'] {\n        return this.categoryNameContainer.europeanSpanish;\n    }\n\n    //endregion -------------------- Spanish properties --------------------\n    //region -------------------- Italian properties --------------------\n\n    public get categoryItalian(): this['categoryNameContainer']['italian'] {\n        return this.categoryNameContainer.italian;\n    }\n\n    //endregion -------------------- Italian properties --------------------\n    //region -------------------- Dutch properties --------------------\n\n    public get categoryDutch(): this['categoryNameContainer']['dutch'] {\n        return this.categoryNameContainer.dutch;\n    }\n\n    //endregion -------------------- Dutch properties --------------------\n    //region -------------------- Portuguese properties --------------------\n\n    public get categoryOriginalPortuguese(): this['categoryNameContainer']['originalPortuguese'] {\n        return this.categoryNameContainer.originalPortuguese;\n    }\n\n    public get categoryPortuguese(): this['categoryNameContainer']['portuguese'] {\n        return this.categoryNameContainer.portuguese;\n    }\n\n    public get categoryAmericanPortuguese(): this['categoryNameContainer']['americanPortuguese'] {\n        return this.categoryNameContainer.americanPortuguese;\n    }\n\n    public get categoryEuropeanPortuguese(): this['categoryNameContainer']['europeanPortuguese'] {\n        return this.categoryNameContainer.europeanPortuguese;\n    }\n\n    //endregion -------------------- Portuguese properties --------------------\n    //region -------------------- Russian properties --------------------\n\n    public get categoryRussian(): this['categoryNameContainer']['russian'] {\n        return this.categoryNameContainer.russian;\n    }\n\n    //endregion -------------------- Russian properties --------------------\n    //region -------------------- Japanese properties --------------------\n\n    public get categoryJapanese(): this['categoryNameContainer']['japanese'] {\n        return this.categoryNameContainer.japanese;\n    }\n\n    //endregion -------------------- Japanese properties --------------------\n    //region -------------------- Chinese properties --------------------\n\n    public get categoryOriginalChinese(): this['categoryNameContainer']['originalChinese'] {\n        return this.categoryNameContainer.originalChinese;\n    }\n\n    public get categoryChinese(): this['categoryNameContainer']['chinese'] {\n        return this.categoryNameContainer.chinese;\n    }\n\n    public get categoryTraditionalChinese(): this['categoryNameContainer']['traditionalChinese'] {\n        return this.categoryNameContainer.traditionalChinese;\n    }\n\n    public get categorySimplifiedChinese(): this['categoryNameContainer']['simplifiedChinese'] {\n        return this.categoryNameContainer.simplifiedChinese;\n    }\n\n    //endregion -------------------- Chinese properties --------------------\n    //region -------------------- Korean properties --------------------\n\n    public get categoryKorean(): this['categoryNameContainer']['korean'] {\n        return this.categoryNameContainer.korean;\n    }\n\n    //endregion -------------------- Korean properties --------------------\n    //region -------------------- Hebrew properties --------------------\n\n    public get categoryIsHebrewUsed(): this['categoryNameContainer']['isHebrewUsed'] {\n        return this.categoryNameContainer.isHebrewUsed;\n    }\n\n    public get categoryHebrew(): this['categoryNameContainer']['hebrew'] {\n        return this.categoryNameContainer.hebrew;\n    }\n\n    //endregion -------------------- Hebrew properties --------------------\n    //region -------------------- Polish properties --------------------\n\n    public get categoryIsPolishUsed(): this['categoryNameContainer']['isPolishUsed'] {\n        return this.categoryNameContainer.isPolishUsed;\n    }\n\n    public get categoryPolish(): this['categoryNameContainer']['polish'] {\n        return this.categoryNameContainer.polish;\n    }\n\n    //endregion -------------------- Polish properties --------------------\n    //region -------------------- Ukrainian properties --------------------\n\n    public get categoryIsUkrainianUsed(): this['categoryNameContainer']['isUkrainianUsed'] {\n        return this.categoryNameContainer.isUkrainianUsed;\n    }\n\n    public get categoryUkrainian(): this['categoryNameContainer']['ukrainian'] {\n        return this.categoryNameContainer.ukrainian;\n    }\n\n    //endregion -------------------- Ukrainian properties --------------------\n    //region -------------------- Greek properties --------------------\n\n    public get categoryIsGreekUsed(): this['categoryNameContainer']['isGreekUsed'] {\n        return this.categoryNameContainer.isGreekUsed;\n    }\n\n    public get categoryGreek(): this['categoryNameContainer']['greek'] {\n        return this.categoryNameContainer.german;\n    }\n\n    //endregion -------------------- Greek properties --------------------\n\n    public get categoryOriginalLanguages(): this['categoryNameContainer']['originalLanguages'] {\n        return this.categoryNameContainer.originalLanguages;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //endregion -------------------- Convertor methods --------------------\n\n    public toCategoryNameMap(): ReadonlyMap<EveryLanguages, U> {\n        return this.categoryNameContainer.toNameMap();\n    }\n\n    //region -------------------- Convertor methods --------------------\n\n}\n","import type {GameStructure} from './GameStructure';\n\nexport class GameStructureContainer<SMM1 extends any = any, SMM3DS extends any = any, SMM2 extends any = any, >\n    implements GameStructure<SMM1, SMM3DS, SMM2> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #superMarioMaker;\n    readonly #superMarioMakerForNintendo3DS;\n    readonly #superMarioMaker2;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(isInSuperMarioMaker1: SMM1, isInSuperMarioMakerFor3DS: SMM3DS, isInSuperMarioMaker2: SMM2,) {\n        this.#superMarioMaker = isInSuperMarioMaker1;\n        this.#superMarioMakerForNintendo3DS = isInSuperMarioMakerFor3DS;\n        this.#superMarioMaker2 = isInSuperMarioMaker2;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get superMarioMaker(): SMM1 {\n        return this.#superMarioMaker;\n    }\n\n    public get superMarioMakerForNintendo3DS(): SMM3DS {\n        return this.#superMarioMakerForNintendo3DS;\n    }\n\n    public get superMarioMaker2(): SMM2 {\n        return this.#superMarioMaker2;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {GameStructure}      from './GameStructure';\nimport type {ProviderWithoutKey} from '../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}       from '../../util/provider/AbstractProvider';\nimport {GameStructureContainer} from './GameStructure.container';\n\n/**\n * @singleton\n */\nexport class GameStructureProvider\n    extends AbstractProvider<ArgumentsReceived, GameStructure>\n    implements ProviderWithoutKey<GameStructure, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: GameStructureProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * Get (or create) a game structure based on the {@link Games} separated.\n     *\n     * @param superMarioMaker1And3DS The {@link Games.SUPER_MARIO_MAKER_1 SMM1} & {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS} games\n     * @param superMarioMaker2 The {@link Games.SUPER_MARIO_MAKER_2 SMM2} game\n     */\n    public get<SMM1AND3DS, SMM2, >(superMarioMaker1And3DS: SMM1AND3DS, superMarioMaker2: SMM2,): GameStructure<SMM1AND3DS, SMM1AND3DS, SMM2>\n    /**\n     * Get (or create) a game structure based on each {@link Games}.\n     *\n     * @param superMarioMaker1 The {@link Games.SUPER_MARIO_MAKER_1 SMM1} game\n     * @param superMarioMakerFor3DS The {@link Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS SMM3DS} game\n     * @param superMarioMaker2 The {@link Games.SUPER_MARIO_MAKER_2 SMM2} game\n     */\n    public get<SMM1, SMM3DS, SMM2, >(superMarioMaker1: SMM1, superMarioMakerFor3DS: SMM3DS, superMarioMaker2: SMM2,): GameStructure<SMM1, SMM3DS, SMM2>\n    public get(...argumentsReceived: | ArgumentsReceived | ArgumentsReceived_Simplified) {\n        if (argumentsReceived.length === 2)\n            return this.get(argumentsReceived[0], argumentsReceived[0], argumentsReceived[1],);\n\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new GameStructureContainer(...argumentsReceived,)))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived<SMM1 = any, SMM3DS = any, SMM2 = any, > = readonly [\n    smm1: SMM1,\n    smm3ds: SMM3DS,\n    smm2: SMM2,\n];\ntype ArgumentsReceived_Simplified<SMM1AND3DS = any, SMM2 = any, > = readonly [\n    smm1And3DS: SMM1AND3DS,\n    smm2: SMM2,\n];\n","import type {TOptions} from 'i18next';\n\nimport type {Namespace, PossibleReactElement, SingleTranslationKey, TranslationMethod, TranslationReplaceKeysMap, TranslationReturnValue} from './TranslationProperty';\nimport type {ReactElement}                                                                                                                from '../../util/react/ReactProperty';\n\nimport {assert}         from '../../util/utilitiesMethods';\nimport {isInProduction} from '../../variables';\n\nexport class TranslationUtility {\n\n    public static readonly STARTING_CHARACTER = '{';\n    public static readonly STARTING_CHARACTER_LENGTH = this.STARTING_CHARACTER.length;\n    public static readonly STARTING_OR_ENDING_REGEX = /{{|}}/;\n    public static readonly STARTING_REGEX = /{{/g;\n    public static readonly STARTING_LENGTH = '{{'.length;\n    public static readonly ENDING_CHARACTER = '}';\n    public static readonly ENDING_CHARACTER_LENGTH = this.ENDING_CHARACTER.length;\n    public static readonly ENDING_REGEX = /}}/g;\n    public static readonly ENDING_LENGTH = '}}'.length;\n    public static OPTION_TO_RETURN_OBJECT: TOptions = {returnObjects: true, interpolation: {skipOnVariables: true,},};\n\n\n    private constructor() {\n        throw new EvalError(`This class \"${TranslationUtility}\" cannot be created.`);\n    }\n\n    public static testTranslation<N extends Namespace, T extends TranslationReturnValue<N> = TranslationReturnValue<N>, >(value: T,): T & string {\n        assert(typeof value == 'string', `The translation key ${value} cannot receive a translation that contain a sub value.`,);\n        return value;\n    }\n\n    public static replaceAndInterpretTranslation<N extends Namespace, >(translation: TranslationMethod<N>, value: SingleTranslationKey<N>, keyMap: TranslationReplaceKeysMap,): ReactElement {\n        //FIXME remove the error (if possible) \"Type 'string' is not assignable to type '\"entityContent\"'\"\n        // @ts-ignore\n        return this.replaceInTranslation(this.testTranslation(translation(value, this.OPTION_TO_RETURN_OBJECT,)), keyMap,);\n    }\n\n    public static replaceInTranslation(value: string, keyMap: TranslationReplaceKeysMap,) {\n        let argumentsFound: string[] = [];\n        for (const replaceKey of value.matchAll(this.STARTING_REGEX)) {\n            const startingIndex = replaceKey.index!;\n            const endingIndex = value.indexOf(this.ENDING_CHARACTER, startingIndex,);\n            argumentsFound.push(value.substring(startingIndex + this.STARTING_LENGTH, endingIndex));\n        }\n\n        const splitArguments = value.split(this.STARTING_OR_ENDING_REGEX).filter(splitValue => !argumentsFound.includes(splitValue));\n        let finalArguments: (| string | ReactElement)[] = [];\n        for (let i = 0, j = 0; i < argumentsFound.length || j < splitArguments.length; i++, j++)\n            this.#addArgumentToArray(finalArguments, splitArguments[j], keyMap[argumentsFound[i]]);\n        return <>{finalArguments}</>;\n    }\n\n    /**\n     * Adds the arguments in the array provided in the first argument.\n     *\n     * The first argument is always added.\n     * But, if the second argument is null, it will not be added.\n     *\n     * @param finalArguments the final array of arguments without any null values\n     * @param firstElement the first element\n     * @param secondElement the second element\n     */\n    static #addArgumentToArray(finalArguments: PossibleReactElement[], firstElement: PossibleReactElement, secondElement: PossibleReactElement | undefined,): void {\n        finalArguments.push(firstElement);\n        if (secondElement == null)\n            return;\n        finalArguments.push(secondElement);\n\n        if(isInProduction)\n            return;\n\n        if (typeof secondElement != 'string') {\n            if (secondElement?.key == null)\n                console.warn(`The react element ${secondElement.type} doesn't contain a key.`);\n            console.warn(`A generic error will be thrown.\\nThe properties included within it are ${Object.entries(secondElement.props).map(property => `[${property}]`)}.`);\n        }\n    }\n\n}\n","import type BaseComponent      from 'bootstrap/js/dist/base-component';\nimport type {ComponentOptions} from 'bootstrap/js/dist/base-component';\n\nimport type {GenericBootstrapInstance, StaticBootstrapInstance, Template} from './BootstrapInstance.types';\n\nimport {assert} from '../util/utilitiesMethods';\n\nexport abstract class BootstrapInstance<STATIC_INSTANCE extends StaticBootstrapInstance<OPTION>, INSTANCE extends BaseComponent, OPTION extends ComponentOptions, ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, > {\n\n    //region -------------------- Fields --------------------\n\n    static #referencesMaps: Map<StaticBootstrapInstance, Template> = new Map();\n\n    readonly #element: ELEMENT;\n    readonly #elementId: ID;\n    readonly #instance: INSTANCE;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(instance: STATIC_INSTANCE, element: | ID | ELEMENT, options: Partial<OPTION>,) {\n        if (typeof element === 'string') {\n            const htmlElement = document.getElementById(element);\n            assert(htmlElement != null, `The element id \"${element}\" has no html reference.`,);\n            this.#element = htmlElement as ELEMENT;\n            this.#elementId = element;\n        } else {\n            this.#element = element;\n            this.#elementId = element.id as ID;\n        }\n        this.#instance = this._createInstance(options);\n        BootstrapInstance.#addReference(instance, this,);\n    }\n\n    protected abstract _createInstance(options: Partial<OPTION>,): INSTANCE\n\n    //region -------------------- Getter methods --------------------\n\n    public get id(): ID {\n        return this.#elementId;\n    }\n\n    public get element(): ELEMENT {\n        return this.#element;\n    }\n\n    public get instance(): INSTANCE {\n        return this.#instance;\n    }\n\n\n    private static get __referencesMaps() {\n        return this.#referencesMaps;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    static #addReference(staticInstance: StaticBootstrapInstance, instance: GenericBootstrapInstance,): void {\n        if (!this.__referencesMaps.has(staticInstance))\n            this.__referencesMaps.set(staticInstance, {id: new Map(), element: new Map(),});\n        const template: Template = this.__referencesMaps.get(staticInstance)!;\n        template.id.set(instance.id, instance,);\n        template.element.set(instance.element, instance,);\n    }\n\n    protected static _getInstance<INSTANCE extends GenericBootstrapInstance<ELEMENT, ID>, ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(instance: StaticBootstrapInstance, element: | ELEMENT | ID,): INSTANCE {\n        const template = this.__referencesMaps.get(instance) as Template<INSTANCE>;\n        const instanceReturned = typeof element === 'string' ? template.id.get(element) : template.element.get(element);\n        assert(instanceReturned != null, `No reference can be used with this element \"${typeof element === 'string' ? element : element.id}\".`,);\n        return instanceReturned;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {TOptions}  from 'i18next';\nimport {useTranslation} from 'react-i18next';\n\nimport type {AnyTranslationPropertyByChildren, AnyTranslationPropertyWithProperty, Namespace, PossibleAnyTranslationPropertyReceived, SimpleAnyTranslationProperty} from './TranslationProperty';\n\nimport {TranslationUtility} from './TranslationUtility';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function AnyTranslationComponent<N extends Namespace, >(properties: PossibleAnyTranslationPropertyReceived<N>,) {\n    if ('property' in properties)\n        return <AnyTranslationComponentByProperty property={properties.property}/>;\n    if ('children' in properties)\n        return <AnyTranslationComponentByChildren children={properties.children} namespace={properties.namespace}/>;\n    return <AnyTranslationComponentBySimpleProperty namespace={properties.namespace} translationKey={properties.translationKey} replace={properties.replace}/>;\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nfunction AnyTranslationComponentByChildren<N extends Namespace, >({children, namespace,}: AnyTranslationPropertyByChildren<N>,) {\n    const {t: translation,} = useTranslation(namespace);\n\n    return <>{children(translation)}</>;\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nfunction AnyTranslationComponentBySimpleProperty<N extends Namespace, >({namespace, translationKey, replace,}: SimpleAnyTranslationProperty<N>,) {\n    const {t: translation,} = useTranslation(namespace);\n\n    const isReplaceNotNull = replace != null;\n\n    const options: TOptions<object> = {returnObjects: true,};\n    if (isReplaceNotNull)\n        options.interpolation = {skipOnVariables: true,};\n\n    //TODO remove (if possible) the \"Type instantiation is excessively deep and possibly infinite.\"\n    // @ts-ignore\n    const translationReturnValue = TranslationUtility.testTranslation(translation(translationKey, options,));\n\n    return !isReplaceNotNull\n        ? <>{translationReturnValue}</>\n        : <>{TranslationUtility.replaceInTranslation(translationReturnValue, replace,)}</>;\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nfunction AnyTranslationComponentByProperty<N extends Namespace, >({property: {namespace, translationKey, replace,},}: AnyTranslationPropertyWithProperty<N>,) {\n    const {t: translation,} = useTranslation(namespace);\n\n    //TODO remove (if possible) the \"Type instantiation is excessively deep and possibly infinite.\"\n    // @ts-ignore\n    return <>{TranslationUtility.replaceAndInterpretTranslation(translation, translationKey, replace,)}</>;\n}\n","import type {EnumArray, EnumArray_EnglishName, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishCommonText, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityLimitTypes.types';\nimport type {StaticReference}                                                                                                                                                                                                                              from '../../util/enum/Enum.types';\n\nimport {Enum} from '../../util/enum/Enum';\n\nexport class EntityLimitTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly WHILE_PLAYING = new EntityLimitTypes('While Playing', 'While playing',);\n    public static readonly EDITOR =        new EntityLimitTypes('Editor',        'In the editor',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityLimitTypes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n    readonly #englishCommonText;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, englishCommonText: PossibleEnglishCommonText,) {\n        super();\n        this.#englishName = englishName;\n        this.#englishCommonText = englishCommonText;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName;\n    }\n\n    public get englishCommonText(): PossibleEnglishCommonText {\n        return this.#englishCommonText;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): EnumArray_EnglishName {\n        return this.values.map(type => type.englishName) as unknown as EnumArray_EnglishName;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityLimitTypes> {\n        return EntityLimitTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.englishCommonText === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityLimitTypes = EntityLimitTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityLimitTypes\n    public static getValue(value: PossibleValue,): | EntityLimitTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}","import type {ReactElement} from '../../util/react/ReactProperty';\n\nimport {AbstractEntityPropertyThatCanDisplayAllComponent} from './AbstractEntityPropertyThatCanDisplayAllComponent';\n\n/**\n * @reactComponent\n */\nexport abstract class AbstractEntityPropertyComponent<R, E>\n    extends AbstractEntityPropertyThatCanDisplayAllComponent<R> {\n\n    protected abstract get _map(): ReadonlyMap<E, boolean>;\n\n\n    protected abstract _renderSingleComponent(enumInstance: E,): JSX.Element;\n\n    public override _render(): ReactElement {\n        const enumInstances = [] as E[];\n        this._map.forEach((isInEnumInstance, enumInstance) => {\n            if (isInEnumInstance)\n                enumInstances.push(enumInstance);\n        });\n        if (enumInstances.length === 1)\n            return this._renderSingleComponent(enumInstances[0]);\n        return <div key={`${this.name.english} - group`}>{enumInstances.map(enumInstance => this._renderSingleComponent(enumInstance))}</div>;\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEntityCategoryName} from '../../util/ClassWithNullObjectPattern';\nimport type {EntityCategory}                                      from './EntityCategory';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\nimport {EmptyStringName}      from '../../lang/name/EmptyStringName';\n\n/**\n * @singleton\n */\nexport class EmptyEntityCategory\n    extends ClassContainingAName<string>\n    implements EntityCategory, ClassWithNullObjectPattern<EmptyEntityCategoryName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEntityCategory;\n\n    private constructor() {\n        super(EmptyStringName.get,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public override toString(): EmptyEntityCategoryName {\n        return 'Empty entity category';\n    }\n\n}\n","import type {Builder} from '../../util/builder/Builder';\n\nexport abstract class TemplateBuilder<T, U, >\n    implements Builder<U> {\n\n    //region -------------------- Fields --------------------\n\n    #template?: T;\n    readonly #templateBuilder_or_template;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(template: T,)\n    protected constructor(templateBuilder: Builder<T>,)\n    protected constructor(templateBuilder_or_template: | T | Builder<T>,)\n    protected constructor(templateBuilder_or_template: | T | Builder<T>,) {\n        this.#templateBuilder_or_template = templateBuilder_or_template;\n    }\n\n\n    public get template(): T {\n        return this.#template ??= 'build' in this.#templateBuilder_or_template ? this.#templateBuilder_or_template.build() : this.#templateBuilder_or_template;\n    }\n\n    public abstract build(): U;\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEntityReferenceName} from '../../../util/ClassWithNullObjectPattern';\nimport type {EntityReferences}                                     from './EntityReferences';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\nimport {EmptyEntity} from '../EmptyEntity';\n\n/**\n * @singleton\n * @recursiveReference<{@link EmptyEntity}>\n */\nexport class EmptyEntityReference\n    implements EntityReferences, ClassWithNullObjectPattern<EmptyEntityReferenceName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEntityReference;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    //region -------------------- References methods --------------------\n\n    public get referenceInSuperMarioBrosStyle() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInSuperMarioBros3Style() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInSuperMarioWorldStyle() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInNewSuperMarioBrosUStyle() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInSuperMario3DWorldStyle() {\n        return [EmptyEntity.get] as const;\n    }\n\n\n    public get referenceInGroundTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInUndergroundTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInUnderwaterTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInDesertTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInSnowTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInSkyTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInForestTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInGhostHouseTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInAirshipTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInCastleTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n\n    public get referenceInDayTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public get referenceInNightTheme() {\n        return [EmptyEntity.get] as const;\n    }\n\n\n    public getReferenceFrom() {\n        return [EmptyEntity.get] as const;\n    }\n\n    public readonly everyGameStyleReferences = EMPTY_ARRAY;\n    public readonly everyThemeReferences = EMPTY_ARRAY;\n    public readonly everyTimeReferences = EMPTY_ARRAY;\n\n    public readonly everyReferences = EMPTY_ARRAY;\n\n    //endregion -------------------- References methods --------------------\n\n    public toString(): EmptyEntityReferenceName {\n        return 'Empty entity reference';\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEntityName} from '../../util/ClassWithNullObjectPattern';\nimport type {Entity}                                      from './Entity';\n\nimport {ClassContainingANameAndACategory} from '../../lang/name/ClassContainingANameAndACategory';\nimport {EMPTY_MAP}                        from '../../util/emptyVariables';\nimport {EmptyEntityReference}             from './properties/EmptyEntityReference';\nimport {EmptyEntityCategory}              from '../entityCategory/EmptyEntityCategory';\nimport {EmptyIsInProperty}                from './properties/EmptyIsInProperty';\nimport {EmptyStringName}                  from '../../lang/name/EmptyStringName';\n\n/**\n * An empty entity with the default values of nothing\n *\n * @note A value that is equivalent to nothing can be false, null and itself\n * @singleton\n * @recursiveReference<{@link EmptyEntityReference}>\n */\nexport class EmptyEntity\n    extends ClassContainingANameAndACategory<string, string, EmptyEntityCategory>\n    implements Entity, ClassWithNullObjectPattern<EmptyEntityName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEntity;\n\n    private constructor() {\n        super(EmptyStringName.get, EmptyEntityCategory.get,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Properties --------------------\n\n    public readonly propertyContainer = EmptyIsInProperty.get;\n\n    //region -------------------- Game properties --------------------\n\n    public readonly gameContainer = this.propertyContainer.gameContainer;\n\n    public readonly isInSuperMarioMaker1 = this.gameContainer.isInSuperMarioMaker1;\n    public readonly isInSuperMarioMakerFor3DS = this.gameContainer.isInSuperMarioMakerFor3DS;\n    public readonly isInSuperMarioMaker2 = this.gameContainer.isInSuperMarioMaker2;\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Game style properties --------------------\n\n    public readonly gameStyleContainer = this.propertyContainer.gameStyleContainer;\n\n    public readonly isInSuperMarioBrosStyle = this.gameStyleContainer.isInSuperMarioBrosStyle;\n    public readonly isInSuperMarioBros3Style = this.gameStyleContainer.isInSuperMarioBros3Style;\n    public readonly isInSuperMarioWorldStyle = this.gameStyleContainer.isInSuperMarioWorldStyle;\n    public readonly isInNewSuperMarioBrosUStyle = this.gameStyleContainer.isInNewSuperMarioBrosUStyle;\n    public readonly isInSuperMario3DWorldStyle = this.gameStyleContainer.isInSuperMario3DWorldStyle;\n\n    //endregion -------------------- Game style properties --------------------\n    //region -------------------- Theme properties --------------------\n\n    public readonly themeContainer = this.propertyContainer.themeContainer;\n\n    public readonly isInGroundTheme = this.themeContainer.isInGroundTheme;\n    public readonly isInUndergroundTheme = this.themeContainer.isInUndergroundTheme;\n    public readonly isInUnderwaterTheme = this.themeContainer.isInUnderwaterTheme;\n    public readonly isInDesertTheme = this.themeContainer.isInDesertTheme;\n    public readonly isInSnowTheme = this.themeContainer.isInSnowTheme;\n    public readonly isInSkyTheme = this.themeContainer.isInSkyTheme;\n    public readonly isInForestTheme = this.themeContainer.isInForestTheme;\n    public readonly isInGhostHouseTheme = this.themeContainer.isInGhostHouseTheme;\n    public readonly isInAirshipTheme = this.themeContainer.isInAirshipTheme;\n    public readonly isInCastleTheme = this.themeContainer.isInCastleTheme;\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Time properties --------------------\n\n    public readonly timeContainer = this.propertyContainer.timeContainer;\n\n    public readonly isInDayTheme = this.timeContainer.isInDayTheme;\n    public readonly isInNightTheme = this.timeContainer.isInNightTheme;\n\n    //endregion -------------------- Time properties --------------------\n    //region -------------------- Limit properties --------------------\n\n    public readonly limitContainer = this.propertyContainer.limitContainer;\n\n    public readonly editorLimitContainer = this.limitContainer.editorLimitContainer;\n    public readonly editorLimit_smm1And3ds = this.limitContainer.editorLimit_smm1And3ds;\n    public readonly editorLimit_smm2 = this.limitContainer.editorLimit_smm2;\n    public readonly isUnknown_editorLimit_smm2 = this.limitContainer.isUnknown_editorLimit_smm2;\n\n    public readonly isInGeneralLimitWhilePlayingContainer = this.limitContainer.isInGeneralLimitWhilePlayingContainer;\n    public readonly isInGeneralLimitWhilePlaying = this.limitContainer.isInGeneralLimitWhilePlaying;\n    public readonly isInGeneralLimitWhilePlayingComment = this.limitContainer.isInGeneralLimitWhilePlayingComment;\n\n    public readonly isInGlobalGeneralLimitWhilePlayingContainer = this.limitContainer.isInGlobalGeneralLimitWhilePlayingContainer;\n    public readonly isInGlobalGeneralLimitWhilePlaying = this.limitContainer.isInGlobalGeneralLimitWhilePlaying;\n    public readonly isInGlobalGeneralLimitWhilePlayingComment = this.limitContainer.isInGlobalGeneralLimitWhilePlayingComment;\n\n    public readonly isInPowerUpLimitWhilePlayingContainer = this.limitContainer.isInPowerUpLimitWhilePlayingContainer;\n    public readonly isInPowerUpLimitWhilePlaying = this.limitContainer.isInPowerUpLimitWhilePlaying;\n\n    public readonly isInProjectileLimitWhilePlayingContainer = this.limitContainer.isInProjectileLimitWhilePlayingContainer;\n    public readonly isInProjectileLimitWhilePlaying = this.limitContainer.isInProjectileLimitWhilePlaying;\n    public readonly isInProjectileLimitWhilePlayingComment = this.limitContainer.isInProjectileLimitWhilePlayingComment;\n\n    public readonly otherLimitWhilePlayingContainer = this.limitContainer.otherLimitWhilePlayingContainer;\n    public readonly otherLimitWhilePlaying = this.limitContainer.otherLimitWhilePlaying;\n    public readonly otherLimitWhilePlayingComment = this.limitContainer.otherLimitWhilePlayingComment;\n\n    //endregion -------------------- Limit properties --------------------\n    //region -------------------- Instrument properties --------------------\n\n    public readonly instrumentContainer = this.propertyContainer.instrumentContainer;\n\n    public readonly instruments = this.instrumentContainer.instruments;\n\n    public readonly canMakeASoundOutOfAMusicBlockContainer = this.instrumentContainer.canMakeASoundOutOfAMusicBlockContainer;\n    public readonly canMakeASoundOutOfAMusicBlock = this.instrumentContainer.canMakeASoundOutOfAMusicBlock;\n    public readonly canMakeASoundOutOfAMusicBlockComment = this.instrumentContainer.canMakeASoundOutOfAMusicBlockComment;\n\n    //endregion -------------------- Instrument properties --------------------\n\n    //endregion -------------------- Properties --------------------\n    //region -------------------- References --------------------\n\n    public readonly referencesContainer = EmptyEntityReference.get;\n\n\n    public get referenceInSuperMarioBrosStyle() {\n        return this.referencesContainer.referenceInSuperMarioBrosStyle;\n    }\n\n    public get referenceInSuperMarioBros3Style() {\n        return this.referencesContainer.referenceInSuperMarioBros3Style;\n    }\n\n    public get referenceInSuperMarioWorldStyle() {\n        return this.referencesContainer.referenceInSuperMarioWorldStyle;\n    }\n\n    public get referenceInNewSuperMarioBrosUStyle() {\n        return this.referencesContainer.referenceInNewSuperMarioBrosUStyle;\n    }\n\n    public get referenceInSuperMario3DWorldStyle() {\n        return this.referencesContainer.referenceInSuperMario3DWorldStyle;\n    }\n\n\n    public get referenceInGroundTheme() {\n        return this.referencesContainer.referenceInGroundTheme;\n    }\n\n    public get referenceInUndergroundTheme() {\n        return this.referencesContainer.referenceInUndergroundTheme;\n    }\n\n    public get referenceInUnderwaterTheme() {\n        return this.referencesContainer.referenceInUnderwaterTheme;\n    }\n\n    public get referenceInDesertTheme() {\n        return this.referencesContainer.referenceInDesertTheme;\n    }\n\n    public get referenceInSnowTheme() {\n        return this.referencesContainer.referenceInSnowTheme;\n    }\n\n    public get referenceInSkyTheme() {\n        return this.referencesContainer.referenceInSkyTheme;\n    }\n\n    public get referenceInForestTheme() {\n        return this.referencesContainer.referenceInForestTheme;\n    }\n\n    public get referenceInGhostHouseTheme() {\n        return this.referencesContainer.referenceInGhostHouseTheme;\n    }\n\n    public get referenceInAirshipTheme() {\n        return this.referencesContainer.referenceInAirshipTheme;\n    }\n\n    public get referenceInCastleTheme() {\n        return this.referencesContainer.referenceInCastleTheme;\n    }\n\n\n    public get referenceInDayTheme() {\n        return this.referencesContainer.referenceInDayTheme;\n    }\n\n    public get referenceInNightTheme() {\n        return this.referencesContainer.referenceInNightTheme;\n    }\n\n    public getReferenceFrom() {\n        return this.referencesContainer.getReferenceFrom();\n    }\n\n    public readonly everyGameStyleReferences = this.referencesContainer.everyGameStyleReferences;\n    public readonly everyThemeReferences = this.referencesContainer.everyThemeReferences;\n    public readonly everyTimeReferences = this.referencesContainer.everyTimeReferences;\n    public readonly everyReferences = this.referencesContainer.everyReferences;\n\n    //endregion -------------------- References --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return EMPTY_MAP;\n    }\n\n    public toGameStyleMap() {\n        return EMPTY_MAP;\n    }\n\n    public toCourseThemeMap() {\n        return EMPTY_MAP;\n    }\n\n    public toTimeMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitInTheEditorMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitWhilePlayingMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public override toString(): EmptyEntityName {\n        return 'Empty entity';\n    }\n\n}\n","import './TextComponent.scss';\n\nimport type {PossibleTextContent, TextProperties} from './properties/TextProperties';\n\nimport {EMPTY_REACT_ELEMENT} from '../../../util/emptyReactVariables';\n\nconst NOT_APPLICABLE = 'N/A';\nconst UNKNOWN_REFERENCE = '???';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextComponent<T extends PossibleTextContent = PossibleTextContent, >({content, isUnknown, classes, ...otherProperties}: TextProperties<T>,) {\n    if (isUnknown === true)\n        (classes ??= []).push('is-unknown');\n\n    switch (content) {\n        case null:\n            if (Object.getOwnPropertyNames(otherProperties).length === 0 && classes == null)\n                return EMPTY_REACT_ELEMENT;\n            if (classes == null)\n                return <span {...otherProperties}/>;\n            return <span className={classes.join(' ')} {...otherProperties}/>;\n        case NOT_APPLICABLE:\n            return <span className=\"not-applicable\" {...otherProperties}/>;\n        case UNKNOWN_REFERENCE:\n            return <span className=\"unknown-reference\" {...otherProperties}/>;\n    }\n\n    if (classes == null)\n        return <span {...otherProperties}>{content}</span>;\n    return <span className={classes.join(' ')} {...otherProperties}>{content}</span>;\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleName_SMM1, PossibleName_SMM2, PossibleName_SMM3DS, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Versions.types';\nimport type {StaticReference}                                                                                                                                                                                                                                from '../../util/enum/Enum.types';\n\nimport {Enum}       from '../../util/enum/Enum';\nimport {Games}      from '../game/Games';\nimport {GameStyles} from '../gameStyle/GameStyles';\n\nexport class Versions\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SMM_V1_00 =         new Versions('v1.00',        1,     null,);\n    public static readonly SMM_V1_01 =         new Versions('v1.01',        1,     new Date(2015, 9,  10,),);\n    public static readonly SMM_V1_10 =         new Versions('v1.10',        1,     new Date(2015, 9,  23,),);\n    public static readonly SMM_V1_20 =         new Versions('v1.20',        1,     new Date(2015, 11, 4,),);\n    public static readonly SMM_V1_21 =         new Versions('v1.21',        1,     new Date(2015, 11, 12,),);\n    public static readonly SMM_V1_30 =         new Versions('v1.30',        1,     new Date(2015, 12, 21,),);\n    public static readonly SMM_V1_31 =         new Versions('v1.31',        1,     new Date(2015, 12, 28,),);\n    public static readonly SMM_V1_32 =         new Versions('v1.32',        1,     new Date(2016, 1,  28,),);\n    public static readonly SMM_V1_40 =         new Versions('v1.40',        1,     new Date(2016, 3,  9,),);\n    public static readonly SMM_V1_41 =         new Versions('v1.41',        1,     new Date(2016, 3,  17,),);\n    public static readonly SMM_V1_42 =         new Versions('v1.42',        1,     new Date(2016, 4,  6,),);\n    public static readonly SMM_V1_43 =         new Versions('v1.43',        1,     new Date(2016, 5,  19,),);\n    public static readonly SMM_V1_44 =         new Versions('v1.44',        1,     new Date(2016, 7,  22,),);\n    public static readonly SMM_V1_45 =         new Versions('v1.45',        1,     new Date(2016, 11, 30,),);\n    public static readonly SMM_V1_46 =         new Versions('v1.46',        1,     new Date(2017, 9,  5,),);\n    public static readonly SMM_V1_47 =         new Versions('v1.47',        1,     new Date(2017, 11, 7,),);\n\n    public static readonly SMM3DS_V1_00 =      new Versions('v1.00',        '3DS', null,);\n    public static readonly SMM3DS_V1_02 =      new Versions('v1.02',        '3DS', new Date(2016, 12, 2,),);\n    public static readonly SMM3DS_V1_03 =      new Versions('v1.03',        '3DS', new Date(2017, 4,  27,),);\n    public static readonly SMM3DS_V1_04 =      new Versions('v1.04',        '3DS', new Date(2017, 11, 7,),);\n    public static readonly SMM3DS_V1_05 =      new Versions('v1.05',        '3DS', new Date(2021, 3,  23,),);\n\n    public static readonly SMM2_V1_0_0 =       new Versions('v1.0.0',       2,     null,);\n    public static readonly SMM2_V1_1_0 =       new Versions('v1.1.0',       2,     new Date(2019, 11, 1,),);\n    public static readonly SMM2_V2_0_0 =       new Versions('v2.0.0',       2,     new Date(2019, 12, 5,),);\n    public static readonly SMM2_V3_0_0 =       new Versions('v3.0.0',       2,     new Date(2020, 4,  22,),);\n    public static readonly SMM2_SM3DW_V3_0_0 = new Versions('SM3DW v3.0.0', 2,     new Date(2020, 4,  22,), GameStyles.SUPER_MARIO_3D_WORLD,);\n    public static readonly SMM2_V3_0_1 =       new Versions('v3.0.1',       2,     new Date(2020, 7,  15,),);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Versions;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name;\n    readonly #game;\n    readonly #releaseDate;\n    readonly #gameStyle;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, game: | 1 | '3DS' | 2, releaseDate: | Date | null,)\n    private constructor(name: PossibleName, game: | 1 | '3DS' | 2, releaseDate: | Date | null, gameStyle: typeof GameStyles['SUPER_MARIO_3D_WORLD'],)\n    private constructor(name: PossibleName, game: | 1 | '3DS' | 2, releaseDate: | Date | null, gameStyle?: typeof GameStyles['SUPER_MARIO_3D_WORLD'],) {\n        super();\n        this.#name = name;\n        this.#game = Games.getValue(game === 1 ? 'SMM' : `SMM${game}` as const);\n        this.#releaseDate = releaseDate;\n        this.#gameStyle = gameStyle ?? null;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get game(): Games {\n        return this.#game;\n    }\n\n    public get gameStyle(): | typeof GameStyles['SUPER_MARIO_3D_WORLD'] | null {\n        return this.#gameStyle;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyNames(): readonly PossibleName[] {\n        return this.values.map(enumerable => enumerable.simpleName);\n    }\n\n    public static get everyNames_smm1(): readonly PossibleName_SMM1[] {\n        return this.values.filter(enumerable => enumerable.game === Games.SUPER_MARIO_MAKER_1).map(enumerable => enumerable.simpleName as PossibleName_SMM1);\n    }\n\n    public static get everyNames_smm3ds(): readonly PossibleName_SMM3DS[] {\n        return this.values.filter(enumerable => enumerable.game === Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS).map(enumerable => enumerable.simpleName as PossibleName_SMM3DS);\n    }\n\n    public static get everyNames_smm2(): readonly PossibleName_SMM2[] {\n        return this.values.filter(enumerable => enumerable.game === Games.SUPER_MARIO_MAKER_2).map(enumerable => enumerable.simpleName as PossibleName_SMM2);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<Versions> {\n        return Versions;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Versions = Versions, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Versions\n    public static getValue(value: PossibleValue,): | Versions | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {ClassWithEnglishName}                                                                                                                                                                                                                                                                                                                                                                                                                                         from '../ClassWithEnglishName';\nimport type {ClassWithTranslationKey}                                                                                                                                                                                                                                                                                                                                                                                                                                      from '../../lang/ClassWithTranslationKey';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAdditionalTranslationKey, PossibleAmount, PossibleAmount_HighScoreOfXInEndlessMarioEasyOrNormal, PossibleAmount_HighScoreOfXInEndlessMarioExpertOrSuperExpert, PossibleEnglishName, PossibleEnglishNameWithAmount, PossibleEnglishNameWithEveryAmount, PossibleNonNullableValue, PossibleStringValue, PossibleTranslationKey, PossibleValue} from './OfficialNotifications.types';\nimport type {ObjectHolder}                                                                                                                                                                                                                                                                                                                                                                                                                                                 from '../../util/holder/ObjectHolder';\nimport type {ReactElement}                                                                                                                                                                                                                                                                                                                                                                                                                                                 from '../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                                                                              from '../../util/enum/Enum.types';\nimport type {TranslationReplaceKeysMap}                                                                                                                                                                                                                                                                                                                                                                                                                                    from '../../lang/components/TranslationProperty';\n\nimport {BASE_PATH}                     from '../../variables';\nimport {DelayedObjectHolderContainer}  from '../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_ARRAY, EMPTY_STRING}     from '../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {Enum}                          from '../../util/enum/Enum';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {StringContainer}               from '../../util/StringContainer';\nimport {TranslationUtility}            from '../../lang/components/TranslationUtility';\n\n//region -------------------- dynamic imports --------------------\n\nconst TextComponent = lazy(() => import('../../app/tools/text/TextComponent'));\nconst Image =         lazy(() => import('../../app/tools/images/Image'));\n\n//endregion -------------------- dynamic imports --------------------\n//region -------------------- Constructor constants --------------------\n\nconst translationKey_finishAllCharacterJob: PossibleTranslationKey = 'finish all 3 job (character)';\nconst translationKey_finishSelectedPeachJob: PossibleTranslationKey = 'finish X job (Peach)';\nconst translationKey_receiveFeedback: PossibleTranslationKey = 'course.receive feedback (a lot)';\nconst translationKey_rank: PossibleTranslationKey = 'rank';\nconst translationKey_highScore: PossibleTranslationKey = 'high score';\nconst translationKey_medal: PossibleTranslationKey = 'medal';\nconst translationKey_place: PossibleTranslationKey = 'place';\nconst translationKey_stamp: PossibleTranslationKey = 'stamp';\n\nconst possibleAmountInEndlessMarioEasyOrNormal: readonly PossibleAmount_HighScoreOfXInEndlessMarioEasyOrNormal[] = [10, 100, 300, 500, 1000,];\nconst possibleAmountInEndlessMarioExpertOrSuperExpert: readonly PossibleAmount_HighScoreOfXInEndlessMarioExpertOrSuperExpert[] = [10, 100,];\n\n//endregion -------------------- Constructor constants --------------------\n\nexport class OfficialNotifications\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithTranslationKey<PossibleTranslationKey> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly FINISH_ALL_JOBS =                                   new class OfficialNotifications_FinishAllJobs extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addStoryMode(key, this._addJobs(key, keyMap,),);\n        }\n\n    }('Finish all jobs', 'finish all job',);\n    public static readonly FINISH_ALL_JOBS_UNDODOG =                           new class OfficialNotifications_FinishAllJobsUndodog extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Undodog', key,\n                this._addStoryMode(key,\n                    this._addJobs(key, keyMap,),),);\n        }\n\n    }('Finish all jobs (Undodog)', translationKey_finishAllCharacterJob,);\n    public static readonly FINISH_ALL_JOBS_YAMAMURA =                          new class OfficialNotifications_FinishAllJobsYamamura extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Yamamura', key,\n                this._addStoryMode(key,\n                    this._addJobs(key, keyMap,),),);\n        }\n\n    }('Finish all jobs (Yamamura)', translationKey_finishAllCharacterJob,);\n    public static readonly FINISH_ALL_JOBS_PARTRICK =                          new class OfficialNotifications_FinishAllJobsPartrick extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Partrick', key,\n                this._addStoryMode(key,\n                    this._addJobs(key, keyMap,),),);\n        }\n\n    }('Finish all jobs (Partrick)', translationKey_finishAllCharacterJob,);\n    public static readonly FINISH_ALL_JOBS_SOUNDFROG =                         new class OfficialNotifications_FinishAllJobsSoundfrog extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Soundfrog', key,\n                this._addStoryMode(key,\n                    this._addJobs(key, keyMap,),),);\n        }\n\n    }('Finish all jobs (Soundfrog)', translationKey_finishAllCharacterJob,);\n    public static readonly FINISH_ALL_JOBS_MR_ERASER =                         new class OfficialNotifications_FinishAllJobsMrEraser extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Mr. Eraser', key,\n                this._addStoryMode(key,\n                    this._addJobs(key, keyMap,),),);\n        }\n\n    }('Finish all jobs (Mr. Eraser)', translationKey_finishAllCharacterJob,);\n    public static readonly FINISH_1ST_JOB_PEACH =                              new class OfficialNotifications_Finish1stJobPeach extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Princess Peach', key,\n                this._addPosition(1, 'job', key,\n                    this._addMissionTitle(null, key,\n                        this._addStoryMode(key,\n                            this._addJob(key, keyMap),),),),);\n        }\n\n    }('Finish 1st job (Peach)', translationKey_finishSelectedPeachJob,);\n    public static readonly FINISH_2ND_JOB_PEACH =                              new class OfficialNotifications_Finish2ndJobPeach extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Princess Peach', key,\n                this._addPosition(2, 'job', key,\n                    this._addMissionTitle(null, key,\n                        this._addStoryMode(key,\n                            this._addJob(key, keyMap),),),),);\n        }\n\n    }('Finish 2nd job (Peach)', translationKey_finishSelectedPeachJob,);\n    public static readonly FINISH_3RD_JOB_PEACH =                              new class OfficialNotifications_Finish3rdJobPeach extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCharacterImage('Princess Peach', key,\n                this._addPosition(3, 'job', key,\n                    this._addMissionTitle(null, key,\n                        this._addStoryMode(key,\n                            this._addJob(key, keyMap),),),),);\n        }\n\n    }('Finish 3rd job (Peach)', translationKey_finishSelectedPeachJob,);\n    public static readonly HIT_MIDDLE_QUESTION_BLOCK_NEAR_PURPLE_TOAD =        new class OfficialNotifications_HitMiddleQuestionBlockNearPurpleToad extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.entityImage = <Image key={`${key} - entity image`} className=\"question-block-image\" variable=\"question-block-sm3dw\" isSquared/>;\n            return this._addCharacterImage('Purple Toad', key,\n                this._addStoryMode(key, keyMap,),);\n        }\n\n    }('Hit Middle ? Block near Purple Toad', 'hit ? Block near Purple Toad',);\n    public static readonly FINISH_REBUILDING_THE_CASTLE =                      new class OfficialNotifications_FinishRebuildingTheCastle extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addStoryMode(key, keyMap,);\n        }\n\n    }('Finish rebuilding the castle', 'finish rebuilding castle',);\n\n\n    public static readonly RECEIVE_A_LIKE =                                    new class OfficialNotifications_ReceiveALike extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addLikeImage(key, keyMap,);\n        }\n\n    }('Receive a like', 'course.receive like',);\n    public static readonly RECEIVE_A_COMMENT =                                 new OfficialNotifications('Receive a comment', 'course.receive comment',);\n    public static readonly RECEIVE_A_LOT_OF_FEEDBACK_1 =                       new class OfficialNotifications_ReceiveALotOfFeedback1 extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Receive a lot of feedback - 1', translationKey_receiveFeedback,);\n    public static readonly RECEIVE_A_LOT_OF_FEEDBACK_2 =                       new class OfficialNotifications_ReceiveALotOfFeedback2 extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Receive a lot of feedback - 2', translationKey_receiveFeedback,);\n    public static readonly RECEIVE_X_PLAY =                                    new class OfficialNotifications_ReceiveXPlay extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Receive # play', 'course.receive play', 100, 500, 1000, 2000, 5000,);\n\n    public static readonly LIKE_A_COURSE =                                     new class OfficialNotifications_LikeACourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addLikeImage(key,\n                this._addCourse(key, keyMap,),);\n        }\n\n    }('Like a course', 'course.like',);\n    public static readonly POST_A_COMMENT =                                    new class OfficialNotifications_PostAComment extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Post a comment', 'course.comment',);\n    public static readonly UPLOAD_A_COURSE =                                   new class OfficialNotifications_UploadACourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Upload a course', 'course.upload',);\n\n    public static readonly _1_OF_1ST_CLEAR_TO_FINISH_A_COURSE =                new class OfficialNotifications_1Of1stClearToFinishACourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('1 of 1st clear to finish a course', 'course.1st to clear - 1', 1,);\n    public static readonly X_OF_1ST_CLEAR_TO_FINISH_A_COURSE =                 new class OfficialNotifications_XOf1stClearToFinishACourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourses(key, keyMap,);\n        }\n\n    }('# of 1st clear to finish a course', 'course.1st to clear', 10, 100,);\n\n    public static readonly CLEAR_1_COURSE =                                    new class OfficialNotifications_Clear1Course extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key, keyMap,);\n        }\n\n    }('Clear 1 course', 'course.clear - 1', 1,);\n    public static readonly CLEAR_X_COURSE =                                    new class OfficialNotifications_ClearXCourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourses(key, keyMap,);\n        }\n\n    }('Clear # course', 'course.clear', 10, 100, 500, 1000, 3000, 5000, 10000,);\n\n    public static readonly PLAY_X_COURSE =                                     new class OfficialNotifications_PlayXCourse extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourses(key, keyMap,);\n        }\n\n    }('Play # course', 'course.play', 10, 100, 500, 1000, 3000,);\n\n    public static readonly SET_1_WORLD_RECORD =                                new class OfficialNotifications_Set1WorldRecord extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addWorldRecord(key, keyMap,);\n        }\n\n    }('Set 1 world record', 'set world record',);\n    public static readonly HOLD_X_WORLD_RECORD =                               new class OfficialNotifications_HoldXWorldRecord extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addWorldRecords(key, keyMap,);\n        }\n\n    }('Hold # world record', 'hold world record', 10, 100, 500,);\n\n\n    public static readonly WIN_1_MATCH_IN_MULTIPLAYER_VS =                     new class OfficialNotifications_Win1MatchInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key, keyMap,);\n        }\n\n    }('Win 1 match in Multiplayer VS', 'win match - 1', 1,);\n    public static readonly WIN_X_MATCH_IN_MULTIPLAYER_VS =                     new class OfficialNotifications_WinXMatchInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key, keyMap,);\n        }\n\n    }('Win # match in Multiplayer VS', 'win match', 2, 5, 10,);\n    public static readonly WIN_CONSECUTIVE_MATCH_IN_MULTIPLAYER_VS =           new class OfficialNotifications_WinConsecutiveMatchInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key, keyMap,);\n        }\n\n    }('Win consecutive match in Multiplayer VS', 'win consecutive match',);\n\n    public static readonly RANK_C_IN_MULTIPLAYER_VS =                          new class OfficialNotifications_RankCInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key,\n                this._addRank('C', key, keyMap,),);\n        }\n\n    }('Rank C in Multiplayer VS', translationKey_rank,);\n    public static readonly RANK_B_IN_MULTIPLAYER_VS =                          new class OfficialNotifications_RankBInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key,\n                this._addRank('B', key, keyMap,),);\n        }\n\n    }('Rank B in Multiplayer VS', translationKey_rank,);\n    public static readonly RANK_A_IN_MULTIPLAYER_VS =                          new class OfficialNotifications_RankAInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key,\n                this._addRank('A', key, keyMap,),);\n        }\n\n    }('Rank A in Multiplayer VS', translationKey_rank,);\n    public static readonly RANK_S_IN_MULTIPLAYER_VS =                          new class OfficialNotifications_RankSInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key,\n                this._addRank('S', key, keyMap,),);\n        }\n\n    }('Rank S in Multiplayer VS', translationKey_rank,);\n    public static readonly RANK_S_PLUS_IN_MULTIPLAYER_VS =                     new class OfficialNotifications_RankSPlusInMultiplayerVS extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerVS(key,\n                this._addRank('S⁺', key, keyMap,),);\n        }\n\n    }('Rank S⁺ in Multiplayer VS', translationKey_rank,);\n\n    public static readonly CLEAR_1_COURSE_IN_MULTIPLAYER_COOP =                new class OfficialNotifications_Clear1CourseInMultiplayerCoop extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerCoop(key,\n                this._addCourse(key, keyMap,),);\n        }\n\n    }('Clear 1 course in Multiplayer Co-op', 'clear course multiplayer coop - 1', 1,);\n    public static readonly CLEAR_X_COURSE_IN_MULTIPLAYER_COOP =                new class OfficialNotifications_ClearXCourseInMultiplayerCoop extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMultiplayerCoop(key,\n                this._addCourses(key, keyMap,),);\n        }\n\n    }('Clear # course in Multiplayer Co-op', 'clear course multiplayer coop', 10, 100,);\n\n    public static readonly X_MAKER_POINT_EARN =                                new class OfficialNotifications_XMakerPointsEarn extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addMakerPoints(key, keyMap,);\n        }\n\n    }('Earn # Maker Point', 'maker point', 2000, 5000, 7000,);\n\n    public static readonly HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_EASY =         new class OfficialNotifications_HighScoreOfXInEndlessChallengeEasy extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key,\n                this._addEndlessChallenge(key,\n                    this._addDifficulty('easy', key, keyMap,),),);\n        }\n\n    }('High score of # in Endless Challenge (easy)', translationKey_highScore, ...possibleAmountInEndlessMarioEasyOrNormal,);\n    public static readonly HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_NORMAL =       new class OfficialNotifications_HighScoreOfXInEndlessChallengeNormal extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key,\n                this._addEndlessChallenge(key,\n                    this._addDifficulty('normal', key, keyMap,),),);\n        }\n\n    }('High score of # in Endless Challenge (normal)', translationKey_highScore, ...possibleAmountInEndlessMarioEasyOrNormal,);\n    public static readonly HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_EXPERT =       new class OfficialNotifications_HighScoreOfXInEndlessChallengeExpert extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key,\n                this._addEndlessChallenge(key,\n                    this._addDifficulty('expert', key, keyMap,),),);\n        }\n\n    }('High score of # in Endless Challenge (expert)', translationKey_highScore, ...possibleAmountInEndlessMarioExpertOrSuperExpert,);\n    public static readonly HIGH_SCORE_OF_X_IN_ENDLESS_CHALLENGE_SUPER_EXPERT = new class OfficialNotifications_HighScoreOfXInEndlessChallengeSuperExpert extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addCourse(key,\n                this._addEndlessChallenge(key,\n                    this._addDifficulty('super expert', key, keyMap,),),);\n        }\n\n    }('High score of # in Endless Challenge (super expert)', translationKey_highScore, ...possibleAmountInEndlessMarioExpertOrSuperExpert,);\n\n    public static readonly GOLD_MEDAL_ON_THE_LEADERBOARD =                     new class OfficialNotifications_GoldMedalOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - gold medal image`} source={`/${BASE_PATH}/others/medal/BadgeS_03^u.tiff`} fallbackName=\"Gold medal image\"/>;\n            return this._addLeaderboard(key, keyMap,);\n        }\n\n    }('Gold medal on the leaderboard', translationKey_medal,);\n    public static readonly SILVER_MEDAL_ON_THE_LEADERBOARD =                   new class OfficialNotifications_SilverMedalOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - silver medal image`} source={`/${BASE_PATH}/others/medal/BadgeS_04^u.tiff`} fallbackName=\"Silver medal image\"/>;\n            return this._addLeaderboard(key, keyMap,);\n        }\n\n    }('Silver medal on the leaderboard', translationKey_medal,);\n    public static readonly BRONZE_MEDAL_ON_THE_LEADERBOARD =                   new class OfficialNotifications_BronzeMedalOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - bronze medal image`} source={`/${BASE_PATH}/others/medal/BadgeS_05^u.tiff`} fallbackName=\"Bronze medal image\"/>;\n            return this._addLeaderboard(key, keyMap,);\n        }\n\n    }('Bronze medal on the leaderboard', translationKey_medal,);\n    public static readonly FIRST_PLACE_ON_THE_LEADERBOARD =                    new class OfficialNotifications_1stPlaceOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - gold medal image (position)`} source={`/${BASE_PATH}/others/medal/BadgeS_00^u.tiff`} fallbackName=\"Gold medal image (position)\"/>;\n            return super._addLeaderboard(key,\n                this._addPosition(1, 'place', key, keyMap,),);\n        }\n\n    }('1st place on the leaderboard', translationKey_place,);\n    public static readonly SECOND_PLACE_ON_THE_LEADERBOARD =                   new class OfficialNotifications_2ndPlaceOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - silver medal image (position)`} source={`/${BASE_PATH}/others/medal/BadgeS_01^u.tiff`} fallbackName=\"Silver medal image (position)\"/>;\n            return super._addLeaderboard(key,\n                this._addPosition(2, 'place', key, keyMap,),);\n        }\n\n    }('2nd place on the leaderboard', translationKey_place,);\n    public static readonly THIRD_PLACE_ON_THE_LEADERBOARD =                    new class OfficialNotifications_3rdPlaceOnTheLeaderboard extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            keyMap.medalImage = <Image key={`${key} - bronze medal image (position)`} source={`/${BASE_PATH}/others/medal/BadgeS_02^u.tiff`} fallbackName=\"Bronze medal image (position)\"/>;\n            return super._addLeaderboard(key,\n                this._addPosition(3, 'place', key, keyMap,),);\n        }\n\n    }('3rd place on the leaderboard', translationKey_place,);\n\n    public static readonly COLLECT_1_STAMP_IN_THE_NINJI_SPEEDRUNS =            new class OfficialNotifications_Collect1StampInTheNinjiSpeedruns extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addStampImage(key,\n                this._addNinjiSpeedruns(key, keyMap,),);\n        }\n\n    }('Collect 1 stamp in the Ninji Speedruns', translationKey_stamp, 1,);\n    public static readonly COLLECT_X_STAMP_IN_THE_NINJI_SPEEDRUNS =            new class OfficialNotifications_CollectXStampInTheNinjiSpeedruns extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addStampImage(key,\n                this._addNinjiSpeedruns(key, keyMap,),);\n        }\n\n    }('Collect # stamp in the Ninji Speedruns', translationKey_stamp, 4, 7, 10, 11, 14, 17, 20,);\n\n    public static readonly UPLOAD_A_SUPER_WORLD =                              new class OfficialNotifications_UploadASuperWorld extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addSuperWorld(key, keyMap,);\n        }\n\n    }('Upload a Super World', 'super world.upload',);\n    public static readonly CLEAR_1_SUPER_WORLD =                               new class OfficialNotifications_Clear1SuperWorld extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addSuperWorld(key, keyMap,);\n        }\n\n    }('Clear 1 Super World', 'super world.clear - 1', 1,);\n    public static readonly CLEAR_X_SUPER_WORLD =                               new class OfficialNotifications_ClearXSuperWorld extends OfficialNotifications {\n\n        protected override _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n            return this._addSuperWorlds(key, keyMap,);\n        }\n\n    }('Clear # Super World', 'super world.clear', 2, 3, 4, 5, 10,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: OfficialNotifications;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n    readonly #additionalEnglishName: readonly PossibleEnglishNameWithEveryAmount[];\n\n    readonly #translationKey;\n    #additionalTranslationKeyHolder: ObjectHolder<| PossibleAdditionalTranslationKey | null>;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: Exclude<PossibleEnglishName, PossibleEnglishNameWithAmount>, translationKey: PossibleTranslationKey,)\n    private constructor(englishName: PossibleEnglishNameWithAmount<'#'>, translationKey: PossibleTranslationKey, ...amount: readonly PossibleAmount[])\n    private constructor(englishName: PossibleEnglishNameWithAmount<1>, translationKey: PossibleTranslationKey, amount: 1,)\n    private constructor(englishName: PossibleEnglishName, translationKey: PossibleTranslationKey, ...amount: readonly PossibleAmount[]) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#translationKey = translationKey;\n        this.#additionalEnglishName = amount[0] === 1 ? EMPTY_ARRAY : amount.map(amount => this.englishName.replace('#', amount.toString(),) as PossibleEnglishNameWithEveryAmount);\n        this.#additionalTranslationKeyHolder = new DelayedObjectHolderContainer(()=> this._createAdditionalTranslationKey);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Getter methods (english name) --------------------\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get additionalEnglishName(): readonly PossibleEnglishNameWithEveryAmount[] {\n        return this.#additionalEnglishName;\n    }\n\n    //endregion -------------------- Getter methods (english name) --------------------\n    //region -------------------- Getter methods (translation key) --------------------\n\n    public get translationKey(): PossibleTranslationKey {\n        return this.#translationKey;\n    }\n\n    protected get _createAdditionalTranslationKey(): | PossibleAdditionalTranslationKey | null {\n        return null;\n    }\n\n    public get additionalTranslationKey(): | PossibleAdditionalTranslationKey | null {\n        return this.#additionalTranslationKeyHolder.get;\n    }\n\n    //endregion -------------------- Getter methods (translation key) --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- Add argument to \"key map\" --------------------\n\n    /**\n     * Add any arguments specified by the current instance to be ready to\n     * @param key\n     * @param keyMap the key map (that is modified)\n     */\n    protected _addArgumentTo(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        return keyMap;\n    }\n\n\n    protected _addJob(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.job = <Fragment key={`${key} - job`}>--job--</Fragment>;//TODO add job translation\n        return keyMap;\n    }\n\n    protected _addJobs(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.jobs = <Fragment key={`${key} - job`}>--jobs--</Fragment>;//TODO add jobs translation\n        return keyMap;\n    }\n\n\n    protected _addCourse(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.course = <Fragment key={`${key} - course`}>--course--</Fragment>;//TODO add course translation\n        return keyMap;\n    }\n\n    protected _addCourses(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.courses = <Fragment key={`${key} - course`}>--courses--</Fragment>;//TODO add courses translation\n        return keyMap;\n    }\n\n\n    protected _addWorldRecord(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.worldRecord = <Fragment key={`${key} - world record`}>--world record--</Fragment>;//TODO add world record translation\n        return keyMap;\n    }\n\n    protected _addWorldRecords(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.worldRecords = <Fragment key={`${key} - world record`}>--world records--</Fragment>;//TODO add world records translation\n        return keyMap;\n    }\n\n    protected _addLeaderboard(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.leaderboard = <Fragment key={`${key} - leaderboard`}>--leaderboard--</Fragment>;//TODO add leaderboard translation\n        return keyMap;\n    }\n\n\n    protected _addMultiplayerVS(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.MultiplayerVersus = <Fragment key={`${key} - Multiplayer Versus`}>--Multiplayer Versus--</Fragment>;//TODO add Multiplayer Versus reference\n        return keyMap;\n    }\n\n    protected _addMultiplayerCoop(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.MultiplayerCoop = <Fragment key={`${key} - Multiplayer Co-op`}>--Multiplayer Co-op--</Fragment>;//TODO add Multiplayer Co-op reference\n        return keyMap;\n    }\n\n    protected _addStoryMode(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.StoryMode = <Fragment key={`${key} - Story Mode`}>--Story Mode--</Fragment>;//TODO add Story Mode reference\n        return keyMap;\n    }\n\n    protected _addMakerPoints(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.MakerPoints = <Fragment key={`${key} - Maker Points`}>--Maker Points--</Fragment>;//TODO add Maker Points reference\n        return keyMap;\n    }\n\n    protected _addEndlessChallenge(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.EndlessChallenge = <Fragment key={`${key} - Endless Challenge`}>--Endless Challenge--</Fragment>;//TODO add Endless Challenge reference\n        return keyMap;\n    }\n\n    protected _addNinjiSpeedruns(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.NinjiSpeedruns = <Fragment key={`${key} - Ninji Speedruns`}>--Ninji Speedruns--</Fragment>;//TODO add Ninji Speedruns reference\n        return keyMap;\n    }\n\n    protected _addSuperWorld(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.SuperWorld = <Fragment key={`${key} - Super World`}>--Super World--</Fragment>;//TODO add Super World reference\n        return keyMap;\n    }\n\n    protected _addSuperWorlds(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.SuperWorlds = <Fragment key={`${key} - Super World`}>--Super Worlds--</Fragment>;//TODO add Super Worlds reference\n        return keyMap;\n    }\n\n\n    protected _addLikeImage(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.likeImage = <Image key={`${key} - like image`} className=\"like-image\" source={`/${BASE_PATH}/others/Heart_00^d.tiff`} fallbackName={'Like image'}/>;//TODO change color (in css) to match the one in the game\n        return keyMap;\n    }\n\n    protected _addCharacterImage(character: | 'Undodog' | 'Yamamura' | 'Partrick' | 'Soundfrog' | 'Mr. Eraser' | 'Princess Peach' | 'Purple Toad', key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.characterImage = <Fragment key={`${key} - character`}>--{character} image--</Fragment>;//TODO add character reference\n        return keyMap;\n    }\n\n    protected _addStampImage(key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.stampImage = <Image key={`${key} - stamp image`} className=\"stamp-image\" source={`/${BASE_PATH}/others/EventClearListIcon_00^s.tiff`} fallbackName={'Stamp image'}/>;//TODO change color (in css) to match the one in the game\n        return keyMap;\n    }\n\n\n    protected _addMissionTitle(missionTitle: null, key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.MissionTitle = <Fragment key={`${key} - Mission title`}>--Mission title--</Fragment>;//TODO add mission title reference\n        return keyMap;\n    }\n\n\n\n    protected _addRank(rank: | 'C' | 'B' | 'A' | `S${| '' | '⁺'}`, key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.rank = <Fragment key={`${key} - rank`}>{rank}</Fragment>;\n        return keyMap;\n    }\n\n    protected _addDifficulty(difficulty: | 'easy' | 'normal' | `${| '' | 'super '}expert`, key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.difficulty = <Fragment key={`${key} - difficulty`}>--{difficulty}--</Fragment>;//TODO add rank reference\n        return keyMap;\n    }\n\n\n    protected _addPosition(position: | 1 | 2 | 3, type: | 'job' | 'place', key: string, keyMap: TranslationReplaceKeysMap,): TranslationReplaceKeysMap {\n        keyMap.position = <GameContentTranslationComponent key={`${key} - position (${type})`}>{translation => {\n            const upperText = translation(`Official notification.position.${type}.${position}`,);\n            return <Fragment key={`${key} - position`}>\n                {position}\n                {upperText === EMPTY_STRING ? EMPTY_REACT_ELEMENT : <sup>{upperText}</sup>}\n            </Fragment>;\n        }}</GameContentTranslationComponent>;\n        return keyMap;\n    }\n\n    //endregion -------------------- Add argument to \"key map\" --------------------\n\n    public createSimpleTranslationComponent(key: string, amount: | number | null,): ReactElement {\n        const keyMap: TranslationReplaceKeysMap = {};\n        if (amount != null)\n            keyMap.amount = <Fragment key={`${key} - amount`}>{amount}</Fragment>;\n\n        return <GameContentTranslationComponent>{translation =>\n            <TextComponent content={TranslationUtility.replaceAndInterpretTranslation(translation, `Official notification.${this.translationKey}`, this._addArgumentTo(key, keyMap,),)}/>\n        }</GameContentTranslationComponent>;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<OfficialNotifications> {\n        return OfficialNotifications;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.additionalEnglishName.includes(value as never))\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends OfficialNotifications = OfficialNotifications, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): OfficialNotifications\n    public static getValue(value: PossibleValue,): | OfficialNotifications | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {SimpleRoute}  from './SimpleRoute';\nimport type {ReactElement} from '../util/react/ReactProperty';\n\n/**\n * @provider\n */\nexport class SimpleRouteContainer<NAME extends string, PATH extends string, >\n    implements SimpleRoute<NAME, PATH> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #name;\n    readonly #path;\n    readonly #renderCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: NAME, path: PATH, renderCallback: () => ReactElement,) {\n        this.#name = name;\n        this.#path = path;\n        this.#renderCallback = renderCallback;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get name() {\n        return this.#name;\n    }\n\n    public get path() {\n        return this.#path;\n    }\n\n    public get renderCallback() {\n        return this.#renderCallback;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static newInstance<NAME extends string, PATH extends string, >(name: NAME, path: PATH, renderCallback: () => ReactElement,): SimpleRoute<NAME, PATH> {\n        return new SimpleRouteContainer(name, path, renderCallback,);\n    }\n\n}\n","import {lazy} from 'react';\n\nimport {SimpleRouteContainer} from './SimpleRoute.container';\n\nconst AboutApp =                        lazy(() => import('../app/AboutApp'));\nconst EveryPredefinedMessagesApp =      lazy(() => import('../app/EveryPredefinedMessagesApp'));\nconst EveryCourseTagsApp =              lazy(() => import('../app/EveryCourseTagsApp'));\nconst EveryEntitiesApp =                lazy(() => import('../app/EveryEntitiesApp'));\nconst EveryEntityCategoriesApp =        lazy(() => import('../app/EveryEntityCategoriesApp'));\nconst EveryEntityGroupApp =             lazy(() => import('../app/EveryEntityGroupApp'));\nconst EveryGameStylesApp =              lazy(() => import('../app/EveryGameStylesApp'));\nconst EveryGameReferencesApp =          lazy(() => import('../app/EveryGameReferencesApp'));\nconst EveryEntityLimitsApp =            lazy(() => import('../app/EveryEntityLimitsApp'));\nconst EveryInstrumentsApp =             lazy(() => import('../app/EveryInstrumentsApp'));\nconst EveryMiiCostumeApp =              lazy(() => import('../app/EveryMiiCostumeApp'));\nconst EveryMiiCostumeCategoriesApp =    lazy(() => import('../app/EveryMiiCostumeCategoriesApp'));\nconst EveryMysteryMushroomsApp =        lazy(() => import('../app/EveryMysteryMushroomsApp'));\nconst EveryPowerUpAndRidePriorityApp =  lazy(() => import('../app/EveryPowerUpAndRidePriorityApp'));\nconst EverySoundEffectCategoriesApp =   lazy(() => import('../app/EverySoundEffectCategoriesApp'));\nconst EverySoundEffectsApp =            lazy(() => import('../app/EverySoundEffectsApp'));\nconst EveryThemesApp =                  lazy(() => import('../app/EveryThemesApp'));\nconst HomeApp =                         lazy(() => import('../app/HomeApp'));\nconst SourcesApp =                      lazy(() => import('../app/SourcesApp'));\n\nexport const everySimpleRoutes = [\n    SimpleRouteContainer.newInstance('home',                       '/home',                       () => <HomeApp/>,                      ),\n    SimpleRouteContainer.newInstance('about',                      '/about',                      () => <AboutApp/>,                     ),\n    SimpleRouteContainer.newInstance('sources',                    '/sources',                    () => <SourcesApp/>,                   ),\n\n    SimpleRouteContainer.newInstance('everyPowerUp&RidePriority',  'every/power-up+ride/priority', () => <EveryPowerUpAndRidePriorityApp/>, ),\n    SimpleRouteContainer.newInstance('everyPowerUpPriority',       'every/power-up/priority',      () => <EveryPowerUpAndRidePriorityApp/>, ),//TODO add EveryPowerUpPriorityApp\n    SimpleRouteContainer.newInstance('everyRidePriority',          'every/ride/priority',          () => <EveryPowerUpAndRidePriorityApp/>, ),//TODO add EveryRidePriorityApp\n\n    SimpleRouteContainer.newInstance('everyGameReferences',        '/every/gameReference',        () => <EveryGameReferencesApp/>,       ),\n    SimpleRouteContainer.newInstance('everyEntities',              '/every/entity',               () => <EveryEntitiesApp/>,             ),\n    SimpleRouteContainer.newInstance('everyGameStyles',            '/every/gameStyle',            () => <EveryGameStylesApp/>,           ),\n    SimpleRouteContainer.newInstance('everyCategories',            '/every/entity/category',      () => <EveryEntityCategoriesApp/>,     ),\n    SimpleRouteContainer.newInstance('everyGroups',                '/every/entity/group',         () => <EveryEntityGroupApp/>,          ),\n    SimpleRouteContainer.newInstance('everyLimits',                '/every/entity/limit',         () => <EveryEntityLimitsApp/>,        ),\n    SimpleRouteContainer.newInstance('everyThemes',                '/every/theme',                () => <EveryThemesApp/>,               ),\n\n    SimpleRouteContainer.newInstance('everySoundEffects',          '/every/soundEffect',          () => <EverySoundEffectsApp/>,         ),\n    SimpleRouteContainer.newInstance('everySoundEffectCategories', '/every/soundEffect/category', () => <EverySoundEffectCategoriesApp/>,),\n\n    SimpleRouteContainer.newInstance('everyMiiCostumes',           '/every/miiCostume',           () => <EveryMiiCostumeApp/>,           ),\n    SimpleRouteContainer.newInstance('everyMiiCostumeCategories',  '/every/miiCostume/category',  () => <EveryMiiCostumeCategoriesApp/>, ),\n\n    SimpleRouteContainer.newInstance('everyMysteryMushrooms',      '/every/mysteryMushroom',      () => <EveryMysteryMushroomsApp/>,     ),\n\n    SimpleRouteContainer.newInstance('everyPredefinedMessages',    '/every/PredefinedMessage',    () => <EveryPredefinedMessagesApp/>,   ),\n    SimpleRouteContainer.newInstance('everyCourseTags',            '/every/courseTag',            () => <EveryCourseTagsApp/>,           ),\n    SimpleRouteContainer.newInstance('everyInstruments',           '/every/instrument',           () => <EveryInstrumentsApp/>,          ),\n] as const;\n","import type BaseComponent      from 'bootstrap/js/dist/base-component';\nimport type {ComponentOptions} from 'bootstrap/js/dist/base-component';\n\nimport type {BootstrapWithBasicEventCallbackReceived, BootstrapWithBasicEvents} from './BootstrapWithBasicEventsInstance.types';\nimport type {StaticBootstrapInstance}                                           from './BootstrapInstance.types';\n\nimport {BootstrapInstance} from './BootstapInstance';\n\nexport abstract class BootstrapWithBasicEventsInstance<STATIC_INSTANCE extends StaticBootstrapInstance<OPTION>, INSTANCE extends BaseComponent, OPTION extends ComponentOptions, ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapInstance<STATIC_INSTANCE, INSTANCE, OPTION, ELEMENT, ID> {\n\n    protected constructor(instance: STATIC_INSTANCE, element: ID | ELEMENT, options: Partial<OPTION>) {\n        super(instance, element, options);\n    }\n\n\n    public on(callbacks: Partial<BootstrapWithBasicEvents<this>> | null | undefined,): this {\n        if (callbacks == null)\n            return this;\n\n        if (callbacks.show != null)\n            this.onShow(callbacks.show);\n        if (callbacks.shown != null)\n            this.onShown(callbacks.shown);\n        if (callbacks.hide != null)\n            this.onHide(callbacks.hide);\n        if (callbacks.hidden != null)\n            this.onHidden(callbacks.hidden);\n        return this._on(callbacks);\n    }\n\n    protected abstract _on(callbacks: Partial<BootstrapWithBasicEvents<this>>,): this;\n\n\n    public abstract onShow(callback: BootstrapWithBasicEventCallbackReceived<this>,): this;\n\n    public abstract onShown(callback: BootstrapWithBasicEventCallbackReceived<this>,): this;\n\n    public abstract onHide(callback: BootstrapWithBasicEventCallbackReceived<this>,): this;\n\n    public abstract onHidden(callback: BootstrapWithBasicEventCallbackReceived<this>,): this;\n\n}\n","import type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                      from '../../util/enum/Enum.types';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleFileName, PossibleNonNullableValue, PossibleSoundPath_Array, PossibleSoundPath_GlissandoBass, PossibleSoundPath_ReverbCowbell, PossibleSoundPath_ReversePiano, PossibleSoundPath_Single, PossibleSoundPath_SpecificChordCM, PossibleStringValue, PossibleValue} from './Instruments.types';\n\nimport {Enum}                 from '../../util/enum/Enum';\nimport {ClassWithEnglishName} from '../ClassWithEnglishName';\nimport {Import}               from '../../util/DynamicImporter';\nimport {Instrument}           from './Instrument';\nimport {StringContainer}      from '../../util/StringContainer';\nimport {BASE_PATH}            from '../../variables';\n\n/**\n * @recursiveReference<{@link InstrumentLoader}>\n */\nexport class Instruments\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SNARE_DRUM =             new Instruments('Snare drum', 'INST_SnareDrum',);\n    public static readonly STEEL_DRUM =             new Instruments('Steel drum', 'INST_scStlDrum',);\n    public static readonly BASS_DRUM =              new Instruments('Bass drum', 'INST_BassDrum',);\n    public static readonly TAIKO =                  new Instruments('Taiko', 'INST_taiko',);\n    public static readonly GAMELAN =                new Instruments('Gamelan', 'INST_Gamelan', 'INST_Gamelan_L1', 'INST_Gamelan_L5', 'INST_Gamelan_L6', 'INST_Gamelan_M1_pi', 'INST_Gamelan_S1', 'INST_Gamelan_S6',);\n\n    public static readonly COWBELL =                new Instruments('Cowbell', 'INST_Cowbell',);\n    public static readonly CYMBAL =                 new Instruments('Cymbal', 'INST_Cymbal',);\n    public static readonly HI_HAT =                 new Instruments('Hi-hat', 'INST_HIHAT',);\n    public static readonly TOM =                    new Instruments('Tom', 'INST_RealTom',);\n    public static readonly SYNTHETIC_TOM =          new Instruments('Synthetic tom', 'INST_SynthTom',);\n    public static readonly WOOD_BLOCK =             new Instruments('Wood block', 'SE_intWoodblock',);\n    public static readonly SLEIGH_BELL =            new Instruments('Sleigh bell', 'INST_handbell',);\n    public static readonly SYNTHETIC_BELL =         new Instruments('Synthetic bell', 'INST_SynthBell',);\n    public static readonly WIND_CHIMES =            new Instruments('Wind chimes', 'INST_WindChime',);\n    public static readonly GONG =                   new Instruments('Gong', 'INST_GONG',);\n\n    public static readonly MOKUGYO =                new Instruments('Mokugyo', 'INST_Mokugyo',);\n    public static readonly KAZOO =                  new Instruments('Kazoo', 'INST_Kazoo',);\n    public static readonly MUSIC_BOX =              new Instruments('Music box', 'INST_MusicBox',);\n\n    public static readonly MARIMBA =                new Instruments('Marimba', 'INST_Marimba',);\n    public static readonly VIBRAPHONE =             new Instruments('Vibraphone', 'INST_Vibraphone',);\n    public static readonly TIMPANI =                new Instruments('Timpani', 'INST_scTimpani',);\n    public static readonly TIMPANI_ROLL =           new Instruments('Timpani roll', 'INST_SE6_Timpaniroll',);\n    public static readonly TIMBALES =               new Instruments('Timbales', 'INST_Timparess',);\n    public static readonly TUBULAR_BELL =           new Instruments('Tubular bell', 'INST_TublerBell',);\n    public static readonly ORGAN =                  new Instruments('Organ', 'INST_Organ',);\n    public static readonly PIPE_ORGAN =             new Instruments('Pipe organ', 'INST_PipeOrgan',);\n\n\n    public static readonly GUITAR_LONG =            new Instruments('Guitar (long)', 'INST_EgitarLong1',);\n    public static readonly ELECTRIC_GUITAR =        new Instruments('Electric guitar', 'INST_RichMetal',);\n    public static readonly ACOUSTIC_GUITAR =        new Instruments('Acoustic guitar', 'INST_AcousticGuitar',);\n    public static readonly BASS =                   new Instruments('Bass', 'INST_scSlapBass1',);\n    public static readonly ELECTRIC_BASS =          new Instruments('Electric bass', 'INST_FingeredElectricBass',);\n    public static readonly SYNTHETIC_BASS =         new Instruments('Synthetic bass', 'INST_SynthBass',);\n    public static readonly SUB_BASS =               new Instruments('Sub bass?', 'INST_SubBass',);\n    public static readonly BASS_GLISSANDO =         new Instruments('Bass \"glissando\"', 'INST_SE7_BassGliss1', 'INST_SE7_BassGliss2',);\n    public static readonly OUD =                    new Instruments('Oud', 'INST_Oud',);\n    public static readonly SANTUR =                 new Instruments('Santur', 'INST_Santur',);\n    public static readonly SHAMISEN =               new Instruments('Shamisen', 'INST_Shamisen',);\n\n    public static readonly PIANO_1 =                new Instruments('Piano 1', 'INST_Epiano',);\n    public static readonly PIANO_2 =                new Instruments('Piano 2', 'INST_Epiano2',);\n    public static readonly PIANO_4TH_A =            new Instruments('Piano (4th A)', 'INST_Piano.a4',);\n    public static readonly REVERSE_PIANO =          new Instruments('Reverse piano', 'INST_SE2_ReversePianoC3', 'INST_SE2_ReversePianoC4', 'INST_SE2_ReversePianoC5',);\n    public static readonly HONKY_TONK_PIANO =       new Instruments('Honky-Tonk piano', 'INST_HonkyTonk',);\n    public static readonly PIZZICATO_STRING =       new Instruments('\"Pizzicato\" string', 'INST_StringPizz.c6',);\n    public static readonly STACCATO_STRING =        new Instruments('\"Staccato\" string', 'INST_StaccatoStrings',);\n    public static readonly HARPSICHORD =            new Instruments('Harpsichord', 'INST_Harpsichord',);\n\n\n    public static readonly RECORDER =               new Instruments('Recorder', 'INST_Recorder',);\n    public static readonly SYNTHESIZER =            new Instruments('Synthesizer', 'INST_Synlead',);\n    public static readonly SYNTHESIZER_CHORD =      new Instruments('Synthesizer chord', 'INST_PAD',);\n    public static readonly CHORD_CM =               new Instruments('Chord CM?', 'INST_chord_Cm', 'INST_chord_CM7',);\n\n\n    public static readonly FLUTE =                  new Instruments('Flute', 'INST_074vlFlute',);\n    public static readonly SAXOPHONE =              new Instruments('Saxophone', 'INST_Sax',);\n    public static readonly TROMBONE =               new Instruments('Trombone', 'INST_Trombone',);\n    public static readonly HORN =                   new Instruments('Horn', 'INST_Horn',);\n    public static readonly SYNTHETIC_BRASS =        new Instruments('Synthetic brass', 'INST_SynthBrass',);\n    public static readonly VIOLIN =                 new Instruments('Violin', 'INST_ViolinLong',);\n    public static readonly HARP =                   new Instruments('Harp', 'INST_HARP',);\n    public static readonly ACCORDION_BASS_SOUND =   new Instruments('Accordion (bass sound)', 'INST_Accordion',);\n    public static readonly ACCORDION_TREBLE_SOUND = new Instruments('Accordion (treble sound)', 'INST_Acordion2',);\n    public static readonly ZURNA =                  new Instruments('Zurna', 'INST_Zurna',);\n    public static readonly BAGPIPE =                new Instruments('Bagpipe', 'INST_Bagpipe',);\n\n    public static readonly ORCHESTRA_HIT =          new Instruments('Orchestra hit', 'INST_scOrcheHit',);\n\n\n    public static readonly DOG_BARK =               new Instruments('Dog\\'s bark', 'block_dog',);\n    public static readonly CAT_MEOW =               new Instruments('Cat\\'s meow', 'SE_INST_CAT',);\n    public static readonly CHICKEN =                new Instruments('Chicken', 'INST_Chicken',);\n    public static readonly AH =                     new Instruments('Ah', 'INST_AH',);\n    public static readonly OK =                     new Instruments('Ok', 'INST_SE3_ok3',);\n    public static readonly HELLO =                  new Instruments('Hello', 'INST_SE2_hello',);\n    public static readonly YEAH =                   new Instruments('Yeah', 'INST_SE8_yeah',);\n\n    public static readonly SQUARE_WAVE =            new Instruments('Square wave', 'INST_FCSQ',);\n    public static readonly SOUND_EFFECT_1 =         new Instruments('Sound effect 1?', 'INST_SE1',);\n    public static readonly NOISE =                  new Instruments('Noise', 'INST_SE4_noise',);\n    public static readonly BOMB =                   new Instruments('Bomb', 'INST_SE5_Bomb',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Instruments;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, Instrument>;\n\n    #reference?: Instrument;\n    readonly #englishName;\n    readonly #soundPaths;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, fileName: PossibleSoundPath_Single,)\n    private constructor(englishName: PossibleEnglishName, ...reverbCowbell: PossibleSoundPath_ReverbCowbell)\n    private constructor(englishName: PossibleEnglishName, ...glissandoBass: PossibleSoundPath_GlissandoBass)\n    private constructor(englishName: PossibleEnglishName, ...reversePiano: PossibleSoundPath_ReversePiano)\n    private constructor(englishName: PossibleEnglishName, ...chordCM: PossibleSoundPath_SpecificChordCM)\n    private constructor(englishName: PossibleEnglishName, ...filesName: PossibleFileName[]) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#soundPaths = filesName.map(fileName => `/${BASE_PATH}/instrument/${fileName}.wav`) as unknown as PossibleSoundPath_Array;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, Instrument> {\n        return this.#REFERENCE_MAP ??= Import.InstrumentLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): Instrument {\n        return this.#reference ??= Instruments.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get soundPaths(): PossibleSoundPath_Array {\n        return this.#soundPaths;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(enumerable => enumerable.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Instruments> {\n        return Instruments;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Instruments = Instruments, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Instruments\n    public static getValue(value: PossibleValue,): | Instruments | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {Name}                        from '../../lang/name/Name';\nimport type {ReactComponent}              from '../../util/react/ReactComponent';\nimport type {ReactElement, ReactProperty} from '../../util/react/ReactProperty';\n\nimport {PureComponent} from 'react';\n\nexport interface EntityPropertyProperties<R>\n    extends ReactProperty {\n\n    reference: R\n\n    name: Name<string>\n\n    displayAllAsText: boolean\n\n}\n\n/**\n * @reactComponent\n */\nexport abstract class AbstractEntityPropertyThatCanDisplayAllComponent<R>\n    extends PureComponent<EntityPropertyProperties<R>>\n    implements ReactComponent {\n\n    public get reference() {\n        return this.props.reference;\n    }\n\n    public get name() {\n        return this.props.name;\n    }\n\n    public get displayAllAsText(): boolean {\n        return this.props.displayAllAsText;\n    }\n\n\n    protected abstract get _isInAll(): boolean;\n\n    protected abstract _renderComponentForAllAsText(): ReactElement;\n\n    protected abstract _renderComponentForAllAsImages(): ReactElement;\n\n    public override render(): ReactElement {\n        if (this._isInAll) {\n            if (this.displayAllAsText)\n                return this._renderComponentForAllAsText();\n            return this._renderComponentForAllAsImages();\n        }\n        return this._render();\n    }\n\n    protected abstract _render(): ReactElement;\n\n}\n","import type {ClassWithNullObjectPattern, EmptyInstrumentName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {InstrumentProperty}                              from './InstrumentProperty';\nimport type {NotApplicableProperty}                           from '../../../_properties/PropertyWithEverything';\n\nimport {EMPTY_ARRAY}       from '../../../../util/emptyVariables';\nimport {PropertyContainer} from '../../../_properties/Property.container';\n\n/**\n * @singleton\n */\nexport class EmptyInstrumentProperty\n    implements InstrumentProperty<NotApplicableProperty>,\n        ClassWithNullObjectPattern<EmptyInstrumentName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyInstrumentProperty;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    public readonly instruments = EMPTY_ARRAY;\n\n    public readonly canMakeASoundOutOfAMusicBlockContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly canMakeASoundOutOfAMusicBlock = this.canMakeASoundOutOfAMusicBlockContainer.value;\n    public readonly canMakeASoundOutOfAMusicBlockComment = this.canMakeASoundOutOfAMusicBlockContainer.comment;\n\n    //endregion -------------------- Getter methods --------------------\n\n    public toString(): EmptyInstrumentName {\n        return 'Empty instrument';\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyLimitName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {LimitProperty}                              from './LimitProperty';\nimport type {NotApplicableProperty}                      from '../../../_properties/PropertyWithEverything';\n\nimport {EMPTY_MAP}             from '../../../../util/emptyVariables';\nimport {GameStructureProvider} from '../../../game/GameStructure.provider';\nimport {PropertyContainer}     from '../../../_properties/Property.container';\n\n/**\n * @singleton\n */\nexport class EmptyLimitProperty\n    implements LimitProperty<null, NotApplicableProperty, NotApplicableProperty, NotApplicableProperty, NotApplicableProperty, NotApplicableProperty, NotApplicableProperty>,\n        ClassWithNullObjectPattern<EmptyLimitName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyLimitProperty;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    public readonly editorLimitContainer = GameStructureProvider.get.get(null, PropertyContainer.NOT_APPLICABLE_CONTAINER,);\n    public readonly editorLimit_smm1And3ds = this.editorLimitContainer.superMarioMaker;\n    public readonly editorLimit_smm2 = this.editorLimitContainer.superMarioMaker2.value;\n    public readonly isUnknown_editorLimit_smm2 = this.editorLimitContainer.superMarioMaker2.isUnknown;\n\n    public readonly isInGeneralLimitWhilePlayingContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly isInGeneralLimitWhilePlaying = this.isInGeneralLimitWhilePlayingContainer.value;\n    public readonly isInGeneralLimitWhilePlayingComment = this.isInGeneralLimitWhilePlayingContainer.comment;\n\n    public readonly isInGlobalGeneralLimitWhilePlayingContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly isInGlobalGeneralLimitWhilePlaying = this.isInGlobalGeneralLimitWhilePlayingContainer.value;\n    public readonly isInGlobalGeneralLimitWhilePlayingComment = this.isInGlobalGeneralLimitWhilePlayingContainer.comment;\n\n    public readonly isInPowerUpLimitWhilePlayingContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly isInPowerUpLimitWhilePlaying = this.isInPowerUpLimitWhilePlayingContainer.value;\n\n    public readonly isInProjectileLimitWhilePlayingContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly isInProjectileLimitWhilePlaying = this.isInProjectileLimitWhilePlayingContainer.value;\n    public readonly isInProjectileLimitWhilePlayingComment = this.isInProjectileLimitWhilePlayingContainer.comment;\n\n    public readonly otherLimitWhilePlayingContainer = PropertyContainer.NOT_APPLICABLE_CONTAINER;\n    public readonly otherLimitWhilePlaying = this.otherLimitWhilePlayingContainer.value;\n    public readonly otherLimitWhilePlayingComment = this.otherLimitWhilePlayingContainer.comment;\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toLimitMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitInTheEditorMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitWhilePlayingMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public toString(): EmptyLimitName {\n        return 'Empty limit';\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyIsInPropertyName} from '../../../util/ClassWithNullObjectPattern';\nimport type {Property}                                          from './Property';\n\nimport {EMPTY_MAP}               from '../../../util/emptyVariables';\nimport {EmptyInstrumentProperty} from './instrument/EmptyInstrumentProperty';\nimport {EmptyLimitProperty}      from './limit/EmptyLimitProperty';\n\n/**\n * @singleton\n */\nexport class EmptyIsInProperty\n    implements Property, ClassWithNullObjectPattern<EmptyIsInPropertyName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyIsInProperty;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public readonly gameContainer = this;\n    public readonly isInSuperMarioMaker1 = false;\n    public readonly isInSuperMarioMakerFor3DS = false;\n    public readonly isInSuperMarioMaker2 = false;\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Game style properties --------------------\n\n    public readonly gameStyleContainer = this;\n    public readonly isInSuperMarioBrosStyle = false;\n    public readonly isInSuperMarioBros3Style = false;\n    public readonly isInSuperMarioWorldStyle = false;\n    public readonly isInNewSuperMarioBrosUStyle = false;\n    public readonly isInSuperMario3DWorldStyle = null;\n\n    //endregion -------------------- Game style properties --------------------\n    //region -------------------- Theme properties --------------------\n\n    public readonly themeContainer = this;\n    public readonly isInGroundTheme = false;\n    public readonly isInUndergroundTheme = false;\n    public readonly isInUnderwaterTheme = false;\n    public readonly isInDesertTheme = null;\n    public readonly isInSnowTheme = null;\n    public readonly isInSkyTheme = null;\n    public readonly isInForestTheme = null;\n    public readonly isInGhostHouseTheme = false;\n    public readonly isInAirshipTheme = false;\n    public readonly isInCastleTheme = false;\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Time properties --------------------\n\n    public readonly timeContainer = this;\n    public readonly isInDayTheme = false;\n    public readonly isInNightTheme = null;\n\n    //endregion -------------------- Time properties --------------------\n    //region -------------------- Limit properties --------------------\n\n    public readonly limitContainer = EmptyLimitProperty.get;\n\n    public readonly editorLimitContainer = this.limitContainer.editorLimitContainer;\n    public readonly editorLimit_smm1And3ds = this.limitContainer.editorLimit_smm1And3ds;\n    public readonly editorLimit_smm2 = this.limitContainer.editorLimit_smm2;\n    public readonly isUnknown_editorLimit_smm2 = this.limitContainer.isUnknown_editorLimit_smm2;\n\n    public readonly isInGeneralLimitWhilePlayingContainer = this.limitContainer.isInGeneralLimitWhilePlayingContainer;\n    public readonly isInGeneralLimitWhilePlaying = this.limitContainer.isInGeneralLimitWhilePlaying;\n    public readonly isInGeneralLimitWhilePlayingComment = this.limitContainer.isInGeneralLimitWhilePlayingComment;\n\n    public readonly isInGlobalGeneralLimitWhilePlayingContainer = this.limitContainer.isInGlobalGeneralLimitWhilePlayingContainer;\n    public readonly isInGlobalGeneralLimitWhilePlaying = this.limitContainer.isInGlobalGeneralLimitWhilePlaying;\n    public readonly isInGlobalGeneralLimitWhilePlayingComment = this.limitContainer.isInGlobalGeneralLimitWhilePlayingComment;\n\n    public readonly isInPowerUpLimitWhilePlayingContainer = this.limitContainer.isInPowerUpLimitWhilePlayingContainer;\n    public readonly isInPowerUpLimitWhilePlaying = this.limitContainer.isInPowerUpLimitWhilePlaying;\n\n    public readonly isInProjectileLimitWhilePlayingContainer = this.limitContainer.isInProjectileLimitWhilePlayingContainer;\n    public readonly isInProjectileLimitWhilePlaying = this.limitContainer.isInProjectileLimitWhilePlaying;\n    public readonly isInProjectileLimitWhilePlayingComment = this.limitContainer.isInProjectileLimitWhilePlayingComment;\n\n    public readonly otherLimitWhilePlayingContainer = this.limitContainer.otherLimitWhilePlayingContainer;\n    public readonly otherLimitWhilePlaying = this.limitContainer.otherLimitWhilePlaying;\n    public readonly otherLimitWhilePlayingComment = this.limitContainer.otherLimitWhilePlayingComment;\n\n    //endregion -------------------- Limit properties --------------------\n    //region -------------------- Instrument properties --------------------\n\n    public readonly instrumentContainer = EmptyInstrumentProperty.get;\n\n    public readonly instruments = this.instrumentContainer.instruments;\n\n    public readonly canMakeASoundOutOfAMusicBlockContainer = this.instrumentContainer.canMakeASoundOutOfAMusicBlockContainer;\n    public readonly canMakeASoundOutOfAMusicBlock = this.instrumentContainer.canMakeASoundOutOfAMusicBlock;\n    public readonly canMakeASoundOutOfAMusicBlockComment = this.instrumentContainer.canMakeASoundOutOfAMusicBlockComment;\n\n    //endregion -------------------- Instrument properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return EMPTY_MAP;\n    }\n\n    public toGameStyleMap() {\n        return EMPTY_MAP;\n    }\n\n    public toCourseThemeMap() {\n        return EMPTY_MAP;\n    }\n\n    public toTimeMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitInTheEditorMap() {\n        return EMPTY_MAP;\n    }\n\n    public toLimitWhilePlayingMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public toString(): EmptyIsInPropertyName {\n        return 'Empty \"is in property\"';\n    }\n\n}\n","export abstract class AbstractIntermediate<T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #reference;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(reference: T,) {\n        this.#reference = reference;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _reference(): T {\n        return this.#reference;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ObjectHolder} from '../../holder/ObjectHolder';\n\nimport {AbstractIntermediate}         from './AbstractIntermediate';\nimport {DelayedObjectHolderContainer} from '../../holder/DelayedObjectHolder.container';\n\nexport class ConditionalIntermediate<T, >\n    extends AbstractIntermediate<T> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #conditionCallbackHolder: ObjectHolder<boolean>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(reference: T, conditionCallback: () => boolean,) {\n        super(reference);\n        this.#conditionCallbackHolder = new DelayedObjectHolderContainer(conditionCallback);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _conditionCallbackResult(): boolean {\n        return this.#conditionCallbackHolder.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public isMet<U>(callback: (reference: T,) => U,): | T | U {\n        if (this._conditionCallbackResult)\n            return callback(this._reference);\n        return this._reference;\n    }\n\n    public isNotMet<U>(callback: (reference: T,) => U,): | T | U {\n        if (!this._conditionCallbackResult)\n            return callback(this._reference);\n        return this._reference;\n    }\n\n    public throwAnException<U>(callback: (exception: Error,) => U,): | T | U {\n        try {\n            // eslint-disable-next-line\n            this._conditionCallbackResult;\n        } catch (exception) {\n            if (exception instanceof Error)\n                return callback(exception);\n            throw exception;\n        }\n        return this._reference;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                                                                                  from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                                    from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                                                    from '../ClassWithReference';\nimport type {EntityCategory}                                                                                                                                                                                                                                        from './EntityCategory';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber, PossibleImagePath, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityCategories.types';\nimport type {StaticReference}                                                                                                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link EntityCategoryLoader}\n * @classWithDynamicImport {@link EntityCategoryLoader}\n */\nexport class EntityCategories\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<EntityCategory>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly TERRAIN = new EntityCategories('Terrain', 0,);\n    public static readonly ITEM =    new EntityCategories('Item',    1,);\n    public static readonly ENEMY =   new EntityCategories('Enemy',   2,);\n    public static readonly GIZMO =   new EntityCategories('Gizmo',   3,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityCategories;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, EntityCategory>;\n\n    #reference?: EntityCategory;\n    readonly #englishName;\n    readonly #imageName: PossibleImageName;\n    #imagePath?: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber,) {\n        super();\n        this.#englishName = new StringContainer<PossibleEnglishName, Lowercase<PossibleEnglishName>>(englishName);\n        this.#imageName = `CategoryIcon_0${imageNumber}`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, EntityCategory> {\n        return this.#REFERENCE_MAP ??= Import.EntityCategoryLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): EntityCategory {\n        return this.#reference ??= EntityCategories.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): Lowercase<PossibleEnglishName> {\n        return this.#englishName.getInHtml;\n    }\n\n    public get imageName(): PossibleImageName {\n        return this.#imageName;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath ??= `/${BASE_PATH}/category/${this.imageName}^s.tiff`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(enumeration => enumeration.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityCategories> {\n        return EntityCategories;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityCategories = EntityCategories, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityCategories\n    public static getValue(value: PossibleValue,): | EntityCategories | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}","import type {ClassWithEnglishName}                                                                                                                                                                                                                                                         from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                                                           from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                           from '../ClassWithReference';\nimport type {EnumArray, EnumArray_EnglishName, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber, PossibleImagePath, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundEffectCategories.types';\nimport type {SoundEffectCategory}                                                                                                                                                                                                                                                          from './SoundEffectCategory';\nimport type {StaticReference}                                                                                                                                                                                                                                                              from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link SoundEffectCategoryLoader}\n * @classWithDynamicImport {@link SoundEffectCategoryLoader}\n */\nexport class SoundEffectCategories\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<SoundEffectCategory>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly FEELINGS =   new SoundEffectCategories('Feelings',   4,);\n    public static readonly STINGERS =   new SoundEffectCategories('Stingers',   5,);\n    public static readonly REACTIONS =  new SoundEffectCategories('Reactions',  6,);\n    public static readonly ANIMATIONS = new SoundEffectCategories('Animations', 7,);\n    public static readonly MUSIC =      new SoundEffectCategories('Music',      8,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundEffectCategories;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, SoundEffectCategory>;\n\n    #reference?: SoundEffectCategory;\n    readonly #englishName;\n    readonly #imageName: PossibleImageName;\n    #imagePath?: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#imageName = `CategoryIcon_0${imageNumber}`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, SoundEffectCategory> {\n        return this.#REFERENCE_MAP ??= Import.SoundEffectCategoryLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): SoundEffectCategory {\n        return this.#reference ??= SoundEffectCategories.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get imageName(): PossibleImageName {\n        return this.#imageName;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath ??= `/${BASE_PATH}/category/${this.imageName}^s.tiff`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): EnumArray_EnglishName {\n        return this.values.map(soundEffectCategory => soundEffectCategory.englishName) as unknown as EnumArray_EnglishName;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundEffectCategories> {\n        return SoundEffectCategories;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends SoundEffectCategories = SoundEffectCategories, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundEffectCategories\n    public static getValue(value: PossibleValue,): | SoundEffectCategories | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                                                                                  from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                                                    from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                                                    from '../ClassWithReference';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber, PossibleImagePath, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './MiiCostumeCategories.types';\nimport type {MiiCostumeCategory}                                                                                                                                                                                                                                    from './MiiCostumeCategory';\nimport type {StaticReference}                                                                                                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link MiiCostumeCategoryLoader}\n * @classWithDynamicImport {@link MiiCostumeCategoryLoader}\n */\nexport class MiiCostumeCategories\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<MiiCostumeCategory>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEADGEAR = new MiiCostumeCategories('Headgear', 1,);\n    public static readonly TOP =      new MiiCostumeCategories('Top', 0,);\n    public static readonly COSTUME =  new MiiCostumeCategories('Costume', 3,);\n    public static readonly BOTTOM =   new MiiCostumeCategories('Bottom', 2,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MiiCostumeCategories;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, MiiCostumeCategory>;\n\n    #reference?: MiiCostumeCategory;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n    readonly #imageName: PossibleImageName;\n    #imagePath?: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#imageName = `DressIcon_0${imageNumber}`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, MiiCostumeCategory> {\n        return this.#REFERENCE_MAP ??= Import.MiiCostumeCategoryLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): MiiCostumeCategory {\n        return this.#reference ??= MiiCostumeCategories.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get imageName(): PossibleImageName {\n        return this.#imageName;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath ??= `/${BASE_PATH}/category/${this.imageName}^s.tiff`;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(soundEffectCategory => soundEffectCategory.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MiiCostumeCategories> {\n        return MiiCostumeCategories;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.imageName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MiiCostumeCategories = MiiCostumeCategories, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MiiCostumeCategories\n    public static getValue(value: PossibleValue,): | MiiCostumeCategories | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassThatIsAvailableFromTheStart, PossibleIsAvailableFromTheStart} from './ClassThatIsAvailableFromTheStart';\nimport type {GameStructure}                                                     from '../game/GameStructure';\n\nexport class ClassThatIsAvailableFromTheStartContainer<SMM1 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM3DS extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, SMM2 extends PossibleIsAvailableFromTheStart = PossibleIsAvailableFromTheStart, >\n    implements ClassThatIsAvailableFromTheStart<SMM1, SMM3DS, SMM2> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #structure;\n\n    //endregion -------------------- Fields --------------------\n\n    /*package*/ constructor(structure: GameStructure<SMM1, SMM3DS, SMM2>,) {\n        this.#structure = structure;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isAvailableFromTheStartInSMM1(): SMM1 {\n        return this.#structure.superMarioMaker;\n    }\n\n    public get isAvailableFromTheStartInSMM3DS(): SMM3DS {\n        return this.#structure.superMarioMakerForNintendo3DS;\n    }\n\n    public get isAvailableFromTheStartInSMM2(): SMM2 {\n        return this.#structure.superMarioMaker2;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import {Fragment} from 'react';\nimport {Link}     from 'react-router-dom';\n\nimport type {ClassWithEnglishName}                                                                                                                                                                       from '../ClassWithEnglishName';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './NightEffects.types';\nimport type {EveryPossibleRouteNames}                                                                                                                                                                    from '../../routes/everyRoutes.types';\nimport type {ReactElement}                                                                                                                                                                               from '../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                                            from '../../util/enum/Enum.types';\nimport type {TranslationMethod, TranslationReplaceKeysMap}                                                                                                                                               from '../../lang/components/TranslationProperty';\n\nimport {EMPTY_OBJECT}                  from '../../util/emptyVariables';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {Entities}                      from '../entity/Entities';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {ProjectLanguages}              from '../../lang/ProjectLanguages';\nimport {route}                         from '../../routes/route';\nimport {StringContainer}               from '../../util/StringContainer';\nimport {Themes}                        from '../theme/Themes';\n\nexport class NightEffects\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SPECIAL_EFFECT_ON_ENTITIES = new class NightEffects_SpecialEffectOnEntities extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            //TODO change the link to be only for the entities with special effects on ground night\n            return {\n                entities: NightEffects._createEntitiesLink(this, 'everyEntities',),\n            };\n        }\n\n    }('Special effect on entities',);\n    public static readonly SCREEN_UPSIDE_DOWN =         new NightEffects('Screen upside down',);\n    public static readonly DARK =                       new class NightEffects_Dark extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            //TODO change the entities to be only for the entities with dark light\n            return {\n                entities: NightEffects._createEntitiesLink(this, 'everyEntities',),\n                players: NightEffects._createPlayersLink(this),\n            };\n        }\n\n    }('Dark',);\n    public static readonly WIND =                       new class NightEffects_Wind extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            //TODO change the game styles to only show the effect with the game style view.\n            return {\n                gameStyle: <Link key={`${this.englishName} (game style)`} to={route('everyGameStyles')} className=\"link-primary\">{translation('Game style').toLowerCase()}</Link>,\n            };\n        }\n\n    }('Wind',);\n    public static readonly SLIPPERY =                   new NightEffects('Slippery',);\n    public static readonly LOW_GRAVITY =                new class NightEffects_LowGravity extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            return {\n                underwaterImage: NightEffects._createUnderwaterImage(this),\n                entities: NightEffects._createEntitiesLink(this, 'everyEntities',),\n            };\n        }\n\n    }('Low gravity',);\n    public static readonly POISON_LIQUID =              new class NightEffects_PoisonLiquid extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            return {\n                water: <span key={`${this.englishName} (water)`} className=\"text-decoration-underline\">{ProjectLanguages.currentLanguage.get(Entities.WATER.reference)!.toLowerCase()}</span>,\n                poison: <span key={`${this.englishName} (poison)`} className=\"text-decoration-underline\">{ProjectLanguages.currentLanguage.get(Entities.POISON.reference)!.toLowerCase()}</span>,\n            };\n        }\n\n    }('Poison liquid',);\n    public static readonly ENTITIES_IN_WATER =          new class NightEffects_EntitiesInWater extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            //TODO change the link to be only for the entities with the underwater behaviour on the sky night theme\n            return {\n                underwaterImage: NightEffects._createUnderwaterImage(this),\n                entities: NightEffects._createEntitiesLink(this, 'everyEntities',),\n            };\n        }\n\n    }('Entities in water',);\n    public static readonly CHARACTERS_IN_WATER =        new class NightEffects_CharactersInWater extends NightEffects {\n\n        protected override _createReplaceComponent(translation:TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n            return {\n                underwaterImage: NightEffects._createUnderwaterImage(this),\n                players: NightEffects._createPlayersLink(this),\n            };\n        }\n\n    }('Characters in water',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: NightEffects;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected static _createUnderwaterImage(instance: NightEffects,): ReactElement {\n        return <Fragment key={`${instance.englishName} (underwater)`}>{Themes.UNDERWATER.renderSingleComponent(true)}</Fragment>;\n    }\n\n    protected static _createEntitiesLink(instance: NightEffects, routeName: EveryPossibleRouteNames,): ReactElement {\n        //TODO add entities translation\n        return <Link key={`${instance.englishName} (entities)`} to={route(routeName)} className=\"link-primary\">--entities--</Link>;\n    }\n\n    protected static _createPlayersLink(instance: NightEffects,): ReactElement {\n        //TODO add players translation\n        return <span key={`${instance.englishName} (players)`} className=\"text-decoration-underline\">--players--</span>;\n    }\n\n    protected _createReplaceComponent(translation: TranslationMethod<'gameContent'>,): TranslationReplaceKeysMap {\n        return EMPTY_OBJECT;\n    }\n\n    public get createNewComponent(): ReactElement {\n        return <GameContentTranslationComponent>{translation =>\n            <GameContentTranslationComponent translationKey={`nightEffect.${this.englishName}`} replace={this._createReplaceComponent(translation)}/>\n        }</GameContentTranslationComponent>;\n    }\n\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<NightEffects> {\n        return NightEffects;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends NightEffects = NightEffects, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): NightEffects\n    public static getValue(value: PossibleValue,): | NightEffects | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}\n","import './Github.button.scss';\n\nimport ContentTranslationComponent from '../../lang/components/ContentTranslationComponent';\nimport Tooltip                     from '../../bootstrap/tooltip/Tooltip';\n\nconst ID = 'github-button';\nexport default function GithubButton() {\n    return <ContentTranslationComponent>{translation =>\n        <Tooltip option={{title: translation('Go to the GitHub repository'), placement: 'top',}} elementId={ID}>\n            <a id={ID} href=\"https://github.com/joooKiwi/smm-encyclopedia\" className=\"btn btn-lg btn-outline-light rounded-pill bi bi-github\">\n                <span>{translation('GitHub repository')}</span>\n            </a>\n        </Tooltip>\n    }</ContentTranslationComponent>;\n}\n","import {Modal} from 'bootstrap';\n\nimport type {ModalEventCallbackReceived, ModalEvents, ModalEventsReceived} from './Modal.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class ModalInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof ModalInstance, Modal, Modal.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Modal.Options = Modal.Default;\n    /**\n     * @see Modal.Events.show\n     */\n    public static readonly SHOW_EVENT = 'show.bs.modal' as Modal.Events.show;\n    /**\n     * @see Modal.Events.shown\n     */\n    public static readonly SHOWN_EVENT = 'shown.bs.modal' as Modal.Events.shown;\n    /**\n     * @see Modal.Events.hide\n     */\n    public static readonly HIDE_EVENT = 'hide.bs.modal' as Modal.Events.hide;\n    /**\n     * @see Modal.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = 'hidden.bs.modal' as Modal.Events.hidden;\n    /**\n     * @see Modal.Events.hidePrevented\n     */\n    public static readonly HIDE_PREVENTED_EVENT = 'hidePrevented.bs.modal' as Modal.Events.hidePrevented;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Modal.Options> = ModalInstance.DEFAULT_OPTIONS, callbacks: ModalEventsReceived = null,) {\n        super(ModalInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Modal.Options>,): Modal {\n        return Modal.getOrCreateInstance(this.element, options,);\n    }\n\n\n    #addEventListener(type: string, callback: ModalEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/modal/#events\n     */\n    protected override _on(callbacks: Partial<ModalEvents<this>>,): this {\n        if (callbacks.hidePrevented != null)\n            this.onHidePrevented(callbacks.hidePrevented);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Modal.Events.show\n     */\n    public override onShow(callback: ModalEventCallbackReceived<this>,): this {\n        return this.#addEventListener(ModalInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Modal.Events.shown\n     */\n    public override onShown(callback: ModalEventCallbackReceived<this>,): this {\n        return this.#addEventListener(ModalInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Modal.Events.hide\n     */\n    public override onHide(callback: ModalEventCallbackReceived<this>): this {\n        return this.#addEventListener(ModalInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Modal.Events.hidden\n     */\n    public override onHidden(callback: ModalEventCallbackReceived<this>,): this {\n        return this.#addEventListener(ModalInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Modal.Events.hidePrevented\n     */\n    public onHidePrevented(callback: ModalEventCallbackReceived<this>,): this {\n        return this.#addEventListener(ModalInstance.HIDE_PREVENTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): ModalInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(ModalInstance, element);\n    }\n\n}\n","import type {ReactProperty}        from '../../../util/react/ReactProperty';\nimport type {HTMLButtonProperties} from '../../../util/react/html/HTMLButtonProperties';\n\nimport {ModalInstance} from '../ModalInstance';\n\ninterface ModalButtonProperties\n    extends ReactProperty, Omit<HTMLButtonProperties, | 'type' | 'onClick'> {\n\n    elementToShow: string\n\n}\n\n/**\n *\n * @reactComponent\n * @param properties\n */\nexport default function ModalButton({elementToShow, ...otherProperties}: ModalButtonProperties,) {\n    return <button {...otherProperties} type=\"button\" onClick={() => ModalInstance.getInstance(elementToShow).instance.show()}/>;\n}\n","import {PureComponent} from 'react';\n\nimport type {ModalProperties}                           from '../ModalContainers.types';\nimport type {PossibleContent, PossibleTooltipPlacement} from './AbstractNavigationButton.types';\nimport type {ReactComponent}                            from '../../util/react/ReactComponent';\nimport type {ReactElement, ReactProperty}               from '../../util/react/ReactProperty';\nimport type {TranslationMethod}                         from '../../lang/components/TranslationProperty';\n\nimport ContentTranslationComponent from '../../lang/components/ContentTranslationComponent';\nimport Tooltip                     from '../../bootstrap/tooltip/Tooltip';\nimport ModalButton                 from '../../bootstrap/modal/element/ModalButton';\n\ninterface NavButtonProperties\n    extends ReactProperty, ModalProperties {\n\n}\n\n/**\n * A generic navigation button.\n * It contains a {@link Tooltip} & a {@link ModalButton}.\n *\n * @reactComponent\n */\nexport abstract class AbstractNavigationButton\n    extends PureComponent<NavButtonProperties>\n    implements ReactComponent {\n\n    /**\n     * <p>\n     * Tell whenever it is a top ot bottom button.\n     * </p>\n     *\n     * <p>\n     * If it's <b>true</b>, then the color will be \"primary\".\n     * Otherwise (<b>false</b>), this will be \"light\".\n     * </b>\n     */\n    protected abstract get _isTopButton(): boolean;\n\n    /**\n     * The current id of the {@link ModalButton button}\n     */\n    protected abstract get _id(): string;\n\n    /**\n     * The tooltip placement as only left for the right buttons\n     * & bottom for the centered buttons.\n     *\n     * @return the tooltip placement\n     */\n    protected abstract get _tooltipPlacement(): PossibleTooltipPlacement;\n\n    /**\n     * The added classes (as a bootstrap svg)\n     */\n    protected get _addedClass(): string {\n        return '';\n    }\n\n    /**\n     * Get the content from the translation in the \"content\" resource.\n     *\n     * @param translation the {@link TranslationMethod translation method}\n     * @return a single content or a content that is hidden once the screen is shorter\n     */\n    protected abstract _getContent(translation: TranslationMethod<'content'>,): PossibleContent;\n\n    public override render(): ReactElement {\n        return <ContentTranslationComponent>{translation => {\n            const isTopButton = this._isTopButton;\n            const id = this._id;\n            const contentValue = this._getContent(translation);\n            const willBeHiddenOnShorterScreen = typeof contentValue != 'string';\n            const content = willBeHiddenOnShorterScreen ? contentValue[0] : contentValue;\n\n            return <Tooltip elementId={id} option={({title: content, placement: this._tooltipPlacement,})}>\n                <ModalButton key={`navigation button (${id})`} id={id} elementToShow={this.props.id}\n                             className={`btn btn-lg btn-outline-${isTopButton ? 'primary' : 'light'} btn-navigation ${this._addedClass} rounded-pill`}>{\n                    willBeHiddenOnShorterScreen\n                        ? <span key={`navigation text button (${id})`} className={`btn-navigation-text d-none d-${contentValue[1]}-inline-block`}>{content}</span>\n                        : <span key={`navigation text button (${id})`} className=\"btn-navigation-text\">{content}</span>\n                }\n                </ModalButton>\n            </Tooltip>;\n        }\n        }</ContentTranslationComponent>;\n    }\n\n}\n","import './LanguageChanger.button.scss';\n\nimport type {PossibleContent, PossibleTooltipPlacement} from './AbstractNavigationButton.types';\nimport type {TranslationMethod}                         from '../../lang/components/TranslationProperty';\n\nimport {AbstractNavigationButton} from './AbstractNavigationButton';\n\n/**\n * @reactComponent\n * @todo change the color to not be black for the \"Change the language\" tooltip\n */\nexport default class LanguageChangerButton\n    extends AbstractNavigationButton {\n\n    static readonly #ID = 'languageChanger-button';\n\n    protected override get _isTopButton() {\n        return false;\n    }\n\n    protected override get _id() {\n        return LanguageChangerButton.#ID;\n    }\n\n    protected override get _tooltipPlacement(): PossibleTooltipPlacement {\n        return 'left';\n    }\n\n    protected override get _addedClass() {\n        return 'bi-translate';\n    }\n\n    protected override _getContent(translation: TranslationMethod<'content'>,): PossibleContent {\n        return translation('Change the language');\n    }\n\n}\n","import type {DayNumber}                                       from './types';\nimport type {EnumArray, Names, Ordinals, PossibleStringValue} from '../ProjectLanguages.types';\nimport type {Enumerable}                                      from '../../util/enum/Enumerable';\nimport type {EveryLanguages}                                  from '../EveryLanguages';\nimport type {PossibleNonNullableValue, PossibleValue}         from './DateDayLanguages.types';\nimport type {StaticReference}                                 from '../../util/enum/Enum.types';\n\nimport {Enum}             from '../../util/enum/Enum';\nimport {ProjectLanguages} from '../ProjectLanguages';\n\nexport abstract class DateDayLanguages\n    extends ProjectLanguages {\n\n    //region -------------------- Enum instances --------------------\n\n    public static override readonly AMERICAN_ENGLISH =    new class DateDayLanguages_AmericanEnglish extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return day === 1 || day === 21 || day === 31\n                ? <>{day}<sup>st</sup></>\n                : day === 2 || day === 22\n                    ? <>{day}<sup>nd</sup></>\n                    : day === 3\n                        ? <>3<sup>rd</sup></>\n                        : <>{day}<sup>th</sup></>;\n        }\n\n    }   (ProjectLanguages.AMERICAN_ENGLISH,   );\n    public static override readonly EUROPEAN_ENGLISH =    new class DateDayLanguages_EuropeanEnglish extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.AMERICAN_ENGLISH.newDayComponent(day);\n        }\n\n    }   (ProjectLanguages.EUROPEAN_ENGLISH,   );\n    public static override readonly CANADIAN_FRENCH =     new class DateDayLanguages_CanadianFrench extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return day === 1\n                ? <>{day}<sup>er</sup></>\n                : <>{day}</>;\n        }\n\n    }    (ProjectLanguages.CANADIAN_FRENCH,    );\n    public static override readonly EUROPEAN_FRENCH =     new class DateDayLanguages_EuropeanFrench extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.CANADIAN_FRENCH.newDayComponent(day);\n        }\n\n    }    (ProjectLanguages.EUROPEAN_FRENCH,    );\n    public static override readonly GERMAN =              new class DateDayLanguages_German extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day === 1\n                ? 'der ' + day\n                : day}</>;\n        }\n\n    }            (ProjectLanguages.GERMAN,             );\n    public static override readonly AMERICAN_SPANISH =    new class DateDayLanguages_AmericanSpanish extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }   (ProjectLanguages.AMERICAN_SPANISH,   );\n    public static override readonly EUROPEAN_SPANISH =    new class DateDayLanguages_EuropeanSpanish extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.AMERICAN_SPANISH.newDayComponent(day);\n        }\n\n    }   (ProjectLanguages.EUROPEAN_SPANISH,   );\n    public static override readonly ITALIAN =             new class DateDayLanguages_Italian extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day === 1 ? 'il' : day}</>;\n        }\n\n    }           (ProjectLanguages.ITALIAN,            );\n    public static override readonly DUTCH =               new class DateDayLanguages_Dutch extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }             (ProjectLanguages.DUTCH,              );\n    public static override readonly AMERICAN_PORTUGUESE = new class DateDayLanguages_AmericanPortuguese extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }(ProjectLanguages.AMERICAN_PORTUGUESE,);\n    public static override readonly EUROPEAN_PORTUGUESE = new class DateDayLanguages_EuropeanPortuguese extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.AMERICAN_PORTUGUESE.newDayComponent(day);\n        }\n\n    }(ProjectLanguages.EUROPEAN_PORTUGUESE,);\n    public static override readonly RUSSIAN =             new class DateDayLanguages_Russian extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }           (ProjectLanguages.RUSSIAN,            );\n    public static override readonly JAPANESE =            new class DateDayLanguages_Japanese extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }          (ProjectLanguages.JAPANESE,           );\n    public static override readonly TRADITIONAL_CHINESE = new class DateDayLanguages_TraditionalChinese extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.JAPANESE.newDayComponent(day);\n        }\n\n    }(ProjectLanguages.TRADITIONAL_CHINESE,);\n    public static override readonly SIMPLIFIED_CHINESE =  new class DateDayLanguages_SimplifiedChinese extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return DateDayLanguages.JAPANESE.newDayComponent(day);\n        }\n\n    } (ProjectLanguages.SIMPLIFIED_CHINESE, );\n    public static override readonly KOREAN =              new class DateDayLanguages_Korean extends DateDayLanguages {\n\n        public override newDayComponent(day: DayNumber,) {\n            return <>{day}</>;\n        }\n\n    }            (ProjectLanguages.KOREAN,             );\n\n    protected static override readonly _DEFAULT = this.getValue(ProjectLanguages._DEFAULT);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: DateDayLanguages;\n\n    protected static override readonly _PARENT: StaticReference<ProjectLanguages> = ProjectLanguages;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #reference;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(language: ProjectLanguages,) {\n        super(language);\n        this.#reference = language;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get reference() {\n        return this.#reference;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract newDayComponent(day: DayNumber,): JSX.Element;\n\n\n    public static override get currentLanguage(): DateDayLanguages {\n        return this.getValue(ProjectLanguages.currentLanguage);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<DateDayLanguages> {\n        return DateDayLanguages;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static override get default(): DateDayLanguages {\n        return this.getValue(ProjectLanguages.default)!;\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByEnumerable(value: Enumerable,) {\n        return value instanceof ProjectLanguages\n            ? this.values.find(enumerable => enumerable.reference === value) ?? null\n            : null;\n    }\n\n    public static override getValue(nullValue: | null | undefined,): null\n    public static override getValue<O extends Ordinals, >(ordinal: O,): EnumArray<DateDayLanguages>[O]\n    public static override getValue<O extends number, >(ordinal: O,): | NonNullable<EnumArray<DateDayLanguages>[O]> | null\n    public static override getValue<N extends Names, >(name: N,): typeof DateDayLanguages[N]\n    public static override getValue(nameOrAcronym: PossibleStringValue,): DateDayLanguages\n    public static override getValue(nameOrAcronym: string,): | DateDayLanguages | null\n    public static override getValue<I extends DateDayLanguages, >(instance: I,): I\n    public static override getValue(instance: ProjectLanguages,): DateDayLanguages\n    public static override getValue(instance: | EveryLanguages | ProjectLanguages,): | DateDayLanguages | null\n    public static override getValue(value: PossibleNonNullableValue,): DateDayLanguages\n    public static override getValue(value: PossibleValue,): | DateDayLanguages | null\n    public static override getValue(value: PossibleValue,) {\n        return Enum.getValueOn<DateDayLanguages>(this, value,);\n    }\n\n    public static override get values(): EnumArray<DateDayLanguages> {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static override [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}","import {FormattedDateParts} from 'react-intl';\nimport {Fragment}           from 'react';\n\nimport type {DayNumber, MonthNumber} from './types';\nimport type {ReactProperty}          from '../../util/react/ReactProperty';\n\nimport {DateDayLanguages} from './DateDayLanguages';\n\nexport interface DateTimeFormatProperties\n    extends ReactProperty {\n\n    year: number\n\n    month: MonthNumber\n\n    day: DayNumber\n\n}\n\n/**\n * A simple date component that return a date\n * from the {@link DateDayLanguages.currentLanguage current language}.\n *\n * @reactComponent\n * @see https://formatjs.io/docs/react-intl/components#formatteddate\n */\nexport default function SimpleDate({year, month, day,}: DateTimeFormatProperties,) {\n    const date = new Date(year, month - 1, day,);\n\n    return <FormattedDateParts\n        value={date}\n        year=\"numeric\"\n        month=\"long\"\n        day=\"numeric\">\n        {parts => <>{parts.map(({type, value,}) => type === 'day' ? <Fragment key={`${date} - ${type}`}>{DateDayLanguages.currentLanguage.newDayComponent(Number(value) as DayNumber)}</Fragment> : value)}</>}\n    </FormattedDateParts>;\n}\n\n","import './Footer.scss';\n\nimport type {ModalProperties} from './ModalContainers.types';\nimport type {ReactProperty}   from '../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../lang/components/ContentTranslationComponent';\nimport GithubButton                from './button/Github.button';\nimport LanguageChangerButton       from './button/LanguageChanger.button';\nimport SimpleDate                  from '../lang/date/SimpleDate';\n\ninterface FooterProperties\n    extends ReactProperty {\n\n    languageChanger: ModalProperties\n\n}\n\n/**\n * @reactComponent\n */\nexport default function Footer({languageChanger,}: FooterProperties,) {\n    return <footer id=\"footer-container\" className=\"bg-dark bg-gradient\">\n        <div className=\"container\">\n            <div id=\"helper-container\" className=\"row\">\n                <GithubButton/>\n                <LanguageChangerButton {...languageChanger}/>\n            </div>\n            <div className=\"row\">\n                <span id=\"copyright\" className=\"text-center text-light small\">\n                    <ContentTranslationComponent translationKey=\"Copyright\"/><sup>©</sup> Nintendo™\n                </span>\n                <span id=\"copyright_madeBy\" className=\"text-center text-light small\">\n                    <ContentTranslationComponent translationKey=\"React application made by\"/>: JóôòKiwi & Geitje\n                </span>\n                <span id=\"copyright_lastEdited\" className=\"text-center text-light small\">\n                    <ContentTranslationComponent translationKey=\"Last update\"/>: <SimpleDate day={13} month={8} year={2022}/>\n                </span>\n            </div>\n        </div>\n    </footer>;\n}\n","import {PureComponent} from 'react';\n\nimport type {GlobalAppOption}                                                                                   from '../GlobalAppOption';\nimport type {GroupProperties, OnClickCallback, PossibleElement, PossibleId, PossibleOptionValue, SingleElement} from './Group.types';\nimport type {ReactComponent}                                                                                    from '../../../../util/react/ReactComponent';\nimport type {ReactElement}                                                                                      from '../../../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\n/**\n * @reactComponent\n */\nexport default abstract class AbstractGroup<T extends PossibleElement, U extends PossibleOptionValue, >\n    extends PureComponent<GroupProperties<T, U>>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #IS_NOT_DISABLED = [false, false,] as const;\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): PossibleId {\n        return this.props.id;\n    }\n\n    public get isHidden(): boolean {\n        return this.props.isHidden ?? false;\n    }\n\n    public get elements(): readonly SingleElement<T, U>[] {\n        return this.props.elements;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    protected abstract _renderElement(element: T, option: GlobalAppOption<U>, isDisabled: readonly [boolean, boolean,], onClickCallback: | OnClickCallback | null,): ReactElement\n\n    public override render(): ReactElement {\n        return this.isHidden\n            ? EMPTY_REACT_ELEMENT\n            : <div key={`option container (${this.id})`} id={`${this.id}-option-container`} className=\"container-fluid\">{\n                this.elements.map(([element, option, isDisabled, isHidden, onClickCallback = null,]) =>\n                    isHidden\n                        ? EMPTY_REACT_ELEMENT\n                        : this._renderElement(\n                            element,\n                            option,\n                            isDisabled == null ? AbstractGroup.#IS_NOT_DISABLED : typeof isDisabled == 'boolean' ? [isDisabled, false,] : isDisabled,\n                            onClickCallback,))\n            }</div>;\n    }\n\n}","import AbstractGroup from './AbstractGroup';\nimport Image         from '../../../tools/images/Image';\n\nimport type {OnClickCallback, PossibleElement, PossibleOptionValue} from './Group.types';\nimport type {GlobalAppOption}                                       from '../GlobalAppOption';\nimport type {ReactElement}                                          from '../../../../util/react/ReactProperty';\nimport type {Themes}                                                from '../../../../core/theme/Themes';\nimport type {GlobalThemeOption}                                     from '../GlobalThemeOption';\n\n/**\n * @reactComponent\n */\nexport abstract class AbstractGroupWithSingleImage<T extends Exclude<PossibleElement, Themes>, U extends Exclude<PossibleOptionValue, GlobalThemeOption>, >\n    extends AbstractGroup<T, U> {\n\n    protected override _renderElement(element: T, option: GlobalAppOption<U>, [isDisabled,]: readonly [boolean, boolean,], onClickCallback: OnClickCallback | null): ReactElement {\n        return <Image key={`option input (${element.englishName})`} id={`optionInput-${element.englishNameInHtml}`}\n                      className={`btn btn${option.get ? '' : '-outline'}-secondary  ${isDisabled ? 'disabled' : ''}`} data-bs-toggle=\"button\"\n                      source={element.imagePath} fallbackName={`option - ${element.englishName}`}\n                      onClick={() => {\n                          option.set(!option.get as U);\n                          onClickCallback?.();\n                      }}/>;\n    }\n}\n","import {AbstractGroupWithSingleImage} from './AbstractGroupWithSingleImage';\n\nimport type {Games} from '../../../../core/game/Games';\n\n/**\n * @reactComponent\n */\nexport default class GameGroup\n    extends AbstractGroupWithSingleImage<Games, boolean> {\n\n}\n","import {AbstractGroupWithSingleImage} from './AbstractGroupWithSingleImage';\n\nimport type {GameStyles} from '../../../../core/gameStyle/GameStyles';\n\n/**\n * @reactComponent\n */\nexport default class GameStyleGroup\n    extends AbstractGroupWithSingleImage<GameStyles, boolean> {\n\n}\n","import type {ClassWithValue}                                                                                                                                                                                from './ClassWithValue';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleImageAnimation, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './ImageAnimations.types';\nimport type {StaticReference}                                                                                                                                                                               from '../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../util/enum/Enum';\n\n/**\n * The possible image animation as either\n *\n * <ul>\n *  <li>Separated → display the image animation individually</li>\n *  <li>Yes → Display the image animation</li>\n *  <li>No → Display no image animation</li>\n * </ul>\n */\nexport class ImageAnimations\n    extends Enum<Ordinals, Names>\n    implements ClassWithValue<PossibleImageAnimation> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SEPARATED = new ImageAnimations('separated',);\n    public static readonly YES =       new ImageAnimations(true,);\n    public static readonly NO =        new ImageAnimations(false,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ImageAnimations;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #value;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: PossibleImageAnimation,) {\n        super();\n        this.#value = value;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value() {\n        return this.#value;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ImageAnimations> {\n        return ImageAnimations;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.value === value)\n            ?? null;\n    }\n\n    protected static override _getValueByBoolean(value: boolean,) {\n        return this.values.find(enumerable => enumerable.value === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends ImageAnimations = ImageAnimations, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): ImageAnimations\n    public static getValue(value: PossibleValue,): | ImageAnimations | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {lazy} from 'react';\n\nimport type {ClassWithValue}                                                                                                                                                        from './ClassWithValue';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Images.types';\nimport type {ImageProperties}                                                                                                                                                       from '../../tools/images/properties/ImageProperties';\nimport type {ReactElement}                                                                                                                                                          from '../../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                       from '../../../util/enum/Enum.types';\n\nimport {EMPTY_REACT_ELEMENT} from '../../../util/emptyReactVariables';\nimport {Enum}                from '../../../util/enum/Enum';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image = lazy(() => import('../../tools/images/Image'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * The possible image as either\n *\n * <ul>\n *  <li>Yes → Display the images</li>\n *  <li>No → Display no images (and by definition no {@link ImageAnimations image animation})</li>\n * </ul>\n */\nexport abstract class Images\n    extends Enum<Ordinals, Names>\n    implements ClassWithValue<boolean> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly YES = new class Images_Yes extends Images {\n\n        public override renderComponent(properties: _ImageProperties,): ReactElement {\n            return <Image {...properties}/>;\n        }\n\n    }(true,);\n    public static readonly NO =  new class Images_No extends Images {\n\n        public override renderComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n    }(false,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Images;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #value;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: boolean,) {\n        super();\n        this.#value = value;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value() {\n        return this.#value;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract renderComponent(properties: _ImageProperties,):ReactElement;\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Images> {\n        return Images;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByBoolean(value: boolean,) {\n        return this.values.find(enumerable => enumerable.value === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Images = Images, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Images\n    public static getValue(value: PossibleValue,): | Images | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ninterface _ImageProperties\n    extends Omit<ImageProperties, 'ref'> {\n\n    ref?: Exclude<ImageProperties['ref'], string>\n\n}\n","/**\n * A global {@link Themes} option\n * with the day value & the night value.\n */\nexport class GlobalThemeOption {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * A global theme on the {@link Times.DAY day time} & the {@link Times.NIGHT night time}.\n     */\n    public static readonly ALL = new GlobalThemeOption(true, true,);\n    /**\n     * A global theme on only the {@link Times.DAY day time}.\n     */\n    public static readonly DAY = new GlobalThemeOption(true, false,);\n    /**\n     * A global theme on only the {@link Times.NIGHT night time}.\n     */\n    public static readonly NIGHT = new GlobalThemeOption(false, true,);\n    /**\n     * A global theme on no {@link Times time}.\n     */\n    public static readonly NONE = new GlobalThemeOption(false, false,);\n\n    readonly #dayValue;\n    readonly #nightValue;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(dayValue: boolean, nightValue: boolean,) {\n        this.#dayValue = dayValue;\n        this.#nightValue = nightValue;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get dayValue(): boolean {\n        return this.#dayValue;\n    }\n\n    public get nightValue(): boolean {\n        return this.#nightValue;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Method --------------------\n\n    /**\n     * Reverse the {@link Times.NIGHT night} value.\n     */\n    public onNight(): GlobalThemeOption\n    /**\n     * Add or remove the {@link Times.NIGHT night} property\n     * by returning a predefined instance.\n     *\n     * @param add_or_remove add = true, remove = false\n     */\n    public onNight(add_or_remove: boolean,): GlobalThemeOption\n    public onNight(add_or_remove_or_reverse?: boolean,): GlobalThemeOption {\n        return add_or_remove_or_reverse == null\n            ? this.dayValue\n                ? this.nightValue\n                    ? GlobalThemeOption.DAY\n                    : GlobalThemeOption.ALL\n                : this.nightValue\n                    ? GlobalThemeOption.NONE\n                    : GlobalThemeOption.NIGHT\n            : add_or_remove_or_reverse\n                ? this.dayValue\n                    ? GlobalThemeOption.ALL\n                    : GlobalThemeOption.NIGHT\n                : this.dayValue\n                    ? GlobalThemeOption.DAY\n                    : GlobalThemeOption.NONE;\n    }\n\n    public get reverseNightValue(): GlobalThemeOption {\n        return this.onNight();\n    }\n\n    public get addNight(): GlobalThemeOption {\n        return this.onNight(true);\n    }\n\n    public get removeNight(): GlobalThemeOption {\n        return this.onNight(false);\n    }\n\n\n    /**\n     * Reverse the {@link Times.DAY day} value\n     */\n    public onDay(): GlobalThemeOption\n    /**\n     * Add or remove the {@link Times.DAY day} property\n     * by returning a predefined instance.\n     *\n     * @param add_or_remove add = true, remove = false\n     */\n    public onDay(add_or_remove: boolean,): GlobalThemeOption\n    public onDay(add_or_remove_or_reverse?: boolean,): GlobalThemeOption {\n        return add_or_remove_or_reverse == null\n            ? this.nightValue\n                ? this.dayValue\n                    ? GlobalThemeOption.NIGHT\n                    : GlobalThemeOption.ALL\n                : this.dayValue\n                    ? GlobalThemeOption.NONE\n                    : GlobalThemeOption.DAY\n            : add_or_remove_or_reverse\n                ? this.nightValue\n                    ? GlobalThemeOption.ALL\n                    : GlobalThemeOption.DAY\n                : this.nightValue\n                    ? GlobalThemeOption.NIGHT\n                    : GlobalThemeOption.NONE;\n    }\n\n    public get reverseDayValue(): GlobalThemeOption {\n        return this.onDay();\n    }\n\n    public get addDay(): GlobalThemeOption {\n        return this.onDay(true);\n    }\n\n    public get removeDay(): GlobalThemeOption {\n        return this.onDay(false);\n    }\n\n\n    /**\n     * Set to all or none.\n     *\n     * @param isAllOrNone all = true, none = false,\n     */\n    public set(isAllOrNone: boolean,): GlobalThemeOption {\n        return isAllOrNone ? GlobalThemeOption.ALL : GlobalThemeOption.NONE;\n    }\n\n    //region -------------------- Method --------------------\n\n}\n","import {lazy} from 'react';\n\nimport type {ClassWithValue}                                                                                                                                                        from './ClassWithValue';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Sounds.types';\nimport type {ReactElement}                                                                                                                                                          from '../../../util/react/ReactProperty';\nimport type {SimpleSoundProperties}                                                                                                                                                 from '../../tools/sounds/properties/SimpleSoundProperties';\nimport type {StaticReference}                                                                                                                                                       from '../../../util/enum/Enum.types';\n\nimport {EMPTY_REACT_ELEMENT} from '../../../util/emptyReactVariables';\nimport {Enum}                from '../../../util/enum/Enum';\n\n//region -------------------- dynamic imports --------------------\n\nconst SimpleSound = lazy(() => import('../../tools/sounds/SimpleSound'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * The possible sound as either\n *\n * <ul>\n *  <li>Yes → Display the sound viewer</li>\n *  <li>No → Display no sound viewer</li>\n * </ul>\n *\n * @see SimpleSound\n */\nexport abstract class Sounds\n    extends Enum<Ordinals, Names>\n    implements ClassWithValue<boolean> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly YES = new class Sounds_Yes extends Sounds {\n\n        public override renderComponent(properties: SimpleSoundProperties,): ReactElement {\n            return <SimpleSound {...properties}/>;\n        }\n\n    }(true,);\n    public static readonly NO =  new class Sounds_No extends Sounds {\n\n        public override renderComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n    }(false,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Sounds;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #value;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: boolean,) {\n        super();\n        this.#value = value;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): boolean {\n        return this.#value;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract renderComponent(properties: SimpleSoundProperties,):ReactElement;\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Sounds> {\n        return Sounds;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByBoolean(value: boolean,) {\n        return this.values.find(enumerable => enumerable.value === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Sounds = Sounds, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Sounds\n    public static getValue(value: PossibleValue,): | Sounds | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {lazy} from 'react';\n\nimport type {ClassWithValue}                                                                                                                                                        from './ClassWithValue';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './Texts.types';\nimport type {ReactElement}                                                                                                                                                          from '../../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                       from '../../../util/enum/Enum.types';\n\nimport {EMPTY_REACT_ELEMENT}                 from '../../../util/emptyReactVariables';\nimport {Enum}                                from '../../../util/enum/Enum';\nimport {PossibleTextContent, TextProperties} from '../../tools/text/properties/TextProperties';\nimport {YesOrNoTextProperties}               from '../../tools/text/properties/YesOrNoTextProperties';\nimport {BooleanTextProperties}               from '../../tools/text/properties/BooleanTextProperties';\nimport {BooleanResultTextProperties}         from '../../tools/text/properties/BooleanResultTextProperties';\nimport {NameProperties}                      from '../../../lang/name/component/Name.properties';\n\n//region -------------------- dynamic imports --------------------\n\nconst TextComponent =              lazy(() => import('../../tools/text/TextComponent'));\nconst NameComponent =              lazy(() => import('../../../lang/name/component/Name.component'));\nconst YesOrNoResultTextComponent = lazy(() => import('../../tools/text/YesOrNoResultTextComponent'));\nconst BooleanTextComponent =       lazy(() => import('../../tools/text/BooleanTextComponent'));\nconst BooleanResultTextComponent = lazy(() => import('../../tools/text/BooleanResultTextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * The possible text as either\n *\n * <ul>\n *  <li>Yes → Display the text</li>\n *  <li>No → Display no text</li>\n * </ul>\n *\n * @see TextComponent\n * @see YesOrNoResultTextComponent\n * @see BooleanTextComponent\n * @see BooleanResultTextComponent\n */\nexport abstract class Texts\n    extends Enum<Ordinals, Names>\n    implements ClassWithValue<boolean> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly YES = new class Texts_Yes extends Texts {\n\n        public override renderTextComponent<T extends PossibleTextContent = PossibleTextContent, >(properties: _TextProperties<T>,): ReactElement {\n            return <TextComponent {...properties}/>;\n        }\n\n        public override renderNameComponent(properties: _NameProperties,): ReactElement {\n            return <NameComponent {...properties}/>;\n        }\n\n        public override renderYesNoComponent(properties: _YesOrNoTextProperties,): ReactElement {\n            return <YesOrNoResultTextComponent {...properties}/>;\n        }\n\n        public override renderBooleanComponent(properties: _BooleanTextProperties,): ReactElement {\n            return <BooleanTextComponent {...properties}/>;\n        }\n\n        public override renderBooleanResultComponent(properties: _BooleanResultTextProperties,): ReactElement {\n            return <BooleanResultTextComponent {...properties}/>;\n        }\n\n    }(true,);\n    public static readonly NO =  new class Texts_No extends Texts {\n\n        public override renderTextComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n        public override renderNameComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n        public override renderYesNoComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n        public override renderBooleanComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n        public override renderBooleanResultComponent(): ReactElement {\n            return EMPTY_REACT_ELEMENT;\n        }\n\n    } (false,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Texts;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #value;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: boolean,) {\n        super();\n        this.#value = value;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): boolean {\n        return this.#value;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract renderTextComponent<T extends PossibleTextContent = PossibleTextContent, >(properties: _TextProperties<T>,): ReactElement;\n\n    public abstract renderNameComponent(properties: _NameProperties,): ReactElement;\n\n    public abstract renderYesNoComponent(properties: _YesOrNoTextProperties,): ReactElement;\n\n    public abstract renderBooleanComponent(properties: _BooleanTextProperties,): ReactElement;\n\n    public abstract renderBooleanResultComponent(properties: _BooleanResultTextProperties,): ReactElement;\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<Texts> {\n        return Texts;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByBoolean(value: boolean,) {\n        return this.values.find(enumerable => enumerable.value === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends Texts = Texts, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): Texts\n    public static getValue(value: PossibleValue,): | Texts | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ninterface _TextProperties<T extends PossibleTextContent = PossibleTextContent, >\n    extends Omit<TextProperties<T>, 'ref'> {\n\n    ref?: Exclude<TextProperties<T>['ref'], string>\n\n}\n\ninterface _NameProperties\n    extends Omit<NameProperties, 'ref'> {\n\n    ref?: Exclude<NameProperties['ref'], string>\n\n}\n\ninterface _YesOrNoTextProperties\n    extends Omit<YesOrNoTextProperties, 'ref'> {\n\n    ref?: Exclude<YesOrNoTextProperties['ref'], string>\n\n}\n\ninterface _BooleanTextProperties\n    extends Omit<BooleanTextProperties, 'ref'> {\n\n    ref?: Exclude<BooleanTextProperties['ref'], string>\n\n}\n\ninterface _BooleanResultTextProperties\n    extends Omit<BooleanResultTextProperties, 'ref'> {\n\n    ref?: Exclude<BooleanResultTextProperties['ref'], string>\n\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAppOptionValue, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './GlobalAppOption.types';\nimport type {GlobalAppState}                                                                                                                                                                                from '../../AppStates.types';\nimport type {StaticReference}                                                                                                                                                                               from '../../../util/enum/Enum.types';\n\nimport {AbstractAppOption} from '../AbstractAppOption';\nimport {Enum}              from '../../../util/enum/Enum';\nimport {ImageAnimations}   from './ImageAnimations';\nimport {Images}            from './Images';\nimport {GlobalThemeOption} from './GlobalThemeOption';\nimport {Sounds}            from './Sounds';\nimport {Texts}             from './Texts';\n\n/**\n * @todo Change to a different kind of option (that can work with the url directly)\n */\nexport abstract class GlobalAppOption<T extends PossibleAppOptionValue = PossibleAppOptionValue, >\n    extends AbstractAppOption<T, GlobalAppState, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGES =           new class GlobalAppOption_Images extends GlobalAppOption<Images> {}(Images.YES,);\n    public static readonly IMAGE_ANIMATIONS = new class GlobalAppOption_Images extends GlobalAppOption<ImageAnimations> {}(ImageAnimations.YES,);\n    public static readonly SOUNDS =           new class GlobalAppOption_Sounds extends GlobalAppOption<Sounds> {}(Sounds.YES,);\n    public static readonly TEXTS =           new class GlobalAppOption_Sounds extends GlobalAppOption<Texts> {}(Texts.YES,);\n\n    public static readonly SMM1 =             new class GlobalAppOption_SMM1 extends GlobalAppOption<boolean> {}(false,);\n    public static readonly SMM3DS =           new class GlobalAppOption_SMM3DS extends GlobalAppOption<boolean> {}(false,);\n    public static readonly SMM2 =             new class GlobalAppOption_SMM2 extends GlobalAppOption<boolean> {}(true,);\n\n    public static readonly SMB =              new class GlobalAppOption_SMB extends GlobalAppOption<boolean> {}(true,);\n    public static readonly SMB3 =             new class GlobalAppOption_SMB3 extends GlobalAppOption<boolean> {}(true,);\n    public static readonly SMW =              new class GlobalAppOption_SMW extends GlobalAppOption<boolean> {}(true,);\n    public static readonly NSMBU =            new class GlobalAppOption_NSMBU extends GlobalAppOption<boolean> {}(true,);\n    public static readonly SM3DW =            new class GlobalAppOption_SM3DW extends GlobalAppOption<boolean> {}(true,);\n\n    public static readonly GROUND =           new class GlobalAppOption_Ground extends GlobalAppOption<GlobalThemeOption> {}(GlobalThemeOption.ALL,);\n    public static readonly UNDERGROUND =      new class GlobalAppOption_Underground extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly UNDERWATER =       new class GlobalAppOption_Underwater extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly DESERT =           new class GlobalAppOption_Desert extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly SNOW =             new class GlobalAppOption_Snow extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly SKY =              new class GlobalAppOption_Sky extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly FOREST =           new class GlobalAppOption_Forest extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly GHOST_HOUSE =      new class GlobalAppOption_GhostHouse extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly AIRSHIP =          new class GlobalAppOption_Airship extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n    public static readonly CASTLE =           new class GlobalAppOption_Castle extends GlobalAppOption<GlobalThemeOption>{}(GlobalThemeOption.ALL,);\n\n    public static readonly DAY =              new class GlobalAppOption_Day extends GlobalAppOption<boolean> {}(true,);\n    public static readonly NIGHT =            new class GlobalAppOption_Night extends GlobalAppOption<boolean> {}(true,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GlobalAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(defaultValue: T,) {\n        super(defaultValue,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get createDefaultState(): GlobalAppState {\n        return {\n        };\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<GlobalAppOption> {\n        return GlobalAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends GlobalAppOption = GlobalAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): GlobalAppOption\n    public static getValue(value: PossibleValue,): | GlobalAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}\n","import AbstractGroup from './AbstractGroup';\nimport {Times}       from '../../../../core/time/Times';\n\nimport type {GlobalThemeOption} from '../GlobalThemeOption';\nimport type {GlobalAppOption}   from '../GlobalAppOption';\nimport type {OnClickCallback}   from './Group.types';\nimport type {ReactElement}      from '../../../../util/react/ReactProperty';\nimport type {Themes}            from '../../../../core/theme/Themes';\n\n/**\n * @reactComponent\n */\nexport default class ThemeGroup\n    extends AbstractGroup<Themes, GlobalThemeOption> {\n\n    protected override _renderElement(element: Themes, option: GlobalAppOption<GlobalThemeOption>, [hasSMM2Selected, isDisabledNight,]: readonly [boolean, boolean,], onClickCallback: | OnClickCallback | null,): ReactElement {\n        return <div key={`option container (${element.englishName})`} id={`${element.englishNameInHtml}-option-container`} className=\"btn-group-vertical\" role=\"group\">{\n            hasSMM2Selected\n                ? ThemeGroup.#renderElementWithDayAndNight(element, option, isDisabledNight,)\n                : ThemeGroup.#renderElementWithOnlyDay(element, option,)\n        }</div>;\n    }\n\n\n    static #renderThemeImage(element: Themes, value: boolean, isDisabled: boolean, onClickCallback: () => void,): ReactElement {\n        return <img key={`option image (${element.englishName})`} id={`${element.englishNameInHtml}-option-image`}\n                    className={`btn btn${value ? '' : '-outline'}-secondary ${isDisabled ? 'disabled' : ''}`}\n                    src={element.smallImagePath} alt={`option - ${element.englishName}`}\n                    onClick={onClickCallback}/>;\n    }\n\n    static #renderElementWithOnlyDay(element: Themes, option: GlobalAppOption<GlobalThemeOption>,): ReactElement {\n        const optionValue = option.get;\n        const value = optionValue.dayValue;\n\n        return this.#renderThemeImage(element, value, false, () => option.set(optionValue.reverseDayValue),);\n    }\n\n    static #renderElementWithDayAndNight(element: Themes, option: GlobalAppOption<GlobalThemeOption>, isDisabledNight: boolean,): ReactElement {\n        const optionValue = option.get;\n        const [value, timeValues,] = [optionValue.dayValue || optionValue.nightValue,\n            [\n                [Times.DAY, optionValue.dayValue, false, () => option.set(optionValue.reverseDayValue),],\n                [Times.NIGHT, optionValue.nightValue, isDisabledNight, () => option.set(optionValue.reverseNightValue),],\n            ],\n        ] as const;\n\n        return <>\n            {this.#renderThemeImage(element, value, isDisabledNight, () => option.set(optionValue.set(value)),)}\n            <div key={`option time image (${element.englishName})`} id={`${element.englishNameInHtml}-option-time-image`} className=\"btn-group btn-group-sm\">{\n                timeValues.map(([time, value, isDisabled, callback,]) =>\n                    <img key={`option image (${element.englishName} - ${time.englishName})`} id={`${element.englishNameInHtml}-${time.englishNameInHtml}-option-image`}\n                         className={`btn btn${value ? '' : '-outline'}-secondary ${isDisabled ? 'disabled' : ''}`}\n                         src={time.imagePath} alt={`option - ${element.englishName} (${time.englishName})`}\n                         onClick={callback}/>)\n            }</div>\n        </>;\n    }\n\n}\n","import {AbstractGroupWithSingleImage} from './AbstractGroupWithSingleImage';\n\nimport type {Times} from '../../../../core/time/Times';\n\n/**\n * @reactComponent\n */\nexport default class TimeGroup\n    extends AbstractGroupWithSingleImage<Times, boolean> {\n\n}\n","import './GlobalOption.scss';\n\nimport {Component} from 'react';\n\nimport type {GlobalAppState}              from '../../AppStates.types';\nimport type {GlobalThemeOption}           from './GlobalThemeOption';\nimport type {ReactElement, ReactProperty} from '../../../util/react/ReactProperty';\n\nimport GameGroup         from './group/GameGroup';\nimport {Games}           from '../../../core/game/Games';\nimport GameStyleGroup    from './group/GameStyleGroup';\nimport {GameStyles}      from '../../../core/gameStyle/GameStyles';\nimport {GlobalAppOption} from './GlobalAppOption';\nimport {ImageAnimations} from './ImageAnimations';\nimport {Images}          from './Images';\nimport {Sounds}          from './Sounds';\nimport {Texts}           from './Texts';\nimport ThemeGroup        from './group/ThemeGroup';\nimport {Themes}          from '../../../core/theme/Themes';\nimport TimeGroup         from './group/TimeGroup';\nimport {Times}           from '../../../core/time/Times';\n\nexport interface GlobalOptionProperties\n    extends ReactProperty {\n\n    id: string;\n\n}\n\nexport default class GlobalOptionComponent\n    extends Component<GlobalOptionProperties, GlobalAppState> {\n\n    public constructor(props: GlobalOptionProperties,) {\n        super(props);\n        this.state = GlobalAppOption.createDefaultState;\n    }\n\n    public override render(): ReactElement {\n        //TODO move the groups into multiple different sub components.\n        const imageAnimations = GlobalAppOption.IMAGE_ANIMATIONS, imageAnimationsValue = imageAnimations.get.value;\n        const texts = GlobalAppOption.TEXTS, textsValue = texts.get.value;\n        const images = GlobalAppOption.IMAGES, imagesValue = images.get.value;\n        const sounds = GlobalAppOption.SOUNDS, soundsValue = sounds.get.value;\n        const smm1 = GlobalAppOption.SMM1, smm1Value = smm1.get;\n        const smm3ds = GlobalAppOption.SMM3DS, smm3dsValue = smm3ds.get;\n        const smm2 = GlobalAppOption.SMM2, smm2Value = smm2.get;\n        const isNoGame = !smm1Value && !smm3dsValue && !smm2Value;\n        const isSmm1Or3DSExclusive = (smm1Value || smm3dsValue) && !smm2Value;\n\n        const everyThemeOptions = Themes.values.map(({name,}) => GlobalAppOption.getValue(name)) as GlobalAppOption<GlobalThemeOption>[];\n\n        return <div id={this.props.id} className=\"container-fluid\">\n            <div key=\"option container (texts, images & sounds)\" id=\"textsAndImagesAndSounds-option-container\" className=\"container-fluid\">\n                <button key=\"option container (texts)\" id=\"texts-option-container\" className={`btn btn${!textsValue ? '-outline' : ''}-secondary col-3 bi-type`}\n                        type=\"button\" onClick={() => texts.set(Texts.getValue(!textsValue))}/>\n                <div key=\"option container (image animations)\" id=\"imageAnimations-option-container\" className=\"btn-group col\" role=\"group\">\n                    <button key=\"option container (image animations - no)\" className={`btn btn${imageAnimationsValue !== false ? '-outline' : ''}-secondary`}\n                            type=\"button\" disabled={!imagesValue} onClick={() => imageAnimations.set(ImageAnimations.NO)}>\n                        {/*TODO no mario image*/}\n                    </button>\n                    <button key=\"option container (image animations - yes)\" className={`btn btn${imageAnimationsValue !== true ? '-outline' : ''}-secondary bi-image`}\n                            type=\"button\" disabled={!imagesValue} onClick={() => imageAnimations.set(ImageAnimations.YES)}>\n                        {/*TODO mario moving image*/}\n                    </button>\n                    <button key=\"option container (image animations - separated)\" className={`btn btn${imageAnimationsValue !== 'separated' ? '-outline' : ''}-secondary`}\n                            type=\"button\" disabled={!imagesValue} onClick={() => imageAnimations.set(ImageAnimations.SEPARATED)}>\n                        {/*TODO multiple mario image*/}\n                    </button>\n                </div>\n                <button key=\"option container (images)\" id=\"images-option-container\" className={`btn btn${!imagesValue ? '-outline' : ''}-secondary col-2 bi-image-fill`}\n                        type=\"button\" onClick={() => images.set(Images.getValue(!imagesValue))}/>\n                <button key=\"option container (sounds)\" id=\"sounds-option-container\" className={`btn btn${!soundsValue ? '-outline' : ''}-secondary col-2 bi-music-note-beamed`}\n                        type=\"button\" onClick={() => sounds.set(Sounds.getValue(!soundsValue))}/>\n            </div>\n            <div className=\"option-separator\"/>\n            <GameGroup id=\"games\" elements={[\n                [Games.SUPER_MARIO_MAKER_1, smm1,],\n                [Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS, smm3ds,],\n                [Games.SUPER_MARIO_MAKER_2, smm2,],\n            ]}/>\n            <GameStyleGroup id=\"gameStyles\" isHidden={isNoGame} elements={[\n                [GameStyles.SUPER_MARIO_BROS, GlobalAppOption.SMB,],\n                [GameStyles.SUPER_MARIO_BROS_3, GlobalAppOption.SMB3,],\n                [GameStyles.SUPER_MARIO_WORLD, GlobalAppOption.SMW,],\n                [GameStyles.NEW_SUPER_MARIO_BROS_U, GlobalAppOption.NSMBU,],\n                [GameStyles.SUPER_MARIO_3D_WORLD, GlobalAppOption.SM3DW, null, isSmm1Or3DSExclusive,],\n            ]}/>\n            <ThemeGroup id=\"themes\" isHidden={isNoGame} elements={[\n                [Themes.GROUND, GlobalAppOption.GROUND, smm2Value,],\n                [Themes.UNDERGROUND, GlobalAppOption.UNDERGROUND, smm2Value,],\n                [Themes.UNDERWATER, GlobalAppOption.UNDERWATER, smm2Value,],\n                [Themes.DESERT, GlobalAppOption.DESERT, [smm2Value, isSmm1Or3DSExclusive,], isSmm1Or3DSExclusive,],\n                [Themes.SNOW, GlobalAppOption.SNOW, [smm2Value, isSmm1Or3DSExclusive,], isSmm1Or3DSExclusive,],\n                [Themes.SKY, GlobalAppOption.SKY, [smm2Value, isSmm1Or3DSExclusive,], isSmm1Or3DSExclusive,],\n                [Themes.FOREST, GlobalAppOption.FOREST, [smm2Value, isSmm1Or3DSExclusive,], isSmm1Or3DSExclusive,],\n                [Themes.GHOST_HOUSE, GlobalAppOption.GHOST_HOUSE, smm2Value,],\n                [Themes.AIRSHIP, GlobalAppOption.AIRSHIP, smm2Value,],\n                [Themes.CASTLE, GlobalAppOption.CASTLE, smm2Value,],\n            ]}/>\n            <TimeGroup id=\"times\" isHidden={isNoGame} elements={[\n                [Times.DAY, GlobalAppOption.DAY, null, null, () => everyThemeOptions.forEach(option => option.set(option.get.onDay(GlobalAppOption.DAY.get))),],\n                [Times.NIGHT, GlobalAppOption.NIGHT, isSmm1Or3DSExclusive, null, () => everyThemeOptions.forEach(option => option.set(option.get.onNight(GlobalAppOption.NIGHT.get))),],\n            ]}/>\n        </div>;\n    }\n\n}\n","import {Link, useLocation} from 'react-router-dom';\n\nimport type {EveryPossibleRouteNames}     from '../routes/everyRoutes.types';\nimport type {ModalPropertiesWithDiv}      from './ModalContainers.types';\nimport type {ReactElement, ReactProperty} from '../util/react/ReactProperty';\n\nimport {ModalInstance}   from '../bootstrap/modal/ModalInstance';\nimport {route}           from '../routes/route';\nimport Tooltip           from '../bootstrap/tooltip/Tooltip';\nimport {TooltipInstance} from '../bootstrap/tooltip/TooltipInstance';\n\ninterface DisplayViewRouteButtonProperty\n    extends ReactProperty, ModalPropertiesWithDiv {\n\n    elementId: string\n\n    routeName: EveryPossibleRouteNames\n\n    value: | string | ReactElement\n\n    tooltipValue: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function DisplayViewRouteButton({routeName, value, tooltipValue, elementId, id, divId,}: DisplayViewRouteButtonProperty,) {\n    const {pathname: pathName,} = useLocation();\n\n    const key = `route button (${routeName})`;\n    const routeValue = route(routeName);\n    const isRouteSameFromPathName = routeValue === pathName;\n\n    return isRouteSameFromPathName\n        ? <button key={key} id={elementId} className=\"btn btn-primary\" disabled>{value}</button>\n        : <Tooltip option={{placement: 'top', title: tooltipValue,}} elementId={elementId}>\n            <Link key={key} id={elementId} to={routeValue} className=\"btn btn-outline-primary\"\n                  onClick={() => {\n                      ModalInstance.getInstance(id).instance.hide();\n                      TooltipInstance.getInstance(divId).instance.hide();//FIXME, this throws an assertion error once the link is clicked.\n                  }}>{value}</Link>\n        </Tooltip>;\n}\n","import './DisplayView.scss';\n\nimport type {ModalPropertiesWithDiv} from './ModalContainers.types';\nimport type {ReactProperty}          from '../util/react/ReactProperty';\n\nimport DisplayViewRouteButton          from './DisplayView.routeButton';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {GlobalAppOption}               from '../app/options/global/GlobalAppOption';\n\ninterface DisplayViewBodyProperties\n    extends ReactProperty, ModalPropertiesWithDiv {\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function DisplayViewBody({id, divId,}: DisplayViewBodyProperties,) {\n    // const isSMM1Selected = GlobalAppOption.SMM1.get;\n    // const isSMM3DSSelected = GlobalAppOption.SMM3DS.get;\n    const isSMM2Selected = GlobalAppOption.SMM2.get;\n\n    return <GameContentTranslationComponent>{translation =>\n        <div id=\"display-modal-body-container\" className=\"container\">\n            <div id=\"display-entity-container\" className=\"container\">\n                <h3 className=\"text-center text-decoration-underline pb-2\">{/*{translation('Entity')}*/}--Entity--</h3>\n                <div className=\"btn-group col-12\">\n                    <DisplayViewRouteButton routeName=\"everyEntities\" value={'--Entity--'}//TODO add entity translation\n                                            tooltipValue={translation('Display every entities')}\n                                            elementId=\"displayView-entity-button\" id={id} divId={divId}/>\n                    {/*TODO add other predefined group of entities*/}\n                </div>\n                <div className=\"btn-group col-6\">\n                    <DisplayViewRouteButton routeName=\"everyCategories\" value={translation('Category')}\n                                            tooltipValue={translation('Display every entity categories')}\n                                            elementId=\"displayView-entityCategory-button\" id={id} divId={divId}/>\n                </div>\n                <div className=\"btn-group col-6\">\n                    <DisplayViewRouteButton routeName=\"everyGroups\" value={'--Group--'}//TODO add group translation\n                                            tooltipValue={translation('Display every entity groups')}\n                                            elementId=\"displayView-entityGroup-button\" id={id} divId={divId}/>\n                </div>\n                <div className=\"btn-group col-6\">\n                    <DisplayViewRouteButton routeName=\"everyLimits\" value={translation('Limit')}\n                                            tooltipValue={translation('Display every limits')}\n                                            elementId=\"displayView-entityLimit-button\" id={id} divId={divId}/>\n                </div>\n                <div className=\"btn-group col-6\">\n                    <DisplayViewRouteButton routeName=\"everyThemes\" value={'--Course & world theme--'}//TODO add course & world theme translation\n                                            tooltipValue={translation('Display every themes')}\n                                            elementId=\"displayView-theme-button\" id={id} divId={divId}/>\n                </div>\n            </div>\n            <div id=\"display-game-container\" className=\"container\">\n                <h3 className=\"text-center text-decoration-underline pb-2\">{translation('Game')}</h3>\n                <div key=\"button group container (game)\" id=\"game-buttonGroup-container\" className=\"btn-group col-12\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyGameReferences\" value={translation('Game reference')}\n                                            tooltipValue={translation('Display every game references')}\n                                            elementId=\"displayView-gameReference-button\" id={id} divId={divId}/>\n                    <DisplayViewRouteButton routeName=\"everyGameStyles\" value={translation('Game style')}\n                                            tooltipValue={translation('Display every game styles')}\n                                            elementId=\"displayView-gameStyle-button\" id={id} divId={divId}/>\n                </div>\n            </div>\n            <div id=\"display-sound-container\" className=\"container\">\n                <h3 className=\"text-center text-decoration-underline pb-2\">--Sound--</h3>\n                <div key=\"button group container (sound effect)\" id=\"soundEffect-buttonGroup-container\" className=\"btn-group col-12\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everySoundEffects\" value={translation('Sound effect')}\n                                            tooltipValue={translation('Display every sound effects')}\n                                            elementId=\"displayView-soundEffect-button\" id={id} divId={divId}/>\n                    {isSMM2Selected ? <DisplayViewRouteButton routeName=\"everySoundEffectCategories\" value={translation('Category')}\n                                                              tooltipValue={translation('Display every sound effect categories')}\n                                                              elementId=\"displayView-soundEffectCategory-button\" id={id} divId={divId}/> : EMPTY_REACT_ELEMENT}\n                </div>\n                <div className=\"btn-group col-12\">\n                    <DisplayViewRouteButton routeName=\"everyInstruments\" value={'--Instrument--'}\n                                            tooltipValue={translation('Display every instruments')}\n                                            elementId=\"displayView-instrument-button\" id={id} divId={divId}/>\n                </div>\n            </div>\n            <div id=\"display-other-container\" className=\"container\">\n                <h3 className=\"text-center text-decoration-underline pb-2\">--Other--</h3>\n                {isSMM2Selected ? <div key=\"button group container (mii costume)\" id=\"miiCostume-buttonGroup-container\" className=\"btn-group col-12\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyMiiCostumes\" value=\"--Mii costume--\"//TODO add Mii costume reference\n                                            tooltipValue={translation('Display every Mii costumes', {pluralName: '--Mii costumes--',},)}//TODO add Mii costume reference\n                                            elementId=\"displayView-miiCostume-button\" id={id} divId={divId}/>\n                    <DisplayViewRouteButton routeName=\"everyMiiCostumeCategories\" value={translation('Category')}\n                                            tooltipValue={translation('Display every Mii costume categories',{MiiCostume: '--Mii costume--',},)}//TODO add Mii costume reference\n                                            elementId=\"displayView-miiCostumeCategory-button\" id={id} divId={divId}/>\n                </div> : EMPTY_REACT_ELEMENT}\n                <div key=\"button group container (power-up + mountable priority)\" id=\"powerUpAndMountable-buttonGroup-container\" className=\"btn-group-vertical col-12\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyPowerUp&RidePriority\" value={<>----Power-up-- & --ride----</>}\n                                            tooltipValue={translation('Display every power-ups & rides priority', {powerUps: '--power-ups--', rides:'--rides--',},)}//TODO add Power-ups & rides reference\n                                            elementId=\"displayView-powerUpAndMountable-button\" id={id} divId={divId}/>\n                    <div key=\"button group container (power-up + mountable priority separately)\" id=\"powerUpAndMountableSeparately-buttonGroup-container\" className=\"btn-group\" role=\"group\">\n                        <DisplayViewRouteButton routeName=\"everyPowerUpPriority\" value={<>--Power-up--</>}\n                                                tooltipValue={translation('Display every power-ups priority', {powerUps: '--power-ups--',},)}//TODO add Power-up reference\n                                                elementId=\"displayView-powerUp-button\" id={id} divId={divId}/>\n                        <DisplayViewRouteButton routeName=\"everyRidePriority\" value={<>--Ride--</>}\n                                                tooltipValue={translation('Display every rides priority', {rides:'--rides--'},)}//TODO add Rides reference\n                                                elementId=\"displayView-ride-button\" id={id} divId={divId}/>\n                    </div>\n                </div>\n                {/*isSMM1Selected ? */<div key=\"button group container (mystery mushroom)\" id=\"mysteryMushroom-buttonGroup-container\" className=\"btn-group col-12\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyMysteryMushrooms\" value={<span className=\"mystery-mushroom-image\">--Mystery Mushroom--</span>}//TODO add Mystery Mushroom reference\n                                            tooltipValue={translation('Display every Mystery Mushrooms', {pluralName: '--Mystery Mushrooms--',},)}//TODO add Mystery Mushroom reference\n                                            elementId=\"displayView-mysteryMushroom-button\" id={id} divId={divId}/>\n                    {/*TODO add other options for the Mystery Mushroom*/}\n                </div>/* : EMPTY_REACT_ELEMENT*/}\n                {isSMM2Selected ? <div key=\"button group container (course tag (SMM2))\" id=\"courseTag-buttonGroup-container\" className=\"btn-group col-6\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyCourseTags\" value={translation('Course tag', {\n                        Course: '--Course--',//TODO add course reference\n                        course: '--course--',//TODO add course reference\n                        Tag: '--tag--',//TODO add tag reference\n                        tag: '--tag--',//TODO add tag reference\n                    },)}\n                                            tooltipValue={translation('Display every course tags', {\n                                                course: '--course--',//TODO add course reference\n                                                tags: '--tags--',//TODO add tag reference\n                                            })}\n                                            elementId=\"displayView-courseTag-button\" id={id} divId={divId}/>\n                </div> : EMPTY_REACT_ELEMENT}\n                {isSMM2Selected ? <div key=\"button group container (predefined message (SMM2))\" id=\"predefinedMessage-buttonGroup-container\" className=\"btn-group col-6\" role=\"group\">\n                    <DisplayViewRouteButton routeName=\"everyPredefinedMessages\" value={'--predefined message--'}//TODO add predefined message reference\n                                            tooltipValue={translation('Display every predefined messages', {predefinedMessages: '--predefined messages--',},)}//TODO add predefined message reference\n                                            elementId=\"displayView-predefinedMessage-button\" id={id} divId={divId}/>\n                </div> : EMPTY_REACT_ELEMENT}\n            </div>\n        </div>\n    }</GameContentTranslationComponent>;\n}\n","import {Link, useLocation} from 'react-router-dom';\n\nimport type {LanguageChangerLinkProperties} from './LanguageChanger.link';\nimport type {ReactElement, ReactProperty}   from '../util/react/ReactProperty';\n\nimport LanguageTranslationComponent from '../lang/components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../lang/ProjectLanguages';\nimport {route}                      from '../routes/route';\nimport {StringContainer}            from '../util/StringContainer';\nimport Tooltip                      from '../bootstrap/tooltip/Tooltip';\n\nexport interface SingleLanguageChangerLinkProperties\n    extends ReactProperty, LanguageChangerLinkProperties {\n\n    type: | 'button' | 'label'\n\n}\n\n/**\n * @reactComponent\n */\nexport function LanguageChangerSingleLink({language, callbackToSetLanguage, type,}: SingleLanguageChangerLinkProperties,) {\n    const location = useLocation();\n\n    const key = `single language changer link (${language.englishName})`;\n    const englishNameAsId = StringContainer.getInHtml(language.englishName);\n    const _callbackToSetLanguage = () => callbackToSetLanguage(language);\n\n    switch (type) {\n        case 'button':\n            const buttonId = `single-languageChanger-${englishNameAsId}`;\n            if (language.isCurrentLanguage)\n                return createTooltip(language, buttonId,\n                    <button key={key} id={buttonId} className=\"btn btn-lg btn-outline-primary active\">{\n                        language.originalName\n                    }</button>,);\n            return createTooltip(language, buttonId,\n                <Link key={key} id={buttonId} to={route(location, language,)} className=\"btn btn-lg btn-outline-primary\" onClick={_callbackToSetLanguage}>{\n                    language.originalName\n                }</Link>,);\n        case 'label':\n            const labelId = `label-${englishNameAsId}`;\n            const labelKey = `${language.englishName} (label)`;\n            if (language.isCurrentLanguage)\n                return createTooltip(language, labelId,\n                    <label key={labelKey} id={labelId} className=\"btn btn-outline-primary\" htmlFor={`input-${englishNameAsId}`}>{\n                        language.originalName\n                    }</label>,);\n\n            const linkId = `link-${englishNameAsId}`;\n            return createTooltip(language, linkId,\n                <Link key={key} id={linkId} to={route(location, language,)} className=\"btn btn-outline-primary\" onClick={_callbackToSetLanguage}>\n                    <label key={labelKey} id={labelId} htmlFor={`input-${englishNameAsId}`} hidden/>\n                    {language.originalName}\n                </Link>,);\n    }\n}\n\nfunction createTooltip(language: ProjectLanguages, id: string, element: ReactElement,) {\n    return <LanguageTranslationComponent>{translation =>\n        <Tooltip key={`single language changer link (tooltip - ${language.englishName})`}\n                 elementId={id} option={({title: translation(language.englishName), placement: 'top',})}>{\n            element\n        }</Tooltip>\n    }</LanguageTranslationComponent>;\n}\n","import './LanguageChanger.link.scss'\n\nimport {Fragment} from 'react';\n\nimport type {ReactProperty} from '../util/react/ReactProperty';\n\nimport {LanguageChangerSingleLink} from './LanguageChanger.single.link';\nimport {ProjectLanguages}          from '../lang/ProjectLanguages';\nimport {StringContainer}           from '../util/StringContainer';\n\nexport interface LanguageChangerLinkProperties\n    extends ReactProperty {\n\n    language: ProjectLanguages\n\n    callbackToSetLanguage: (language: ProjectLanguages,) => void\n\n}\n\n/**\n * @reactComponent\n */\nexport default function LanguageChangerLink({language, callbackToSetLanguage,}: LanguageChangerLinkProperties,) {\n    const childrenLanguages = (language.language.parent ?? language.language).children;\n    const englishNameAsId = StringContainer.getInHtml(language.englishName);\n\n    if (childrenLanguages.length === 0)\n        return <div key={`language changer (single - ${language.englishName})`} id={`single-language-changer-${englishNameAsId}`}\n                    className=\"languageChanger-link-container  col-12 col-xl-5\">\n            <LanguageChangerSingleLink language={language} callbackToSetLanguage={callbackToSetLanguage} type=\"button\"/>\n        </div>;\n\n    return <div key={`language changer (double - ${language.language.parent!.englishName})`} id={`double-language-changer-${englishNameAsId}`}\n                className=\"languageChanger-link-container btn-group btn-group-lg col-12 col-xl-5\" role=\"group\">{childrenLanguages.map(language => {\n        const englishNameAsId = StringContainer.getInHtml(language.englishName);\n\n        return <Fragment key={`${language.englishName} (input & label)`}>\n            <input key={`${language.englishName} (input)`} id={`input-${englishNameAsId}`} className=\"btn-check\" autoComplete=\"off\" defaultChecked={language.isCurrentLanguage} type=\"radio\"/>\n            <LanguageChangerSingleLink language={ProjectLanguages.getValue(language)!} callbackToSetLanguage={callbackToSetLanguage} type=\"label\"/>\n        </Fragment>;\n    })}</div>;\n}\n","import './LanguageChanger.body.scss'\n\nimport {Fragment, useState} from 'react';\n\nimport type {ReactProperty} from '../util/react/ReactProperty';\n\nimport {EveryLanguages}    from '../lang/EveryLanguages';\nimport LanguageChangerLink from './LanguageChanger.link';\nimport {ProjectLanguages}  from '../lang/ProjectLanguages';\nimport {ModalInstance}     from '../bootstrap/modal/ModalInstance';\nimport {TooltipInstance}   from '../bootstrap/tooltip/TooltipInstance';\nimport {StringContainer}   from '../util/StringContainer';\n\ninterface LanguageChangerBodyProperties\n    extends ReactProperty {\n\n    containerId: string\n\n    divContainerId: string\n\n}\n\n/**\n * @reactComponent\n */\nexport default function LanguageChangerBody({containerId, divContainerId,}: LanguageChangerBodyProperties,) {\n    const [, setCurrentLanguage,] = useState(ProjectLanguages.currentLanguage);\n\n    const everyLanguagesShown: EveryLanguages[] = [];\n\n    return <div key=\"language changer (body)\" id=\"languageChanger-body\" className=\"container\">{\n        ProjectLanguages.values\n            .map(language => {\n                    const key = `languageChanger-content-${StringContainer.getInHtml(language.englishName)}`;\n                    if (everyLanguagesShown.includes(language.language.parent!))\n                        return <Fragment key={key}/>;\n\n                    everyLanguagesShown.push(language.language.parent ?? language.language);\n                    return <LanguageChangerLink key={key} language={language} callbackToSetLanguage={language => {\n                        setCurrentLanguage(ProjectLanguages.currentLanguage = language);\n                        ModalInstance.getInstance(containerId).instance.hide();\n                        TooltipInstance.getInstance(divContainerId).instance.hide();\n                    }}/>;\n                }\n            )\n    }</div>;\n}\n","import type {ReactElement, ReactProperty, ReactPropertyWithChildren} from '../../../util/react/ReactProperty';\nimport type {HTMLDivProperties}                                      from '../../../util/react/html/HTMLDivProperties';\n\ninterface ModalBodyProperties\n    extends ReactProperty, HTMLDivProperties {\n\n}\n\nexport default function ModalBody({className, children, ...otherProperties}: ReactPropertyWithChildren<ModalBodyProperties, | ReactElement | readonly ReactElement[]>,) {\n    return <div {...otherProperties} className={`modal-body ${className ?? ''}`}>{children}</div>;\n}\n","import type {HTMLDivProperties}                                              from '../../../util/react/html/HTMLDivProperties';\nimport type {ReactElement, ReactProperty, ReactPropertyWithOptionalChildren} from '../../../util/react/ReactProperty';\nimport {EMPTY_OBJECT, EMPTY_STRING}                                          from '../../../util/emptyVariables';\n\nexport type PossibleModalSize = | 'sm' | 'md' | 'lg' | 'xl';\n\ninterface ModalContainerProperties\n    extends ReactProperty, Omit<HTMLDivProperties, 'key'> {\n\n    id: string\n\n    verticallyCentered?: boolean\n\n    modalSize?: PossibleModalSize\n\n    modalDialogProperties?: Omit<HTMLDivProperties, 'key'>\n\n    modalContentProperties?: HTMLDivProperties\n\n}\n\nconst DEFAULT_VERTICALLY_CENTERED = false;\nconst DEFAULT_SIZE: PossibleModalSize = 'md';\n\n/**\n *\n * @reactComponent\n * @param properties\n */\nexport default function ModalContainer({id, className=EMPTY_STRING, title, children, verticallyCentered = DEFAULT_VERTICALLY_CENTERED, modalSize = DEFAULT_SIZE,\n                                           modalDialogProperties: {className: modalDialogClassName = EMPTY_STRING, ...otherModalDialogProperties} = EMPTY_OBJECT,\n                                           modalContentProperties: {className: modalContentClassName = EMPTY_STRING, ...otherModalContentProperties} = EMPTY_OBJECT,\n                                           ...otherProperties}: ReactPropertyWithOptionalChildren<ModalContainerProperties, | ReactElement | readonly ReactElement[]>,) {\n    return <div  {...otherProperties} key={`${id} - modal`} className={`modal fade ${className}`} id={id}>\n        <div {...otherModalDialogProperties} key={`${id} - modal dialog`} className={`modal-dialog ${verticallyCentered ? 'modal-dialog-centered' : ''} ${modalSize !== DEFAULT_SIZE ? `modal-${modalSize}` : ''} ${modalDialogClassName}`}>\n            <div {...otherModalContentProperties} className={`modal-content ${modalContentClassName}`}>{children}</div>\n        </div>\n    </div>;\n}\n","import type {ReactNode} from 'react';\n\nimport type {ReactProperty}        from '../../../util/react/ReactProperty';\nimport type {HTMLButtonProperties} from '../../../util/react/html/HTMLButtonProperties';\nimport type {HTMLDivProperties}    from '../../../util/react/html/HTMLDivProperties';\n\nimport ContentTranslationComponent  from '../../../lang/components/ContentTranslationComponent';\nimport {EMPTY_OBJECT, EMPTY_STRING} from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}        from '../../../util/emptyReactVariables';\n\ninterface ModalFooterProperties\n    extends ReactProperty, HTMLDivProperties {\n\n    successButton?: ModalSuccessButtonProperties\n\n    cancelButton?: ModalCancelButtonProperties\n\n}\n\ninterface ModalSuccessButtonProperties\n    extends ReactProperty, Omit<HTMLButtonProperties, 'type'> {\n\n    children: ReactNode\n\n}\n\ninterface ModalCancelButtonProperties\n    extends ReactProperty, Omit<HTMLButtonProperties, 'type'> {\n\n}\n\n/**\n *\n * @reactComponent\n */\nexport default function ModalFooter({className = EMPTY_STRING, successButton: successButtonProperties, cancelButton: cancelButtonProperties, ...otherProperties}: ModalFooterProperties,) {\n    return <div {...otherProperties} className={`${className} modal-footer`}>\n        {createSuccessButton(successButtonProperties)}\n        {createCancelButton(cancelButtonProperties)}\n    </div>;\n}\n\nfunction createSuccessButton(properties?: ModalSuccessButtonProperties,) {\n    if (properties == null)\n        return EMPTY_REACT_ELEMENT;\n\n    const {children, className = EMPTY_STRING, ...otherProperties} = properties;\n    return <button {...otherProperties} type=\"button\" className={`btn btn-success ${className}`}>{children}</button>;\n}\n\nfunction createCancelButton(properties: ModalCancelButtonProperties = EMPTY_OBJECT,) {\n    const {children, className = EMPTY_STRING, ...otherProperties} = properties;\n\n    if (children != null)\n        return <button {...otherProperties} type=\"button\" className={`btn btn-danger ${className}`} data-bs-dismiss=\"modal\">{children}</button>;\n\n    return <ContentTranslationComponent>{translation =>\n        <button {...otherProperties} type=\"button\" className={`btn btn-danger ${className}`} data-bs-dismiss=\"modal\">{translation('Cancel')}</button>\n    }</ContentTranslationComponent>;\n}\n","import type {HTMLDivProperties}           from '../../../util/react/html/HTMLDivProperties';\nimport type {HTMLButtonProperties}        from '../../../util/react/html/HTMLButtonProperties';\nimport type {HTMLHeadingProperties}       from '../../../util/react/html/HTMLHeadingProperties';\nimport type {ReactElement, ReactProperty} from '../../../util/react/ReactProperty';\n\nimport {EMPTY_OBJECT, EMPTY_STRING} from '../../../util/emptyVariables';\n\ninterface ModalHeaderProperties\n    extends ReactProperty, HTMLDivProperties {\n\n    modalTitle: | string | ReactElement\n\n    titleProperties?: HTMLHeadingProperties\n\n    closeButtonProperties?: Omit<HTMLButtonProperties, | 'type' | 'data-bs-dismiss' | 'aria-label'>\n\n}\n\n/**\n *\n * @reactComponent\n * @param properties\n */\nexport default function ModalHeader({className = EMPTY_STRING, modalTitle,\n                                        titleProperties: {className: titleClassName = EMPTY_STRING, ...otherTitleProperties} = EMPTY_OBJECT,\n                                        closeButtonProperties: {className: closeButtonClassName = EMPTY_STRING, ...otherCloseButtonProperties} = EMPTY_OBJECT,\n                                        ...otherProperties}: ModalHeaderProperties,) {\n    return <div {...otherProperties} className={`modal-header ${className}`}>\n        <h4 {...otherTitleProperties} className={`modal-title w-100 text-center ${titleClassName}`}>{modalTitle}</h4>\n        <button {...otherCloseButtonProperties} type=\"button\" className={`btn-close ${closeButtonClassName ?? ''}`} data-bs-dismiss=\"modal\" aria-label=\"Close\"/>\n    </div>;\n}\n","import {ReactProperty}          from '../util/react/ReactProperty';\nimport {ModalPropertiesWithDiv} from './ModalContainers.types';\n\ninterface SearchBodyProperties\n    extends ReactProperty, ModalPropertiesWithDiv {\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function SearchBody({id, divId,}: SearchBodyProperties,) {\n    return <></>;\n}\n","import {useEffect} from 'react';\n\nimport type {ModalPropertiesWithContent, ModalPropertiesWithDiv} from './ModalContainers.types';\nimport type {ReactProperty}                                      from '../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../lang/components/ContentTranslationComponent';\nimport DisplayViewBody             from './DisplayView.body';\nimport LanguageChangerBody         from './LanguageChanger.body';\nimport ModalBody                   from '../bootstrap/modal/element/ModalBody';\nimport ModalContainer              from '../bootstrap/modal/element/ModalContainer';\nimport ModalFooter                 from '../bootstrap/modal/element/ModalFooter';\nimport ModalHeader                 from '../bootstrap/modal/element/ModalHeader';\nimport {ModalInstance}             from '../bootstrap/modal/ModalInstance';\nimport SearchBody                  from './Search.body';\n\ninterface ModalContainersProperties\n    extends ReactProperty {\n\n    languageChanger: ModalPropertiesWithDiv;\n\n    parameter: ModalPropertiesWithContent;\n\n    displayView: ModalPropertiesWithDiv;\n\n    search: ModalPropertiesWithDiv;\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function ModalContainers({\n                                            languageChanger: {id: languageId, divId: languageDivId,},\n                                            parameter: {id: parameterId, content: parameterContent,},\n                                            displayView: {id: displayViewId, divId: displayViewDivId,},\n                                            search: {id: searchId, divId: searchDivId,},\n                                        }: ModalContainersProperties,) {\n    useEffect(() => {\n        new ModalInstance(languageId,);\n        new ModalInstance(parameterId,);\n        new ModalInstance(displayViewId,);\n        new ModalInstance(searchId,);\n    });\n\n    return <aside key=\"modal container\" id=\"modal-container\">\n        <ContentTranslationComponent>{translation =>\n            <>\n                <ModalContainer key=\"modal - language changer (container)\" id={languageId} verticallyCentered={true} modalSize=\"xl\">\n                    <ModalHeader key=\"modal - language changer (header)\" modalTitle={translation('Change the language')}/>\n                    <ModalBody key=\"modal - language changer (body)\">\n                        <LanguageChangerBody containerId={languageId} divContainerId={languageDivId}/>\n                    </ModalBody>\n                    <ModalFooter key=\"modal - language changer (footer)\"/>\n                </ModalContainer>\n\n                <ModalContainer key=\"modal - parameter (container)\" id={parameterId} verticallyCentered modalSize=\"xl\">\n                    <ModalHeader key=\"modal - parameter (header)\" modalTitle={translation('Options')}/>\n                    <ModalBody key=\"modal - parameter (body)\">{parameterContent}</ModalBody>\n                    <ModalFooter key=\"modal - parameter (footer)\" successButton={({children: translation('Confirm'),})}/>\n                </ModalContainer>\n\n                <ModalContainer key=\"modal - display view (container)\" id={displayViewId} verticallyCentered modalSize=\"lg\">\n                    <ModalHeader key=\"modal - display view (header)\" modalTitle={`${translation('Display')}…`}/>\n                    <ModalBody key=\"modal - display view (body)\">\n                        <DisplayViewBody id={displayViewId} divId={displayViewDivId}/>\n                    </ModalBody>\n                    <ModalFooter key=\"modal - display view (footer)\"/>\n                </ModalContainer>\n\n                <ModalContainer key=\"modal - search (container)\" id={searchId} verticallyCentered modalSize=\"lg\">\n                    <ModalHeader key=\"modal - search (header)\" modalTitle={`${translation('Search')}…`}/>\n                    <ModalBody key=\"modal - search (body)\">\n                        <SearchBody id={searchId} divId={searchDivId}/>\n                    </ModalBody>\n                    <ModalFooter key=\"modal - search (footer)\" successButton={({children: translation('Search')})}/>\n                </ModalContainer>\n\n            </>\n        }</ContentTranslationComponent>\n    </aside>;\n}\n","import type {PossibleContent, PossibleTooltipPlacement} from './AbstractNavigationButton.types';\nimport type {TranslationMethod}                         from '../../lang/components/TranslationProperty';\n\nimport {AbstractNavigationButton} from './AbstractNavigationButton';\n\n/**\n * @reactComponent\n */\nexport default class DisplayViewButton\n    extends AbstractNavigationButton {\n\n    static readonly #ID = 'displayView-button';\n\n    protected override get _isTopButton() {\n        return true;\n    }\n\n    protected override get _id() {\n        return DisplayViewButton.#ID;\n    }\n\n    protected override get _tooltipPlacement(): PossibleTooltipPlacement {\n        return 'bottom';\n    }\n\n    protected override _getContent(translation: TranslationMethod<'content'>,): PossibleContent {\n        return `${translation('Display')}…`;\n    }\n\n}\n","import {Link} from 'react-router-dom';\n\nimport ContentTranslationComponent from '../../lang/components/ContentTranslationComponent';\nimport {route}                     from '../../routes/route';\nimport Tooltip                     from '../../bootstrap/tooltip/Tooltip';\nimport {TooltipInstance}           from '../../bootstrap/tooltip/TooltipInstance';\n\n\nconst HOME_ID = 'home-link';\n\n/**\n * @reactComponent\n */\nexport default function HomeButton() {\n    return <ContentTranslationComponent>{translation =>\n        <Tooltip option={({title: translation('Home'), placement: 'left',})} elementId={HOME_ID}>\n            <Link key=\"navigation button\" id={HOME_ID} className=\"btn btn-lg bi-house\" to={route('home')}\n                  onClick={() => TooltipInstance.getInstance(HOME_ID).instance.hide()}/>\n        </Tooltip>\n    }</ContentTranslationComponent>;\n}\n","import type {PossibleContent, PossibleTooltipPlacement} from './AbstractNavigationButton.types';\nimport type {TranslationMethod}                         from '../../lang/components/TranslationProperty';\n\nimport {AbstractNavigationButton} from './AbstractNavigationButton';\n\n/**\n * @reactComponent\n */\nexport default class ParameterButton\n    extends AbstractNavigationButton {\n\n    static readonly #ID = 'parameter-button';\n\n    protected override get _isTopButton() {\n        return true;\n    }\n\n    protected override get _id() {\n        return ParameterButton.#ID;\n    }\n\n    protected override get _tooltipPlacement(): PossibleTooltipPlacement {\n        return 'left';\n    }\n\n    protected override get _addedClass() {\n        return 'bi-gear-fill';\n    }\n\n    protected override _getContent(translation: TranslationMethod<'content'>,): PossibleContent {\n        return [translation('Options'), 'lg',];\n    }\n\n}\n","import type {PossibleContent, PossibleTooltipPlacement} from './AbstractNavigationButton.types';\nimport type {TranslationMethod}                         from '../../lang/components/TranslationProperty';\n\nimport {AbstractNavigationButton} from './AbstractNavigationButton';\n\n/**\n * @reactComponent\n */\nexport default class SearchButton\n    extends AbstractNavigationButton {\n\n    static readonly #ID = 'search-button';\n\n    protected override get _isTopButton() {\n        return true;\n    }\n\n    protected override get _id() {\n        return SearchButton.#ID;\n    }\n\n    protected override get _tooltipPlacement(): PossibleTooltipPlacement {\n        return 'bottom';\n    }\n\n    protected override get _addedClass() {\n        return 'bi-search';\n    }\n\n    protected override _getContent(translation: TranslationMethod<'content'>,): PossibleContent {\n        return [`${translation('Search')}…`, 'md',];\n    }\n\n}\n","import './Navigation.scss';\n\nimport type {ReactProperty}                           from '../util/react/ReactProperty';\nimport type {ModalProperties, ModalPropertiesWithDiv} from './ModalContainers.types';\n\nimport DisplayViewButton from './button/DisplayView.button';\nimport HomeButton        from './button/Home.button';\nimport ParameterButton   from './button/Parameter.button';\nimport SearchButton      from './button/Search.button';\n\nexport interface NavigationProperties\n    extends ReactProperty {\n\n    parameter: ModalProperties\n\n    displayView: ModalPropertiesWithDiv\n\n    search: ModalProperties\n\n}\n\n\n/**\n * @reactComponent\n */\nexport default function Navigation({parameter, displayView, search,}: NavigationProperties,) {\n    return <nav id=\"navigation-container\" className=\"container-fluid bg-light bg-gradient\">\n        <div id=\"navigation-sub-container\" className=\"position-relative\">\n            <HomeButton/>\n            <DisplayViewButton {...displayView}/>\n            <SearchButton {...search}/>\n            <ParameterButton {...parameter}/>\n        </div>\n    </nav>;\n}\n","import './AbstractApp.scss';\n\nimport {Component} from 'react';\n\nimport type {AppStates}                                          from './AppStates.types';\nimport type {ModalPropertiesWithContent, ModalPropertiesWithDiv} from '../navigation/ModalContainers.types';\nimport type {ReactComponent}                                     from '../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../util/react/ReactProperty';\n\nimport Footer                from '../navigation/Footer';\nimport GlobalOptionComponent from './options/global/GlobalOption.component';\nimport ModalContainers       from '../navigation/ModalContainers';\nimport Navigation            from '../navigation/Navigation';\n\n/**\n * @reactComponent\n */\nexport default abstract class AbstractApp<T = {}, S extends AppStates = AppStates, >\n    extends Component<T, S>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #LANGUAGE_CHANGER_ELEMENT_ID = 'languageChanger-modal-container';\n    static readonly #LANGUAGE_CHANGER_DIV_ELEMENT_ID = 'languageChanger-container';\n\n    static readonly #PARAMETER_ELEMENT_ID = 'parameter-modal-container';\n    static readonly #PARAMETER_DIV_ELEMENT_ID = 'parameter-container';\n\n    static readonly #DISPLAY_VIEW_ELEMENT_ID = 'displayView-modal-container';\n    static readonly #DISPLAY_VIEW_DIV_ELEMENT_ID = 'displayView-container';\n\n    static readonly #SEARCH_ELEMENT_ID = 'search-modal-container';\n    static readonly #SEARCH_DIV_ELEMENT_ID = 'search-container';\n\n    //endregion -------------------- Fields --------------------\n\n    protected abstract _mainContent(): ReactElement;\n\n    protected _parameterContent(): ReactElement {\n        return <GlobalOptionComponent id={AbstractApp.#PARAMETER_DIV_ELEMENT_ID}/>;\n    }\n\n    public override render(): ReactElement {\n        const languageChangerProperties: ModalPropertiesWithDiv = {id: AbstractApp.#LANGUAGE_CHANGER_ELEMENT_ID, divId: AbstractApp.#LANGUAGE_CHANGER_DIV_ELEMENT_ID,};\n        const parametersProperties: ModalPropertiesWithContent = {id: AbstractApp.#PARAMETER_ELEMENT_ID, content: this._parameterContent(),};\n        const displayViewProperties: ModalPropertiesWithDiv = {id: AbstractApp.#DISPLAY_VIEW_ELEMENT_ID, divId: AbstractApp.#DISPLAY_VIEW_DIV_ELEMENT_ID,};\n        const searchProperties: ModalPropertiesWithDiv = {id: AbstractApp.#SEARCH_ELEMENT_ID, divId: AbstractApp.#SEARCH_DIV_ELEMENT_ID,};\n\n        return (<>\n            <ModalContainers languageChanger={languageChangerProperties} parameter={parametersProperties} displayView={displayViewProperties} search={searchProperties}/>\n            <Navigation parameter={parametersProperties} displayView={(displayViewProperties)} search={searchProperties}/>\n            <main id=\"main-container\" className=\"pt-3 pb-5 align-bottom container-fluid\">\n                {this._mainContent()}\n            </main>\n            <Footer languageChanger={languageChangerProperties}/>\n        </>);\n    }\n\n}\n","import type {LanguageNamespace, PossibleTranslationPropertyReceived} from './TranslationProperty';\n\nimport AnyTranslationComponent from './AnyTranslationComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LanguageTranslationComponent(properties: PossibleTranslationPropertyReceived<LanguageNamespace>,) {\n    // @ts-ignore\n    return <AnyTranslationComponent namespace=\"language\" {...properties}/>;\n}\n","import type {ReactState} from '../../util/react/ReactState';\n\nimport {Enum} from '../../util/enum/Enum';\n\n/**@deprecated*/\nexport abstract class AbstractAppOption<T, S extends ReactState, O extends number = number, N extends string = string, >\n    extends Enum<O, N> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #defaultValue: T;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(defaultValue: T,) {\n        super();\n        this.#defaultValue = defaultValue;\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    /**@deprecated The method should no longer be used*/public get get(): T {\n        console.warn(`The get method in \"${this._static.name}\" is deprecated.`);\n        return this.#defaultValue;\n    }\n\n\n    /**@deprecated The method should no longer be used*/public set(value: T,): this\n    /**@deprecated The method should no longer be used*/public set(value: T, nextState: S,): this\n    public set(): this {\n        console.warn(`The set value in \"${this._static.name}\" is deprecated, a new method will be under its way!`);\n        return this;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import {AbstractEntityPropertyComponent} from '../_component/AbstractEntityPropertyComponent';\nimport {Themes}                          from './Themes';\nimport Image                             from '../../app/tools/images/Image';\nimport {StringContainer}                 from '../../util/StringContainer';\n\nexport abstract class ThemeComponent<R>\n    extends AbstractEntityPropertyComponent<R, Themes> {\n\n\n    public static renderSingleComponent(theme: Themes, isSmallPath: boolean, identifier?: string,) {\n        const themeEnglishNameInHtml = theme.englishNameInHtml;\n        const key = identifier == null ? theme.englishName : `${identifier} - ${theme.englishName}`;\n        const id = identifier == null ? `${themeEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${themeEnglishNameInHtml}-theme-image`;\n\n        return <Image key={key} id={id} source={isSmallPath ? theme.smallImagePath : theme.longImagePath} fallbackName={theme.englishName} className={`theme-image ${themeEnglishNameInHtml}-image`}/>;\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEditorImageName} from '../../../../util/ClassWithNullObjectPattern';\nimport type {EditorImage}                                      from './EditorImage';\n\nimport {EMPTY_ARRAY} from '../../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyEditorImage\n    implements EditorImage, ClassWithNullObjectPattern<EmptyEditorImageName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEditorImage;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(): typeof EMPTY_ARRAY {\n        return EMPTY_ARRAY;\n    }\n\n    public toString(): EmptyEditorImageName {\n        return 'Empty editor image';\n    }\n\n}\n","import type {GameProperty} from '../entity/properties/game/GameProperty';\n\nimport {AbstractEntityPropertyComponent} from '../_component/AbstractEntityPropertyComponent';\nimport GameContentTranslationComponent   from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                           from './Games';\nimport Image                             from '../../app/tools/images/Image';\nimport {StringContainer}                 from '../../util/StringContainer';\n\n/**\n * @reactComponent\n */\nexport default class GameComponent\n    extends AbstractEntityPropertyComponent<GameProperty, Games> {\n\n    protected override get _map() {\n        return this.reference.toGameMap();\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInSuperMarioMaker1\n            && this.reference.isInSuperMarioMakerFor3DS\n            && this.reference.isInSuperMarioMaker2;\n    }\n\n    protected override _renderSingleComponent(game: Games,) {\n        return GameComponent.renderSingleComponent(game, this.name.english,);\n    }\n\n    public static renderSingleComponent(game: Games, identifier?: string,) {\n        const gameEnglishNameInHtml = game.englishNameInHtml;\n        const key = identifier == null ? game.englishName : `${identifier} - ${game.englishName}`;\n        const id = identifier == null ? `${gameEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${gameEnglishNameInHtml}-game-image`;\n\n        return <Image key={key} id={id} source={game.imagePath} fallbackName={game.englishName} className={`game-image ${gameEnglishNameInHtml}-image`}/>;\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <GameContentTranslationComponent children={translation => <span>{translation('Every games')}</span>}/>;\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every games)`}>{Games.values.map(game => this._renderSingleComponent(game))}</div>;\n    }\n\n}\n","import type {GameStyleProperty} from '../entity/properties/gameStyle/GameStyleProperty';\n\nimport {AbstractEntityPropertyComponent} from '../_component/AbstractEntityPropertyComponent';\nimport GameContentTranslationComponent   from '../../lang/components/GameContentTranslationComponent';\nimport {GameStyles}                      from './GameStyles';\nimport Image                             from '../../app/tools/images/Image';\nimport {StringContainer}                 from '../../util/StringContainer';\n\n/**\n * @reactComponent\n */\nexport default class GameStyleComponent\n    extends AbstractEntityPropertyComponent<GameStyleProperty, GameStyles> {\n\n\n    protected override get _map() {\n        return this.reference.toGameStyleMap();\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInSuperMarioBrosStyle\n            && this.reference.isInSuperMarioBros3Style\n            && this.reference.isInSuperMarioWorldStyle\n            && this.reference.isInNewSuperMarioBrosUStyle\n            && (this.reference.isInSuperMario3DWorldStyle ?? false);\n    }\n\n    protected override _renderSingleComponent(gameStyle: GameStyles,) {\n        return GameStyleComponent.renderSingleComponent(gameStyle, this.name.english,);\n    }\n\n    public static renderSingleComponent(gameStyle: GameStyles, identifier?: string,) {\n        const gameStyleEnglishNameInHtml = gameStyle.englishNameInHtml;\n        const key = identifier == null ? gameStyle.englishName : `${identifier} - ${gameStyle.englishName}`;\n        const id = identifier == null ? `${gameStyleEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${gameStyleEnglishNameInHtml}-gameStyle-image`;\n\n        return <Image key={key} id={id} source={gameStyle.imagePath} fallbackName={gameStyle.englishName} className={`gameStyle-image ${gameStyleEnglishNameInHtml}-image`}/>;\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <GameContentTranslationComponent children={translation => <span>{translation('Every game styles')}</span>}/>;\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every game styles)`}>{GameStyles.values.map(gameStyle => this._renderSingleComponent(gameStyle))}</div>;\n    }\n\n}\n","import './SoundEffect.scss';\n\nimport {PureComponent} from 'react';\n\nimport type {Name}         from '../../lang/name/Name';\nimport type {ReactElement} from '../../util/react/ReactProperty';\nimport type {SoundEffects} from './SoundEffects';\n\nimport {Games}            from '../game/Games';\nimport Image              from '../../app/tools/images/Image';\nimport {StringContainer}  from '../../util/StringContainer';\n\ninterface SoundEffectProperties {\n\n    reference: SoundEffects\n\n    game: Games\n\n    name: Name<string>\n\n}\n\n/**\n * @reactComponent\n */\nexport default class SoundEffectComponent\n    extends PureComponent<SoundEffectProperties> {\n\n    public get reference() {\n        return this.props.reference;\n    }\n\n    public get game() {\n        return this.props.game;\n    }\n\n    public get name() {\n        return this.props.name;\n    }\n\n    protected _render() {\n        return SoundEffectComponent.render(this.reference, this.game, this.name.english,);\n    }\n\n    public static render(soundEffect: SoundEffects,): ReactElement\n    public static render(soundEffect: SoundEffects, game: Games, identifier: string,): ReactElement\n    public static render(soundEffect: SoundEffects, game?: Games, identifier?: string,) {\n        const isGameNull = game == null;\n        const isIdentifierNull = identifier == null;\n\n        const themeEnglishNameInHtml = soundEffect.englishNameInHtml;\n        const key = isIdentifierNull ? soundEffect.englishName : `${identifier} - ${soundEffect.englishName}${isGameNull ? '' : ` (${game.acronym})`}`;\n        const id = isIdentifierNull ? `${themeEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${themeEnglishNameInHtml}-soundEffect${isGameNull ? '' : `-${game.acronym}`}-image`;\n\n        if (game === Games.SUPER_MARIO_MAKER_1) {\n            const [imagePath1, imagePath2,] = soundEffect.SMM1ImagePath!;\n            if (imagePath2 == null)\n                return <Image key={key} id={id} source={imagePath1}\n                              fallbackName={soundEffect.englishName} className={`soundEffect-image ${themeEnglishNameInHtml}-image`}/>;\n            return <Image partialId={id} images={([\n                {source: imagePath1, fallbackName: `${soundEffect.englishName} #1`, className: `soundEffect-image ${themeEnglishNameInHtml}-image`,},\n                {source: imagePath2, fallbackName: `${soundEffect.englishName} #2`, className: `soundEffect-image ${themeEnglishNameInHtml}-image`,},\n            ])} className={`soundEffect-animated-image ${themeEnglishNameInHtml}-image`}/>;\n        }\n        return <Image key={key} id={id} source={soundEffect.SMM2ImagePath!}\n                      fallbackName={soundEffect.englishName} className={`soundEffect-image ${themeEnglishNameInHtml}-image`}/>;\n    }\n\n    public override render(): ReactElement {\n        return this._render();\n    }\n\n}","import type {ReactElement} from '../../util/react/ReactProperty';\n\nimport {AbstractEntityPropertyThatCanDisplayAllComponent} from './AbstractEntityPropertyThatCanDisplayAllComponent';\n\n/**\n * @reactComponent\n */\nexport abstract class AbstractDualEntityPropertyComponent<R>\n    extends AbstractEntityPropertyThatCanDisplayAllComponent<R> {\n\n    protected abstract get _isInFirst(): boolean;\n\n    // protected abstract _renderSingleComponent(enumInstance: E,): JSX.Element;\n\n    protected abstract _renderFirstComponent(): JSX.Element;\n\n    protected abstract _renderSecondComponent(): JSX.Element;\n\n    public override _render(): ReactElement {\n        return this._isInFirst ?\n            this._renderFirstComponent()\n            : this._renderSecondComponent();\n    }\n\n}\n","import type {TimeProperty} from '../entity/properties/time/TimeProperty';\n\nimport {AbstractDualEntityPropertyComponent} from '../_component/AbstractDualEntityPropertyComponent';\nimport GameContentTranslationComponent       from '../../lang/components/GameContentTranslationComponent';\nimport Image                                 from '../../app/tools/images/Image';\nimport {Times}                               from './Times';\nimport TextComponent                         from '../../app/tools/text/TextComponent';\nimport {StringContainer}                     from '../../util/StringContainer';\n\n/**\n * @reactComponent\n */\nexport default class TimeComponent\n    extends AbstractDualEntityPropertyComponent<TimeProperty> {\n\n    protected override get _isInAll() {\n        return this.reference.isInDayTheme\n            && (this.reference.isInNightTheme ?? false);\n    }\n\n    protected override get _isInFirst() {\n        return this.reference.isInDayTheme;\n    }\n\n    protected _renderSingleComponent(time: Times,) {\n        return TimeComponent.renderSingleComponent(time, this.name.english,);\n    }\n\n    public static renderSingleComponent(time: Times, identifier?: string,) {\n        const timeEnglishNameInHtml = time.englishNameInHtml;\n        const key = identifier == null ? time.englishName : `${identifier} - ${time.englishName}`;\n        const id = identifier == null ? `${timeEnglishNameInHtml}-image` : `${StringContainer.getInHtml(identifier)}-${timeEnglishNameInHtml}-time-image`;\n\n        return <Image key={key} id={id} source={time.imagePath} fallbackName={`${time.englishName} - image`} className={`time-image ${timeEnglishNameInHtml}-image`}/>;\n    }\n\n    protected override _renderFirstComponent() {\n        return this._renderSingleComponent(Times.DAY);\n    }\n\n    protected override _renderSecondComponent() {\n        return this._renderSingleComponent(Times.NIGHT);\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <GameContentTranslationComponent>{translation => <TextComponent content={translation('Every times')}/>}</GameContentTranslationComponent>;\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`Every times images (${this.name.english})`}>{Times.values.map(time => this._renderSingleComponent(time))}</div>;\n    }\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                                                                                                                                                                                                                                                            from '../ClassWithEnglishName';\nimport type {ClassWithNullableSMM2ImagePath}                                                                                                                                                                                                                                                                                                                                                                                                  from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                                                                                                                                                                              from '../ClassWithReference';\nimport type {EnumArray, EnumArray_EnglishName, EnumArray_Games, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleEnglishName_SMM1, PossibleEnglishName_SMM1AndSMM2, PossibleEnglishName_SMM2, PossibleImagePath_SMM1, PossibleImagePath_SMM2, PossibleNonNullableValue, PossibleStringValue, PossibleValue, SoundEffectImageName_SMM2, SoundEffectImageNumber_SMM1} from './SoundEffects.types';\nimport type {SoundEffect}                                                                                                                                                                                                                                                                                                                                                                                                                     from './SoundEffect';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                                                                                                                                                 from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}          from '../../variables';\nimport {Enum}               from '../../util/enum/Enum';\nimport {Import}             from '../../util/DynamicImporter';\nimport SoundEffectComponent from './SoundEffect.component';\nimport {StringContainer}    from '../../util/StringContainer';\n\n/**\n * @todo change the images to a different format than the constructor one.\n * @recursiveReference {@link SoundEffectLoader}\n * @classWithDynamicImport {@link SoundEffectLoader}\n */\nexport class SoundEffects\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<SoundEffect>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithNullableSMM2ImagePath<PossibleImagePath_SMM2> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SHOCK =                  new SoundEffects('Shock',                      '00_00',             'Shock',);\n    public static readonly SCREAM =                 new SoundEffects('Scream',                     '00_01',             'Scream',);\n    public static readonly LAUGHTER =               new SoundEffects('Laughter',                   '09_00',             'Laughter',);\n    public static readonly GUFFAW =                 new SoundEffects('Guffaw',                     null,                'LoudLaughter',);\n    public static readonly BOOO =                   new SoundEffects('Booo!',                      null,                'Boo',);\n    public static readonly CHEER =                  new SoundEffects('Cheer',                      '04_01',             'Cheer',);\n    public static readonly BABY =                   new SoundEffects('Baby',                       '10_00',             'Baby',);\n    public static readonly PARTY_POPPER =           new SoundEffects('Party Popper',               null,                'Cracker',);\n    public static readonly APPLAUSE =               new SoundEffects('Applause',                   '04_00',             'Applause',);\n    public static readonly NEAR_MISS =              new SoundEffects('Near Miss',                  null,                'Incident',);\n\n    public static readonly CLATTER =                new SoundEffects('Clatter',                    '01_00',             'Clatter',);\n    public static readonly DRAMA =                  new SoundEffects('Drama!',                     '01_01',             'Drama',);\n    public static readonly KICK =                   new SoundEffects('Kick',                       '02_00',             'Kick',);\n    public static readonly JUMP =                   new SoundEffects('Jump',                       '02_01',             'Jump',);\n    public static readonly HONK_HONK =              new SoundEffects('Honk Honk',                  '10_01',             'Honk',);\n    public static readonly PUNCH =                  new SoundEffects('Punch',                      '06_00',             'Punch',);\n    public static readonly OINK =                   new SoundEffects('Oink',                       null,                'Whoopee',);\n    public static readonly KUH_THUNK =              new SoundEffects('Kuh-thunk!',                 null,                'Focus',);\n    public static readonly BEEP =                   new SoundEffects('Beep!',                      null,                'Glitch',);\n    public static readonly NINJA_ATTACK =           new SoundEffects('Ninja Attack!',              null,                'Uproar',);\n    public static readonly ZAP =                    new SoundEffects('Zap!',                       null,                'Discord',);\n\n    public static readonly DING_DONG =              new SoundEffects('Ding Dong',                 '11_00',              'Ding',);\n    public static readonly BZZZT =                  new SoundEffects('Bzzzt!',                    '11_01',              'Bzzzt',);\n    public static readonly GLORY =                  new SoundEffects('Glory',                     '05_00',              'Glory',);\n    public static readonly DOOM =                   new SoundEffects('Doom',                      '05_01',              'Doom',);\n    public static readonly YEAH =                   new SoundEffects('Yeah!',                     null,                 'Admiration',);\n    public static readonly AWW =                    new SoundEffects('Aww...',                    null,                 'Anguish',);\n\n    public static readonly FIREWORKS =              new SoundEffects('Fireworks',                 '06_01',              'Fireworks',);\n    public static readonly AUDIENCE =               new SoundEffects('Audience',                  null,                 'Audience',);\n    public static readonly SCATTING =               new SoundEffects('Scatting',                  null,                 'Scat',);\n    public static readonly BIRD_CHIRPING =          new SoundEffects('Bird\\'s Chirping',          '09_01',              null,);\n    public static readonly SPARK =                  new SoundEffects('Spark',                     null,                 'Firecracker',);\n    public static readonly TRADITIONAL =            new SoundEffects('Traditional',               null,                 'Ohayasi',);\n    public static readonly ELECTRIC_GUITAR =        new SoundEffects('Electric Guitar',           null,                 'ElectricGuitar',);\n    public static readonly DISTORTION =             new SoundEffects('Distortion',                '12_01',              null,);\n    public static readonly TWISTY_TURNY =           new SoundEffects('Twisty Turny',              null,                 'Filter',);\n    public static readonly WOOZY =                  new SoundEffects('Woozy',                     null,                 'SoundEffect',);\n    public static readonly TELEPHONE =              new SoundEffects('Telephone',                 '12_00',              null,);\n    public static readonly FLASH =                  new SoundEffects('Flash',                     null,                 'Halo',);\n\n    public static readonly PEACEFUL =               new SoundEffects('Peaceful',                  null,                 'Calm',);\n    public static readonly HORROR =                 new SoundEffects('Horror',                    null,                 'Unrest',);\n    public static readonly BONUS_MUSIC =            new SoundEffects('Bonus Music',               '08_01',              'Bonus',);\n    public static readonly FESTIVE_MUSIC =          new SoundEffects('Festive Music',             '07_00',              null,);\n    public static readonly RAVE_MUSIC =             new SoundEffects('Rave Music',                '07_01',              null,);\n    public static readonly HEARTBEAT =              new SoundEffects('Heartbeat',                 '03_00',              'Heartbeat',);\n    public static readonly SILENCE =                new SoundEffects('Silence',                   '03_01',              'Silence',);\n    public static readonly BIRD_TWEETING_NOISE =    new SoundEffects('Bird\\'s Tweeting Noise',    ['13_00', '14_00',],  null,);\n    public static readonly CHICKEN_CLUCKING_NOISE = new SoundEffects('Chicken\\'s Clucking Noise', ['13_01', '14_01',],  null,);\n    public static readonly BOSS_MUSIC =             new SoundEffects('Boss Music',                '08_00',              'Boss',);\n    public static readonly FINAL_BOSS =             new SoundEffects('Final Boss',                null,                 'LastBoss',);\n    public static readonly SUPER_MARIO_KART =       new SoundEffects('Super Mario Kart',          null,                 'Mario00',);\n    public static readonly SUPER_MARIO_64 =         new SoundEffects('Super Mario 64',            null,                 'Mario01',);\n    public static readonly SUPER_MARIO_SUNSHINE =   new SoundEffects('Super Mario Sunshine',      null,                 'Mario02',);\n    public static readonly SUPER_MARIO_GALAXY =     new SoundEffects('Super Mario Galaxy',        null,                 'Mario03',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundEffects;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, SoundEffect>;\n    static #soundEffect_games?: EnumArray_Games;\n\n    #reference?: SoundEffect;\n    readonly #englishName;\n    readonly #SMM1ImagePath: | readonly [PossibleImagePath_SMM1,] | readonly [PossibleImagePath_SMM1, PossibleImagePath_SMM1,] | null;\n    readonly #SMM2ImagePath: | PossibleImagePath_SMM2 | null;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName_SMM1AndSMM2, imageNumber_smm1: | SoundEffectImageNumber_SMM1 | readonly [SoundEffectImageNumber_SMM1, SoundEffectImageNumber_SMM1,], imageName_smm2: SoundEffectImageName_SMM2,)\n    private constructor(englishName: Exclude<PossibleEnglishName_SMM1, PossibleEnglishName_SMM1AndSMM2>, imageNumber_smm1: SoundEffectImageNumber_SMM1 | readonly [SoundEffectImageNumber_SMM1, SoundEffectImageNumber_SMM1,], imageName_smm2: null,)\n    private constructor(englishName: Exclude<PossibleEnglishName_SMM2, PossibleEnglishName_SMM1AndSMM2>, imageNumber_smm1: null, imageName_smm2: SoundEffectImageName_SMM2,)\n    private constructor(englishName: PossibleEnglishName, imageNumber_smm1: | SoundEffectImageNumber_SMM1 | readonly [SoundEffectImageNumber_SMM1, SoundEffectImageNumber_SMM1,] | null, imageName_smm2: SoundEffectImageName_SMM2 | null,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#SMM1ImagePath = imageNumber_smm1 == null ? null : typeof imageNumber_smm1 == 'string'\n            ? [`/${BASE_PATH}/sound effect/Edit_Lyt_P_SE${imageNumber_smm1}.tiff`]\n            : [`/${BASE_PATH}/sound effect/Edit_Lyt_P_SE${imageNumber_smm1[0]}.tiff`, `/${BASE_PATH}/sound effect/Edit_Lyt_P_SE${imageNumber_smm1[1]}.tiff`,];\n        this.#SMM2ImagePath = imageName_smm2 == null ? null : `/${BASE_PATH}/sound effect/Lyt_E_P_SE_${imageName_smm2}.tiff`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, SoundEffect> {\n        return this.#REFERENCE_MAP ??= Import.SoundEffectLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): SoundEffect {\n        return this.#reference ??= SoundEffects.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get SMM1ImagePath(): | readonly [PossibleImagePath_SMM1,] | readonly [PossibleImagePath_SMM1, PossibleImagePath_SMM1,] | null {\n        return this.#SMM1ImagePath;\n    }\n\n    public get SMM2ImagePath(): | PossibleImagePath_SMM2 | null {\n        return this.#SMM2ImagePath;\n    }\n\n\n    public static get soundEffect_games(): EnumArray_Games {\n        return this.#soundEffect_games ??= [this.SUPER_MARIO_KART, this.SUPER_MARIO_64, this.SUPER_MARIO_SUNSHINE, this.SUPER_MARIO_GALAXY,];\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get renderSingleComponent() {\n        return SoundEffectComponent.render(this);\n    }\n\n    public static get everyEnglishNames(): EnumArray_EnglishName {\n        return this.values.map(soundEffect => soundEffect.englishName) as unknown as EnumArray_EnglishName;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundEffects> {\n        return SoundEffects;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends SoundEffects = SoundEffects, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundEffects\n    public static getValue(value: PossibleValue,): | SoundEffects | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClimbingImageFile, ClimbingImages, PressingDownImageFile, PressingDownImage, FallingAfterJumpImageFile, FallingAfterJumpImage, GoalPoleImageFile, GoalPoleImages, Image, JumpImageFile, JumpImages, Path, PossibleImages, RunningImageFile, RunningImages, SingleImage, SwimmingImageFile, SwimmingImages, TauntImageFile, TauntImage, TurningImageFile, TurningImage, WaitingImageFile, WaitingImage, WalkImageFile, WalkImages} from './Image';\nimport type {EnglishNameOnFile}                                                                                                                                                                                                                                                                                                                                                                                                                from '../MysteryMushrooms.types';\n\nimport {BASE_PATH} from '../../../variables';\n\nexport class ImageContainer<FILE extends EnglishNameOnFile = EnglishNameOnFile, >\n    implements Image<FILE> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #path;\n\n    static readonly #WAITING_IMAGE: WaitingImageFile = 'wait.0.tiff';\n    #waitingImages?: WaitingImage<FILE>;\n\n    static readonly #TAUNT_IMAGE: TauntImageFile = 'appeal.0.tiff';\n    #tauntImages?: TauntImage<FILE>;\n\n    static readonly #PRESSING_DOWN_IMAGE: PressingDownImageFile = 'stoop.0.tiff';\n    #pressingDownImages?: PressingDownImage<FILE>;\n\n    static readonly #WALK_IMAGE_1: WalkImageFile<0> = 'walk.0.tiff';\n    static readonly #WALK_IMAGE_2: WalkImageFile<1> = 'walk.1.tiff';\n    static readonly #WALK_IMAGE_3: WalkImageFile<2> = 'walk.2.tiff';\n    static readonly #WALK_IMAGES = [this.#WALK_IMAGE_1, this.#WALK_IMAGE_2, this.#WALK_IMAGE_3,] as const;\n    #walkImages?: WalkImages<FILE>;\n\n    static readonly #RUNNING_IMAGE_1: RunningImageFile<0> = '/b_dash.0.tiff';\n    static readonly #RUNNING_IMAGE_2: RunningImageFile<1> = '/b_dash.1.tiff';\n    static readonly #RUNNING_IMAGE_3: RunningImageFile<2> = '/b_dash.2.tiff';\n    static readonly #RUNNING_IMAGES = [this.#RUNNING_IMAGE_1, this.#RUNNING_IMAGE_2, this.#RUNNING_IMAGE_3,] as const;\n    #runningImages?: RunningImages<FILE>;\n\n    static readonly #SWIMMING_IMAGE_1: SwimmingImageFile<0> = 'swim.0.tiff';\n    static readonly #SWIMMING_IMAGE_2: SwimmingImageFile<1> = 'swim.1.tiff';\n    static readonly #SWIMMING_IMAGE_3: SwimmingImageFile<2> = 'swim.2.tiff';\n    static readonly #SWIMMING_IMAGE_4: SwimmingImageFile<3> = 'swim.3.tiff';\n    static readonly #SWIMMING_IMAGE_5: SwimmingImageFile<4> = 'swim.4.tiff';\n    static readonly #SWIMMING_IMAGE_6: SwimmingImageFile<5> = 'swim.5.tiff';\n    static readonly #SWIMMING_IMAGES = [this.#SWIMMING_IMAGE_1, this.#SWIMMING_IMAGE_2, this.#SWIMMING_IMAGE_3, this.#SWIMMING_IMAGE_4, this.#SWIMMING_IMAGE_5, this.#SWIMMING_IMAGE_6,] as const;\n    #swimmingImages?: SwimmingImages<FILE>;\n\n    static readonly #JUMP_IMAGE_1: JumpImageFile<0> = 'jump.0.tiff';\n    static readonly #JUMP_IMAGE_2: JumpImageFile<1> = 'jump.1.tiff';\n    static readonly #JUMP_IMAGE_3: JumpImageFile<2> = 'jump.2.tiff';\n    static readonly #JUMP_IMAGES = [this.#JUMP_IMAGE_1, this.#JUMP_IMAGE_2, this.#JUMP_IMAGE_3,] as const;\n    #jumpImages?: JumpImages<FILE>;\n    readonly #amountOfImagesOnJump: | 1 | 3;\n\n    static readonly #FALLING_AFTER_JUMP_IMAGE: FallingAfterJumpImageFile = 'jump_fall.0.tiff';\n    #fallingAfterJumpImages?: FallingAfterJumpImage<FILE>;\n\n    static readonly #TURNING_IMAGE: TurningImageFile = 'turn.0.tiff';\n    #turningImages?: TurningImage<FILE>;\n\n    static readonly #CLIMBING_IMAGE_1: ClimbingImageFile<0> = 'climb.0.tiff';\n    static readonly #CLIMBING_IMAGE_2: ClimbingImageFile<1> = 'climb.1.tiff';\n    static readonly #CLIMBING_IMAGES = [this.#CLIMBING_IMAGE_1, this.#CLIMBING_IMAGE_2,] as const;\n    #climbingImages?: ClimbingImages<FILE>;\n\n    static readonly #GOAL_POLE_IMAGE_1: GoalPoleImageFile<0> = 'pole.0.tiff';\n    static readonly #GOAL_POLE_IMAGE_2: GoalPoleImageFile<1> = 'pole.1.tiff';\n    static readonly #GOAL_POLE_IMAGES = [this.#GOAL_POLE_IMAGE_1, this.#GOAL_POLE_IMAGE_2,] as const;\n    #goalPoleImages?: GoalPoleImages<FILE>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(file: FILE, amountOfImagesOnJump: | 1 | 3 = 1,) {\n        this.#path = `/${BASE_PATH}/entity/1 - SMB/In game/SMM1/Player Chara - ${file}` as const;\n        this.#amountOfImagesOnJump = amountOfImagesOnJump;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    private get __path(): Path<FILE> {\n        return this.#path;\n    }\n\n    private get __amountOfImagesOnJump(): | 1 | 3 {\n        return this.#amountOfImagesOnJump;\n    }\n\n\n    #getImage<I extends PossibleImages = PossibleImages, >(image: I,): SingleImage<FILE, I> {\n        return `${this.__path}/${image}`;\n    }\n\n    // @ts-ignore\n    #getImages<I1 extends PossibleImages = PossibleImages, I2 extends PossibleImages = PossibleImages, >(images: readonly [I1, I2,],): readonly [SingleImage<FILE, I1>, SingleImage<FILE, I2>,]\n    #getImages<I1 extends PossibleImages = PossibleImages, I2 extends PossibleImages = PossibleImages, I3 extends PossibleImages = PossibleImages, >(images: readonly [I1, I2, I3,],): readonly [SingleImage<FILE, I1>, SingleImage<FILE, I2>, SingleImage<FILE, I3>,]\n    #getImages<I1 extends PossibleImages = PossibleImages, I2 extends PossibleImages = PossibleImages, I3 extends PossibleImages = PossibleImages, I4 extends PossibleImages = PossibleImages, I5 extends PossibleImages = PossibleImages, I6 extends PossibleImages = PossibleImages, >(images: readonly [I1, I2, I3, I4, I5, I6,],): readonly [SingleImage<FILE, I1>, SingleImage<FILE, I2>, SingleImage<FILE, I3>, SingleImage<FILE, I4>, SingleImage<FILE, I5>, SingleImage<FILE, I6>,]\n    #getImages(images: readonly PossibleImages[]) {\n        return images.map(image => this.#getImage(image));\n    }\n\n\n    public get waitingImage(): WaitingImage<FILE> {\n        return this.#waitingImages ??= this.#getImage(ImageContainer.#WAITING_IMAGE);\n    }\n\n    public get tauntImage(): TauntImage<FILE> {\n        return this.#tauntImages ??= this.#getImage(ImageContainer.#TAUNT_IMAGE);\n    }\n\n    public get pressingDownImage(): PressingDownImage<FILE> {\n        return this.#pressingDownImages ??= this.#getImage(ImageContainer.#PRESSING_DOWN_IMAGE);\n    }\n\n    public get walkImages(): WalkImages<FILE> {\n        return this.#walkImages ??= this.#getImages(ImageContainer.#WALK_IMAGES);\n    }\n\n    public get runningImages(): RunningImages<FILE> {\n        return this.#runningImages ??= this.#getImages(ImageContainer.#RUNNING_IMAGES);\n    }\n\n    public get swimmingImages(): SwimmingImages<FILE> {\n        return this.#swimmingImages ??= this.#getImages(ImageContainer.#SWIMMING_IMAGES);\n    }\n\n    public get jumpImages(): JumpImages<FILE> {\n        return this.#jumpImages ??= this.__amountOfImagesOnJump === 1\n            ? [this.#getImage(ImageContainer.#JUMP_IMAGE_1),]\n            : this.#getImages(ImageContainer.#JUMP_IMAGES);\n    }\n\n    public get fallingAfterJumpImage(): FallingAfterJumpImage<FILE> {\n        return this.#fallingAfterJumpImages ??= this.#getImage(ImageContainer.#FALLING_AFTER_JUMP_IMAGE);\n    }\n\n    public get turningImage(): TurningImage<FILE> {\n        return this.#turningImages ??= this.#getImage(ImageContainer.#TURNING_IMAGE);\n    }\n\n    public get climbingImages(): ClimbingImages<FILE> {\n        return this.#climbingImages ??= this.#getImages(ImageContainer.#CLIMBING_IMAGES);\n    }\n\n    public get goalPoleImages(): GoalPoleImages<FILE> {\n        return this.#goalPoleImages ??= this.#getImages(ImageContainer.#GOAL_POLE_IMAGES);\n    }\n\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {GoalPoleSound, GoalPoleSoundFile, JumpSoundFile, JumpSounds, LostALifeSound, LostALifeSoundFile, OnGroundAfterJumpSound, OnGroundAfterJumpSoundFile, Path, PossibleSounds, PowerUpCollectedSound, PowerUpCollectedSoundFile, SingleSound, Sound, TauntSound, TauntSoundFile, TurningSound, TurningSoundFile} from './Sound';\nimport type {SoundProperty}                                                                                                                                                                                                                                                                                               from '../properties/sound/SoundProperty';\nimport type {EnglishNameOnFile}                                                                                                                                                                                                                                                                                           from '../MysteryMushrooms.types';\n\nimport {BASE_PATH}                    from '../../../variables';\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_ARRAY}                  from '../../../util/emptyVariables';\n\nexport class SoundContainer<FILE extends EnglishNameOnFile = EnglishNameOnFile, >\n    implements Sound {\n\n    //region -------------------- Fields --------------------\n\n    readonly #path;\n\n    static readonly #POWER_UP_SOUND: PowerUpCollectedSoundFile = 'powerup.wav';\n    #powerUpGotSounds?: PowerUpCollectedSound<FILE>;\n\n    static readonly #TAUNT_SOUND: TauntSoundFile = 'appeal.wav';\n    #tauntSounds?: TauntSound<FILE>;\n\n    static readonly #JUMP_SOUND_1: JumpSoundFile<''> = 'jump.wav';\n    static readonly #JUMP_SOUND_2: JumpSoundFile<2> = 'jump2.wav';\n    #jumpSounds?: JumpSounds<FILE>;\n\n    static readonly #ON_GROUND_AFTER_JUMP_SOUND: OnGroundAfterJumpSoundFile = 'ground.wav';\n    #onGroundAfterJumpSounds?: OnGroundAfterJumpSound<FILE>;\n\n    static readonly #TURNING_SOUND: TurningSoundFile = 'slip.wav';\n    #turningSounds?: TurningSound<FILE>;\n\n    static readonly #GOAL_POLE_SOUND: GoalPoleSoundFile = 'goal.wav';\n    #goalPoleSounds?: GoalPoleSound<FILE>;\n\n    static readonly #LOST_A_LIFE_SOUND: LostALifeSoundFile = 'down.wav';\n    #lostALifeSounds?: LostALifeSound<FILE>;\n\n    readonly #property;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(file: FILE, property: () => SoundProperty,) {\n        this.#path = `/${BASE_PATH}/sound/mystery mushroom/${file}` as const;\n        this.#property = new DelayedObjectHolderContainer(property);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    private __path(): Path<FILE> {\n        return this.#path;\n    }\n\n    private get __property(): SoundProperty {\n        return this.#property.get;\n    }\n\n\n    #getSound<SOUND_PATH extends PossibleSounds = PossibleSounds, >(sound: SOUND_PATH,): SingleSound<FILE, SOUND_PATH> {\n        return `${this.__path as unknown as Path<FILE>}/${sound}`;\n        //FIXME for some reason typescript doesn't see the type properly\n    }\n\n\n    public get powerUpCollectedSound(): PowerUpCollectedSound<FILE> {\n        return this.#powerUpGotSounds ??= this.#getSound(SoundContainer.#POWER_UP_SOUND);\n    }\n\n    public get tauntSound(): TauntSound<FILE> {\n        return this.#tauntSounds ??= this.#getSound(SoundContainer.#TAUNT_SOUND);\n    }\n\n    public get jumpSounds(): JumpSounds<FILE> {\n        if (this.#jumpSounds == null) {\n            switch (this.__property.amountOnSoundEffectOnJump!) {\n                case 0:\n                    return EMPTY_ARRAY;\n                case 1:\n                    return this.#jumpSounds = [this.#getSound(SoundContainer.#JUMP_SOUND_1),];\n                case 2:\n                    return this.#jumpSounds = [this.#getSound(SoundContainer.#JUMP_SOUND_1), this.#getSound(SoundContainer.#JUMP_SOUND_2),];\n            }\n        }\n        return this.#jumpSounds;\n    }\n\n    public get onGroundAfterJumpSound(): OnGroundAfterJumpSound<FILE> {\n        return this.#onGroundAfterJumpSounds ??= this.#getSound(SoundContainer.#ON_GROUND_AFTER_JUMP_SOUND);\n    }\n\n    public get turningSound(): TurningSound<FILE> {\n        return this.#turningSounds ??= this.#getSound(SoundContainer.#TURNING_SOUND);\n    }\n\n    public get goalPoleSound(): GoalPoleSound<FILE> {\n        return this.#goalPoleSounds ??= this.#getSound(SoundContainer.#GOAL_POLE_SOUND);\n    }\n\n    public get lostALifeSound(): LostALifeSound<FILE> {\n        return this.#lostALifeSounds ??= this.#getSound(SoundContainer.#LOST_A_LIFE_SOUND);\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {ClassWithEnglishName}                                                                                                                                                                                                                                                                             from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                                                                                                                               from '../ClassWithReference';\nimport type {ClimbingImages, PressingDownImage, FallingAfterJumpImage, GoalPoleImages, Image, JumpImages, RunningImages, SwimmingImages, TauntImage, TurningImage, WaitingImage, WalkImages}                                                                                                                   from './image/Image';\nimport type {EnglishNameOnFile, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImageSourceForFile, PossibleNonNullableValue, PossibleSoundSourceForFile, PossibleStringValue, PossibleUniqueEnglishName, PossibleValue} from './MysteryMushrooms.types';\nimport type {GoalPoleSound, JumpSounds, LostALifeSound, OnGroundAfterJumpSound, PowerUpCollectedSound, Sound, TauntSound, TurningSound}                                                                                                                                                                        from './sound/Sound';\nimport type {MysteryMushroom}                                                                                                                                                                                                                                                                                  from './MysteryMushroom';\nimport type {SoundProperty}                                                                                                                                                                                                                                                                                    from './properties/sound/SoundProperty';\nimport type {StaticReference}                                                                                                                                                                                                                                                                                  from '../../util/enum/Enum.types';\n\nimport {EMPTY_ARRAY}     from '../../util/emptyVariables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {ImageContainer}  from './image/Image.container';\nimport {Import}          from '../../util/DynamicImporter';\nimport {SoundContainer}  from './sound/Sound.container';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @todo Change the path to be like in the game instead of the mystery mushroom name\n * @recursiveReference {@link MysteryMushroomLoader}\n * @classWithDynamicImport {@link MysteryMushroomLoader}\n */\nexport class MysteryMushrooms\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<MysteryMushroom>,\n        ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly MYSTERY_MUSHROOM =       new class MysteryMushrooms_MysteryMushroom extends MysteryMushrooms {\n\n        protected override _createImageContainer(): never {\n            throw new ReferenceError('The Mystery Mushroom image doesn\\'t have any images.');\n        }\n\n        protected override _createSoundContainer(): never {\n            throw new ReferenceError('The Mystery Mushroom sound doesn\\'t have any sounds.');\n        }\n\n\n        public override get powerUpCollectedSound() {\n            return null;\n        }\n\n        public override get waitingImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get tauntImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get tauntSound() {\n            return null;\n        }\n\n        public override get pressingDownImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get walkImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get runningImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get swimmingImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get jumpImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get jumpSounds() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get fallingAfterJumpImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get onGroundAfterJumpSound() {\n            return null;\n        }\n\n        public override get turningImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get turningSound() {\n            return null;\n        }\n\n        public override get climbingImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get goalPoleImages() {\n            return EMPTY_ARRAY;\n        }\n\n        public override get goalPoleSound() {\n            return null;\n        }\n\n        public override get lostALifeSound() {\n            return null;\n        }\n\n    }(null, 'Mystery Mushroom',);\n\n    public static readonly YAMAMURA =               new MysteryMushrooms('Boss017', 'Yamamura',);\n    public static readonly MARY_O =                 new MysteryMushrooms('Boss026', 'Mary O.',);\n    public static readonly UNDODOG =                new MysteryMushrooms('Boss048', 'Undodog',);\n\n    public static readonly MR_GAME_AND_WATCH =      new MysteryMushrooms('GameWatch', 'Mr. Game & Watch',);\n\n    public static readonly PAC_MAN =                new MysteryMushrooms('PackMan', 'PAC-MAN',);\n\n    public static readonly MARIO =                  new MysteryMushrooms('Mario', 'Mario',);\n    public static readonly LUIGI =                  new MysteryMushrooms('Luigi', 'Luigi',);\n    public static readonly PROFESSOR_E_GADD =       new MysteryMushrooms('Boss019', 'Professor E. Gadd',);\n    public static readonly PEACH =                  new MysteryMushrooms('Peach', 'Peach',);\n    public static readonly DAISY =                  new MysteryMushrooms('Boss018', 'Daisy',);\n    public static readonly ROSALINA =               new MysteryMushrooms('Rosalina', 'Rosalina',);\n    public static readonly TOAD =                   new MysteryMushrooms('Kinopio', 'Toad',);\n    public static readonly CAPTAIN_TOAD =           new MysteryMushrooms('Boss014', 'Captain Toad',);\n    public static readonly TOADETTE =               new MysteryMushrooms('Boss027', 'Toadette',);\n    public static readonly YOSHI =                  new MysteryMushrooms('Yoshi', 'Yoshi',);\n    public static readonly BIRDO =                  new MysteryMushrooms('Boss016', 'Birdo',);\n    public static readonly WARIO =                  new MysteryMushrooms('Wario', 'Wario',);\n    public static readonly ASHLEY =                 new MysteryMushrooms('Ashley', 'Ashley',);\n    public static readonly WALUIGI =                new MysteryMushrooms('Waluigi', 'Waluigi',);\n    public static readonly BOWSER =                 new MysteryMushrooms('Koopa', 'Bowser',);\n    public static readonly BOWSER_JR =              new MysteryMushrooms('KoopaJr', 'Bowser Jr.',);\n    public static readonly GOOMBA =                 new MysteryMushrooms('Kuribo', 'Goomba',);\n    public static readonly SHY_GUY =                new MysteryMushrooms('Heiho', 'Shy Guy',);\n    public static readonly NABBIT =                 new MysteryMushrooms('Boss032', 'Nabbit',);\n    public static readonly MARIO_SILVER =           new MysteryMushrooms('MarioSilver', 'Mario (Silver)',);\n    public static readonly MARIO_GOLD =             new MysteryMushrooms('MarioGold', 'Mario (Gold)',);\n    public static readonly BUILDER_MARIO =          new MysteryMushrooms('DiyMario', 'Builder Mario',);\n    public static readonly DR_MARIO =               new MysteryMushrooms('DrMario', 'Dr. Mario',);\n    public static readonly FROG_MARIO =             new MysteryMushrooms('Boss006', 'Frog Mario',);\n    public static readonly STATUE_MARIO =           new MysteryMushrooms('Boss025', 'Statue Mario',);\n    public static readonly MARIO_TRIO =             new MysteryMushrooms('Boss007', 'Mario Trio',);\n    public static readonly KART_MARIO =             new MysteryMushrooms('MarioKart', 'Kart Mario',);\n    public static readonly CAT_MARIO =              new MysteryMushrooms('Boss003', 'Cat Mario',);\n    public static readonly CAT_PEACH =              new MysteryMushrooms('Boss004', 'Cat Peach',);\n    public static readonly SKY_POP =                new MysteryMushrooms('Boss010', 'Sky Pop',);\n    public static readonly BABY_MARIO =             new MysteryMushrooms('Boss037', 'Baby Mario',);\n    public static readonly QUESTION_MARK_BLOCK =    new MysteryMushrooms(['Block', 'Block L',], '? Block',);\n    public static readonly TRAMPOLINE =             new MysteryMushrooms('Trampoline', 'Trampoline',);\n    public static readonly MARIO_MB =               new MysteryMushrooms('MarioOriginal', 'Mario',);\n    public static readonly SIDESTEPPER =            new MysteryMushrooms('SideStepper', 'Sidestepper',);\n    public static readonly SHELLCREEPER =           new MysteryMushrooms('Shellcreeper', 'Shellcreeper',);\n    public static readonly FIGHTER_FLY =            new MysteryMushrooms('Fightfly', 'Fighter Fly',);\n\n    public static readonly GREEN_YARN_YOSHI =       new MysteryMushrooms('WoolYoshiGreen', 'Green Yarn Yoshi',);\n    public static readonly PINK_YARN_YOSHI =        new MysteryMushrooms('WoolYoshiPink', 'Pink Yarn Yoshi',);\n    public static readonly LIGHT_BLUE_YARN_YOSHI =  new MysteryMushrooms('WoolYoshiAqua', 'Light-Blue Yarn Yoshi',);\n    public static readonly MEGA_YARN_YOSHI =        new MysteryMushrooms('WoolYoshiBig', 'Mega Yarn Yoshi',);\n\n    public static readonly DONKEY_KONG =            new MysteryMushrooms('DonkeyKong', 'Donkey Kong',);\n    public static readonly DONKEY_KONG_JR =         new MysteryMushrooms('DonkeyKongJr', 'Donkey Kong Jr.',);\n    public static readonly DIDDY_KONG =             new MysteryMushrooms('DiddyKong', 'Diddy Kong',);\n\n    public static readonly LITTLE_MAC =             new MysteryMushrooms('LittleMac', 'Little Mac',);\n\n    public static readonly DUCK_HUNT =              new MysteryMushrooms('DuckHunt', 'Duck Hunt',);\n\n    public static readonly BUBBLES =                new MysteryMushrooms('Boss040', 'Bubbles',);\n\n    public static readonly BIKE =                   new MysteryMushrooms('Boss015', 'Bike',);\n\n    public static readonly BALLOON_FIGHTER =        new MysteryMushrooms('Boss031', 'Balloon Fighter',);\n\n    public static readonly POPO_AND_NANA =          new MysteryMushrooms('Boss044', 'Popo & Nana',);\n\n    public static readonly FOREMAN_SPIKE =          new MysteryMushrooms('Blackey', 'Foreman Spike',);\n\n    public static readonly LINK =                   new MysteryMushrooms('Link', 'Link',);\n    public static readonly ZELDA =                  new MysteryMushrooms('Zelda', 'Zelda',);\n    public static readonly SHEIK =                  new MysteryMushrooms('Sheik', 'Sheik',);\n    public static readonly TOON_LINK =              new MysteryMushrooms('ThunLink', 'Toon Link',);\n    public static readonly TETRA =                  new MysteryMushrooms('Boss033', 'Tetra',);\n    public static readonly TINGLE =                 new MysteryMushrooms('Tincle', 'Tingle',);\n    public static readonly GANONDORF =              new MysteryMushrooms('Ganon', 'Ganondorf',);\n    public static readonly WOLF_LINK =              new MysteryMushrooms('Boss030', 'Wolf Link',);\n    public static readonly TOTEM_LINK =             new MysteryMushrooms('Boss000', 'Totem Link',);\n\n    public static readonly SAMUS =                  new MysteryMushrooms('Samus', 'Samus',);\n    public static readonly ZERO_SUIT_SAMUS =        new MysteryMushrooms('ZeroSams', 'Zero Suit Samus',);\n\n    public static readonly VOLLEYBALL_PLAYER =      new MysteryMushrooms('Boss042', 'Volleyball Player',);\n\n    public static readonly PIT =                    new MysteryMushrooms('Pit', 'Pit',);\n    public static readonly PALUTENA =               new MysteryMushrooms('Palutena', 'Palutena',);\n    public static readonly DARK_PIT =               new MysteryMushrooms('DarkPit', 'Dark Pit',);\n\n    public static readonly DONBE =                  new MysteryMushrooms('Boss034', 'Donbe',);\n    public static readonly HIKARI =                 new MysteryMushrooms('Boss035', 'Hikari',);\n\n    public static readonly MEGA_MAN =               new MysteryMushrooms('MegaMan', 'Mega Man',);\n\n    public static readonly AYUMI_TACHIBANA =        new MysteryMushrooms('Boss036', 'Ayumi Tachibana',);\n\n    public static readonly MARTH =                  new MysteryMushrooms('Marth', 'Marth',);\n    public static readonly IKE =                    new MysteryMushrooms('Ike', 'Ike',);\n    public static readonly LUCINA =                 new MysteryMushrooms('Lucina', 'Lucina',);\n    public static readonly ROBIN =                  new MysteryMushrooms('Robin', 'Robin',);\n\n    public static readonly CAPTAIN_FALCON =         new MysteryMushrooms('Falcon', 'Captain Falcon',);\n\n    public static readonly SONIC =                  new class MysteryMushrooms_Sonic extends MysteryMushrooms {\n\n        protected override _createImageContainer(file: EnglishNameOnFile,): Image {\n            return new ImageContainer(file, 3,);\n        }\n\n    }('Sonic', 'Sonic',);\n\n    public static readonly KIRBY =                  new MysteryMushrooms('Kirby', 'Kirby',);\n    public static readonly KING_DEDEDE =            new MysteryMushrooms('Dedede', 'King Dedede',);\n    public static readonly META_KNIGHT =            new MysteryMushrooms('MetaKnight', 'Meta Knight',);\n\n    public static readonly FOX_MCCLOUD =            new MysteryMushrooms('Fox', 'Fox McCloud',);\n    public static readonly FALCO_LOMBARDI =         new MysteryMushrooms('Falco', 'Falco Lombardi',);\n    public static readonly SLIPPY_TOAD =            new MysteryMushrooms('Slippy', 'Slippy Toad',);\n    public static readonly PEPPY_HARE =             new MysteryMushrooms('Peppy', 'Peppy Hare',);\n    public static readonly ARWING =                 new MysteryMushrooms('Arwing', 'Arwing',);\n\n    public static readonly NESS =                   new MysteryMushrooms('Ness', 'Ness',);\n    public static readonly LUCAS =                  new MysteryMushrooms('Lucas', 'Lucas',);\n    public static readonly MASTER_BELCH =           new MysteryMushrooms('Boss012', 'Master Belch',);\n    public static readonly MR_SATURN =              new MysteryMushrooms('Boss013', 'Mr. Saturn',);\n\n    public static readonly BULBASAUR =              new MysteryMushrooms('Boss020', 'Bulbasaur',);\n    public static readonly CHARMANDER =             new MysteryMushrooms('Boss021', 'Charmander',);\n    public static readonly CHARIZARD =              new MysteryMushrooms('Charizard', 'Charizard',);\n    public static readonly SQUIRTLE =               new MysteryMushrooms('Boss022', 'Squirtle',);\n    public static readonly PIKACHU =                new MysteryMushrooms('Pikachu', 'Pikachu',);\n    public static readonly JIGGLYPUFF =             new MysteryMushrooms('Pudding', 'Jigglypuff',);\n    public static readonly MEWTWO =                 new MysteryMushrooms('Mewtwo', 'Mewtwo',);\n    public static readonly LUCARIO =                new MysteryMushrooms('Lucario', 'Lucario',);\n    public static readonly GRENINJA =               new MysteryMushrooms('Greninja', 'Greninja',);\n\n    public static readonly VILLAGER =               new MysteryMushrooms('Murabito', 'Villager',);\n    public static readonly TOM_NOOK =               new MysteryMushrooms('Tanuki', 'Tom Nook',);\n    public static readonly K_K_SLIDER =             new MysteryMushrooms('Totakeke', 'K.K. Slider',);\n    public static readonly RESETTI =                new MysteryMushrooms('ResetSan', 'Resetti',);\n    public static readonly ROVER =                  new MysteryMushrooms('MishiNeko', 'Rover',);\n    public static readonly TIMMY_AND_TOMMY =        new MysteryMushrooms('TsubuMame', 'Timmy & Tommy',);\n    public static readonly BLATHERS =               new MysteryMushrooms('Futa', 'Blathers',);\n    public static readonly MABEL =                  new MysteryMushrooms('Kinuyo', 'Mabel',);\n    public static readonly KAPP_N =                 new MysteryMushrooms('Kappei', 'Kapp\\'n',);\n    public static readonly CELESTE =                new MysteryMushrooms('Fuko', 'Celeste',);\n    public static readonly KICKS =                  new MysteryMushrooms('Shunk', 'Kicks',);\n    public static readonly ISABELLE_SUMMER_OUTFIT = new MysteryMushrooms('Sizue', 'Isabelle (Summer Outfit)',);\n    public static readonly ISABELLE_WINTER_OUTFIT = new MysteryMushrooms('SizueWinter', 'Isabelle (Winter Outfit)',);\n    public static readonly DIGBY =                  new MysteryMushrooms('Kento', 'Digby',);\n    public static readonly CYRUS =                  new MysteryMushrooms('Kaizo', 'Cyrus',);\n    public static readonly REESE =                  new MysteryMushrooms('Lisa', 'Reese',);\n    public static readonly LOTTIE =                 new MysteryMushrooms('Takumi', 'Lottie',);\n\n    public static readonly CAPTAIN_OLIMAR =         new MysteryMushrooms('Orima', 'Captain Olimar',);\n    public static readonly PIKMIN =                 new MysteryMushrooms('Pikmin', 'Pikmin',);\n\n    public static readonly CHIBI_ROBO =             new MysteryMushrooms('ChibiRobo', 'Chibi-Robo',);\n\n    public static readonly WII_BALANCE_BOARD =      new MysteryMushrooms('Wiibo', 'Wii Balance Board',);\n    public static readonly WII_FIT_TRAINER =        new MysteryMushrooms('Fit', 'Wii Fit Trainer',);\n\n    public static readonly SHULK =                  new MysteryMushrooms('Shulk', 'Shulk',);\n\n    public static readonly FELYNE =                 new MysteryMushrooms('Boss009', 'Felyne',);\n\n    public static readonly YU_AYASAKI =             new MysteryMushrooms('Boss028', 'Yu Ayasaki',);\n\n    public static readonly DR_KAWASHIMA =           new MysteryMushrooms('Boss049', 'Dr. Kawashima',);\n\n    public static readonly DR_LOBE =                new MysteryMushrooms('MrHakari', 'Dr. Lobe',);\n\n    public static readonly BARBARA_THE_BAT =        new MysteryMushrooms('Boss024', 'Barbara the Bat',);\n\n    public static readonly STARFY =                 new MysteryMushrooms('Boss029', 'Starfy',);\n\n    public static readonly MALLO =                  new MysteryMushrooms('Boss039', 'Mallo',);\n\n    public static readonly NIKKI =                  new MysteryMushrooms('Nikki', 'Nikki',);\n    public static readonly IRIS_ARCHWELL =          new MysteryMushrooms('Boss038', 'Iris Archwell',);\n    public static readonly ARCADE_BUNNY =           new MysteryMushrooms('Boss011', 'Arcade bunny',);\n\n    public static readonly CHITOGE_KIRISAKI =       new MysteryMushrooms('Boss023', 'Chitoge Kirisaki',);\n\n    public static readonly INKLING_SQUID =          new MysteryMushrooms('SplaIka', 'Inkling Squid',);\n    public static readonly INKLING_BOY =            new MysteryMushrooms(['SplaBoy', 'SplaBoy W',], 'Inkling Boy',);\n    public static readonly INKLING_GIRL =           new MysteryMushrooms(['SplaGirl', 'SplaGirl W'], 'Inkling Girl',);\n    public static readonly CALLIE =                 new MysteryMushrooms(['Boss050', 'SplaAori W',], 'Callie',);\n    public static readonly MARIE =                  new MysteryMushrooms(['Boss051', 'SplaHotaru W',], 'Marie',);\n\n    public static readonly ROB =                    new MysteryMushrooms(['Robot USEU', 'Robot JP',], 'R.O.B.',);\n    public static readonly DISKUN =                 new MysteryMushrooms('Boss041', 'Diskun',);\n    public static readonly MAHJONG_TILE =           new MysteryMushrooms('MahjongTile', 'Mahjong Tile',);\n\n    public static readonly KITTY_WHITE =            new MysteryMushrooms(['Boss045', 'Boss045 L',], 'Kitty White',);\n    public static readonly MELODY =                 new MysteryMushrooms(['Boss046', 'Boss046 L',], 'Melody',);\n    public static readonly SHAUN_THE_SHEEP =        new MysteryMushrooms('Boss047', 'Shaun the Sheep',);\n\n    public static readonly ARINO_KACHO =            new MysteryMushrooms('Boss001', 'Arino KACHO',);\n    public static readonly SUPER_MARIO_KUN =        new MysteryMushrooms('Boss002', 'SUPER MARIO KUN',);\n    public static readonly NECKY =                  new MysteryMushrooms('Boss005', 'Necky',);\n    public static readonly GLA =                    new MysteryMushrooms('Boss008', 'GLA',);\n    public static readonly BABYMETAL =              new MysteryMushrooms('Boss043', 'BABYMETAL',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MysteryMushrooms;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleUniqueEnglishName, MysteryMushroom>;\n\n    #reference?: MysteryMushroom;\n    readonly #englishName;\n    readonly #englishNameOnFile;\n    #imageContainer?: PossibleImageSourceForFile<Image>;\n    #soundContainer?: Sound;\n\n    #waitingImages?:PossibleImageSourceForFile<WaitingImage>;\n    #tauntImages?:PossibleImageSourceForFile<TauntImage>\n    #pressingDownImages?:PossibleImageSourceForFile<PressingDownImage>\n    #walkImages?: PossibleImageSourceForFile<WalkImages>\n    #runningImages?: PossibleImageSourceForFile<RunningImages>\n    #swimmingImages?: PossibleImageSourceForFile<SwimmingImages>\n    #jumpImages?: PossibleImageSourceForFile<JumpImages>\n    #fallingAfterJumpImages?: PossibleImageSourceForFile<FallingAfterJumpImage>\n    #turningImages?: PossibleImageSourceForFile<TurningImage>\n    #climbingImages?:PossibleImageSourceForFile<ClimbingImages>\n    #goalPoleImages?: PossibleImageSourceForFile<GoalPoleImages>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(mysteryMushroomNoFile: null, englishName: PossibleEnglishName,)\n    public constructor(englishNameOnFile: EnglishNameOnFile, englishName: PossibleEnglishName,)\n    public constructor(englishNamesOnFile: readonly [EnglishNameOnFile, EnglishNameOnFile,], englishName: PossibleEnglishName,)\n    public constructor(englishNameOnFile: | EnglishNameOnFile | readonly [EnglishNameOnFile, EnglishNameOnFile,] | null, englishName: PossibleEnglishName,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#englishNameOnFile = englishNameOnFile == null ? EMPTY_ARRAY : typeof englishNameOnFile == 'string' ? [englishNameOnFile] as const : englishNameOnFile;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleUniqueEnglishName, MysteryMushroom> {\n        return this.#REFERENCE_MAP ??= Import.MysteryMushroomLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): MysteryMushroom {\n        return this.#reference ??= MysteryMushrooms.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    //region -------------------- Files (images / sounds) getter methods --------------------\n\n    public get englishNameOnFile(): PossibleImageSourceForFile<EnglishNameOnFile> {\n        return this.#englishNameOnFile;\n    }\n\n\n    protected _createImageContainer(file: EnglishNameOnFile,): Image {\n        return new ImageContainer(file,);\n    }\n\n    private get __imageContainers(): PossibleImageSourceForFile<Image> {\n        return this.#imageContainer ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.englishNameOnFile, fileName => this._createImageContainer(fileName!));\n    }\n\n    protected _createSoundContainer(file: EnglishNameOnFile, property: SoundProperty,): Sound {\n        return new SoundContainer(file, () => property,);\n    }\n\n    private get __soundContainer(): Sound {\n        return this.#soundContainer ??= this._createSoundContainer(this.englishNameOnFile[0]!, this.reference,);\n    }\n\n    //region -------------------- Power-up collected --------------------\n\n    public get powerUpCollectedSound(): PossibleSoundSourceForFile<PowerUpCollectedSound> {\n        return this.__soundContainer.powerUpCollectedSound;\n    }\n\n    //endregion -------------------- Power-up collected --------------------\n    //region -------------------- Waiting --------------------\n\n    public get waitingImages(): PossibleImageSourceForFile<WaitingImage> {\n        return this.#waitingImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.waitingImage);\n    }\n\n    //endregion -------------------- Waiting --------------------\n    //region -------------------- Taunt --------------------\n\n    public get tauntImages(): PossibleImageSourceForFile<TauntImage> {\n        return this.#tauntImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.tauntImage);\n    }\n\n    public get tauntSound(): PossibleSoundSourceForFile<TauntSound> {\n        return this.__soundContainer.tauntSound;\n    }\n\n    //endregion -------------------- Taunt --------------------\n    //region -------------------- Pressing ↓ --------------------\n\n    public get pressingDownImages(): PossibleImageSourceForFile<PressingDownImage> {\n        return this.#pressingDownImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.pressingDownImage);\n    }\n\n    //endregion -------------------- Pressing ↓ --------------------\n    //region -------------------- Walk --------------------\n\n    public get walkImages(): PossibleImageSourceForFile<WalkImages> {\n        return this.#walkImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.walkImages);\n    }\n\n    //endregion -------------------- Walk --------------------\n    //region -------------------- Running --------------------\n\n    public get runningImages(): PossibleImageSourceForFile<RunningImages> {\n        return this.#runningImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.runningImages);\n    }\n\n    //endregion -------------------- Running --------------------\n    //region -------------------- Swimming --------------------\n\n    public get swimmingImages(): PossibleImageSourceForFile<SwimmingImages> {\n        return this.#swimmingImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.swimmingImages);\n    }\n\n    //endregion -------------------- Swimming --------------------\n    //region -------------------- Jumping --------------------\n\n    public get jumpImages(): PossibleImageSourceForFile<JumpImages> {\n        return this.#jumpImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.jumpImages);\n    }\n\n    public get jumpSounds(): PossibleSoundSourceForFile<JumpSounds> {\n        return this.__soundContainer.jumpSounds;\n    }\n\n    public get fallingAfterJumpImages(): PossibleImageSourceForFile<FallingAfterJumpImage> {\n        return this.#fallingAfterJumpImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.fallingAfterJumpImage);\n    }\n\n    public get onGroundAfterJumpSound(): PossibleSoundSourceForFile<OnGroundAfterJumpSound> {\n        return this.__soundContainer.onGroundAfterJumpSound;\n    }\n\n    //endregion -------------------- Jumping --------------------\n    //region -------------------- Turning --------------------\n\n    public get turningImages(): PossibleImageSourceForFile<TurningImage> {\n        return this.#turningImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.turningImage);\n    }\n\n    public get turningSound(): PossibleSoundSourceForFile<TurningSound> {\n        return this.__soundContainer.turningSound;\n    }\n\n    //endregion -------------------- Turning --------------------\n    //region -------------------- Climbing --------------------\n\n    public get climbingImages(): PossibleImageSourceForFile<ClimbingImages> {\n        return this.#climbingImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.climbingImages);\n    }\n\n    //endregion -------------------- Climbing --------------------\n    //region -------------------- Goal pole --------------------\n\n    public get goalPoleImages(): PossibleImageSourceForFile<GoalPoleImages> {\n        return this.#goalPoleImages ??= MysteryMushrooms.#getFromEnglishNameOnFile(this.__imageContainers, image => image.goalPoleImages);\n    }\n\n    public get goalPoleSound(): PossibleSoundSourceForFile<GoalPoleSound> {\n        return this.__soundContainer.goalPoleSound;\n    }\n\n    //endregion -------------------- Goal pole --------------------\n    //region -------------------- Lost a life --------------------\n\n    public get lostALifeSound(): PossibleSoundSourceForFile<LostALifeSound> {\n        return this.__soundContainer.lostALifeSound;\n    }\n\n    //endregion -------------------- Lost a life --------------------\n\n    //endregion -------------------- Files (images / sounds) getter methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    static #getFromEnglishNameOnFile<T, U, >(source: PossibleImageSourceForFile<T>, callback: (t: T,) => U): PossibleImageSourceForFile<U> {\n        return source.map(callback) as unknown as PossibleImageSourceForFile<U>;\n    }\n\n    public static get everyEnglishNamesOnFile(): readonly EnglishNameOnFile[] {\n        return this.values.map(enumeration => enumeration.englishNameOnFile).flat();\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MysteryMushrooms> {\n        return MysteryMushrooms;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.englishNameOnFile.includes(value as never))\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MysteryMushrooms = MysteryMushrooms, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MysteryMushrooms\n    public static getValue(value: PossibleValue,): | MysteryMushrooms | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                                                             from '../ClassWithEnglishName';\nimport type {ClassWithImagePath}                                                                                                                                                                                                               from '../ClassWithImagePath';\nimport type {ClassWithReference}                                                                                                                                                                                                               from '../ClassWithReference';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImagePath, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './MiiCostumes.types';\nimport type {MiiCostume}                                                                                                                                                                                                                       from './MiiCostume';\nimport type {StaticReference}                                                                                                                                                                                                                  from '../../util/enum/Enum.types';\n\nimport {BASE_PATH}       from '../../variables';\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link MiiCostumeLoader}\n * @classWithDynamicImport {@link MiiCostumeLoader}\n */\nexport class MiiCostumes\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<MiiCostume>,\n        ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImagePath<PossibleImagePath> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly NONE =                         new MiiCostumes('None',                         'Headwear_Dummy_Default',);\n    public static readonly NINTENDO_SHIRT =               new MiiCostumes('Nintendo Shirt',               'Tops_Shirt_Default',);\n    public static readonly NINTENDO_UNIFORM =             new MiiCostumes('Nintendo Uniform',             'Tops_Shirt_Nintendo',);\n    public static readonly BLACK_SHORT_SHORTS =           new MiiCostumes('Black Short-Shorts',           'Bottoms_Pants_Default',);\n    public static readonly DENIM_JEAN =                   new MiiCostumes('Denim Jeans',                  'Bottoms_Pants_Jeans',);\n    public static readonly DENIM_SKIRT =                  new MiiCostumes('Denim Skirt',                  'Bottoms_SkirtS_Jeans',);\n\n\n    public static readonly MARIO_CAP =                    new MiiCostumes('Mario Cap',                    'Headwear_Mario_Mario',);\n    public static readonly MARIO_OUTFIT =                 new MiiCostumes('Mario Outfit',                 'All_Mario_Mario',);\n    public static readonly MARIO_SWIM_TRUNKS =            new MiiCostumes('Mario Swim Trunks',            'Bottoms_Shorts_Dot',);\n    public static readonly FROG_MARIO_RAINCOAT =          new MiiCostumes('Frog Mario Raincoat',          'All_Frog',);\n    public static readonly ONE_UP_HOODIE =                new MiiCostumes('1-Up Hoodie',                  'Tops_OneUp_Normal',);\n    public static readonly PROPELLER_MARIO_HELMET =       new MiiCostumes('Propeller Mario Helmet',       'Headwear_PropellerMario_Normal',);\n    public static readonly PROPELLER_MARIO_CLOTHES =      new MiiCostumes('Propeller Mario Clothes',      'All_PropellerMario_Normal',);\n    public static readonly SUPER_ACORN_HAT =              new MiiCostumes('Super Acorn Hat',              'Headwear_Donguri_Normal',);\n    public static readonly CAT_MARIO_HEADGEAR =           new MiiCostumes('Cat Mario Headgear',           'Headwear_ClimbMario_Normal',);\n    public static readonly CAT_MARIO_SUIT =               new MiiCostumes('Cat Mario Suit',               'All_ClimbMario_Normal',);\n    public static readonly SUPERBALL_MARIO_HAT =          new MiiCostumes('Superball Mario Hat',          'Headwear_SuperBall_Normal',);\n    public static readonly SUPERBALL_MARIO_SUIT =         new MiiCostumes('Superball Mario Suit',         'All_SuperBall_Normal',);\n    public static readonly BUILDER_HARD_HAT =             new MiiCostumes('Builder Hard Hat',             'Headwear_BuilderMario_Normal',);\n    public static readonly BUILDER_MARIO_OUTFIT =         new MiiCostumes('Builder Mario Outfit',         'All_BuilderMario_Normal',);\n    public static readonly DOCTOR_HEADGEAR =              new MiiCostumes('Doctor Headgear',              'Headwear_DrMario_Normal',);\n    public static readonly DOCTOR_COAT =                  new MiiCostumes('Doctor Coat',                  'All_DrMario_Normal',);\n\n    public static readonly LUIGI_CAP =                    new MiiCostumes('Luigi Cap',                    'Headwear_Luigi_Normal',);\n    public static readonly LUIGI_OUTFIT =                 new MiiCostumes('Luigi Outfit',                 'All_Mario_Luigi',);\n\n    public static readonly PRINCESS_PEACH_WIG =           new MiiCostumes('Princess Peach Wig',           'Headwear_Peach_Normal',);\n    public static readonly PRINCESS_PEACH_DRESS =         new MiiCostumes('Princess Peach Dress',         'All_Peach_Normal',);\n    public static readonly PRINCESS_PEACH_TENNIS_OUTFIT = new MiiCostumes('Princess Peach Tennis Outfit', 'All_PeachTennis_Normal',);\n\n    public static readonly ROSALINA_WIG =                 new MiiCostumes('Rosalina Wig',                 'Headwear_Rosetta_Normal',);\n    public static readonly ROSALINA_DRESS =               new MiiCostumes('Rosalina Dress',               'All_Rosetta_Normal',);\n\n    public static readonly TOAD_CAP =                     new MiiCostumes('Toad Cap',                     'Headwear_Kinopio_Normal',);\n    public static readonly TOAD_OUTFIT =                  new MiiCostumes('Toad Outfit',                  'All_Kinopio_Normal',);\n\n    public static readonly YOSHI_HAT =                    new MiiCostumes('Yoshi Hat',                    'Headwear_Yoshi_Normal',);\n    public static readonly YOSHI_SUIT =                   new MiiCostumes('Yoshi Suit',                   'All_Yoshi_Normal',);\n\n    public static readonly BOWSER_HEADPIECE =             new MiiCostumes('Bowser Headpiece',             'Headwear_Koopa_Normal',);\n    public static readonly BOWSER_SUIT =                  new MiiCostumes('Bowser Suit',                  'All_Koopa_Normal',);\n    public static readonly BOWSER_JR_HEADPIECE =          new MiiCostumes('Bowser Jr. Headpiece',         'Headwear_KoopaJr_Normal',);\n    public static readonly SLOBBERY_SHIRT =               new MiiCostumes('Slobbery Shirt',               'Tops_KoopaJrScarf_Normal',);\n    public static readonly HOVER_CLOWN =                  new MiiCostumes('Hoverclown',                   'Bottoms_KoopaClown_Normal',);\n    public static readonly KOOPALING_HAWAIIAN_SHIRT =     new MiiCostumes('Koopaling Hawaiian Shirt',     'Tops_Boss',);\n    public static readonly MAGIKOOPA_HAT =                new MiiCostumes('Magikoopa Hat',                'Headwear_Kameck_Normal',);\n    public static readonly MAGIKOOPA_ROBES =              new MiiCostumes('Magikoopa Robes',              'All_Kameck_Normal',);\n\n    public static readonly CHEEP_CHEEP_HAT =              new MiiCostumes('Cheep Cheep Hat',              'Headwear_Pukupuku_Normal',);\n    public static readonly FACEPLANT =                    new MiiCostumes('Faceplant',                    'Headwear_Packun_Normal',);\n    public static readonly SHY_CAP =                      new MiiCostumes('Shy Cap',                      'Headwear_Teresa_Normal',);\n    public static readonly ROCKY_WRENCH_MANHOLE_LID =     new MiiCostumes('Rocky Wrench Manhole Lid',     'Headwear_Poo_Normal',);\n    public static readonly POKEY_HAT =                    new MiiCostumes('Pokey Hat',                    'Headwear_Sambo_Normal',);\n    public static readonly SNOW_POKEY_HAT =               new MiiCostumes('Snow Pokey Hat',               'Headwear_SamboSnow_Normal',);\n    public static readonly FIREWORKS_SHIRT =              new MiiCostumes('Fireworks Shirt',              'Tops_Shirt_Hanabi',);\n    public static readonly BANZAI_BILL_SHIRT =            new MiiCostumes('Banzai Bill Shirt',            'Tops_Shirt_Killer',);\n    public static readonly STAREDOWN_SHIRT =              new MiiCostumes('Staredown Shirt',              'Tops_Shirt_Gesso',);\n    public static readonly PARENT_AND_CHILD_SKIRT =       new MiiCostumes('Parent-and-Child Skirt',       'Bottoms_SkirtGesso_Normal',);\n    public static readonly CHOMP_DOG_SHIRT =              new MiiCostumes('Chomp-Dog Shirt',              'Tops_AnimShirt_Wanwan',);\n    public static readonly FISH_BONE_SHIRT =              new MiiCostumes('Fish Bone Shirt',              'Tops_Fishbone_Normal',);\n    public static readonly ANGRY_SUN_SHIRT =              new MiiCostumes('Angry Sun Shirt',              'Tops_Aloha_Sun',);\n    public static readonly HOT_HOT_SHIRT =                new MiiCostumes('Hot Hot Shirt',                'Tops_Firebar_Normal',);\n    public static readonly RUNNING_SHIRT =                new MiiCostumes('Running Shirt',                'Tops_Pyonchu_Normal',);\n    public static readonly PHANTO_HOODIE =                new MiiCostumes('Phanto Hoodie',                'Tops_Phanto',);\n    public static readonly SKULL_SKIRT =                  new MiiCostumes('Skull Skirt',                  'Bottoms_SkirtKillerHoudai_Normal',);\n    public static readonly BURNER_SKIRT =                 new MiiCostumes('Burner Skirt',                 'Bottoms_SkirtBurner_Normal',);\n    public static readonly WIND_UP_SHOE =                 new MiiCostumes('Wind-Up Shoe',                 'Bottoms_Kutsu_Normal',);\n    public static readonly STINGBY_SKIRT =                new MiiCostumes('Stingby Skirt',                'Bottoms_Hacchin_Normal',);\n    public static readonly THWOMP_SUIT =                  new MiiCostumes('Thwomp Suit',                  'All_Dossun_Normal',);\n    public static readonly GOOGOO_ONESIE =                new MiiCostumes('Googoo Onesie',                'All_Rompers_Normal',);\n    public static readonly KOOPA_TROOPA_SUIT =            new MiiCostumes('Koopa Troopa Suit',            'All_Nokonoko_Normal',);\n\n\n    public static readonly MUSHROOM_HAIRCLIP =            new MiiCostumes('Mushroom Hairclip',            'Headwear_KinokoMini_Red',);\n    public static readonly SUPER_MUSHROOM_SHIRT =         new MiiCostumes('Super Mushroom Shirt',         'Tops_Shirt_Kinoko',);\n    public static readonly SUPER_STAR_BARRETTE =          new MiiCostumes('Super Star Barrette',          'Headwear_Star_Normal',);\n    public static readonly SUPER_STAR_FLARES =            new MiiCostumes('Super Star Flares',            'Bottoms_WidePants_Star',);\n    public static readonly PIPE_HAT =                     new MiiCostumes('Pipe Hat',                     'Headwear_Dokan_Normal',);\n    public static readonly PIPE_SKIRT =                   new MiiCostumes('Pipe Skirt',                   'Bottoms_SkirtDokan_Normal',);\n    public static readonly PLATFORM_SKIRT =               new MiiCostumes('Platform Skirt',               'Bottoms_SkirtL_Wrap',);\n    public static readonly DOORDUROYS =                   new MiiCostumes('Doorduroys',                   'Bottoms_Pants_Door',);\n    public static readonly ANTSY_CORDUROYS =              new MiiCostumes('Antsy Corduroys',              'Bottoms_Pants_Arrow',);\n    public static readonly CLOUDWALKER =                  new MiiCostumes('Cloudwalker',                  'Bottoms_Jugemu_Normal',);\n    public static readonly BOUNCY_SKIRT =                 new MiiCostumes('Bouncy Skirt',                 'Bottoms_SkirtM_Marumaru',);\n    public static readonly SHORT_OF_DOOM =                new MiiCostumes('Shorts of Doom!',              'Bottoms_Shorts_Lift',);\n    public static readonly DASH_BLOCK_HOODIE =            new MiiCostumes('Dash Block Hoodie',            'Tops_BlockDash_Normal',);\n    public static readonly BIG_SPENDER_SHORTS =           new MiiCostumes('Big-Spender Shorts',           'Bottoms_Shorts_Coin',);\n    public static readonly QUESTION_MARK_BLOCK_HOODIE =   new MiiCostumes('? Block Hoodie',               'Tops_Hatena_Normal',);\n    public static readonly BLOCKSTRIPE_SHIRT =            new MiiCostumes('Blockstripe Shirt',            'Tops_Shirt_Border',);\n\n    public static readonly FRIED_CHICKEN_HEADGEAR =       new MiiCostumes('Fried-Chicken Headgear',       'Headwear_Karaage_Normal',);\n    public static readonly FRIED_CHICKEN_HOODIE =         new MiiCostumes('Fried-Chicken Hoodie',         'Tops_Karaage_Normal',);\n    public static readonly EDAMAME_BARRETTE =             new MiiCostumes('Edamame Barrette',             'Headwear_Edamame_Normal',);\n    public static readonly EDAMAME_CAMISOLE =             new MiiCostumes('Edamame Camisole',             'Tops_Camisole_Edamame',);\n    public static readonly I_LIKE_YOU_CAMISOLE =          new MiiCostumes('I-Like-You Camisole',          'Tops_Camisole_Nice',);\n    public static readonly WHITE_TANKTOP =                new MiiCostumes('White Tanktop',                'Tops_NokoTanktop_Normal',);\n    public static readonly LAUGHING_SHIRT =               new MiiCostumes('Laughing Shirt',               'Tops_Shirt_Warai',);\n    public static readonly MIDNIGHT_DRESS =               new MiiCostumes('Midnight Dress',               'All_OnePiece_Normal',);\n\n    public static readonly ROYAL_CROWN =                  new MiiCostumes('Royal Crown',                  'Headwear_King_Normal',);\n    public static readonly ROYAL_ATTIRE =                 new MiiCostumes('Royal Attire',                 'All_King_Normal',);\n    public static readonly FANCY_TOP_HAT =                new MiiCostumes('Fancy Top Hat',                'Headwear_Tuxedo_Normal',);\n    public static readonly FANCY_TUXEDO =                 new MiiCostumes('Fancy Tuxedo',                 'All_Tuxedo_Normal',);\n    public static readonly MATRIMONY_DRESS =              new MiiCostumes('Matrimony Dress',              'All_WhiteDress_Normal',);\n    public static readonly SUPERB_SUIT =                  new MiiCostumes('Superb Suit',                  'All_Splus_Normal',);\n\n    public static readonly ROBOT_CAP =                    new MiiCostumes('Robot Cap',                    'Headwear_Robot_Normal',);\n    public static readonly ROBOT_SUIT =                   new MiiCostumes('Robot Suit',                   'All_Robot_Normal',);\n    public static readonly FROG_CAP =                     new MiiCostumes('Frog Cap',                     'Headwear_Otogaeru_Normal',);\n    public static readonly REFRESHING_SHIRT =             new MiiCostumes('Refreshing Shirt',             'Tops_Shirt_Keshigom',);\n    public static readonly PARTRICK_SHIRT =               new MiiCostumes('Partrick Shirt',               'Tops_Partskun_Normal',);\n    public static readonly YAMAMURA_SHIRT =               new MiiCostumes('Yamamura Shirt',               'Tops_Nosleeve_Yamamura',);\n    public static readonly RESET_DRESS =                  new MiiCostumes('Reset Dress',                  'All_Rocket_Normal',);\n\n    public static readonly NINJI_CAP =                    new MiiCostumes('Ninji Cap',                    'Headwear_Hakkun_Normal',);\n    public static readonly NINJI_SHIRT =                  new MiiCostumes('Ninji Shirt',                  'Tops_Hakkun',);\n    public static readonly NINJI_SLACKS =                 new MiiCostumes('Ninji Slacks',                 'Bottoms_Hakkun',);\n    public static readonly NINJI_GARB =                   new MiiCostumes('Ninji Garb',                   'All_Hakkun',);\n    public static readonly CHEETAH_HEADGEAR =             new MiiCostumes('Cheetah Headgear',             'Headwear_Cheetah_Normal',);\n    public static readonly CHEETAH_TANKTOP =              new MiiCostumes('Cheetah Tanktop',              'Tops_CheetahTanktop_Normal',);\n    public static readonly CHEETAH_RUNNERS =              new MiiCostumes('Cheetah Runners',              'Bottoms_Cheetah',);\n    public static readonly CHEETAH_SUIT =                 new MiiCostumes('Cheetah Suit',                 'All_Cheetah',);\n\n    public static readonly FIRE_MARIO_SHIRT =             new MiiCostumes('Fire Mario Shirt',             'Tops_SkinM1',);\n    public static readonly RACOON_MARIO_SHIRT =           new MiiCostumes('Racoon Mario Shirt',           'Tops_SkinM3',);\n    public static readonly CAPE_MARIO_SHIRT =             new MiiCostumes('Cape Mario Shirt',             'Tops_SkinMW',);\n    public static readonly FLYING_SQUIRREL_MARIO_SHIRT =  new MiiCostumes('Flying Squirrel Mario Shirt',  'Tops_SkinMU',);\n    public static readonly CAT_MARIO_SHIRT =              new MiiCostumes('Cat Mario Shirt',              'Tops_Skin3W',);\n\n    public static readonly WORLD_WEAR =                   new MiiCostumes('World Wear',                   'All_MapWorld',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MiiCostumes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, MiiCostume>;\n\n    #reference?: MiiCostume;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n    readonly #imageName: PossibleImageName;\n    readonly #imagePath: PossibleImagePath;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageName: PossibleImageName,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n        this.#imageName = imageName;\n        this.#imagePath = `/${BASE_PATH}/Mii costume/${imageName}.tiff`;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, MiiCostume> {\n        return this.#REFERENCE_MAP ??= Import.MiiCostumeLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): MiiCostume {\n        return this.#reference ??= MiiCostumes.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    public get imageName(): PossibleImageName {\n        return this.#imageName;\n    }\n\n    public get imagePath(): PossibleImagePath {\n        return this.#imagePath;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MiiCostumes> {\n        return MiiCostumes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value\n                || enumerable.imageName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MiiCostumes = MiiCostumes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MiiCostumes\n    public static getValue(value: PossibleValue,): | MiiCostumes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                       from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                         from '../ClassWithReference';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './CourseTags.types';\nimport type {CourseTag}                                                                                                                                                                                  from './CourseTag';\nimport type {StaticReference}                                                                                                                                                                            from '../../util/enum/Enum.types';\n\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link CourseTagLoader}\n * @classWithDynamicImport {@link CourseTagLoader}\n */\nexport class CourseTags\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<CourseTag>,\n        ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly NONE =               new CourseTags('None',);\n    public static readonly STANDARD =           new CourseTags('Standard',);\n    public static readonly PUZZLE_SOLVING =     new CourseTags('Puzzle-solving',);\n    public static readonly SPEEDRUN =           new CourseTags('Speedrun',);\n\n    public static readonly AUTOSCROLL =         new CourseTags('Autoscroll',);\n    public static readonly AUTO_MARIO =         new CourseTags('Auto-Mario',);\n\n    public static readonly ONE_SCREEN =         new CourseTags('One screen',);\n    public static readonly SHORT_AND_SWEET =    new CourseTags('Short and sweet',);\n    public static readonly PRECISION =          new CourseTags('Precision',);\n    public static readonly SHOOTER =            new CourseTags('Shooter',);\n\n    public static readonly SINGLE_PLAYER =      new CourseTags('Single player',);\n    public static readonly MULTIPLAYER_VERSUS = new CourseTags('Multiplayer Versus',);\n    public static readonly MULTIPLAYER_COOP =   new CourseTags('Multiplayer Co-op',);\n\n    public static readonly THEMED =             new CourseTags('Themed',);\n    public static readonly MUSIC =              new CourseTags('Music',);\n    public static readonly ART =                new CourseTags('Art',);\n    public static readonly SHOWCASE =           new CourseTags('Showcase',);\n    public static readonly STORY =              new CourseTags('Story',);\n    public static readonly EXPLORATION =        new CourseTags('Exploration',);\n    public static readonly TECHNICAL =          new CourseTags('Technical',);\n\n    public static readonly BOSS_BATTLE =        new CourseTags('Boss battle',);\n    public static readonly LINK =               new CourseTags('Link',);\n\n    public static readonly GLITCH =             new CourseTags('Glitch',);\n    public static readonly TROLL =              new CourseTags('Troll',);\n    public static readonly KAIZO =              new CourseTags('Kaizo',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: CourseTags;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, CourseTag>;\n\n    #reference?: CourseTag;\n    readonly #englishNameContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName,) {\n        super();\n        this.#englishNameContainer = new StringContainer(englishName);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP() {\n        return this.#REFERENCE_MAP ??= Import.CourseTagLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): CourseTag {\n        return this.#reference ??= CourseTags.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishNameContainer.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishNameContainer.getInHtml;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishName(): readonly PossibleEnglishName[] {\n        return this.values.map(limit => limit.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<CourseTags> {\n        return CourseTags;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends CourseTags = CourseTags, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): CourseTags\n    public static getValue(value: PossibleValue,): | CourseTags | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithEnglishName}                                                                                                                                                                       from '../ClassWithEnglishName';\nimport type {ClassWithReference}                                                                                                                                                                         from '../ClassWithReference';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleEnglishName, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './PredefinedMessages.types';\nimport type {PredefinedMessage}                                                                                                                                                                          from './PredefinedMessage';\nimport type {StaticReference}                                                                                                                                                                            from '../../util/enum/Enum.types';\n\nimport {Enum}            from '../../util/enum/Enum';\nimport {Import}          from '../../util/DynamicImporter';\nimport {StringContainer} from '../../util/StringContainer';\n\n/**\n * @recursiveReference {@link PredefinedMessageLoader}\n * @classWithDynamicImport {@link PredefinedMessageLoader}\n */\nexport class PredefinedMessages\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<PredefinedMessage>,\n        ClassWithEnglishName<PossibleEnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly THANKS =         new PredefinedMessages('Thanks!',);\n    public static readonly HERE_WE_GO =     new PredefinedMessages('Here we go!',);\n    public static readonly NICE_WORK =      new PredefinedMessages('Nice work.',);\n    public static readonly IM_DONE_FOR =    new PredefinedMessages('I\\'m done for...',);\n    public static readonly SORRY =          new PredefinedMessages('Sorry!',);\n    public static readonly NO_WORRIES =     new PredefinedMessages('No worries!',);\n    public static readonly NICE =           new PredefinedMessages('Nice!',);\n    public static readonly HOW =            new PredefinedMessages('How?!',);\n    public static readonly GOTCHA =         new PredefinedMessages('Gotcha.',);\n    public static readonly SO_TOUGH =       new PredefinedMessages('So tough!',);\n    public static readonly OOPS =           new PredefinedMessages('OOPS!',);\n    public static readonly WAHOO =          new PredefinedMessages('WAHOO!',);\n    public static readonly OH_NO =          new PredefinedMessages('Oh no...',);\n    public static readonly WE_VE_GOT_THIS = new PredefinedMessages('We\\'ve got this.',);\n    public static readonly TEAMWORK =       new PredefinedMessages('Teamwork!',);\n    public static readonly FOLLOW_ME =      new PredefinedMessages('Follow me.',);\n    public static readonly HELP =           new PredefinedMessages('HELP!',);\n    public static readonly RUN_FOR_IT =     new PredefinedMessages('Run for it!',);\n    public static readonly JUUUUUMP =       new PredefinedMessages('Juuuuump!',);\n    public static readonly HOP_ON =         new PredefinedMessages('Hop on!',);\n    public static readonly THROW =          new PredefinedMessages('Throw!',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: PredefinedMessages;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, PredefinedMessage>;\n\n    #reference?: PredefinedMessage;\n    readonly #englishName: StringContainer<PossibleEnglishName>;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: PossibleEnglishName,) {\n        super();\n        this.#englishName = new StringContainer(englishName);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, PredefinedMessage> {\n        return this.#REFERENCE_MAP ??= Import.PredefinedMessageLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): PredefinedMessage {\n        return this.#reference ??= PredefinedMessages.REFERENCE_MAP.get(this.englishName)!;\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get;\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyEnglishNames(): readonly PossibleEnglishName[] {\n        return this.values.map(enumerable => enumerable.englishName);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<PredefinedMessages> {\n        return PredefinedMessages;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends PredefinedMessages = PredefinedMessages, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): PredefinedMessages\n    public static getValue(value: PossibleValue,): | PredefinedMessages | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {ClassWithAcronym}                                                                                                                                                                                                from '../ClassWithAcronym';\nimport type {ClassWithReference}                                                                                                                                                                                              from '../ClassWithReference';\nimport type {ClassWithTranslationKey}                                                                                                                                                                                         from '../../lang/ClassWithTranslationKey';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleAcronym, PossibleNonNullableValue, PossibleStringValue, PossibleTranslationKeys, PossibleValue} from './EntityBehaviours.types';\nimport type {EntityBehaviour}                                                                                                                                                                                                 from './EntityBehaviour';\nimport type {StaticReference}                                                                                                                                                                                                 from '../../util/enum/Enum.types';\n\nimport {Enum}   from '../../util/enum/Enum';\nimport {Import} from '../../util/DynamicImporter';\n\n/**\n * @recursiveReference {@link EntityBehaviourLoader}\n * @classWithDynamicImport {@link EntityBehaviourLoader}\n */\nexport class EntityBehaviours\n    extends Enum<Ordinals, Names>\n    implements ClassWithReference<EntityBehaviour>,\n        ClassWithTranslationKey<PossibleTranslationKeys>,\n        ClassWithAcronym<PossibleAcronym> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly RESPAWN_WITH_VINE =                             new EntityBehaviours('RV',    'Respawn with Vine',);\n    public static readonly RESPAWN_AS_QUESTION_MARK_BLOCK =                new EntityBehaviours('RB',    'Respawn as ? Block',);\n    public static readonly ALWAYS_KNOW_VISUALLY_AMOUNT_OF_COIN =           new EntityBehaviours('AC',    'Always know visually # of Coin',);\n    public static readonly NEVER_KNOW_VISUALLY_AMOUNT_OF_COIN =            new EntityBehaviours('NC',    'Never know visually # of Coin',);\n    public static readonly ONLY_1ST_SOUND_OF_PINK_COIN =                   new EntityBehaviours('O1S',   'Only 1st sound of Pink Coin',);\n\n    public static readonly SPAWN_ONLY_1_POWER_UP =                         new EntityBehaviours('S1P',   'Spawn only 1 power-up',);\n    public static readonly SPAWN_1_TO_4_POWER_UPS_FROM_AMOUNT_OF_PLAYERS = new EntityBehaviours('S1-4P', 'Spawn (1-4) power-up(s) from # of players',);\n    public static readonly EXPELLED_POWER_UP_FROM_BLOCK =                  new EntityBehaviours('EPB',   'Expelled power-up from Block',);\n    public static readonly ALWAYS_FINAL_POWER_UP =                         new EntityBehaviours('AFP',   'Always final power-up',);\n\n    public static readonly RESPAWN_AFTER_10_SEC =                          new EntityBehaviours('R10',   'Respawn after 10 sec.',);\n    public static readonly CAN_RESPAWN_AT_CP =                             new EntityBehaviours('CRCP',  'Can respawn at CP',);\n    public static readonly RESPAWN_IN_BLOCK_IF_PLAYER_DIE =                new EntityBehaviours('RBD',   'Respawn in Block (if player die)',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityBehaviours;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleTranslationKeys, EntityBehaviour>;\n\n    #reference?: EntityBehaviour;\n    readonly #acronym;\n    readonly #translationKey;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(acronym: PossibleAcronym, translationKey: PossibleTranslationKeys,) {\n        super();\n        this.#acronym = acronym;\n        this.#translationKey = translationKey;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP() {\n        return this.#REFERENCE_MAP ??= Import.EntityBehaviourLoader.get.load();\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): EntityBehaviour {\n        return this.#reference ??= EntityBehaviours.REFERENCE_MAP.get(this.translationKey)!;\n    }\n\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#translationKey;\n    }\n\n    public get acronym(): PossibleAcronym {\n        return this.#acronym;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static get everyAcronyms(): readonly PossibleAcronym[] {\n        return this.values.map(limit => limit.acronym);\n    }\n\n    public static get everyTranslationKeys(): readonly PossibleTranslationKeys[] {\n        return this.values.map(limit => limit.translationKey);\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityBehaviours> {\n        return EntityBehaviours;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.acronym === value\n                || enumerable.translationKey === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityBehaviours = EntityBehaviours, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityBehaviours\n    public static getValue(value: PossibleValue,): | EntityBehaviours | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {Entity, PossibleOtherEntities} from './Entity';\nimport type {EntityCategory}                from '../entityCategory/EntityCategory';\nimport type {EntityReferences}              from './properties/EntityReferences';\nimport type {GameStyles}                    from '../gameStyle/GameStyles';\nimport type {Name}                          from '../../lang/name/Name';\nimport type {Property}                      from './properties/Property';\nimport type {Themes}                        from '../theme/Themes';\nimport type {Times}                         from '../time/Times';\n\nimport {ClassContainingANameAndACategory} from '../../lang/name/ClassContainingANameAndACategory';\nimport {isInProduction}                   from '../../variables';\n\n/**\n * A simple entity implementation, but without any specification.\n *\n * @note It use the generic to have a type based on the property used for each methods in {@link Property}.\n *\n * @property CATEGORY the {@link EntityCategory entity category} instance\n * @property PROPERTY the {@link Property property} specific to the current instance\n */\nexport abstract class AbstractEntity<CATEGORY extends EntityCategory = EntityCategory, PROPERTY extends Property = Property, >\n    extends ClassContainingANameAndACategory<string, string, CATEGORY>\n    implements Entity<CATEGORY, PROPERTY> {\n\n    //region -------------------- Fields --------------------\n\n    protected static readonly NOT_APPLICABLE = 'N/A';\n\n    readonly #propertyContainer;\n    readonly #referencesContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category as CATEGORY,);\n        this.#testCategory(this.categoryContainer);\n        this.#propertyContainer = this.#testProperty(property);\n        this.#referencesContainer = references;\n    }\n\n    //region -------------------- Tester methods --------------------\n\n    #testCategory(category: EntityCategory,): CATEGORY\n    #testCategory(category: EntityCategory,) {\n        return isInProduction\n            ? category\n            : this._testCategory(category);\n    }\n\n    /**\n     * Test the category during development or in test.\n     *\n     * @param category the category\n     * @onlyCalledDuringConstruction\n     * @onlyCalledOnDevelopment\n     * @onlyCalledOnTest\n     */\n    protected _testCategory(category: EntityCategory,): EntityCategory {\n        return category;\n    }\n\n    #testProperty(property: Property,): PROPERTY\n    #testProperty(property: Property,) {\n        return isInProduction\n            ? property\n            : this._testProperty(property);\n    }\n\n    /**\n     * Test the property in development or in test.\n     *\n     * @param property the property\n     * @onlyCalledDuringConstruction\n     * @onlyCalledOnDevelopment\n     * @onlyCalledOnTest\n     */\n    protected _testProperty(property: Property,): Property {\n        return property;\n    }\n\n    //endregion -------------------- Tester methods --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Properties --------------------\n\n    public get propertyContainer(): PROPERTY {\n        return this.#propertyContainer;\n    }\n\n    //region -------------------- Game properties --------------------\n\n    public get gameContainer(): this['propertyContainer']['gameContainer'] {\n        return this.propertyContainer.gameContainer;\n    }\n\n    public get isInSuperMarioMaker1(): this['gameContainer']['isInSuperMarioMaker1'] {\n        return this.gameContainer.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS(): this['gameContainer']['isInSuperMarioMakerFor3DS'] {\n        return this.gameContainer.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2(): this['gameContainer']['isInSuperMarioMaker2'] {\n        return this.gameContainer.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Game style properties --------------------\n\n    public get gameStyleContainer(): this['propertyContainer']['gameStyleContainer'] {\n        return this.propertyContainer.gameStyleContainer;\n    }\n\n    public get isInSuperMarioBrosStyle(): this['gameStyleContainer']['isInSuperMarioBrosStyle'] {\n        return this.gameStyleContainer.isInSuperMarioBrosStyle;\n    }\n\n    public get isInSuperMarioBros3Style(): this['gameStyleContainer']['isInSuperMarioBros3Style'] {\n        return this.gameStyleContainer.isInSuperMarioBros3Style;\n    }\n\n    public get isInSuperMarioWorldStyle(): this['gameStyleContainer']['isInSuperMarioWorldStyle'] {\n        return this.gameStyleContainer.isInSuperMarioWorldStyle;\n    }\n\n    public get isInNewSuperMarioBrosUStyle(): this['gameStyleContainer']['isInNewSuperMarioBrosUStyle'] {\n        return this.gameStyleContainer.isInNewSuperMarioBrosUStyle;\n    }\n\n    public get isInSuperMario3DWorldStyle(): this['gameStyleContainer']['isInSuperMario3DWorldStyle'] {\n        return this.gameStyleContainer.isInSuperMario3DWorldStyle;\n    }\n\n    //endregion -------------------- Game style properties --------------------\n    //region -------------------- Theme properties --------------------\n\n    public get themeContainer(): this['propertyContainer']['themeContainer'] {\n        return this.propertyContainer.themeContainer;\n    }\n\n    public get isInGroundTheme(): this['themeContainer']['isInGroundTheme'] {\n        return this.themeContainer.isInGroundTheme;\n    }\n\n    public get isInUndergroundTheme(): this['themeContainer']['isInUndergroundTheme'] {\n        return this.themeContainer.isInUndergroundTheme;\n    }\n\n    public get isInUnderwaterTheme(): this['themeContainer']['isInUnderwaterTheme'] {\n        return this.themeContainer.isInUnderwaterTheme;\n    }\n\n    public get isInDesertTheme(): this['themeContainer']['isInDesertTheme'] {\n        return this.themeContainer.isInDesertTheme;\n    }\n\n    public get isInSnowTheme(): this['themeContainer']['isInSnowTheme'] {\n        return this.themeContainer.isInSnowTheme;\n    }\n\n    public get isInSkyTheme(): this['themeContainer']['isInSkyTheme'] {\n        return this.themeContainer.isInSkyTheme;\n    }\n\n    public get isInForestTheme(): this['themeContainer']['isInForestTheme'] {\n        return this.themeContainer.isInForestTheme;\n    }\n\n    public get isInGhostHouseTheme(): this['themeContainer']['isInGhostHouseTheme'] {\n        return this.themeContainer.isInGhostHouseTheme;\n    }\n\n    public get isInAirshipTheme(): this['themeContainer']['isInAirshipTheme'] {\n        return this.themeContainer.isInAirshipTheme;\n    }\n\n    public get isInCastleTheme(): this['themeContainer']['isInCastleTheme'] {\n        return this.themeContainer.isInCastleTheme;\n    }\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Time properties --------------------\n\n    public get timeContainer(): this['propertyContainer']['timeContainer'] {\n        return this.propertyContainer.timeContainer;\n    }\n\n    public get isInDayTheme(): this['timeContainer']['isInDayTheme'] {\n        return this.timeContainer.isInDayTheme;\n    }\n\n    public get isInNightTheme(): this['timeContainer']['isInNightTheme'] {\n        return this.timeContainer.isInNightTheme;\n    }\n\n    //endregion -------------------- Time properties --------------------\n    //region -------------------- Limit properties --------------------\n\n    public get limitContainer(): this['propertyContainer']['limitContainer'] {\n        return this.propertyContainer.limitContainer;\n    }\n\n    //region -------------------- Editor limit --------------------\n\n    public get editorLimitContainer(): this['limitContainer']['editorLimitContainer'] {\n        return this.limitContainer.editorLimitContainer;\n    }\n\n    public get editorLimit_smm1And3ds(): this['limitContainer']['editorLimit_smm1And3ds'] {\n        return this.limitContainer.editorLimit_smm1And3ds;\n    }\n\n    public get editorLimit_smm2(): this['limitContainer']['editorLimit_smm2'] {\n        return this.limitContainer.editorLimit_smm2;\n    }\n\n    public get isUnknown_editorLimit_smm2(): this['limitContainer']['isUnknown_editorLimit_smm2'] {\n        return this.limitContainer.isUnknown_editorLimit_smm2;\n    }\n\n    //endregion -------------------- Editor limit --------------------\n    //region -------------------- General limit --------------------\n\n    public get isInGeneralLimitWhilePlayingContainer(): this['limitContainer']['isInGeneralLimitWhilePlayingContainer'] {\n        return this.limitContainer.isInGeneralLimitWhilePlayingContainer;\n    }\n\n    public get isInGeneralLimitWhilePlaying(): this['limitContainer']['isInGeneralLimitWhilePlaying'] {\n        return this.limitContainer.isInGeneralLimitWhilePlaying;\n    }\n\n    public get isInGeneralLimitWhilePlayingComment(): this['limitContainer']['isInGeneralLimitWhilePlayingComment'] {\n        return this.limitContainer.isInGeneralLimitWhilePlayingComment;\n    }\n\n    //region -------------------- Global general limit --------------------\n\n    public get isInGlobalGeneralLimitWhilePlayingContainer(): this['limitContainer']['isInGlobalGeneralLimitWhilePlayingContainer'] {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlayingContainer;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlaying(): this['limitContainer']['isInGlobalGeneralLimitWhilePlaying'] {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlaying;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlayingComment(): this['limitContainer']['isInGlobalGeneralLimitWhilePlayingComment'] {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Global general limit --------------------\n\n    //endregion -------------------- General limit --------------------\n    //region -------------------- Power-up limit --------------------\n\n    public get isInPowerUpLimitWhilePlayingContainer(): this['limitContainer']['isInPowerUpLimitWhilePlayingContainer'] {\n        return this.limitContainer.isInPowerUpLimitWhilePlayingContainer;\n    }\n\n    public get isInPowerUpLimitWhilePlaying(): this['limitContainer']['isInPowerUpLimitWhilePlaying'] {\n        return this.limitContainer.isInPowerUpLimitWhilePlaying;\n    }\n\n    //endregion -------------------- Power-up limit --------------------\n    //region -------------------- Projectile limit --------------------\n\n    public get isInProjectileLimitWhilePlayingContainer(): this['limitContainer']['isInProjectileLimitWhilePlayingContainer'] {\n        return this.limitContainer.isInProjectileLimitWhilePlayingContainer;\n    }\n\n    public get isInProjectileLimitWhilePlaying(): this['limitContainer']['isInProjectileLimitWhilePlaying'] {\n        return this.limitContainer.isInProjectileLimitWhilePlaying;\n    }\n\n    public get isInProjectileLimitWhilePlayingComment(): this['limitContainer']['isInProjectileLimitWhilePlayingComment'] {\n        return this.limitContainer.isInProjectileLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Projectile limit --------------------\n    //region -------------------- Custom limit --------------------\n\n    public get otherLimitWhilePlayingContainer(): this['limitContainer']['otherLimitWhilePlayingContainer'] {\n        return this.limitContainer.otherLimitWhilePlayingContainer;\n    }\n\n    public get otherLimitWhilePlaying(): this['limitContainer']['otherLimitWhilePlaying'] {\n        return this.limitContainer.otherLimitWhilePlaying;\n    }\n\n    public get otherLimitWhilePlayingComment(): this['limitContainer']['otherLimitWhilePlayingComment'] {\n        return this.limitContainer.otherLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Custom limit --------------------\n\n    //endregion -------------------- Limit properties --------------------\n    //region -------------------- Instrument properties --------------------\n\n    public get instrumentContainer(): this['propertyContainer']['instrumentContainer'] {\n        return this.propertyContainer.instrumentContainer;\n    }\n\n\n    public get instruments(): this['instrumentContainer']['instruments'] {\n        return this.instrumentContainer.instruments;\n    }\n\n    //region -------------------- Can make a sound out of a music block --------------------\n\n    public get canMakeASoundOutOfAMusicBlockContainer(): this['instrumentContainer']['canMakeASoundOutOfAMusicBlockContainer'] {\n        return this.instrumentContainer.canMakeASoundOutOfAMusicBlockContainer;\n    }\n\n    public get canMakeASoundOutOfAMusicBlock(): this['instrumentContainer']['canMakeASoundOutOfAMusicBlock'] {\n        return this.instrumentContainer.canMakeASoundOutOfAMusicBlock;\n    }\n\n    public get canMakeASoundOutOfAMusicBlockComment(): this['instrumentContainer']['canMakeASoundOutOfAMusicBlockComment'] {\n        return this.instrumentContainer.canMakeASoundOutOfAMusicBlockComment;\n    }\n\n    //endregion -------------------- Can make a sound out of a music block --------------------\n\n    //endregion -------------------- Instrument properties --------------------\n\n    //endregion -------------------- Properties --------------------\n    //region -------------------- References --------------------\n\n    public get referencesContainer() {\n        return this.#referencesContainer;\n    }\n\n    //region -------------------- Game style references --------------------\n\n    public get referenceInSuperMarioBrosStyle() {\n        return this.referencesContainer.referenceInSuperMarioBrosStyle;\n    }\n\n    public get referenceInSuperMarioBros3Style() {\n        return this.referencesContainer.referenceInSuperMarioBros3Style;\n    }\n\n    public get referenceInSuperMarioWorldStyle() {\n        return this.referencesContainer.referenceInSuperMarioWorldStyle;\n    }\n\n    public get referenceInNewSuperMarioBrosUStyle() {\n        return this.referencesContainer.referenceInNewSuperMarioBrosUStyle;\n    }\n\n    public get referenceInSuperMario3DWorldStyle() {\n        return this.referencesContainer.referenceInSuperMario3DWorldStyle;\n    }\n\n    //endregion -------------------- Game style references --------------------\n    //region -------------------- Theme references --------------------\n\n    public get referenceInGroundTheme() {\n        return this.referencesContainer.referenceInGroundTheme;\n    }\n\n    public get referenceInUndergroundTheme() {\n        return this.referencesContainer.referenceInUndergroundTheme;\n    }\n\n    public get referenceInUnderwaterTheme() {\n        return this.referencesContainer.referenceInUnderwaterTheme;\n    }\n\n    public get referenceInDesertTheme() {\n        return this.referencesContainer.referenceInDesertTheme;\n    }\n\n    public get referenceInSnowTheme() {\n        return this.referencesContainer.referenceInSnowTheme;\n    }\n\n    public get referenceInSkyTheme() {\n        return this.referencesContainer.referenceInSkyTheme;\n    }\n\n    public get referenceInForestTheme() {\n        return this.referencesContainer.referenceInForestTheme;\n    }\n\n    public get referenceInGhostHouseTheme() {\n        return this.referencesContainer.referenceInGhostHouseTheme;\n    }\n\n    public get referenceInAirshipTheme() {\n        return this.referencesContainer.referenceInAirshipTheme;\n    }\n\n    public get referenceInCastleTheme() {\n        return this.referencesContainer.referenceInCastleTheme;\n    }\n\n    //endregion -------------------- Theme references --------------------\n    //region -------------------- Time references --------------------\n\n    public get referenceInDayTheme() {\n        return this.referencesContainer.referenceInDayTheme;\n    }\n\n    public get referenceInNightTheme() {\n        return this.referencesContainer.referenceInNightTheme;\n    }\n\n    //endregion -------------------- Time references --------------------\n\n    public getReferenceFrom(theme: Themes,): PossibleOtherEntities\n    public getReferenceFrom(time: Times,): PossibleOtherEntities\n    public getReferenceFrom(gameStyle: GameStyles,): PossibleOtherEntities\n    public getReferenceFrom(gameStyleOrThemeOrTime: | GameStyles | Themes | Times,): PossibleOtherEntities\n    public getReferenceFrom(gameStyleOrThemeOrTime: | GameStyles | Themes | Times,) {\n        return this.referencesContainer.getReferenceFrom(gameStyleOrThemeOrTime);\n    }\n\n    public get everyGameStyleReferences() {\n        return this.referencesContainer.everyGameStyleReferences;\n    }\n\n    public get everyThemeReferences() {\n        return this.referencesContainer.everyThemeReferences;\n    }\n\n    public get everyTimeReferences() {\n        return this.referencesContainer.everyTimeReferences;\n    }\n\n    public get everyReferences() {\n        return this.referencesContainer.everyReferences;\n    }\n\n    //endregion -------------------- References --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.propertyContainer.toGameMap();\n    }\n\n    public toGameStyleMap() {\n        return this.propertyContainer.toGameStyleMap();\n    }\n\n    public toCourseThemeMap() {\n        return this.themeContainer.toCourseThemeMap();\n    }\n\n    public toTimeMap() {\n        return this.timeContainer.toTimeMap();\n    }\n\n    public toLimitMap() {\n        return this.limitContainer.toLimitMap();\n    }\n\n    public toLimitInTheEditorMap() {\n        return this.limitContainer.toLimitInTheEditorMap();\n    }\n\n    public toLimitWhilePlayingMap() {\n        return this.limitContainer.toLimitWhilePlayingMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {EntityReferences} from './properties/EntityReferences';\nimport type {EntityCategory}   from '../entityCategory/EntityCategory';\nimport type {Name}             from '../../lang/name/Name';\nimport type {Property}         from './properties/Property';\n\nimport {AbstractEntity} from './AbstractEntity';\n\n/**\n * An entity that is not exclusive to any {@link GameStyles game style}.\n */\nexport class EntityContainer<CATEGORY extends EntityCategory = EntityCategory, PROPERTY extends Property = Property>\n    extends AbstractEntity<CATEGORY, PROPERTY> {\n\n    public constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category, property, references,);\n    }\n\n}\n","import type {Entity, PossibleOtherEntities} from '../Entity';\nimport type {EntityReferences}              from './EntityReferences';\nimport type {GameStyles}                    from '../../gameStyle/GameStyles';\nimport type {ObjectHolder}                  from '../../../util/holder/ObjectHolder';\nimport type {Themes}                        from '../../theme/Themes';\nimport type {Times}                         from '../../time/Times';\n\nexport class EntityReferencesContainer\n    implements EntityReferences {\n\n    //region -------------------- Fields --------------------\n\n    readonly #referenceInSuperMarioBrosStyle;\n    readonly #referenceInSuperMarioBros3Style;\n    readonly #referenceInSuperMarioWorldStyle;\n    readonly #referenceInNewSuperMarioBrosUStyle;\n    readonly #referenceInSuperMario3DWorldStyle;\n\n    readonly #referenceInGroundTheme;\n    readonly #referenceInUndergroundTheme;\n    readonly #referenceInUnderwaterTheme;\n    readonly #referenceInDesertTheme;\n    readonly #referenceInSnowTheme;\n    readonly #referenceInSkyTheme;\n    readonly #referenceInForestTheme;\n    readonly #referenceInGhostHouseTheme;\n    readonly #referenceInAirshipTheme;\n    readonly #referenceInCastleTheme;\n\n    readonly #referenceInDayTheme;\n    readonly #referenceInNightTheme;\n\n    readonly #everyGameStyleReferences;\n    readonly #everyThemeReferences;\n    readonly #everyTimeReferences;\n    readonly #everyReferences;\n\n    //endregion -------------------- Fields --------------------\n\n    //TODO change the singular references to a GameStyle, Theme & Time structure based objects.\n    public constructor(referenceInSuperMarioBrosStyle: ObjectHolder<PossibleOtherEntities>, referenceInSuperMarioBros3Style: ObjectHolder<PossibleOtherEntities>, referenceInSuperMarioWorldStyle: ObjectHolder<PossibleOtherEntities>, referenceInNewSuperMarioBrosUStyle: ObjectHolder<PossibleOtherEntities>, referenceInSuperMario3DWorldStyle: ObjectHolder<PossibleOtherEntities>,\n                       referenceInGroundTheme: ObjectHolder<PossibleOtherEntities>, referenceInUndergroundTheme: ObjectHolder<PossibleOtherEntities>, referenceInUnderwaterTheme: ObjectHolder<PossibleOtherEntities>, referenceInDesertTheme: ObjectHolder<PossibleOtherEntities>, referenceInSnowTheme: ObjectHolder<PossibleOtherEntities>, referenceInSkyTheme: ObjectHolder<PossibleOtherEntities>, referenceInForestTheme: ObjectHolder<PossibleOtherEntities>, referenceInGhostHouseTheme: ObjectHolder<PossibleOtherEntities>, referenceInAirshipTheme: ObjectHolder<PossibleOtherEntities>, referenceInCastleTheme: ObjectHolder<PossibleOtherEntities>,\n                       referenceInDayTheme: ObjectHolder<PossibleOtherEntities>, referenceInNightTheme: ObjectHolder<PossibleOtherEntities>,\n                       everyGameStyleReferences: ObjectHolder<readonly Entity[]>, everyThemeReferences: ObjectHolder<readonly Entity[]>, everyTimeReferences: ObjectHolder<readonly Entity[]>, everyReferences: ObjectHolder<readonly Entity[]>,) {\n        this.#referenceInSuperMarioBrosStyle = referenceInSuperMarioBrosStyle;\n        this.#referenceInSuperMarioBros3Style = referenceInSuperMarioBros3Style;\n        this.#referenceInSuperMarioWorldStyle = referenceInSuperMarioWorldStyle;\n        this.#referenceInNewSuperMarioBrosUStyle = referenceInNewSuperMarioBrosUStyle;\n        this.#referenceInSuperMario3DWorldStyle = referenceInSuperMario3DWorldStyle;\n\n        this.#referenceInGroundTheme = referenceInGroundTheme;\n        this.#referenceInUndergroundTheme = referenceInUndergroundTheme;\n        this.#referenceInUnderwaterTheme = referenceInUnderwaterTheme;\n        this.#referenceInDesertTheme = referenceInDesertTheme;\n        this.#referenceInSnowTheme = referenceInSnowTheme;\n        this.#referenceInSkyTheme = referenceInSkyTheme;\n        this.#referenceInForestTheme = referenceInForestTheme;\n        this.#referenceInGhostHouseTheme = referenceInGhostHouseTheme;\n        this.#referenceInAirshipTheme = referenceInAirshipTheme;\n        this.#referenceInCastleTheme = referenceInCastleTheme;\n\n        this.#referenceInDayTheme = referenceInDayTheme;\n        this.#referenceInNightTheme = referenceInNightTheme;\n\n        this.#everyGameStyleReferences = everyGameStyleReferences;\n        this.#everyThemeReferences = everyThemeReferences;\n        this.#everyTimeReferences = everyTimeReferences;\n        this.#everyReferences = everyReferences;\n    }\n\n\n    //region -------------------- References methods --------------------\n\n    //region -------------------- Game style references --------------------\n\n    public get referenceInSuperMarioBrosStyle() {\n        return this.#referenceInSuperMarioBrosStyle.get;\n    }\n\n    public get referenceInSuperMarioBros3Style() {\n        return this.#referenceInSuperMarioBros3Style.get;\n    }\n\n    public get referenceInSuperMarioWorldStyle() {\n        return this.#referenceInSuperMarioWorldStyle.get;\n    }\n\n    public get referenceInNewSuperMarioBrosUStyle() {\n        return this.#referenceInNewSuperMarioBrosUStyle.get;\n    }\n\n    public get referenceInSuperMario3DWorldStyle() {\n        return this.#referenceInSuperMario3DWorldStyle.get;\n    }\n\n    //endregion -------------------- Game style references --------------------\n    //region -------------------- Theme references --------------------\n\n    public get referenceInGroundTheme() {\n        return this.#referenceInGroundTheme.get;\n    }\n\n    public get referenceInUndergroundTheme() {\n        return this.#referenceInUndergroundTheme.get;\n    }\n\n    public get referenceInUnderwaterTheme() {\n        return this.#referenceInUnderwaterTheme.get;\n    }\n\n    public get referenceInDesertTheme() {\n        return this.#referenceInDesertTheme.get;\n    }\n\n    public get referenceInSnowTheme() {\n        return this.#referenceInSnowTheme.get;\n    }\n\n    public get referenceInSkyTheme() {\n        return this.#referenceInSkyTheme.get;\n    }\n\n    public get referenceInForestTheme() {\n        return this.#referenceInForestTheme.get;\n    }\n\n    public get referenceInGhostHouseTheme() {\n        return this.#referenceInGhostHouseTheme.get;\n    }\n\n    public get referenceInAirshipTheme() {\n        return this.#referenceInAirshipTheme.get;\n    }\n\n    public get referenceInCastleTheme() {\n        return this.#referenceInCastleTheme.get;\n    }\n\n    //endregion -------------------- Theme references --------------------\n    //region -------------------- Time references --------------------\n\n    public get referenceInDayTheme() {\n        return this.#referenceInDayTheme.get;\n    }\n\n    public get referenceInNightTheme() {\n        return this.#referenceInNightTheme.get;\n    }\n\n    //endregion -------------------- Time references --------------------\n\n    public getReferenceFrom(theme: Themes,): PossibleOtherEntities\n    public getReferenceFrom(time: Times,): PossibleOtherEntities\n    public getReferenceFrom(gameStyle: GameStyles,): PossibleOtherEntities\n    public getReferenceFrom(gameStyleOrThemeOrTime: | GameStyles | Themes | Times,): PossibleOtherEntities\n    public getReferenceFrom(gameStyleOrThemeOrTime: | GameStyles | Themes | Times,) {\n        return gameStyleOrThemeOrTime.getReference(this);\n    }\n\n    public get everyGameStyleReferences() {\n        return this.#everyGameStyleReferences.get;\n    }\n\n    public get everyThemeReferences() {\n        return this.#everyThemeReferences.get;\n    }\n\n    public get everyTimeReferences() {\n        return this.#everyTimeReferences.get;\n    }\n\n    public get everyReferences() {\n        return this.#everyReferences.get;\n    }\n\n    //endregion -------------------- References methods --------------------\n\n}\n","import type {AbstractExclusiveSMM2Entity as AbstractExclusiveSMM2EntityInterface} from './Entity';\nimport type {AbstractExclusiveSMM2Property, Property}                             from './properties/Property';\nimport type {EntityCategory}                                                      from '../entityCategory/EntityCategory';\nimport type {EntityReferences}                                                    from './properties/EntityReferences';\nimport type {Name}                                                                from '../../lang/name/Name';\n\nimport {assert}          from '../../util/utilitiesMethods';\nimport {EntityContainer} from './Entity.container';\n\n/**\n * An entity that is exclusive to the {@link Games.SUPER_MARIO_MAKER_2 Super Mario Maker 2} {@link Games game}.\n */\nexport abstract class AbstractExclusiveSMM2Entity<CATEGORY extends EntityCategory = EntityCategory, PROPERTY extends AbstractExclusiveSMM2Property = AbstractExclusiveSMM2Property, >\n    extends EntityContainer<CATEGORY, PROPERTY>\n    implements AbstractExclusiveSMM2EntityInterface<CATEGORY> {\n\n    protected constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category, property, references,);\n    }\n\n    protected override _testProperty(property: Property,): Property {\n        property = super._testProperty(property);\n\n        assert(!property.isInSuperMarioMaker1, 'The property isInSMM1 should always be set to false for a SMM2 exclusive property.',);\n        assert(!property.isInSuperMarioMakerFor3DS, 'The property isInSMM3DS should always be set to false for a SMM2 exclusive property.',);\n        assert(property.isInSuperMarioMaker2, 'The property isInSMM2 should always be set to true for a SMM2 exclusive property.',);\n\n        assert(property.isInSuperMario3DWorldStyle != null, 'The property isInSuperMario3DWorldStyle should always be set to a boolean for a SMM2 exclusive property.',);\n\n        assert(property.isInGeneralLimitWhilePlaying != null, 'The property isInGeneralLimitWhilePlaying should always be a boolean for a SMM2 exclusive property.',);\n        assert(property.isInGlobalGeneralLimitWhilePlaying != null, 'The property isInGlobalGeneralLimitWhilePlaying should always be a boolean for a SMM2 exclusive property.',);\n        assert(property.isInPowerUpLimitWhilePlaying != null, 'The property isInGeneralLimitWhilePlaying should always be a boolean for a SMM2 exclusive property.',);\n        assert(property.editorLimit_smm1And3ds == null, 'The property editorLimit_smm1And3ds should always be null for an exclusive SMM2 property.',);\n\n        return property;\n    }\n\n}\n","import type {EntityCategory}                         from '../entityCategory/EntityCategory';\nimport type {EntityReferences}                       from './properties/EntityReferences';\nimport type {ExclusiveSM3DWEntity}                   from './Entity';\nimport type {ExclusiveSMM2PropertyInSM3DW, Property} from './properties/Property';\nimport type {Name}                                   from '../../lang/name/Name';\n\nimport {AbstractExclusiveSMM2Entity} from './AbstractExclusiveSMM2Entity';\nimport {assert}                      from '../../util/utilitiesMethods';\n\n/**\n * An entity that is exclusive to the {@link Games.SUPER_MARIO_MAKER_2 Super Mario Maker 2} {@link Games game}\n * and is exclusive to the {@link GameStyles.SUPER_MARIO_3D_WORLD  Mario 3D World} {@link GameStyles game style}.\n *\n * @todo change tht exclusive SMM3DW entity to be an interface and separate the Entity projectile & Entity object into their own class.\n */\nexport class ExclusiveSM3DWEntityContainer<CATEGORY extends EntityCategory = EntityCategory, >\n    extends AbstractExclusiveSMM2Entity<CATEGORY, ExclusiveSMM2PropertyInSM3DW>\n    implements ExclusiveSM3DWEntity<CATEGORY> {\n\n    public constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category, property, references,);\n    }\n\n    protected override _testProperty(property: Property,): Property {\n        property = super._testProperty(property);\n\n        assert(property.isInNightTheme == null, 'The property isInNightTheme should always be set to a null for a SM3DW exclusive property.',);\n        // assert(typeof property.isInProjectileLimitWhilePlaying == 'boolean', 'The property isInProjectileLimitWhilePlaying should always be a boolean for a SM3DW exclusive property.',);\n\n        return property;\n    }\n\n}\n","import type {EntityCategory}                  from '../entityCategory/EntityCategory';\nimport type {EntityReferences}                from './properties/EntityReferences';\nimport type {ExclusiveSMM1Entity}             from './Entity';\nimport type {ExclusiveSMM1Property, Property} from './properties/Property';\nimport type {Name}                            from '../../lang/name/Name';\n\nimport {EmptyEntityCategory} from '../entityCategory/EmptyEntityCategory';\nimport {EntityContainer}     from './Entity.container';\nimport {assert}              from '../../util/utilitiesMethods';\n\n/**\n * An entity that is exclusive to the {@link Games.SUPER_MARIO_MAKER_1 Super Mario Maker 1} {@link Games game}.\n */\nexport class ExclusiveSMM1EntityContainer\n    extends EntityContainer<EmptyEntityCategory, ExclusiveSMM1Property>\n    implements ExclusiveSMM1Entity {\n\n    public constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category, property, references,);\n    }\n\n    protected override _testCategory(category: EntityCategory,): EntityCategory {\n        category = super._testCategory(category);\n\n        assert(category instanceof EmptyEntityCategory, 'A SMM1 exclusive entity cannot be in a SMM2 category.',);\n\n        return category;\n    }\n\n    protected override _testProperty(property: Property,): Property {\n        property = super._testProperty(property);\n\n        assert(property.isInSuperMarioMaker1, 'The property isInSMM1 should always be set to true for a SMM1 exclusive property.',);\n        assert(!property.isInSuperMarioMaker2, 'The property isInSMM2 should always be set to false for a SMM1 exclusive property.',);\n\n        assert(property.isInSuperMario3DWorldStyle == null, 'The possible SMM1 entity cannot be in the SM3DW style',);\n\n        assert(property.isInGroundTheme && property.isInUndergroundTheme && property.isInUnderwaterTheme && property.isInDesertTheme == null\n            && property.isInSnowTheme == null && property.isInSkyTheme == null && property.isInForestTheme == null && property.isInGhostHouseTheme\n            && property.isInAirshipTheme && property.isInCastleTheme, 'A SMM1 entity is never in the desert, snow, sky and forest theme. The rest should always be set to true.',);\n\n        assert(property.isInDayTheme && property.isInNightTheme == null, 'A SMM1 entity is never in the night theme, but always in the day theme.',);\n\n        assert(property.editorLimit_smm2 === ExclusiveSMM1EntityContainer.NOT_APPLICABLE\n            && property.isInGeneralLimitWhilePlaying === ExclusiveSMM1EntityContainer.NOT_APPLICABLE && property.isInGlobalGeneralLimitWhilePlaying === ExclusiveSMM1EntityContainer.NOT_APPLICABLE\n            && property.isInPowerUpLimitWhilePlaying === ExclusiveSMM1EntityContainer.NOT_APPLICABLE\n            && property.isInProjectileLimitWhilePlaying === ExclusiveSMM1EntityContainer.NOT_APPLICABLE\n            && property.otherLimitWhilePlaying === ExclusiveSMM1EntityContainer.NOT_APPLICABLE, 'A SMM1 entity doesn\\'t have any limit since it is only applicable to a SMM2 entity.',);\n\n        return property;\n    }\n\n}\n","import type {EntityCategory}                  from '../entityCategory/EntityCategory';\nimport type {EntityReferences}                from './properties/EntityReferences';\nimport type {ExclusiveSMM2Entity}             from './Entity';\nimport type {ExclusiveSMM2Property, Property} from './properties/Property';\nimport type {Name}                            from '../../lang/name/Name';\n\nimport {AbstractExclusiveSMM2Entity} from './AbstractExclusiveSMM2Entity';\nimport {assert}                      from '../../util/utilitiesMethods';\n\n/**\n * An entity that is exclusive to the {@link Games.SUPER_MARIO_MAKER_2 Super Mario Maker 2} {@link Games game}\n * and is not exclusive to the {@link GameStyles.SUPER_MARIO_3D_WORLD  Mario 3D World} {@link GameStyles game style}.\n */\nexport class ExclusiveSMM2EntityContainer<CATEGORY extends EntityCategory = EntityCategory, >\n    extends AbstractExclusiveSMM2Entity<CATEGORY, ExclusiveSMM2Property>\n    implements ExclusiveSMM2Entity<CATEGORY> {\n\n    public constructor(name: Name<string>, category: EntityCategory, property: Property, references: EntityReferences,) {\n        super(name, category, property, references,);\n    }\n\n    protected override _testProperty(property: Property,): Property {\n        property = super._testProperty(property);\n\n        assert(property.isInNightTheme != null, 'The property isInNightTheme should always be set to a boolean for a SMM2 exclusive property when it is included in at least one of those styles (SMB, SMB3, SMW or NSMBU).',);\n\n        return property;\n    }\n\n}\n","import type {GameStyleProperty} from './GameStyleProperty';\n\nimport type {GameStyles} from '../../../gameStyle/GameStyles';\nimport {Import}          from '../../../../util/DynamicImporter';\n\n/**\n * @classWithDynamicImport {@link GameStyles}\n */\nexport class GameStylePropertyContainer<SMB extends boolean = boolean, SMB3 extends boolean = boolean, SMW extends boolean = boolean, NSMBU extends boolean = boolean, SM3DW extends | boolean | null = | boolean | null, >\n    implements GameStyleProperty<SMB, SMB3, SMW, NSMBU, SM3DW> {\n\n    //region -------------------- Fields --------------------\n\n    #map?: ReadonlyMap<GameStyles, boolean>;\n    readonly #isInSuperMarioBrosStyle;\n    readonly #isInSuperMarioBros3Style;\n    readonly #isInSuperMarioWorldStyle;\n    readonly #isInNewSuperMarioBrosUStyle;\n    readonly #isInSuperMario3DWorldStyle;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(isInSuperMarioBrosStyle: SMB, isInSuperMarioBros3Style: SMB3, isInSuperMarioWorldStyle: SMW, isInNewSuperMarioBrosUStyle: NSMBU, isInSuperMario3DWorldStyle: SM3DW,) {\n        this.#isInSuperMarioBrosStyle = isInSuperMarioBrosStyle;\n        this.#isInSuperMarioBros3Style = isInSuperMarioBros3Style;\n        this.#isInSuperMarioWorldStyle = isInSuperMarioWorldStyle;\n        this.#isInNewSuperMarioBrosUStyle = isInNewSuperMarioBrosUStyle;\n        this.#isInSuperMario3DWorldStyle = isInSuperMario3DWorldStyle;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isInSuperMarioBrosStyle() {\n        return this.#isInSuperMarioBrosStyle;\n    }\n\n    public get isInSuperMarioBros3Style() {\n        return this.#isInSuperMarioBros3Style;\n    }\n\n    public get isInSuperMarioWorldStyle() {\n        return this.#isInSuperMarioWorldStyle;\n    }\n\n    public get isInNewSuperMarioBrosUStyle() {\n        return this.#isInNewSuperMarioBrosUStyle;\n    }\n\n    public get isInSuperMario3DWorldStyle() {\n        return this.#isInSuperMario3DWorldStyle;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameStyleMap(): ReadonlyMap<GameStyles, boolean> {\n        return this.#map ??= new Map(Import.GameStyles.values.map(gameStyle => [gameStyle, gameStyle.get(this),]));\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {GameStyleProperty}  from './GameStyleProperty';\nimport type {ProviderWithoutKey} from '../../../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}           from '../../../../util/provider/AbstractProvider';\nimport {GameStylePropertyContainer} from './GameStyleProperty.container';\n\n/**\n * @singleton\n */\nexport class GameStylePropertyProvider\n    extends AbstractProvider<ArgumentsReceived, GameStyleProperty>\n    implements ProviderWithoutKey<GameStyleProperty, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: GameStylePropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * Get (or create) a property instance based on the {@link GameStyles} properties.\n     *\n     * @param isInSuperMarioBrosStyle Is in the {@link GameStyles.SUPER_MARIO_BROS SMB style}\n     * @param isInSuperMarioBros3Style Is in the {@link GameStyles.SUPER_MARIO_BROS_3 SMB3 style}\n     * @param isInSuperMarioWorldStyle Is in the {@link GameStyles.SUPER_MARIO_WORLD SMW style}\n     * @param isInNewSuperMarioBrosUStyle Is in the {@link GameStyles.NEW_SUPER_MARIO_BROS_U NSMBU style}\n     * @param isInSuperMario3DWorldStyle Is in the {@link GameStyles.SUPER_MARIO_3D_WORLD SM3DW style}\n     */\n    public get<SMB extends boolean = boolean, SMB3 extends boolean = boolean, SMW extends boolean = boolean, NSMBU extends boolean = boolean, SM3DW extends | boolean | null = | boolean | null, >(isInSuperMarioBrosStyle: SMB, isInSuperMarioBros3Style: SMB3, isInSuperMarioWorldStyle: SMW, isInNewSuperMarioBrosUStyle: NSMBU, isInSuperMario3DWorldStyle: SM3DW,): GameStyleProperty<SMB, SMB3, SMW, NSMBU, SM3DW>\n    public get(...argumentsReceived: ArgumentsReceived): GameStyleProperty {\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new GameStylePropertyContainer(...argumentsReceived,),))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [\n    isInSuperMarioBrosStyle: boolean,\n    isInSuperMarioBros3Style: boolean,\n    isInSuperMarioWorldStyle: boolean,\n    isInNewSuperMarioBrosUStyle: boolean,\n    isInSuperMario3DWorldStyle: | boolean | null,\n];\n","import type {CanMakeASoundOutOfAMusicBlockProperty, InstrumentProperty} from './InstrumentProperty';\nimport type {Instrument}                                                from '../../../instrument/Instrument';\nimport type {ObjectHolder}                                              from '../../../../util/holder/ObjectHolder';\n\nexport class InstrumentPropertyContainer\n    implements InstrumentProperty {\n\n    //region -------------------- Fields --------------------\n\n    readonly #instrumentsHolder;\n    readonly #canMakeASoundOutOfAMusicBlock;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(instruments: ObjectHolder<readonly Instrument[]>, canMakeASoundOutOfAMusicBlock: CanMakeASoundOutOfAMusicBlockProperty,) {\n        this.#instrumentsHolder = instruments;\n        this.#canMakeASoundOutOfAMusicBlock = canMakeASoundOutOfAMusicBlock;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get instruments() {\n        return this.#instrumentsHolder.get;\n    }\n\n    //region -------------------- Can make a sound out of a music block --------------------\n\n    public get canMakeASoundOutOfAMusicBlockContainer() {\n        return this.#canMakeASoundOutOfAMusicBlock;\n    }\n\n    public get canMakeASoundOutOfAMusicBlock() {\n        return this.canMakeASoundOutOfAMusicBlockContainer.value;\n    }\n\n    public get canMakeASoundOutOfAMusicBlockComment() {\n        return this.canMakeASoundOutOfAMusicBlockContainer.comment;\n    }\n\n    //endregion -------------------- Can make a sound out of a music block --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {CanMakeASoundOutOfAMusicBlock}                             from './loader.types';\nimport type {CanMakeASoundOutOfAMusicBlockProperty, InstrumentProperty} from './InstrumentProperty';\nimport type {Instrument}                                                from '../../../instrument/Instrument';\nimport type {ObjectHolder}                                              from '../../../../util/holder/ObjectHolder';\nimport type {PossibleInstrument}                                        from '../../../instrument/loader.types';\nimport type {ProviderWithKey}                                           from '../../../../util/provider/ProviderWithKey';\n\nimport {AbstractProvider}            from '../../../../util/provider/AbstractProvider';\nimport {InstrumentPropertyContainer} from './InstrumentProperty.container';\n\n/**\n * @singleton\n */\nexport class InstrumentPropertyProvider\n    extends AbstractProvider<Key, InstrumentProperty>\n    implements ProviderWithKey<InstrumentProperty, Key, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: InstrumentPropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(key: Key, ...argumentsReceived: ArgumentsReceived): InstrumentProperty {\n        return this.everyContainers.if(map => map.has(key))\n            .isNotMet(map => map.set(key, new InstrumentPropertyContainer(...argumentsReceived),))\n            .get(key);\n    }\n\n}\n\ntype Key = readonly [\n    name: PossibleInstrument,\n    canMakeASoundOutOfAMusicBlock: CanMakeASoundOutOfAMusicBlock,\n];\ntype ArgumentsReceived = readonly [\n    intruments: ObjectHolder<readonly Instrument[]>,\n    canMakeASoundOutOfAMusicBlock: CanMakeASoundOutOfAMusicBlockProperty,\n];\n","import type {LimitProperty, PossibleEditorLimit_SMM1And3DS, PossibleEditorLimit_SMM2, PossibleIsInGeneralGlobalLimit, PossibleIsInGeneralLimit, PossibleIsInPowerUpLimit, PossibleIsInProjectileLimit, PossibleOtherLimit} from './LimitProperty';\nimport type {GameStructure}                                                                                                                                                                                                from '../../../game/GameStructure';\n\nimport {EntityLimits} from '../../../entityLimit/EntityLimits';\n\nexport class LimitPropertyContainer<EDITOR_SMM1AND3DS extends PossibleEditorLimit_SMM1And3DS = PossibleEditorLimit_SMM1And3DS,\n    EDITOR_SMM2 extends PossibleEditorLimit_SMM2 = PossibleEditorLimit_SMM2,\n    GENERAL extends PossibleIsInGeneralLimit = PossibleIsInGeneralLimit,\n    GENERAL_GLOBAL extends PossibleIsInGeneralGlobalLimit = PossibleIsInGeneralGlobalLimit,\n    POWER_UP extends PossibleIsInPowerUpLimit = PossibleIsInPowerUpLimit,\n    PROJECTILE extends PossibleIsInProjectileLimit = PossibleIsInProjectileLimit,\n    OTHER extends PossibleOtherLimit = PossibleOtherLimit, >\n    implements LimitProperty<EDITOR_SMM1AND3DS, EDITOR_SMM2, GENERAL, GENERAL_GLOBAL, POWER_UP, PROJECTILE, OTHER> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #editorLimitContainer;\n    readonly #isGeneralLimitContainer;\n    readonly #isGeneralGlobalLimitContainer;\n    readonly #isPowerUpLimitContainer;\n    readonly #isProjectileLimitContainer;\n    readonly #isOtherLimitContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(editorLimit: GameStructure<EDITOR_SMM1AND3DS, EDITOR_SMM1AND3DS, EDITOR_SMM2>, [generalLimit, generalGlobalLimit,]: readonly [value: GENERAL, superGlobal: GENERAL_GLOBAL,], powerUpLimit: POWER_UP, projectileLimit: PROJECTILE, otherLimit: OTHER,) {\n        this.#editorLimitContainer = editorLimit;\n        this.#isGeneralLimitContainer = generalLimit;\n        this.#isGeneralGlobalLimitContainer = generalGlobalLimit;\n        this.#isPowerUpLimitContainer = powerUpLimit;\n        this.#isProjectileLimitContainer = projectileLimit;\n        this.#isOtherLimitContainer = otherLimit;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Editor limit --------------------\n\n    public get editorLimitContainer() {\n        return this.#editorLimitContainer;\n    }\n\n    public get editorLimit_smm1And3ds() {\n        return this.editorLimitContainer.superMarioMaker;\n    }\n\n    public get editorLimit_smm2() {\n        return this.editorLimitContainer.superMarioMaker2.value;\n    }\n\n    public get isUnknown_editorLimit_smm2() {\n        return this.editorLimitContainer.superMarioMaker2.isUnknown;\n    }\n\n    //endregion -------------------- Editor limit --------------------\n    //region -------------------- General limit --------------------\n\n    public get isInGeneralLimitWhilePlayingContainer() {\n        return this.#isGeneralLimitContainer;\n    }\n\n    public get isInGeneralLimitWhilePlaying() {\n        return this.isInGeneralLimitWhilePlayingContainer.value;\n    }\n\n    public get isInGeneralLimitWhilePlayingComment() {\n        return this.isInGeneralLimitWhilePlayingContainer.comment;\n    }\n\n    //region -------------------- Global general limit --------------------\n\n    public get isInGlobalGeneralLimitWhilePlayingContainer() {\n        return this.#isGeneralGlobalLimitContainer;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlaying() {\n        return this.isInGlobalGeneralLimitWhilePlayingContainer.value;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlayingComment() {\n        return this.isInGlobalGeneralLimitWhilePlayingContainer.comment;\n    }\n\n    //endregion -------------------- Global general limit --------------------\n\n    //endregion -------------------- General limit --------------------\n    //region -------------------- Power-up limit --------------------\n\n    public get isInPowerUpLimitWhilePlayingContainer() {\n        return this.#isPowerUpLimitContainer;\n    }\n\n    public get isInPowerUpLimitWhilePlaying() {\n        return this.isInPowerUpLimitWhilePlayingContainer.value;\n    }\n\n    //endregion -------------------- Power-up limit --------------------\n    //region -------------------- Projectile limit --------------------\n\n    public get isInProjectileLimitWhilePlayingContainer() {\n        return this.#isProjectileLimitContainer;\n    }\n\n    public get isInProjectileLimitWhilePlaying() {\n        return this.isInProjectileLimitWhilePlayingContainer.value;\n    }\n\n    public get isInProjectileLimitWhilePlayingComment() {\n        return this.isInProjectileLimitWhilePlayingContainer.comment;\n    }\n\n    //endregion -------------------- Projectile limit --------------------\n    //region -------------------- Custom limit --------------------\n\n    public get otherLimitWhilePlayingContainer() {\n        return this.#isOtherLimitContainer;\n    }\n\n    public get otherLimitWhilePlaying() {\n        return this.otherLimitWhilePlayingContainer.value;\n    }\n\n    public get otherLimitWhilePlayingComment() {\n        return this.otherLimitWhilePlayingContainer.comment;\n    }\n\n    //endregion -------------------- Custom limit --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    /**\n     * Create a new map of limit based on the {@link EntityLimits entity limit} received.\n     *\n     * @param values the values (null are ignored)\n     */\n    #newMap(...values: readonly (EntityLimits | null)[]): ReadonlyMap<EntityLimits, boolean> {\n        const newValues = values.filter(limit => limit != null) as EntityLimits[];\n        return new Map(EntityLimits.values.map(limit => [limit, newValues.includes(limit),]));\n    }\n\n    public toLimitMap() {\n        return new Map([...this.toLimitInTheEditorMap(), ...this.toLimitWhilePlayingMap(),]);\n    }\n\n    public toLimitInTheEditorMap() {\n        const editorLimits = [this.editorLimit_smm1And3ds, this.editorLimit_smm2,];\n\n        return this.#newMap(...editorLimits.map(editorLimit => editorLimit instanceof EntityLimits ? editorLimit : null));\n    }\n\n    public toLimitWhilePlayingMap() {\n        const otherLimitWhilePlaying = this.otherLimitWhilePlaying;\n\n        return this.#newMap(\n            this.isInGeneralLimitWhilePlaying === true ? EntityLimits.GENERAL_ENTITY_LIMIT_WHILE_PLAYING : null,\n            this.isInGlobalGeneralLimitWhilePlaying === true ? EntityLimits.GENERAL_ENTITY_LIMIT_WHILE_PLAYING : null,\n            this.isInPowerUpLimitWhilePlaying === true ? EntityLimits.POWER_UP_ENTITY_LIMIT_WHILE_PLAYING : null,\n            this.isInProjectileLimitWhilePlaying === true ? EntityLimits.PROJECTILE_LIMIT : null,\n            otherLimitWhilePlaying instanceof EntityLimits ? otherLimitWhilePlaying : null,\n        );\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {EditorLimitType_SMM1And3DS, EditorLimitType_SMM2, GeneralEntityLimitType, GeneralGlobalEntityLimitType, OtherLimitCommentType, OtherLimitType, PowerUpEntityLimitType, ProjectileEntityLimitType}             from './Loader.types';\nimport type {LimitProperty, PossibleEditorLimit_SMM1And3DS, PossibleEditorLimit_SMM2, PossibleIsInGeneralGlobalLimit, PossibleIsInGeneralLimit, PossibleIsInPowerUpLimit, PossibleIsInProjectileLimit, PossibleOtherLimit} from './LimitProperty';\nimport type {GameStructure}                                                                                                                                                                                                from '../../../game/GameStructure';\nimport type {ProviderWithKey}                                                                                                                                                                                              from '../../../../util/provider/ProviderWithKey';\n\nimport {AbstractProvider}       from '../../../../util/provider/AbstractProvider';\nimport {LimitPropertyContainer} from './LimitProperty.container';\n\n/**\n * @singleton\n */\nexport class LimitPropertyProvider\n    extends AbstractProvider<Key, LimitProperty>\n    implements ProviderWithKey<LimitProperty, Key, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: LimitPropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(key: Key, ...argumentsReceived: ArgumentsReceived): LimitProperty {\n        return this.everyContainers.if(map => map.has(key))\n            .isNotMet(map => map.set(key, new LimitPropertyContainer(...argumentsReceived),))\n            .get(key);\n    }\n\n}\n\ntype Key = readonly [\n    editorLimit: readonly [EditorLimitType_SMM1And3DS, EditorLimitType_SMM2,],\n    generalLimit: readonly [GeneralEntityLimitType, GeneralGlobalEntityLimitType,],\n    powerUpLimit: PowerUpEntityLimitType,\n    projectileLimit: ProjectileEntityLimitType,\n    otherLimit: readonly [OtherLimitType, OtherLimitCommentType,],\n]\ntype ArgumentsReceived = readonly [\n    editorLimit: GameStructure<PossibleEditorLimit_SMM1And3DS, PossibleEditorLimit_SMM1And3DS, PossibleEditorLimit_SMM2>,\n    generalLimit: readonly [value: PossibleIsInGeneralLimit, superGlobal: PossibleIsInGeneralGlobalLimit,],\n    powerUpLimit: PossibleIsInPowerUpLimit,\n    projectileLimit: PossibleIsInProjectileLimit,\n    otherLimit: PossibleOtherLimit,\n];\n","import type {GameProperty}       from './game/GameProperty';\nimport type {GameStyleProperty}  from './gameStyle/GameStyleProperty';\nimport type {InstrumentProperty} from './instrument/InstrumentProperty';\nimport type {LimitProperty}      from './limit/LimitProperty';\nimport type {ObjectHolder}       from '../../../util/holder/ObjectHolder';\nimport type {Property}           from './Property';\nimport type {ThemeProperty}      from './theme/ThemeProperty';\nimport type {TimeProperty}       from './time/TimeProperty';\n\nexport class PropertyContainer\n    implements Property {\n\n    //region -------------------- Fields --------------------\n\n    readonly #gameContainer;\n    readonly #gameStyleContainer;\n    readonly #themeContainer;\n    readonly #timeContainer;\n    readonly #limitContainer;\n    readonly #instrumentHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(game: ObjectHolder<GameProperty>, gameStyle: ObjectHolder<GameStyleProperty>, theme: ObjectHolder<ThemeProperty>, time: ObjectHolder<TimeProperty>, limit: ObjectHolder<LimitProperty>, instrument: ObjectHolder<InstrumentProperty>,) {\n        this.#gameContainer = game;\n        this.#gameStyleContainer = gameStyle;\n        this.#themeContainer = theme;\n        this.#timeContainer = time;\n        this.#limitContainer = limit;\n        this.#instrumentHolder = instrument;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public get gameContainer() {\n        return this.#gameContainer.get;\n    }\n\n    public get isInSuperMarioMaker1() {\n        return this.gameContainer.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS() {\n        return this.gameContainer.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2() {\n        return this.gameContainer.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Game style properties --------------------\n\n    public get gameStyleContainer() {\n        return this.#gameStyleContainer.get;\n    }\n\n    public get isInSuperMarioBrosStyle() {\n        return this.gameStyleContainer.isInSuperMarioBrosStyle;\n    }\n\n    public get isInSuperMarioBros3Style() {\n        return this.gameStyleContainer.isInSuperMarioBros3Style;\n    }\n\n    public get isInSuperMarioWorldStyle() {\n        return this.gameStyleContainer.isInSuperMarioWorldStyle;\n    }\n\n    public get isInNewSuperMarioBrosUStyle() {\n        return this.gameStyleContainer.isInNewSuperMarioBrosUStyle;\n    }\n\n    public get isInSuperMario3DWorldStyle() {\n        return this.gameStyleContainer.isInSuperMario3DWorldStyle;\n    }\n\n    //endregion -------------------- Game style properties --------------------\n    //region -------------------- Theme properties --------------------\n\n    public get themeContainer() {\n        return this.#themeContainer.get;\n    }\n\n    public get isInGroundTheme() {\n        return this.themeContainer.isInGroundTheme;\n    }\n\n    public get isInUndergroundTheme() {\n        return this.themeContainer.isInUndergroundTheme;\n    }\n\n    public get isInUnderwaterTheme() {\n        return this.themeContainer.isInUnderwaterTheme;\n    }\n\n    public get isInDesertTheme() {\n        return this.themeContainer.isInDesertTheme;\n    }\n\n    public get isInSnowTheme() {\n        return this.themeContainer.isInSnowTheme;\n    }\n\n    public get isInSkyTheme() {\n        return this.themeContainer.isInSkyTheme;\n    }\n\n    public get isInForestTheme() {\n        return this.themeContainer.isInForestTheme;\n    }\n\n    public get isInGhostHouseTheme() {\n        return this.themeContainer.isInGhostHouseTheme;\n    }\n\n    public get isInAirshipTheme() {\n        return this.themeContainer.isInAirshipTheme;\n    }\n\n    public get isInCastleTheme() {\n        return this.themeContainer.isInCastleTheme;\n    }\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Time properties --------------------\n\n    public get timeContainer() {\n        return this.#timeContainer.get;\n    }\n\n    public get isInDayTheme() {\n        return this.timeContainer.isInDayTheme;\n    }\n\n    public get isInNightTheme() {\n        return this.timeContainer.isInNightTheme;\n    }\n\n    //endregion -------------------- Time properties --------------------\n    //region -------------------- Limit properties --------------------\n\n    public get limitContainer() {\n        return this.#limitContainer.get;\n    }\n\n    //region -------------------- Editor limit --------------------\n\n    public get editorLimitContainer() {\n        return this.limitContainer.editorLimitContainer;\n    }\n\n    public get editorLimit_smm1And3ds() {\n        return this.limitContainer.editorLimit_smm1And3ds;\n    }\n\n    public get editorLimit_smm2() {\n        return this.limitContainer.editorLimit_smm2;\n    }\n\n    public get isUnknown_editorLimit_smm2() {\n        return this.limitContainer.isUnknown_editorLimit_smm2;\n    }\n\n    //endregion -------------------- Editor limit --------------------\n    //region -------------------- General limit --------------------\n\n    public get isInGeneralLimitWhilePlayingContainer() {\n        return this.limitContainer.isInGeneralLimitWhilePlayingContainer;\n    }\n\n    public get isInGeneralLimitWhilePlaying() {\n        return this.limitContainer.isInGeneralLimitWhilePlaying;\n    }\n\n    public get isInGeneralLimitWhilePlayingComment() {\n        return this.limitContainer.isInGeneralLimitWhilePlayingComment;\n    }\n\n    //region -------------------- Global general limit --------------------\n\n    public get isInGlobalGeneralLimitWhilePlayingContainer() {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlayingContainer;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlaying() {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlaying;\n    }\n\n    public get isInGlobalGeneralLimitWhilePlayingComment() {\n        return this.limitContainer.isInGlobalGeneralLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Global general limit --------------------\n\n    //endregion -------------------- General limit --------------------\n    //region -------------------- Power-up limit --------------------\n\n    public get isInPowerUpLimitWhilePlayingContainer() {\n        return this.limitContainer.isInPowerUpLimitWhilePlayingContainer;\n    }\n\n    public get isInPowerUpLimitWhilePlaying() {\n        return this.limitContainer.isInPowerUpLimitWhilePlaying;\n    }\n\n    //endregion -------------------- Power-up limit --------------------\n    //region -------------------- Projectile limit --------------------\n\n    public get isInProjectileLimitWhilePlayingContainer() {\n        return this.limitContainer.isInProjectileLimitWhilePlayingContainer;\n    }\n\n    public get isInProjectileLimitWhilePlaying() {\n        return this.limitContainer.isInProjectileLimitWhilePlaying;\n    }\n\n    public get isInProjectileLimitWhilePlayingComment() {\n        return this.limitContainer.isInProjectileLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Projectile limit --------------------\n    //region -------------------- Custom limit --------------------\n\n    public get otherLimitWhilePlayingContainer() {\n        return this.limitContainer.otherLimitWhilePlayingContainer;\n    }\n\n    public get otherLimitWhilePlaying() {\n        return this.limitContainer.otherLimitWhilePlaying;\n    }\n\n    public get otherLimitWhilePlayingComment() {\n        return this.limitContainer.otherLimitWhilePlayingComment;\n    }\n\n    //endregion -------------------- Custom limit --------------------\n    //endregion -------------------- Limit properties --------------------\n    //region -------------------- Instrument properties --------------------\n\n    public get instrumentContainer() {\n        return this.#instrumentHolder.get;\n    }\n\n\n    public get instruments() {\n        return this.instrumentContainer.instruments;\n    }\n\n    //region -------------------- Can make a sound out of a music block --------------------\n\n    public get canMakeASoundOutOfAMusicBlockContainer() {\n        return this.instrumentContainer.canMakeASoundOutOfAMusicBlockContainer;\n    }\n\n    public get canMakeASoundOutOfAMusicBlock() {\n        return this.canMakeASoundOutOfAMusicBlockContainer.value;\n    }\n\n    public get canMakeASoundOutOfAMusicBlockComment() {\n        return this.canMakeASoundOutOfAMusicBlockContainer.comment;\n    }\n\n    //endregion -------------------- Can make a sound out of a music block --------------------\n\n    //endregion -------------------- Instrument properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.gameContainer.toGameMap();\n    }\n\n    public toGameStyleMap() {\n        return this.gameStyleContainer.toGameStyleMap();\n    }\n\n    public toCourseThemeMap() {\n        return this.themeContainer.toCourseThemeMap();\n    }\n\n    public toTimeMap() {\n        return this.timeContainer.toTimeMap();\n    }\n\n    public toLimitMap() {\n        return this.limitContainer.toLimitMap();\n    }\n\n    public toLimitInTheEditorMap() {\n        return this.limitContainer.toLimitInTheEditorMap();\n    }\n\n    public toLimitWhilePlayingMap() {\n        return this.limitContainer.toLimitWhilePlayingMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {PossibleComment}                     from './ClassWithComment';\nimport type {PossibleValueOnObjectHolder}         from '../../util/holder/ObjectHolder';\nimport type {PropertyThatCanBeUnknownWithComment} from './PropertyThatCanBeUnknownWithComment';\n\nimport {PropertyContainer} from './Property.container';\nimport {DEFAULT_AMOUNT}    from './Property';\n\nexport class PropertyThatCanBeUnknownWithCommentContainer<T, IS_UNKNOWN extends boolean = boolean, COMMENT extends PossibleComment = PossibleComment, >\n    extends PropertyContainer<T, IS_UNKNOWN, DEFAULT_AMOUNT, COMMENT>\n    implements PropertyThatCanBeUnknownWithComment<T, IS_UNKNOWN, COMMENT> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN, comment: COMMENT,) {\n        super(value, isUnknown, comment,);\n    }\n\n}\n","import type {ThemeProperty} from './ThemeProperty';\n\nimport {Themes} from '../../../theme/Themes';\n\n/**\n * @classWithDynamicImport {@link Themes}\n */\nexport class ThemePropertyContainer<GROUND extends boolean = boolean, UNDERGROUND extends boolean = boolean, UNDERWATER extends boolean = boolean, DESERT extends | boolean | null = | boolean | null, SNOW extends | boolean | null = | boolean | null, SKY extends | boolean | null = | boolean | null, FOREST extends | boolean | null = | boolean | null, GHOST_HOUSE extends boolean = boolean, AIRSHIP extends boolean = boolean, CASTLE extends boolean = boolean, >\n    implements ThemeProperty<GROUND, UNDERGROUND, UNDERWATER, DESERT, SNOW, SKY, FOREST, GHOST_HOUSE, AIRSHIP, CASTLE> {\n\n    //region -------------------- Fields --------------------\n\n    #map?: ReadonlyMap<Themes, boolean>;\n    readonly #isInGroundTheme;\n    readonly #isInUndergroundTheme;\n    readonly #isInUnderwaterTheme;\n    readonly #isInDesertTheme;\n    readonly #isInSnowTheme;\n    readonly #isInSkyTheme;\n    readonly #isInForestTheme;\n    readonly #isInGhostHouseTheme;\n    readonly #isInAirshipTheme;\n    readonly #isInCastleTheme;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(isInGroundTheme: GROUND, isInUndergroundTheme: UNDERGROUND, isInUnderwaterTheme: UNDERWATER, isInDesertTheme: DESERT, isInSnowTheme: SNOW, isInSkyTheme: SKY, isInForestTheme: FOREST, isInGhostHouseTheme: GHOST_HOUSE, isInAirshipTheme: AIRSHIP, isInCastleTheme: CASTLE,) {\n        this.#isInGroundTheme = isInGroundTheme;\n        this.#isInUndergroundTheme = isInUndergroundTheme;\n        this.#isInUnderwaterTheme = isInUnderwaterTheme;\n        this.#isInDesertTheme = isInDesertTheme;\n        this.#isInSnowTheme = isInSnowTheme;\n        this.#isInSkyTheme = isInSkyTheme;\n        this.#isInForestTheme = isInForestTheme;\n        this.#isInGhostHouseTheme = isInGhostHouseTheme;\n        this.#isInAirshipTheme = isInAirshipTheme;\n        this.#isInCastleTheme = isInCastleTheme;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isInGroundTheme() {\n        return this.#isInGroundTheme;\n    }\n\n    public get isInUndergroundTheme() {\n        return this.#isInUndergroundTheme;\n    }\n\n    public get isInUnderwaterTheme() {\n        return this.#isInUnderwaterTheme;\n    }\n\n    public get isInDesertTheme() {\n        return this.#isInDesertTheme;\n    }\n\n    public get isInSnowTheme() {\n        return this.#isInSnowTheme;\n    }\n\n    public get isInSkyTheme() {\n        return this.#isInSkyTheme;\n    }\n\n    public get isInForestTheme() {\n        return this.#isInForestTheme;\n    }\n\n    public get isInGhostHouseTheme() {\n        return this.#isInGhostHouseTheme;\n    }\n\n    public get isInAirshipTheme() {\n        return this.#isInAirshipTheme;\n    }\n\n    public get isInCastleTheme() {\n        return this.#isInCastleTheme;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toCourseThemeMap(): ReadonlyMap<Themes, boolean> {\n        return this.#map ??= new Map(Themes.courseThemes.map(theme => [theme, theme.get(this),]));\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {ProviderWithoutKey} from '../../../../util/provider/ProviderWithoutKey';\nimport type {ThemeProperty}      from './ThemeProperty';\n\nimport {AbstractProvider}       from '../../../../util/provider/AbstractProvider';\nimport {ThemePropertyContainer} from './ThemeProperty.container';\n\n/**\n * @singleton\n */\nexport class ThemePropertyProvider\n    extends AbstractProvider<ArgumentsReceived, ThemeProperty>\n    implements ProviderWithoutKey<ThemeProperty, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: ThemePropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * Get (or create) a property instance based on the {@link Themes} properties.\n     *\n     * @param isInGroundTheme Is in the {@link Themes.GROUND ground theme}\n     * @param isInUndergroundTheme Is in the {@link Themes.UNDERGROUND underground theme}\n     * @param isInUnderwaterTheme Is in the {@link Themes.UNDERWATER underwater theme}\n     * @param isInDesertTheme Is in the {@link Themes.DESERT desert theme}\n     * @param isInSnowTheme Is in the {@link Themes.SNOW snow theme}\n     * @param isInSkyTheme Is in the {@link Themes.SKY sky theme}\n     * @param isInForestTheme Is in the {@link Themes.FOREST forest theme}\n     * @param isInGhostHouseTheme Is in the {@link Themes.GHOST_HOUSE ghost house theme}\n     * @param isInAirshipTheme Is in the {@link Themes.AIRSHIP airship theme}\n     * @param isInCastleTheme Is in the {@link Themes.CASTLE castle theme}\n     */\n    public get<GROUND extends boolean = boolean, UNDERGROUND extends boolean = boolean, UNDERWATER extends boolean = boolean, DESERT extends | boolean | null = | boolean | null, SNOW extends | boolean | null = | boolean | null, SKY extends | boolean | null = | boolean | null, FOREST extends | boolean | null = | boolean | null, GHOST_HOUSE extends boolean = boolean, AIRSHIP extends boolean = boolean, CASTLE extends boolean = boolean, >(isInGroundTheme: GROUND, isInUndergroundTheme: UNDERGROUND, isInUnderwaterTheme: UNDERWATER, isInDesertTheme: DESERT, isInSnowTheme: SNOW, isInSkyTheme: SKY, isInForestTheme: FOREST, isInGhostHouseTheme: GHOST_HOUSE, isInAirshipTheme: AIRSHIP, isInCastleTheme: CASTLE,): ThemeProperty<GROUND, UNDERGROUND, UNDERWATER, DESERT, SNOW, SKY, FOREST, GHOST_HOUSE, AIRSHIP, CASTLE>\n    public get(...argumentsReceived: ArgumentsReceived): ThemeProperty {\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new ThemePropertyContainer(...argumentsReceived,)))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [\n    isInGroundTheme: boolean,\n    isInUndergroundTheme: boolean,\n    isInUnderwaterTheme: boolean,\n    isInDesertTheme: | boolean | null,\n    isInSnowTheme: | boolean | null,\n    isInSkyTheme: | boolean | null,\n    isInForestTheme: | boolean | null,\n    isInGhostHouseTheme: boolean,\n    isInAirshipTheme: boolean,\n    isInCastleTheme: boolean,\n];\n","import type {TimeProperty} from './TimeProperty';\n\nimport {Import}     from '../../../../util/DynamicImporter';\nimport type {Times} from '../../../time/Times';\n\n/**\n * @classWithDynamicImport {@link Times}\n */\nexport class TimePropertyContainer<DAY extends boolean = boolean, NIGHT extends | boolean | null = | boolean | null, >\n    implements TimeProperty<DAY, NIGHT> {\n\n    //region -------------------- Fields --------------------\n\n    #map?: ReadonlyMap<Times, boolean>;\n    readonly #isInDayTheme;\n    readonly #isInNightTheme;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(isInDayTheme: DAY, isInNightTheme: NIGHT,) {\n        this.#isInDayTheme = isInDayTheme;\n        this.#isInNightTheme = isInNightTheme;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isInDayTheme() {\n        return this.#isInDayTheme;\n    }\n\n    public get isInNightTheme() {\n        return this.#isInNightTheme;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toTimeMap(): ReadonlyMap<Times, boolean> {\n        return this.#map ??= new Map(Import.Times.values.map(time => [time, time.get(this),]));\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {TimeProperty}       from './TimeProperty';\nimport type {ProviderWithoutKey} from '../../../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}      from '../../../../util/provider/AbstractProvider';\nimport {TimePropertyContainer} from './TimeProperty.container';\n\n/**\n * @singleton\n */\nexport class TimePropertyProvider\n    extends AbstractProvider<ArgumentsReceived, TimeProperty>\n    implements ProviderWithoutKey<TimeProperty, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: TimePropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * Get (or create) a property instance based on the {@link Times} properties.\n     *\n     * @param isInDayTime Is in the {@link Times.DAY day time}\n     * @param isInNightTime Is in the {@link Times.NIGHT night time}\n     */\n    public get<DAY extends boolean = boolean, NIGHT extends | boolean | null = | boolean | null, >(isInDayTime: DAY, isInNightTime: NIGHT,): TimeProperty<DAY, NIGHT>\n    public get(...argumentsReceived: ArgumentsReceived): TimeProperty {\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new TimePropertyContainer(...argumentsReceived,),))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [\n    isInDayTheme: boolean,\n    isInNightTheme: | boolean | null,\n];\n","import type {Builder}                                                                         from '../../util/builder/Builder';\nimport type {CanMakeASoundOutOfAMusicBlock}                                                   from './properties/instrument/loader.types';\nimport type {Entity, PossibleOtherEntities}                                                   from './Entity';\nimport type {EntityCategory}                                                                  from '../entityCategory/EntityCategory';\nimport type {EntityLink}                                                                      from './loader.types';\nimport type {EntityTemplate}                                                                  from './Entity.template';\nimport type {GeneralEntityLimitType, GeneralGlobalEntityLimitType, ProjectileEntityLimitType} from './properties/limit/Loader.types';\nimport type {CanMakeASoundOutOfAMusicBlockProperty, InstrumentProperty}                       from './properties/instrument/InstrumentProperty';\nimport type {InstrumentPropertyTemplate}                                                      from './properties/instrument/InstrumentProperty.template';\nimport type {Instrument}                                                                      from '../instrument/Instrument';\nimport type {LimitProperty}                                                                   from './properties/limit/LimitProperty';\nimport type {LimitPropertyTemplate}                                                           from './properties/limit/LimitProperty.template';\nimport type {Name}                                                                            from '../../lang/name/Name';\nimport type {NotApplicableProperty, UnknownProperty}                                          from '../_properties/PropertyWithEverything';\nimport type {ObjectHolder}                                                                    from '../../util/holder/ObjectHolder';\nimport type {PossibleComment}                                                                 from '../_properties/ClassWithComment';\nimport type {PossibleEnglishName}                                                             from './Entities.types';\nimport type {PossibleEnglishName as PossibleEnglishName_EntityLimit}                          from '../entityLimit/EntityLimits.types';\nimport type {PossibleGameReceived as OriginalPossibleGameReceived}                            from '../../lang/name/Name.builder.types';\nimport type {PossibleInstrument}                                                              from '../instrument/loader.types';\nimport type {PropertyThatCanBeUnknownWithComment}                                             from '../_properties/PropertyThatCanBeUnknownWithComment';\n\nimport {DelayedObjectHolderContainer}                   from '../../util/holder/DelayedObjectHolder.container';\nimport {EmptyEntity}                                    from './EmptyEntity';\nimport {EmptyEntityCategory}                            from '../entityCategory/EmptyEntityCategory';\nimport {EmptyInstrumentProperty}                        from './properties/instrument/EmptyInstrumentProperty';\nimport {Entities}                                       from './Entities';\nimport {EntityCategories}                               from '../entityCategory/EntityCategories';\nimport {EntityContainer}                                from './Entity.container';\nimport {EntityLimits}                                   from '../entityLimit/EntityLimits';\nimport {EntityReferencesContainer}                      from './properties/EntityReferences.container';\nimport {ExclusiveSM3DWEntityContainer}                  from './ExclusiveSM3DWEntity.container';\nimport {ExclusiveSMM1EntityContainer}                   from './ExclusiveSMM1Entity.container';\nimport {ExclusiveSMM2EntityContainer}                   from './ExclusiveSMM2Entity.container';\nimport {GamePropertyProvider}                           from './properties/game/GameProperty.provider';\nimport {Games}                                          from '../game/Games';\nimport {GameStructureProvider}                          from '../game/GameStructure.provider';\nimport {GameStylePropertyProvider}                      from './properties/gameStyle/GameStyleProperty.provider';\nimport {InstrumentPropertyProvider}                     from './properties/instrument/InstrumentProperty.provider';\nimport {Instruments}                                    from '../instrument/Instruments';\nimport {LimitPropertyProvider}                          from './properties/limit/LimitProperty.provider';\nimport {ObjectHolders}                                  from '../../util/holder/objectHolders';\nimport {ObjectHolderContainer}                          from '../../util/holder/ObjectHolder.container';\nimport {PropertyContainer}                              from '../_properties/Property.container';\nimport {PropertyContainer as PropertyInstanceContainer} from './properties/Property.container';\nimport {PropertyProvider}                               from '../_properties/PropertyProvider';\nimport {PropertyThatCanBeUnknownWithCommentContainer}   from '../_properties/PropertyThatCanBeUnknownWithComment.container';\nimport {TemplateWithNameBuilder}                        from '../_template/TemplateWithName.builder';\nimport {ThemePropertyProvider}                          from './properties/theme/ThemeProperty.provider';\nimport {TimePropertyProvider}                           from './properties/time/TimeProperty.provider';\n\n/**\n * Create an {@link Entity} from a {@link EntityTemplate template} received.\n *\n * @see ExclusiveSMM1EntityContainer\n * @see ExclusiveSM3DWEntityContainer\n * @see ExclusiveSMM2EntityContainer\n * @see EntityContainer\n */\nexport class EntityBuilder\n    extends TemplateWithNameBuilder<EntityTemplate, Entity>\n    implements Builder<Entity> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EMPTY_ENTITY_CALLBACK: () => readonly [Entity] = () => [EmptyEntity.get];\n    static readonly #EMPTY_INSTRUMENT_OBJECT_HOLDER: ObjectHolder<InstrumentProperty> = new ObjectHolderContainer(() => EmptyInstrumentProperty.get);\n\n    readonly #selfCallback = () => [this.build()] as const;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(template: EntityTemplate,) {\n        super(template, (template,) => EntityBuilder.#getGames(template,), false,);\n    }\n\n    /**\n     * Get the game depending on the {@link EntityTemplate entity template}.\n     * By retrieving, the template, it returns 'all', 'not in SMM2', {@link Games.SUPER_MARIO_MAKER_1 SMM1} or {@link Games.SUPER_MARIO_MAKER_2 SMM2}.\n     *\n     *\n     * @param template the template destructured to get only the games\n     * @onlyCalledAtConstruction\n     */\n    static #getGames({properties: {isIn: {game: {1: isInSMM1, '3DS': isInSMM3DS, 2: isInSMM2,},},},}: EntityTemplate,): OriginalPossibleGameReceived {\n        return isInSMM1 && isInSMM3DS\n            ? isInSMM2\n                ? 'all'\n                : 'notSMM2'\n            : isInSMM1 && !isInSMM2\n                ? Games.SUPER_MARIO_MAKER_1\n                : Games.SUPER_MARIO_MAKER_2;\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return EntityBuilder;\n    }\n\n    //region -------------------- Entity category helper methods --------------------\n\n    /**\n     * Get the entity category reference from the {@link EntityTemplate template}\n     * or return an {@link EmptyEntityCategory empty category}.\n     */\n    #getEntityCategory(): EntityCategory {\n        return EntityCategories.getValue(this.template.categoryInTheEditor)?.reference\n            ?? EmptyEntityCategory.get;\n    }\n\n    //endregion -------------------- Entity category helper methods --------------------\n    //region -------------------- Property helper methods --------------------\n\n    static #whereEntityLimit(entityLimit: PossibleEnglishName_EntityLimit,): EntityLimits\n    static #whereEntityLimit(entityLimit: | PossibleEnglishName_EntityLimit | null,): | EntityLimits | null\n    static #whereEntityLimit(entityLimit: | PossibleEnglishName_EntityLimit | null,) {\n        return EntityLimits.getValue(entityLimit);\n    }\n\n    static #getPropertyWhereEntityLimit(entityLimit: | PossibleEnglishName_EntityLimit | null | '?',): PropertyThatCanBeUnknownWithComment<EntityLimits, false, null> | NotApplicableProperty | UnknownProperty\n    static #getPropertyWhereEntityLimit<COMMENT extends PossibleComment, >(entityLimit: | PossibleEnglishName_EntityLimit | null, comment: COMMENT,): | PropertyThatCanBeUnknownWithComment<EntityLimits, false, COMMENT> | NotApplicableProperty\n    static #getPropertyWhereEntityLimit(entityLimit: | PossibleEnglishName_EntityLimit | null | '?', comment: PossibleComment = null,): PropertyThatCanBeUnknownWithComment<EntityLimits, false> | NotApplicableProperty | UnknownProperty {\n        if (entityLimit === '?')\n            return PropertyContainer.UNKNOWN_CONTAINER;\n        if (entityLimit == null)\n            return PropertyContainer.NOT_APPLICABLE_CONTAINER;\n        return new PropertyThatCanBeUnknownWithCommentContainer(this.#whereEntityLimit(entityLimit), false, comment,);\n    }\n\n    /**\n     * Get the {@link LimitProperty limit property} from the {@link EntityTemplate template}\n     *\n     * @param limitTemplate the limit template\n     */\n    static #getLimitPropertyFields(limitTemplate: LimitPropertyTemplate,): LimitProperty {\n        const {\n            editor: {'1And3DS': editorLimit_SMM1And3DS, 2: editorLimit_SMM2,},\n            whilePlaying: {\n                isInGEL: {value: generalLimit, isSuperGlobal: superGlobalGeneralLimit,},\n                isInPEL: powerUpLimit,\n                isInPJL: projectileLimit,\n                otherLimit: {value: otherLimit, comment: otherLimitComment,},\n            },\n        } = limitTemplate;\n\n        return LimitPropertyProvider.get.get([[editorLimit_SMM1And3DS, editorLimit_SMM2,], [generalLimit, superGlobalGeneralLimit,], powerUpLimit, projectileLimit, [otherLimit, otherLimitComment,],],\n            GameStructureProvider.get.get(this.#whereEntityLimit(editorLimit_SMM1And3DS), this.#getPropertyWhereEntityLimit(editorLimit_SMM2),),\n            [\n                PropertyProvider.newBooleanContainer<GeneralEntityLimitType, true, false, true>(generalLimit, true, false,),\n                PropertyProvider.newBooleanContainer<GeneralGlobalEntityLimitType, true, false, true>(superGlobalGeneralLimit, true, false,),\n            ],\n            PropertyProvider.newBooleanContainer(powerUpLimit, true, false,),\n            PropertyProvider.newBooleanContainer<ProjectileEntityLimitType, true, false, true>(projectileLimit, true, false,),\n            this.#getPropertyWhereEntityLimit(otherLimit, otherLimitComment,),\n        );\n    }\n\n    //region -------------------- Property helper methods (instrument) --------------------\n\n    /**\n     * <p>\n     *  Get the instrument reference (tuple) based on the value received in parameter.\n     * </p>\n     *\n     * <p>\n     *  The possible instruments can either be a single one or a mix of 2 different entities (by reference, height or alternative form)\n     *\n     *  The entities that are applicable for this are:\n     *  <ol>\n     *      <li>{@link Entities.CHAIN_CHOMP Chain Chomp}: {@link Entities.UNCHAINED_CHOMP unchained} & {@link Entities.CHAIN_CHOMP_STUMP stump}</li>\n     *      <li>{@link Entities.LEMMY Lemmy}: top & bottom</li>\n     *      <li>{@link Entities.TRAMPOLINE Trampoline}: regular & sideway</li>\n     *  </ol>\n     * </p>\n     *\n     * @param instrument The non null instrument (single or mixed)\n     * @returns A tuple of 1 or 2 instruments\n     * @see Instruments\n     */\n    static #whereInstrument(instrument: NonNullable<PossibleInstrument>,): | readonly [Instrument,] | readonly [Instrument, Instrument,]\n    static #whereInstrument(instrument: NonNullable<PossibleInstrument>,): readonly Instrument[] {\n        const singleInstrument = Instruments.getValue(instrument);\n        if (singleInstrument != null)\n            return [singleInstrument.reference];\n\n        return Instruments.values.filter(enumerable => instrument.includes(enumerable.englishName))!\n            .map(enumerable => enumerable.reference);\n    }\n\n    /**\n     * Get the property to tell if the {@link Entity current entity} (by its {@link EntityTemplate template})\n     * can make a sound out of a {@link Entities.MUSIC_BLOCK music block}.\n     *\n     * @param canMakeASoundOutOfAMusicBlock can make a sound out of a {@link Entities.MUSIC_BLOCK music block entity}\n     * @returns {@link NotApplicableProperty N/A} or [boolean & {@link PossibleCanMakeASoundOutOfAMusicBlock_Comment nullable comment}]\n     */\n    static #getPropertyWhereCanMakeASoundOutOfAMusicBlock(canMakeASoundOutOfAMusicBlock: CanMakeASoundOutOfAMusicBlock,): CanMakeASoundOutOfAMusicBlockProperty {\n        if (canMakeASoundOutOfAMusicBlock == null)\n            return PropertyContainer.NOT_APPLICABLE_CONTAINER;\n        return PropertyProvider.newBooleanContainer<CanMakeASoundOutOfAMusicBlock, true, false, true>(canMakeASoundOutOfAMusicBlock, true, false,);\n    }\n\n    /**\n     * Get the instrument properties of an {@link Entity entity}\n     *\n     * @param instrumentTemplate the instrument template\n     * @returns An object holder containing the properties for the instrument part of an {@link Entity entity}\n     * @see InstrumentPropertyProvider\n     * @see EmptyInstrumentProperty\n     */\n    static #getInstrumentPropertyHolder({instrument, canMakeASoundOutOfAMusicBlock,}: InstrumentPropertyTemplate,): ObjectHolder<InstrumentProperty> {\n        if (instrument == null)\n            return this.#EMPTY_INSTRUMENT_OBJECT_HOLDER;\n\n        return new DelayedObjectHolderContainer(() => InstrumentPropertyProvider.get.get([instrument, canMakeASoundOutOfAMusicBlock,],\n            new DelayedObjectHolderContainer(() => this.#whereInstrument(instrument)),\n            this.#getPropertyWhereCanMakeASoundOutOfAMusicBlock(canMakeASoundOutOfAMusicBlock,),\n        ));\n    }\n\n    //endregion -------------------- Property helper methods (instrument) --------------------\n\n    /**\n     * Create the {@link Property property} from the {@link EntityTemplate template}\n     * with the games, game style, theme, time & limit.\n     */\n    #createProperty() {\n        const {isIn: {game, style: gameStyle, theme, time,}, limits, sound,} = this.template.properties;\n\n        return new PropertyInstanceContainer(\n            new ObjectHolderContainer(GamePropertyProvider.get.get(game['1'], game['3DS'], game['2'],)),\n            new DelayedObjectHolderContainer(() => GameStylePropertyProvider.get.get(gameStyle.superMarioBros, gameStyle.superMarioBros3, gameStyle.superMarioWorld, gameStyle.newSuperMarioBrosU, gameStyle.superMario3DWorld,)),\n            new DelayedObjectHolderContainer(() => ThemePropertyProvider.get.get(theme.ground, theme.underground, theme.underwater, theme.desert, theme.snow, theme.sky, theme.forest, theme.ghostHouse, theme.airship, theme.castle,)),\n            new DelayedObjectHolderContainer(() => TimePropertyProvider.get.get(time.day, time.night,)),\n            new DelayedObjectHolderContainer(() => EntityBuilder.#getLimitPropertyFields(limits)),\n            EntityBuilder.#getInstrumentPropertyHolder(sound),\n        );\n    }\n\n    //endregion -------------------- Property helper methods --------------------\n    //region -------------------- Entity references helper methods --------------------\n\n    /**\n     * Create every entity references possible applicable to a single entity.\n     * It gets the single references (game, game style, theme & time),\n     * but it can also get every reference from the {@link EntityTemplate template}.\n     */\n    #createReferences() {\n        const reference = this.template.properties.reference;\n\n        //region -------------------- Single reference --------------------\n\n        const inSuperMarioBros = this.#createOtherEntityReferences(reference.style.superMarioBros);\n        const inSuperMarioBros3 = this.#createOtherEntityReferences(reference.style.superMarioBros3);\n        const inSuperMarioWorld = this.#createOtherEntityReferences(reference.style.superMarioWorld);\n        const inNewSuperMarioBros = this.#createOtherEntityReferences(reference.style.newSuperMarioBrosU);\n        const inSuperMario3DWorld = this.#createOtherEntityReferences(reference.style.superMario3DWorld);\n\n        const inGroundTheme = this.#createOtherEntityReferences(reference.theme.ground);\n        const inUndergroundTheme = this.#createOtherEntityReferences(reference.theme.underground);\n        const inUnderwaterTheme = this.#createOtherEntityReferences(reference.theme.underwater);\n        const inDesertTheme = this.#createOtherEntityReferences(reference.theme.desert);\n        const inSnowTheme = this.#createOtherEntityReferences(reference.theme.snow);\n        const inSkyTheme = this.#createOtherEntityReferences(reference.theme.sky);\n        const inForestTheme = this.#createOtherEntityReferences(reference.theme.forest);\n        const inGhostHouseTheme = this.#createOtherEntityReferences(reference.theme.ghostHouse);\n        const inAirshipTheme = this.#createOtherEntityReferences(reference.theme.airship);\n        const inCastleTheme = this.#createOtherEntityReferences(reference.theme.castle);\n\n        const inDayTheme = this.#createOtherEntityReferences(reference.time.day);\n        const inNightTheme = this.#createOtherEntityReferences(reference.time.night);\n\n        //endregion -------------------- Single reference --------------------\n        //region -------------------- Group reference --------------------\n\n        let everyGameStyleReferences: ObjectHolder<readonly Entity[]>;\n        let everyThemeReferences: ObjectHolder<readonly Entity[]>;\n        let everyTimeReferences: ObjectHolder<readonly Entity[]>;\n        let everyReferences: ObjectHolder<readonly Entity[]>;\n        if (reference.group.all === null)\n            everyGameStyleReferences = everyThemeReferences = everyTimeReferences = everyReferences = ObjectHolders.EMPTY_ARRAY;\n        else {\n            everyGameStyleReferences = this.#createGroupReference(reference.group.gameStyle);\n            everyThemeReferences = this.#createGroupReference(reference.group.theme);\n            everyTimeReferences = this.#createGroupReference(reference.group.time);\n            everyReferences = this.#createGroupReference(reference.group.all);\n        }\n\n        //endregion -------------------- Group reference --------------------\n\n        return new EntityReferencesContainer(\n            inSuperMarioBros, inSuperMarioBros3, inSuperMarioWorld, inNewSuperMarioBros, inSuperMario3DWorld,\n            inGroundTheme, inUndergroundTheme, inUnderwaterTheme, inDesertTheme, inSnowTheme, inSkyTheme, inForestTheme, inGhostHouseTheme, inAirshipTheme, inCastleTheme,\n            inDayTheme, inNightTheme,\n            everyGameStyleReferences, everyThemeReferences, everyTimeReferences, everyReferences,\n        );\n    }\n\n    #createGroupReference(set: Set<EntityTemplate> | null,): ObjectHolder<readonly Entity[]> {\n        return set == null\n            ? ObjectHolders.EMPTY_ARRAY\n            : new DelayedObjectHolderContainer(() => Array.from(set).map(reference => Entities.getValue((reference.name.english.simple || reference.name.english.american!) as PossibleEnglishName).reference));\n    }\n\n    /**\n     * Create an entity {@link ObjectHolder} with returning type 1 or 2 entity.\n     * It can contain 'this' that will return itself in the callback.\n     *\n     * @param link the entity link or null\n     */\n    #createOtherEntityReferences(link: | EntityLink | null,): ObjectHolder<PossibleOtherEntities> {\n        return new DelayedObjectHolderContainer(\n            link === null\n                ? EntityBuilder.#EMPTY_ENTITY_CALLBACK\n                : link === 'this'\n                    ? this.#selfCallback\n                    : () => (link.split(' / ') as PossibleEnglishName[]).map(splitLink => Entities.getValue(splitLink).reference) as unknown as PossibleOtherEntities\n        );\n    }\n\n    //endregion -------------------- Entity references helper methods --------------------\n\n    //endregion -------------------- Build helper methods --------------------\n\n    public override _build(name: Name<string>,) {\n        const isInProperty = this.#createProperty();\n        const isInSMM1 = isInProperty.isInSuperMarioMaker1;\n        const isInSMM2 = isInProperty.isInSuperMarioMaker2;\n\n\n        return isInSMM1 && !isInSMM2\n            ? new ExclusiveSMM1EntityContainer(name, this.#getEntityCategory(), isInProperty, this.#createReferences(),)\n            : !isInSMM1 && isInSMM2\n                ? !isInProperty.isInSuperMarioBrosStyle && !isInProperty.isInSuperMarioBros3Style && !isInProperty.isInSuperMarioWorldStyle && !isInProperty.isInNewSuperMarioBrosUStyle && isInProperty.isInSuperMario3DWorldStyle\n                    ? new ExclusiveSM3DWEntityContainer(name, this.#getEntityCategory(), isInProperty, this.#createReferences(),)\n                    : new ExclusiveSMM2EntityContainer(name, this.#getEntityCategory(), isInProperty, this.#createReferences(),)\n                : new EntityContainer(name, this.#getEntityCategory(), isInProperty, this.#createReferences(),);\n    }\n\n}\n","import type {Builder}      from './Builder';\nimport type {ObjectHolder} from '../holder/ObjectHolder';\n\nimport {DelayedObjectHolderContainer} from '../holder/DelayedObjectHolder.container';\n\n/**\n * A generic builder that create only <b>once</b> an instance from another {@link Builder}.\n * @see Builder\n */\nexport class GenericSingleInstanceBuilder<T>\n    implements Builder<T> {\n\n    readonly #sourceBuilder: Builder<T>;\n    readonly #callbackCallerForBuilder: ObjectHolder<T>;\n\n    public constructor(builder: Builder<T>,) {\n        this.#sourceBuilder = builder;\n        this.#callbackCallerForBuilder = new DelayedObjectHolderContainer(() => this.builder.build());\n    }\n\n\n    public get builder(): Builder<T> {\n        return this.#sourceBuilder;\n    }\n\n    public build(): T {\n        return this.#callbackCallerForBuilder.get;\n    }\n\n}\n","import type {EntityLink}          from './loader.types';\nimport type {EntityTemplate}      from './Entity.template';\nimport type {PossibleEnglishName} from './Entities.types';\n\nimport {isInProduction} from '../../variables';\n\ninterface ReferencesToWatchDefinition {\n\n    /**\n     * Add every sub references in the \"time\", \"theme\" & \"game style\" fields.\n     *\n     * @param reference the template to retrieve and set the other references.\n     */\n    addSubReference(reference: EntityTemplate,): void\n\n    testReferences(): void\n\n    /**\n     * Add every references on both individual {@link references}\n     * and the {@link ReferenceHolderForProduction.value reference value} inside {@link ReferenceHolderForProduction}.\n     *\n     * It also add each reference into the proper type ({@link ReferenceType}).\n     *\n     * @see EntityReferencesTemplate.group\n     */\n    setReferences(): void\n\n}\n\ninterface ReferencesToWatchDefinitionConstructor {\n\n    new(englishNames: Map<PossibleEnglishName, EntityTemplate>,): ReferencesToWatchDefinition\n\n}\n\ninterface ReferenceHolderForProduction {\n\n    get reference(): EntityTemplate\n\n    get type(): ReferenceType\n\n    get value(): PossibleEnglishName\n\n}\n\ninterface ReferenceHolderForTestAndDevelopment\n    extends ReferenceHolderForProduction {\n\n    get errorIfNeverFound(): () => ReferenceError\n\n}\n\ntype ReferenceType = | 'time' | 'theme' | 'gameStyle';\n\nabstract class AbstractReferenceToWatch<T extends ReferenceHolderForProduction, >\n    implements ReferencesToWatchDefinition {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #TIME = 'time';\n    static readonly #THEME = 'theme';\n    static readonly #GAME_STYLE = 'gameStyle';\n    static readonly #THIS_REFERENCE = 'this';\n    static readonly #SEPARATOR = '/';\n    static readonly #SEPARATOR_WITH_SPACE = ` ${AbstractReferenceToWatch.#SEPARATOR} `;\n\n    readonly #englishNames;\n    readonly #alreadyAddedName: Set<EntityLink>;\n    readonly #references: T[];\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(englishNames: Map<PossibleEnglishName, EntityTemplate>,) {\n        this.#englishNames = englishNames;\n        this.#alreadyAddedName = new Set();\n        this.#references = [];\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _englishNames() {\n        return this.#englishNames;\n    }\n\n    protected get _alreadyAddedName() {\n        return this.#alreadyAddedName;\n    }\n\n    protected get _references() {\n        return this.#references;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public addSubReference(reference: EntityTemplate,): void {\n        const otherReference = reference.properties.reference;\n        ([\n            [otherReference.time.day, AbstractReferenceToWatch.#TIME,],\n            [otherReference.time.night, AbstractReferenceToWatch.#TIME,],\n\n            [otherReference.style.superMarioBros, AbstractReferenceToWatch.#GAME_STYLE,],\n            [otherReference.style.superMarioBros3, AbstractReferenceToWatch.#GAME_STYLE,],\n            [otherReference.style.superMarioWorld, AbstractReferenceToWatch.#GAME_STYLE,],\n            [otherReference.style.newSuperMarioBrosU, AbstractReferenceToWatch.#GAME_STYLE,],\n            [otherReference.style.superMario3DWorld, AbstractReferenceToWatch.#GAME_STYLE,],\n\n            [otherReference.theme.ground, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.underground, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.underwater, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.desert, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.snow, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.sky, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.forest, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.ghostHouse, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.airship, AbstractReferenceToWatch.#THEME,],\n            [otherReference.theme.castle, AbstractReferenceToWatch.#THEME,],\n        ].filter(([otherReference]) => otherReference !== null) as [EntityLink, ReferenceType,][])\n            .filter(([otherReference,]) => otherReference !== AbstractReferenceToWatch.#THIS_REFERENCE)\n            .forEach(([otherReference, referenceType,]) => this._addReference(reference, otherReference, referenceType,));\n    }\n\n    protected _addReference(template: EntityTemplate, reference: EntityLink, referenceType: ReferenceType,): void {\n        if (reference.includes(AbstractReferenceToWatch.#SEPARATOR))\n            ((reference.split(AbstractReferenceToWatch.#SEPARATOR_WITH_SPACE) as (PossibleEnglishName | 'this')[])\n                .filter(splitReference => splitReference !== AbstractReferenceToWatch.#THIS_REFERENCE) as PossibleEnglishName[])\n                .forEach((splitReference, index,) =>\n                    this._references.push(this._createReferenceHolder(template, splitReference, referenceType, index,)));\n        else\n            this._references.push(this._createReferenceHolder(template, reference as PossibleEnglishName, referenceType,));\n        this._alreadyAddedName.add(reference);\n\n    }\n\n    protected abstract _createReferenceHolder(template: EntityTemplate, singleReference: PossibleEnglishName, referenceType: ReferenceType, index?: number,): T;\n\n    public testReferences(): void {\n    }\n\n    public setReferences(): void {\n        this._references.forEach(reference => {\n            const referenceWatched = this._englishNames.get(reference.value)!;\n\n            const referenceToWatchTemplate = reference.reference;\n            const referenceWatchedTemplate = referenceWatched;\n\n            (referenceWatchedTemplate.properties.reference.group.all ??= new Set()).add(referenceToWatchTemplate);\n            (referenceToWatchTemplate.properties.reference.group.all ??= new Set()).add(referenceWatchedTemplate);\n            switch (reference.type) {\n                case AbstractReferenceToWatch.#GAME_STYLE:\n                    (referenceWatchedTemplate.properties.reference.group.gameStyle ??= new Set()).add(referenceToWatchTemplate);\n                    (referenceToWatchTemplate.properties.reference.group.gameStyle ??= new Set()).add(referenceWatchedTemplate);\n                    break;\n                case AbstractReferenceToWatch.#THEME:\n                    (referenceWatchedTemplate.properties.reference.group.theme ??= new Set()).add(referenceToWatchTemplate);\n                    (referenceToWatchTemplate.properties.reference.group.theme ??= new Set()).add(referenceWatchedTemplate);\n                    break;\n                case AbstractReferenceToWatch.#TIME:\n                    (referenceWatchedTemplate.properties.reference.group.time ??= new Set()).add(referenceToWatchTemplate);\n                    (referenceToWatchTemplate.properties.reference.group.time ??= new Set()).add(referenceWatchedTemplate);\n                    break;\n            }\n        });\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\nclass ReferencesToWatchForProduction\n    extends AbstractReferenceToWatch<ReferenceHolderForProduction> {\n\n    public constructor(englishNames: Map<PossibleEnglishName, EntityTemplate>,) {\n        super(englishNames,);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _createReferenceHolder(template: EntityTemplate, singleReference: PossibleEnglishName, referenceType: ReferenceType,): ReferenceHolderForProduction {\n        return {\n            reference: template,\n            type: referenceType,\n            value: singleReference,\n        };\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\nclass ReferencesToWatchForTestAndDevelopment\n    extends AbstractReferenceToWatch<ReferenceHolderForTestAndDevelopment> {\n\n    public constructor(englishNames: Map<PossibleEnglishName, EntityTemplate>,) {\n        super(englishNames,);\n    }\n\n    //region -------------------- Methods --------------------\n\n    protected override _createReferenceHolder(template: EntityTemplate, reference: PossibleEnglishName, referenceType: ReferenceType, index?: number,): ReferenceHolderForTestAndDevelopment {\n        return {\n            reference: template,\n            type: referenceType,\n            value: reference,\n            errorIfNeverFound: () => index == null\n                ? new ReferenceError(`The reference value (\"${reference}\") is not within the english map.`)\n                : new ReferenceError(`The reference[${index}] (\"${reference}\") is not within the english map`),\n        };\n    }\n\n    public override testReferences(): void {\n        this._references.forEach(englishReferenceToWatch => {\n            if (!this._englishNames.has(englishReferenceToWatch.value))\n                throw englishReferenceToWatch.errorIfNeverFound();\n        });\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\n\nconst ReferencesToWatch: ReferencesToWatchDefinitionConstructor = isInProduction ? ReferencesToWatchForProduction : ReferencesToWatchForTestAndDevelopment;\nexport {ReferencesToWatch};\n","import resource from '../../resources/compiled/Entity.json';\n\nimport type {Builder}from '../../util/builder/Builder';\nimport type {CanBeAffectedByATwister, CanBeBrokenOrKilledByABobOmb, CanBeFiredOutOfABulletLauncher, CanBePutInABlock, CanBePutInAClownCar, CanBePutInALakituCloud, CanBePutInASwingingClaw, CanBePutInATree, CanBePutOnATrack, CanBeSpawnedByMagikoopa, CanBeSpawnedByWingedMagikoopa, CanBeStacked, CanBeThrownByALakitu, CanBeThrownByBowserInClownCar, CanBeThrownByBowserJr, CanBeThrownByBowserJrInClownCar, CanBeTransformedByMagikoopa, CanContainOrSpawnAKey, CanGoThroughWalls, CanGoThroughWallsInSM3DW, CanIgniteABobOmb, CanSpawnOutOfAPipe, CanSurviveInTheLavaOrThePoison, HasALightSourceEmittedInSMB, HasAReferenceInMarioMaker, IsAffectedDirectlyByAnOnOrOffState, IsGlobalGroundOrGlobal, PossibleDimension, PossibleDimensionDifferentInSM3DW, PossibleEntityType, PossibleFirstAppearanceInMarioMaker, PossibleLightSource, PossibleMaximumDimension, PossibleMaximumDimensionDifferentInSM3DW, PossibleWeight} from '../entityTypes';\nimport type {CanMakeASoundOutOfAMusicBlock}from './properties/instrument/loader.types';\nimport type {CanRespawnOnlineOutOfABlockType, CanRespawnOnlineType, CanRespawnType, EveryPossibleLinkedBehaviourAcronymArray, PossibleLocalCoopBehaviourType, PossibleOnlineCoopBehaviourType, PossibleOnlineVersusBehaviourType, PossibleSoloBehaviourType}from '../behaviour/Loader.types';\nimport type {EditorLimitType_SMM1And3DS, EditorLimitType_SMM2, GeneralEntityLimitType, GeneralGlobalEntityLimitType, LimitAmountType, OffscreenDespawningDownwardVerticalRangeLimitType, OffscreenDespawningHorizontalRangeLimitType, OffscreenDespawningUpwardVerticalRangeLimitType, OffscreenSpawningAndDespawningReferencePoint, OffscreenSpawningDownwardVerticalRangeLimitType, OffscreenSpawningHorizontalRangeLimitType, OffscreenSpawningUpwardVerticalRangeLimitType, OtherLimitCommentType, OtherLimitType, PowerUpEntityLimitType, ProjectileEntityLimitType, RenderedObjectLimitType}                                                                                                                                                                                                                                                                                                                                   from './properties/limit/Loader.types';\nimport type {Entity}from './Entity';\nimport type {EntityLink}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             from './loader.types';\nimport type {DimensionTemplate, EntityTemplate, SimpleDimensionTemplate, SimpleDimensionTemplateDifferentInSM3DW}from './Entity.template';\nimport type {Loader}from '../../util/loader/Loader';\nimport type {PropertiesArrayWithOptionalLanguages as LanguagesPropertyArray}from '../../lang/Loader.types';\nimport type {PropertiesArrayFromAllGames as GamesPropertyArray}from '../game/Loader.types';\nimport type {PossibleCanBeInAParachute, PossibleCanHaveWings, PossibleHasAMushroomVariant}from './properties/basic/BasicProperty';\nimport type {PossibleEnglishName}from './Entities.types';\nimport type {PossibleEnglishName as PossibleEnglishName_Category}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    from '../entityCategory/EntityCategories.types';\nimport type {PossibleEnglishName as PossibleEnglishName_Limit}from '../entityLimit/EntityLimits.types';\nimport type {PossibleInstrument}from '../instrument/loader.types';\nimport type {PossibleName as PossibleMarioMakerVersion}from '../version/Versions.types';\nimport type {SimpleGameStyleTemplate}from '../gameStyle/SimpleGameStyle.template';\n\nimport {AbstractTemplateBuilder}      from '../_template/AbstractTemplate.builder';\nimport {assert}                       from '../../util/utilitiesMethods';\nimport {CSVLoader}                    from '../../util/loader/CSVLoader';\nimport {EMPTY_ARRAY}                  from '../../util/emptyVariables';\nimport {EntityBuilder}                from './Entity.builder';\nimport {GenericSingleInstanceBuilder} from '../../util/builder/GenericSingleInstanceBuilder';\nimport {HeaderTypesForConvertor}      from '../_util/loader/HeaderTypesForConvertor';\nimport {ReferencesToWatch}            from './ReferencesToWatch';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    entityType,\n\n    firstAppearanceInMarioMaker,\n    firstAppearanceInMarioMaker_version,\n\n    //region -------------------- Games --------------------\n\n    isInSuperMarioMaker1,\n    isInSuperMarioMakerFor3DS,\n    isInSuperMarioMaker2,\n\n    //endregion -------------------- Games --------------------\n    //region -------------------- Basic properties --------------------\n\n    categoryInTheEditor,\n\n    hasAMushroomVariant,\n    canBeInAParachute,\n    canHaveWings,\n\n    //endregion -------------------- Basic properties --------------------\n    //region -------------------- Specific properties --------------------\n\n    canContainOrSpawnAKey,\n\n    isAffectedDirectlyByAnOnOrOffState,\n\n    canBePutOnATrack,\n    editorLimit_canBePutOnATrack,\n    whilePlaying_canBePutOnATrack,\n\n    canSpawnOutOfAPipe,\n\n    canBePutInASwingingClaw,\n\n    canBeThrownByALakitu,\n    canBePutInALakituCloud,\n\n    canBePutInAClownCar,\n\n    canBeFiredOutOfABulletLauncher,\n\n    canBePutInABlock,\n\n    canBePutInATree,\n\n    weight,\n\n    lightSourceEmitted, lightSourceEmitted_isInSMB,\n\n    canSurviveInTheLavaOrThePoison,\n\n    canIgniteABobOmb, canBeBrokenOrKilledByABobOmb,\n\n    canBeAffectedByATwister,\n\n    canGoThroughWalls, canGoThroughWalls_inSM3DW,\n\n    canBeStacked,\n\n    isGlobalGroundOrGlobal,\n\n    instrument,\n    canMakeASoundOutOfAMusicBlock,\n\n    //endregion -------------------- Specific properties --------------------\n    //region -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n\n    canBeThrownByBowserInClownCar,\n    canBeThrownByBowserJr, canBeThrownByBowserJrInClownCar,\n    canBeTransformedByMagikoopa, canBeSpawnedByMagikoopa, canBeSpawnedByWingedMagikoopa,\n\n    //endregion -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n    //region -------------------- Entity limit properties --------------------\n\n    limitAmount,\n\n    editorLimit_SMM1And3DS,\n    editorLimit_SMM2,\n\n    whilePlaying_isInGEL,\n    whilePlaying_isInGEL_isSuperGlobal,\n\n    whilePlaying_isInPEL,\n\n    whilePlaying_isInPJL,\n\n    whilePlaying_isInObjectRenderedLimit,\n\n    whilePlaying_otherLimit, whilePlaying_otherLimit_comment,\n\n    //endregion -------------------- Entity limit properties --------------------\n    //region -------------------- Spawning / Despawning range properties --------------------\n\n    canRespawn, canRespawn_online, canRespawn_online_insideABlock,\n\n    behaviour_solo,\n    behaviour_localCoop,\n    behaviour_onlineCoop, behaviour_onlineVS,\n\n\n    offscreenSpawningAndDespawningReferencePoint,\n    offscreenSpawningHorizontalRange,\n    offscreenDespawningHorizontalRange,\n\n    offscreenSpawningUpwardVerticalRange,\n    offscreenDespawningUpwardVerticalRange,\n\n    offscreenSpawningDownwardVerticalRange,\n    offscreenDespawningDownwardVerticalRange,\n\n    //endregion -------------------- Spawning / Despawning range properties --------------------\n    //region -------------------- Dimension properties --------------------\n\n    dimension,\n    dimension_maximum,\n\n    dimension_differentInSM3DW,\n    dimension_maximum_differentInSM3DW,\n\n    //endregion -------------------- Dimension properties --------------------\n    //region -------------------- Reference on specific condition properties --------------------\n\n    inDayTheme,\n    inNightTheme,\n\n    inGroundTheme,\n    inUndergroundTheme,\n    inUnderwaterTheme,\n    inDesertTheme,\n    inSnowTheme,\n    inSkyTheme,\n    inForestTheme,\n    inGhostHouseTheme,\n    inAirshipTheme,\n    inCastleTheme,\n\n    inSMBGameStyle,\n    inSMB3GameStyle,\n    inSMWGameStyle,\n    inNSMBUGameStyle,\n    inSM3DWGameStyle,\n\n    //endregion -------------------- Reference on specific condition properties -------------------\n\n    hasANameReferencedInMarioMaker,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\n//region -------------------- Exclusive properties --------------------\n\ntype ExclusivePropertiesArray1 = [\n    entityType: PossibleEntityType,\n\n    firstAppearanceInMarioMaker: PossibleFirstAppearanceInMarioMaker,\n    firstAppearanceInMarioMaker_version: PossibleMarioMakerVersion,\n];\ntype ExclusivePropertiesArray2 = [\n    //region -------------------- Basic properties --------------------\n\n    categoryInTheEditor: | PossibleEnglishName_Category | null,\n\n    hasAMushroomVariant: PossibleHasAMushroomVariant,\n    canBeInAParachute: PossibleCanBeInAParachute,\n    canHaveWings: PossibleCanHaveWings,\n\n    //endregion -------------------- Basic properties --------------------\n    //region -------------------- Specific properties --------------------\n\n    canContainOrSpawnAKey: CanContainOrSpawnAKey,\n\n    isAffectedDirectlyByAnOnOrOffState: IsAffectedDirectlyByAnOnOrOffState,\n\n    canBePutOnATrack: CanBePutOnATrack,\n    editorLimit_canBePutOnATrack: | PossibleEnglishName_Limit | null,\n    whilePlaying_canBePutOnATrack: | PossibleEnglishName_Limit | null,\n\n    canSpawnOutOfAPipe: CanSpawnOutOfAPipe,\n\n    canBePutInASwingingClaw: CanBePutInASwingingClaw,\n\n    canBeThrownByALakitu: CanBeThrownByALakitu,\n    canBePutInALakituCloud: CanBePutInALakituCloud,\n\n    canBePutInAClownCar: CanBePutInAClownCar,\n\n    canBeFiredOutOfABulletLauncher: CanBeFiredOutOfABulletLauncher,\n\n    canBePutInABlock: CanBePutInABlock,\n\n    canBePutInATree: CanBePutInATree,\n\n    weight: PossibleWeight,\n\n    lightSourceEmitted: PossibleLightSource,\n    lightSourceEmitted_isInSMB: HasALightSourceEmittedInSMB,\n\n    canSurviveInTheLavaOrThePoison: CanSurviveInTheLavaOrThePoison,\n\n    canIgniteABobOmb: CanIgniteABobOmb,\n    canBeBrokenOrKilledByABobOmb: CanBeBrokenOrKilledByABobOmb,\n\n    canBeAffectedByATwister: CanBeAffectedByATwister,\n\n    canGoThroughWalls: CanGoThroughWalls,\n    canGoThroughWalls_inSM3DW: CanGoThroughWallsInSM3DW,\n\n    canBeStacked: CanBeStacked,\n\n    isGlobalGroundOrGlobal: IsGlobalGroundOrGlobal,\n\n    instrument: PossibleInstrument,\n    canMakeASoundOutOfAMusicBlock: CanMakeASoundOutOfAMusicBlock,\n\n    //endregion -------------------- Specific properties --------------------\n    //region -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n\n    canBeThrownByBowserInClownCar: CanBeThrownByBowserInClownCar,\n\n    canBeThrownByBowserJr: CanBeThrownByBowserJr,\n    canBeThrownByBowserJrInClownCar: CanBeThrownByBowserJrInClownCar,\n\n    canBeTransformedByMagikoopa: CanBeTransformedByMagikoopa,\n    canBeSpawnedByMagikoopa: CanBeSpawnedByMagikoopa,\n    canBeSpawnedByWingedMagikoopa: CanBeSpawnedByWingedMagikoopa,\n\n    //endregion -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n    //region -------------------- Entity limit properties --------------------\n\n    limitAmount: LimitAmountType,\n\n    editorLimit_SMM1And3DS: EditorLimitType_SMM1And3DS,\n    editorLimit_SMM2: EditorLimitType_SMM2,\n\n    whilePlaying_isInGEL: GeneralEntityLimitType,\n    whilePlaying_isInGEL_isSuperGlobal: GeneralGlobalEntityLimitType,\n\n    whilePlaying_isInPEL: PowerUpEntityLimitType,\n\n    whilePlaying_isInPJL: ProjectileEntityLimitType,\n\n    whilePlaying_isInObjectRenderedLimit: RenderedObjectLimitType,\n\n    whilePlaying_otherLimit: OtherLimitType,\n    whilePlaying_otherLimit_comment: OtherLimitCommentType,\n\n    //endregion -------------------- Entity limit properties --------------------\n    //region -------------------- Spawning / Despawning range properties --------------------\n\n    canRespawn: CanRespawnType,\n    canRespawn_online: CanRespawnOnlineType,\n    canRespawn_online_insideABlock: CanRespawnOnlineOutOfABlockType,\n\n    behaviour_solo: PossibleSoloBehaviourType,\n    behaviour_localCoop: PossibleLocalCoopBehaviourType,\n    behaviour_onlineCoop: PossibleOnlineCoopBehaviourType,\n    behaviour_onlineVS: PossibleOnlineVersusBehaviourType,\n\n\n    offscreenSpawningAndDespawningReferencePoint: OffscreenSpawningAndDespawningReferencePoint,\n    offscreenSpawningHorizontalRange: OffscreenSpawningHorizontalRangeLimitType,\n    offscreenDespawningHorizontalRange: OffscreenDespawningHorizontalRangeLimitType,\n\n    offscreenSpawingUpwardVerticalRange: OffscreenSpawningUpwardVerticalRangeLimitType,\n    offscreenDespawningUpwardVerticalRange: OffscreenDespawningUpwardVerticalRangeLimitType,\n\n    offscreenSpawningDownwardVerticalRange: OffscreenSpawningDownwardVerticalRangeLimitType,\n    offscreenDespawningDownwardVerticalRange: OffscreenDespawningDownwardVerticalRangeLimitType,\n\n    //endregion -------------------- Spawning / Despawning range properties --------------------\n    //region -------------------- Dimension properties --------------------\n\n    dimension: PossibleDimension,\n    dimension_maximum: PossibleMaximumDimension,\n\n    dimension_differentInSM3DW: PossibleDimensionDifferentInSM3DW,\n    dimension_maximum_differentInSM3DW: PossibleMaximumDimensionDifferentInSM3DW,\n\n    //endregion -------------------- Dimension properties --------------------\n    //region -------------------- Reference on specific condition properties -------------------\n\n    inDayTheme: | EntityLink | null,\n    inNightTheme: | EntityLink | null,\n\n    inGroundTheme: | EntityLink | null,\n    inUndergroundTheme: | EntityLink | null,\n    inUnderwaterTheme: | EntityLink | null,\n    inDesertTheme: | EntityLink | null,\n    inSnowTheme: | EntityLink | null,\n    inSkyTheme: | EntityLink | null,\n    inForestTheme: | EntityLink | null,\n    inGhostHouseTheme: | EntityLink | null,\n    inAirshipTheme: | EntityLink | null,\n    inCastleTheme: | EntityLink | null,\n\n    inSMBGameStyle: | EntityLink | null,\n    inSMB3GameStyle: | EntityLink | null,\n    inSMWGameStyle: | EntityLink | null,\n    inNSMBUGameStyle: | EntityLink | null,\n    inSM3DWGameStyle: | EntityLink | null,\n\n    //endregion -------------------- Reference on specific condition properties --------------------\n    hasANameReferencedInMarioMaker: HasAReferenceInMarioMaker,\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray1,\n    ...GamesPropertyArray,\n    ...ExclusivePropertiesArray2,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReferenceVia<{@link EntityBuilder}, {@link Entities}>\n * @recursiveReference<{@link Entities}>\n */\nexport class EntityLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, Entity>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public static readonly UNKNOWN_CHARACTER = '?';\n    public static readonly INFINITE_CHARACTER = '∞';\n    public static readonly THIS_REFERENCE = 'this';\n\n    #map?: Map<PossibleEnglishName, Entity>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, Entity> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, Entity>();\n            const templateReferences = new Map<PossibleEnglishName, EntityTemplate>();\n            const referencesToWatch = new ReferencesToWatch(templateReferences);\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, Builder<EntityTemplate>, keyof typeof Headers>(resource, convertedContent => new TemplateBuilder(convertedContent))\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(['(Entity)', 'Entity', 'Projectile', 'Object',], 'entityType',)\n                .convertTo([1, 2,], 'firstAppearanceInMarioMaker',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_version, 'firstAppearanceInMarioMaker_version',)\n                .convertToNullableBoolean('isInSuperMarioMaker1', 'isInSuperMarioMakerFor3DS', 'isInSuperMarioMaker2',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_entityCategory, 'categoryInTheEditor',)\n                .convertToNullableBoolean('hasAMushroomVariant',)\n                .convertToNullableBooleanAnd([EntityLoader.UNKNOWN_CHARACTER, 'While playing → LCL',], 'canBeInAParachute', 'canHaveWings',)\n\n                .convertToNullableBoolean('canContainOrSpawnAKey',)\n                .convertToNullableBooleanAnd('Only some variants', 'isAffectedDirectlyByAnOnOrOffState',)\n\n                .convertToNullableBooleanAnd(EntityLoader.UNKNOWN_CHARACTER, 'canBePutOnATrack',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_limit, 'editorLimit_canBePutOnATrack', 'whilePlaying_canBePutOnATrack',)\n\n                .convertToNullableBoolean('canSpawnOutOfAPipe', 'canBePutInASwingingClaw',)\n                .convertToNullableBooleanAnd(EntityLoader.UNKNOWN_CHARACTER, 'canBeThrownByALakitu', 'canBePutInALakituCloud',)\n                .convertToNullableBoolean('canBePutInAClownCar', 'canBeFiredOutOfABulletLauncher', 'canBePutInABlock', 'canBePutInATree',)\n\n                .convertToEmptyableStringAnd([EntityLoader.UNKNOWN_CHARACTER, 0, 1, '½', 2,], 'weight',)\n                .convertTo([EntityLoader.UNKNOWN_CHARACTER, 'Full light', 'Dim light', 'Full light when falling', 'Full light when collected', 'Full light when shooting', 'Dim light / Full light when falling or collected', 'Project a light in front of them', 'Only when lit',], 'lightSourceEmitted')\n                .convertToNullableBooleanAnd(EntityLoader.UNKNOWN_CHARACTER, 'lightSourceEmitted_isInSMB',)\n                .convertToBooleanAnd([EntityLoader.UNKNOWN_CHARACTER, 'Explode', 'Castle', 'Castle / Night Forest', 'Float', 'Melt to Coin', 'Only inside the ground',], 'canSurviveInTheLavaOrThePoison',)\n\n                .convertToBooleanAnd(['NSMBU', 'Castle',], 'canIgniteABobOmb',)\n                .convertToBooleanAnd(['Koopa Troopa', 'Unchained Chomp', 'Standing on top of block that get destroyed',], 'canBeBrokenOrKilledByABobOmb',)\n\n                .convertToNullableBooleanAnd(['When falling', 'Parachute',], 'canBeAffectedByATwister',)\n                .convertToNullableBoolean('canGoThroughWalls',)\n                .convertToNullableBooleanAnd(['on down curve',], 'canGoThroughWalls_inSM3DW',)\n                .convertToNullableBoolean('canBeStacked',)\n                .convertToNullableBooleanAnd(['SM3DW',], 'isGlobalGroundOrGlobal',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleNameOnEntity_instrument, 'instrument',)\n                .convertToNullableBooleanAnd(['Excluding the top 3 notes',], 'canMakeASoundOutOfAMusicBlock',)\n\n                .convertToNullableBooleanAnd('Bob-omb clear condition', 'canBeThrownByBowserInClownCar',)\n                .convertToNullableBooleanAnd('3rd phase', 'canBeThrownByBowserJr',)\n                .convertToNullableBooleanAnd('Koopa Troopa clear condition', 'canBeThrownByBowserJrInClownCar',)\n                .convertToNullableBooleanAnd(EntityLoader.UNKNOWN_CHARACTER, 'canBeTransformedByMagikoopa',)\n                .convertToNullableBoolean('canBeSpawnedByMagikoopa',)\n                .convertToEmptyableStringAnd([EntityLoader.UNKNOWN_CHARACTER, false, 'Green Winged Koopa Troopa', 'winged',], 'canBeSpawnedByWingedMagikoopa',)\n\n                .convertTo([EntityLoader.UNKNOWN_CHARACTER, 1, 2, '1?', EntityLoader.INFINITE_CHARACTER,\n                    'For each entity', 'For each clone (2-4)',\n                    'For each objects (4)',\n                    'For each projectile', 'For each projectile (1)',\n                    'For each projectiles', 'For each projectiles (2)', 'For each projectiles (3)',\n                    'For each projectiles (4)', 'For each projectiles (5)', 'For each projectiles (6)',\n                    'For each projectiles (10?)', 'For each projectiles (1|3)', 'For each projectiles (3-5)', 'For each projectiles (NSMU → 2, [SMB,SMB3,SMW] → 3)',], 'limitAmount',)\n                .convertTo(HeaderTypesForConvertor.everyName_limit, 'editorLimit_SMM1And3DS',)\n                .convertTo(HeaderTypesForConvertor.everyNameOrUnknown_limit, 'editorLimit_SMM2',)\n                .convertToNullableBooleanAnd(['Only when collected (30 frames)', 'As a group',\n                    'Can overflow limit', 'Can overfill limit', 'Continue firing → GEL is max',], 'whilePlaying_isInGEL',)\n                .convertToNullableBooleanAnd(['Not on track', 'While holding an entity',], 'whilePlaying_isInGEL_isSuperGlobal',)\n                .convertToNullableBoolean('whilePlaying_isInPEL',)\n                .convertToNullableBooleanAnd([EntityLoader.UNKNOWN_CHARACTER, 'Temporary as it comes out', 'Each one separated',\n                    'Always reserve 1 projectile', 'By player, can overfill limit', 'Can only spawn (available) based → limits',], 'whilePlaying_isInPJL',)\n                .convertToNullableBooleanAnd(['Only when not dotted', 'Only if not hit', 'Only if not hit?',], 'whilePlaying_isInObjectRenderedLimit',)\n                .convertTo(HeaderTypesForConvertor.everyNameOrUnknown_limit, 'whilePlaying_otherLimit',)\n                .convertToEmptyableStringAnd('Only falling coin', 'whilePlaying_otherLimit_comment',)\n\n                .convertToNullableBooleanAnd([EntityLoader.UNKNOWN_CHARACTER, 'With Vine', 'If not collected',], 'canRespawn',)\n                .convertToNullableBooleanAnd(EntityLoader.UNKNOWN_CHARACTER, 'canRespawn_online', 'canRespawn_online_insideABlock',)\n                .convertToEmptyableString('behaviour_solo', 'behaviour_localCoop', 'behaviour_onlineCoop', 'behaviour_onlineVS',)//TODO change to any possible behaviour type\n\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER, 'Variable', EntityLoader.INFINITE_CHARACTER,], 'offscreenSpawningHorizontalRange',)\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER, 'Variable',], 'offscreenDespawningHorizontalRange',)\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER, EntityLoader.INFINITE_CHARACTER,], 'offscreenSpawningUpwardVerticalRange')\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER,], 'offscreenSpawningUpwardVerticalRange',)\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER, EntityLoader.INFINITE_CHARACTER,], 'offscreenSpawningDownwardVerticalRange',)\n                .convertToNullableNumberAnd(['string', EntityLoader.UNKNOWN_CHARACTER,], 'offscreenDespawningDownwardVerticalRange',)\n\n                .convertToEmptyableStringAnd([EntityLoader.UNKNOWN_CHARACTER,], 'dimension',)\n                .convertToEmptyableStringAnd([], 'dimension_maximum',)\n                .convertToEmptyableStringAnd([], 'dimension_differentInSM3DW',)\n                .convertToEmptyableStringAnd([], 'dimension_maximum_differentInSM3DW',)\n\n                .convertToStringAnd(EntityLoader.THIS_REFERENCE, 'inDayTheme',)\n                .convertToEmptyableStringAnd(EntityLoader.THIS_REFERENCE, 'inNightTheme',)\n\n                .convertToStringAnd(EntityLoader.THIS_REFERENCE, 'inGroundTheme', 'inUndergroundTheme', 'inUnderwaterTheme',)\n                .convertToEmptyableStringAnd(EntityLoader.THIS_REFERENCE, 'inDesertTheme', 'inSnowTheme', 'inSkyTheme', 'inForestTheme',)\n                .convertToStringAnd(EntityLoader.THIS_REFERENCE, 'inGhostHouseTheme', 'inAirshipTheme', 'inCastleTheme',)\n\n                .convertToEmptyableStringAnd(EntityLoader.THIS_REFERENCE, 'inSMBGameStyle', 'inSMB3GameStyle', 'inSMWGameStyle', 'inNSMBUGameStyle', 'inSM3DWGameStyle',)\n                // .convertToHeadersAnd(['english', 'americanEnglish',], thisText,'inDayTheme',)\n                // .convertToNullableHeadersAnd(['english', 'americanEnglish',], thisText,'inNightTheme',)\n                //\n                // .convertToHeadersAnd(['english', 'americanEnglish',], thisText,'inGroundTheme', 'inUndergroundTheme', 'inUnderwaterTheme',)\n                // .convertToNullableHeadersAnd(['english', 'americanEnglish',], 'inDesertTheme', 'inSnowTheme', 'inSkyTheme', 'inForestTheme',)\n                // .convertToHeadersAnd(['english', 'americanEnglish',], thisText,'inGhostHouseTheme', 'inAirshipTheme', 'inCastleTheme',)\n                //\n                // .convertToHeadersAnd(['english', 'americanEnglish',], thisText, 'inSMBGameStyle', 'inSMB3GameStyle', 'inSMWGameStyle', 'inNSMBUGameStyle', 'inSM3DWGameStyle',)\n                .convertToNullableBooleanAnd([EntityLoader.UNKNOWN_CHARACTER, 'Only spoken (in english) in Editor',], 'hasANameReferencedInMarioMaker')\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_entity, 'english', 'americanEnglish',)\n\n                .onAfterFinalObjectCreated(finalContent => {\n                    const template = finalContent.build();\n                    const englishName = (template.name.english.simple ?? template.name.english.american) as | PossibleEnglishName | null;\n                    assert(englishName != null, `The template english name should never be null since it is a key reference for the whole program.`,);\n                    templateReferences.set(englishName, template,);\n                    referencesToWatch.addSubReference(template);\n                })\n                .onInitialisationEnd(() => {\n                    referencesToWatch.testReferences();\n                    referencesToWatch.setReferences();\n                    templateReferences.forEach((template, englishName,) =>\n                        references.set(englishName, new GenericSingleInstanceBuilder(new EntityBuilder(template)).build(),)\n                    );\n                })\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"entity\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"entity\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<EntityTemplate, PropertiesArray, typeof Headers> {\n\n    static readonly #SLASH_SEPARATOR = ' / ';\n    static readonly #LINK_AS_THIS = 'this';\n    static readonly #EMPTY_SIMPLE_DIMENSION_TEMPLATE: SimpleDimensionTemplate<null, null> = {value: null, maximum: null,};\n    static readonly #EMPTY_DIMENSION_TEMPLATE: DimensionTemplate = {\n        value: null,\n        maximum: null,\n        differentInSM3DW: this.#EMPTY_SIMPLE_DIMENSION_TEMPLATE,\n    };\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): EntityTemplate {\n        const [\n            isInSuperMarioMaker1, isInSuperMarioMaker2,\n            dayLink, nightLink,\n            groundLink, undergroundLink, underwaterLink, desertLink, snowLink, skyLink, forestLink, ghostHouseLink, airshipLink, castleLink,\n            superMarioBrosLink, superMarioBros3Link, superMarioWorldLink, newSuperMarioBrosULink, superMario3DWorldLink,\n        ] = [\n            this._getContent(this._headersIndexMap.isInSuperMarioMaker1), this._getContent(this._headersIndexMap.isInSuperMarioMaker2),\n            this._getContent(this._headersIndexMap.inDayTheme), this._getContent(this._headersIndexMap.inNightTheme),\n            this._getContent(this._headersIndexMap.inGroundTheme), this._getContent(this._headersIndexMap.inUndergroundTheme), this._getContent(this._headersIndexMap.inUnderwaterTheme), this._getContent(this._headersIndexMap.inDesertTheme), this._getContent(this._headersIndexMap.inSnowTheme), this._getContent(this._headersIndexMap.inSkyTheme), this._getContent(this._headersIndexMap.inForestTheme), this._getContent(this._headersIndexMap.inGhostHouseTheme), this._getContent(this._headersIndexMap.inAirshipTheme), this._getContent(this._headersIndexMap.inCastleTheme),\n            this._getContent(this._headersIndexMap.inSMBGameStyle), this._getContent(this._headersIndexMap.inSMB3GameStyle), this._getContent(this._headersIndexMap.inSMWGameStyle), this._getContent(this._headersIndexMap.inNSMBUGameStyle), this._getContent(this._headersIndexMap.inSM3DWGameStyle),\n        ];\n        const isExclusiveToSuperMarioMaker1 = isInSuperMarioMaker1 && !isInSuperMarioMaker2;\n        const gameStyleTemplate: SimpleGameStyleTemplate = {\n            superMarioBros: TemplateBuilder.#convertLinkToOnlyBoolean(superMarioBrosLink),\n            superMarioBros3: TemplateBuilder.#convertLinkToOnlyBoolean(superMarioBros3Link),\n            superMarioWorld: TemplateBuilder.#convertLinkToOnlyBoolean(superMarioWorldLink),\n            newSuperMarioBrosU: TemplateBuilder.#convertLinkToOnlyBoolean(newSuperMarioBrosULink),\n            superMario3DWorld: isExclusiveToSuperMarioMaker1 ? TemplateBuilder.#convertLinkToNullableBoolean(superMario3DWorldLink) : TemplateBuilder.#convertLinkToOnlyBoolean(superMario3DWorldLink),\n        };\n        const isExclusiveToSuperMario3DWorld = !gameStyleTemplate.superMarioBros && !gameStyleTemplate.superMarioBros3 && !gameStyleTemplate.superMarioWorld && !gameStyleTemplate.newSuperMarioBrosU && gameStyleTemplate.superMario3DWorld === true;\n\n        return {\n            properties: {\n                entityType: this._getContent(this._headersIndexMap.entityType),\n\n                firstAppearance: {\n                    game: this._getContent(this._headersIndexMap.firstAppearanceInMarioMaker),\n                    version: this._getContent(this._headersIndexMap.firstAppearanceInMarioMaker_version),\n                },\n\n                //region ---------- Basic properties ----------\n\n                isIn: {//TODO change every theme, time & style to have a nullable boolean instead of just boolean or nullable boolean\n                    game: this._createGameTemplateFromAllGames(),\n                    style: gameStyleTemplate,\n                    theme: {\n                        ground: TemplateBuilder.#convertLinkToOnlyBoolean(groundLink),\n                        underground: TemplateBuilder.#convertLinkToOnlyBoolean(undergroundLink),\n                        underwater: TemplateBuilder.#convertLinkToOnlyBoolean(underwaterLink),\n                        desert: TemplateBuilder.#convertLinkToNullableBoolean(desertLink),\n                        snow: TemplateBuilder.#convertLinkToNullableBoolean(snowLink),\n                        sky: TemplateBuilder.#convertLinkToNullableBoolean(skyLink),\n                        forest: TemplateBuilder.#convertLinkToNullableBoolean(forestLink),\n                        ghostHouse: TemplateBuilder.#convertLinkToOnlyBoolean(ghostHouseLink),\n                        airship: TemplateBuilder.#convertLinkToOnlyBoolean(airshipLink),\n                        castle: TemplateBuilder.#convertLinkToOnlyBoolean(castleLink),\n                    },\n                    time: {\n                        day: TemplateBuilder.#convertLinkToOnlyBoolean(dayLink),\n                        night: isExclusiveToSuperMarioMaker1 || isExclusiveToSuperMario3DWorld ? TemplateBuilder.#convertLinkToNullableBoolean(nightLink) : TemplateBuilder.#convertLinkToOnlyBoolean(nightLink),\n                    },\n                },\n\n                basic: {\n                    hasAMushroomVariant: this._getContent(this._headersIndexMap.hasAMushroomVariant),\n                    canBeInAParachute: this._getContent(this._headersIndexMap.canBeInAParachute),\n                    canHaveWings: this._getContent(this._headersIndexMap.canHaveWings),\n                },\n\n                //endregion ---------- Basic properties ----------\n                //region ---------- Specific properties ----------\n\n                canContainOrSpawnAKey: this._getContent(this._headersIndexMap.canContainOrSpawnAKey),\n\n                isAffectedDirectlyByAnOnOrOffState: this._getContent(this._headersIndexMap.isAffectedDirectlyByAnOnOrOffState),\n\n                canBePutOnATrack: {\n                    value: this._getContent(this._headersIndexMap.canBePutOnATrack),\n                    editorLimit: this._getContent(this._headersIndexMap.editorLimit_canBePutOnATrack),\n                    whilePlaying: this._getContent(this._headersIndexMap.whilePlaying_canBePutOnATrack),\n                },\n\n                canSpawnOutOfAPipe: this._getContent(this._headersIndexMap.canSpawnOutOfAPipe),\n\n                canBePutInASwingingClaw: this._getContent(this._headersIndexMap.canBePutInASwingingClaw),\n\n                canBeThrownByALakitu: this._getContent(this._headersIndexMap.canBeThrownByALakitu),\n                canBePutInALakituCloud: this._getContent(this._headersIndexMap.canBePutInALakituCloud),\n\n                canBePutInAClownCar: this._getContent(this._headersIndexMap.canBePutInAClownCar),\n\n                canBeFiredOutOfABulletLauncher: this._getContent(this._headersIndexMap.canBeFiredOutOfABulletLauncher),\n\n                canBePutInABlock: this._getContent(this._headersIndexMap.canBePutInABlock),\n\n                canBePutInATree: this._getContent(this._headersIndexMap.canBePutInATree),\n\n                weight: this._getContent(this._headersIndexMap.weight),\n\n                lightSourceEmitted: {\n                    value: this._getContent(this._headersIndexMap.lightSourceEmitted),\n                    isInSMB: this._getContent(this._headersIndexMap.lightSourceEmitted_isInSMB)\n                },\n\n                canSurviveInTheLavaOrThePoison: this._getContent(this._headersIndexMap.canSurviveInTheLavaOrThePoison),\n\n                bobOmb: {\n                    canIgnite: this._getContent(this._headersIndexMap.canIgniteABobOmb),\n                    canBeBrokenOrKilled: this._getContent(this._headersIndexMap.canBeBrokenOrKilledByABobOmb),\n                },\n\n                canBeAffectedByATwister: this._getContent(this._headersIndexMap.canBeAffectedByATwister),\n\n                canGoThroughWalls: {\n                    value: this._getContent(this._headersIndexMap.canGoThroughWalls),\n                    inSM3DW: this._getContent(this._headersIndexMap.canGoThroughWalls_inSM3DW),\n                },\n\n                canBeStacked: this._getContent(this._headersIndexMap.canBeStacked),\n\n                isGlobalGroundOrGlobal: this._getContent(this._headersIndexMap.isGlobalGroundOrGlobal),\n\n                sound: {\n                    instrument: this._getContent(this._headersIndexMap.instrument),\n                    canMakeASoundOutOfAMusicBlock: this._getContent(this._headersIndexMap.canMakeASoundOutOfAMusicBlock),\n                },\n\n                //endregion ---------- Specific properties ----------\n                //region -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n\n                bowserBowserJrMagikoopa: {\n                    bowser: {\n                        clownCar: this._getContent(this._headersIndexMap.canBeThrownByBowserInClownCar),\n                    },\n                    bowserJr: {\n                        value: this._getContent(this._headersIndexMap.canBeThrownByBowserJr),\n                        clownCar: this._getContent(this._headersIndexMap.canBeThrownByBowserJrInClownCar),\n                    },\n                    magikoopa: {\n                        transformed: this._getContent(this._headersIndexMap.canBeTransformedByMagikoopa),\n                        spawn: {\n                            value: this._getContent(this._headersIndexMap.canBeSpawnedByMagikoopa),\n                            wing: this._getContent(this._headersIndexMap.canBeSpawnedByWingedMagikoopa),\n                        },\n                    },\n                },\n\n                //endregion -------------------- Bowser / Bowser Jr. / Magikoopa properties --------------------\n                limits: {\n                    amount: this._getContent(this._headersIndexMap.limitAmount),\n                    editor: {\n                        '1And3DS': this._getContent(this._headersIndexMap.editorLimit_SMM1And3DS),\n                        '2': this._getContent(this._headersIndexMap.editorLimit_SMM2),\n                    },\n                    whilePlaying: {\n                        isInGEL: {\n                            value: this._getContent(this._headersIndexMap.whilePlaying_isInGEL),\n                            isSuperGlobal: this._getContent(this._headersIndexMap.whilePlaying_isInGEL_isSuperGlobal),\n                        },\n                        isInPEL: this._getContent(this._headersIndexMap.whilePlaying_isInPEL),\n                        isInPJL: this._getContent(this._headersIndexMap.whilePlaying_isInPJL),\n                        isInRenderedObjectLimit: this._getContent(this._headersIndexMap.whilePlaying_isInObjectRenderedLimit),\n                        otherLimit: {\n                            value: this._getContent(this._headersIndexMap.whilePlaying_otherLimit),\n                            comment: this._getContent(this._headersIndexMap.whilePlaying_otherLimit_comment),\n                        },\n                    },\n                },\n                canRespawn: {\n                    value: this._getContent(this._headersIndexMap.canRespawn),\n                    online: {\n                        value: this._getContent(this._headersIndexMap.canRespawn_online),\n                        insideABlock: this._getContent(this._headersIndexMap.canRespawn_online_insideABlock),\n                    }\n                },\n                behaviour: {\n                    solo: TemplateBuilder.#convertToBehaviourArray(this._getContent(this._headersIndexMap.behaviour_solo),),\n                    localCoop: TemplateBuilder.#convertToBehaviourArray(this._getContent(this._headersIndexMap.behaviour_localCoop),),\n                    online: {\n                        coop: TemplateBuilder.#convertToBehaviourArray(this._getContent(this._headersIndexMap.behaviour_onlineCoop),),\n                        versus: TemplateBuilder.#convertToBehaviourArray(this._getContent(this._headersIndexMap.behaviour_onlineVS),),\n                    },\n                },\n                offscreenRange: {\n                    referencePoint: this._getContent(this._headersIndexMap.offscreenSpawningAndDespawningReferencePoint),\n                    spawning: {\n                        horizontal: this._getContent(this._headersIndexMap.offscreenSpawningHorizontalRange),\n                        vertical: {\n                            upward: this._getContent(this._headersIndexMap.offscreenSpawningUpwardVerticalRange),\n                            downward: this._getContent(this._headersIndexMap.offscreenSpawningDownwardVerticalRange),\n                        },\n                    },\n                    despawning: {\n                        horizontal: this._getContent(this._headersIndexMap.offscreenDespawningHorizontalRange),\n                        vertical: {\n                            upward: this._getContent(this._headersIndexMap.offscreenDespawningUpwardVerticalRange),\n                            downward: this._getContent(this._headersIndexMap.offscreenDespawningDownwardVerticalRange),\n                        },\n                    },\n                },\n                dimension: TemplateBuilder.#createDimensionTemplate(\n                    this._getContent(this._headersIndexMap.dimension), this._getContent(this._headersIndexMap.dimension_maximum),\n                    this._getContent(this._headersIndexMap.dimension_differentInSM3DW), this._getContent(this._headersIndexMap.dimension_maximum_differentInSM3DW),\n                ),\n                reference: {\n                    style: {\n                        superMarioBros: superMarioBrosLink,\n                        superMarioBros3: superMarioBros3Link,\n                        superMarioWorld: superMarioWorldLink,\n                        newSuperMarioBrosU: newSuperMarioBrosULink,\n                        superMario3DWorld: superMario3DWorldLink,\n                    },\n                    theme: {\n                        ground: groundLink,\n                        underground: undergroundLink,\n                        underwater: underwaterLink,\n                        desert: desertLink,\n                        snow: snowLink,\n                        sky: skyLink,\n                        forest: forestLink,\n                        ghostHouse: ghostHouseLink,\n                        airship: airshipLink,\n                        castle: castleLink,\n                    },\n                    time: {\n                        day: dayLink,\n                        night: nightLink,\n                    },\n                    group: {\n                        all: null,\n                        gameStyle: null,\n                        theme: null,\n                        time: null,\n                    },\n                },\n            },\n            categoryInTheEditor: this._getContent(this._headersIndexMap.categoryInTheEditor),\n            name: this._createEntityNameTemplate(this._getContent(this._headersIndexMap.hasANameReferencedInMarioMaker)),\n        };\n    }\n\n    static #convertLinkToOnlyBoolean(link: | EntityLink | null,) {\n        return link != null && this.#convertLinkToBoolean(link);\n    }\n\n    static #convertLinkToBoolean(link: EntityLink,): boolean {\n        return link.includes(this.#LINK_AS_THIS);\n    }\n\n    static #convertLinkToNullableBoolean(link: | EntityLink | null,): | boolean | null {\n        return link == null\n            ? null\n            : this.#convertLinkToBoolean(link);\n    }\n\n    static #convertToBehaviourArray(behaviour: | string | null,): EveryPossibleLinkedBehaviourAcronymArray {\n        return behaviour == null\n            ? EMPTY_ARRAY\n            : behaviour.split(this.#SLASH_SEPARATOR) as | [string,] | [string, string,] | [string, string, string,] as EveryPossibleLinkedBehaviourAcronymArray;\n    }\n\n\n    static #createDimensionTemplate(value: PossibleDimension, maximumValue: PossibleMaximumDimension, valueSM3DW: PossibleDimensionDifferentInSM3DW, maximumValueSM3DW: PossibleMaximumDimensionDifferentInSM3DW,): DimensionTemplate {\n        return value == null && maximumValue == null && valueSM3DW == null && maximumValueSM3DW == null\n            ? this.#EMPTY_DIMENSION_TEMPLATE\n            : {\n                value: value,\n                maximum: maximumValue,\n                differentInSM3DW: this.#createSM3DWDifferentDimensionTemplate(valueSM3DW, maximumValueSM3DW,),\n            };\n    }\n\n    static #createSM3DWDifferentDimensionTemplate(value: PossibleDimensionDifferentInSM3DW, maximumValue: PossibleMaximumDimensionDifferentInSM3DW,): SimpleDimensionTemplateDifferentInSM3DW {\n        return value == null && maximumValue == null\n            ? this.#EMPTY_SIMPLE_DIMENSION_TEMPLATE\n            : {value: value, maximum: maximumValue,};\n    }\n\n}\n","import type {MysteryMushroom, MysteryMushroomGames} from './MysteryMushroom';\nimport type {MysteryMushroomProperty}               from './properties/MysteryMushroomProperty';\nimport type {Name}                                  from '../../lang/name/Name';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class MysteryMushroomContainer\n    extends ClassContainingAName<string>\n    implements MysteryMushroom {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games;\n    readonly #propertyContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: Name<string>, games: MysteryMushroomGames, property: MysteryMushroomProperty,) {\n        super(name,);\n        this.#games = games;\n        this.#propertyContainer = property;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Games --------------------\n\n    public get games(): MysteryMushroomGames {\n        return this.#games;\n    }\n\n    //endregion -------------------- Games --------------------\n    //region -------------------- Properties --------------------\n\n    public get propertyContainer() {\n        return this.#propertyContainer;\n    }\n\n    //region -------------------- Unlock properties --------------------\n\n    public get unlockPropertyContainer() {\n        return this.propertyContainer.unlockPropertyContainer;\n    }\n\n    public get conditionToUnlockIt() {\n        return this.unlockPropertyContainer.conditionToUnlockIt;\n    }\n\n    public get canBeUnlockedByAnAmiibo() {\n        return this.unlockPropertyContainer.canBeUnlockedByAnAmiibo;\n    }\n\n    //endregion -------------------- Unlock properties --------------------\n    //region -------------------- Sound properties --------------------\n\n    public get soundPropertyContainer() {\n        return this.propertyContainer.soundPropertyContainer;\n    }\n\n    //region -------------------- Sound effect (when collected) --------------------\n\n    public get soundEffectWhenCollectedContainer() {\n        return this.soundPropertyContainer.soundEffectWhenCollectedContainer;\n    }\n\n    public get haveASoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.value;\n    }\n\n    public get gameOnSoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (when collected) --------------------\n    //region -------------------- Sound effect (taunt) --------------------\n\n    public get soundEffectOnTauntContainer() {\n        return this.soundPropertyContainer.soundEffectOnTauntContainer;\n    }\n\n    public get haveASoundEffectOnTaunt() {\n        return this.soundEffectOnTauntContainer.value;\n    }\n\n    //endregion -------------------- Sound effect (taunt) --------------------\n    //region -------------------- Sound effect (movement) --------------------\n\n    public get soundEffectOnMovementContainer() {\n        return this.soundPropertyContainer.soundEffectOnMovementContainer;\n    }\n\n    public get haveASoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.value;\n    }\n\n    public get translationKeyOnSoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.translationKey;\n    }\n\n    //endregion -------------------- Sound effect (movement) --------------------\n    //region -------------------- Sound effect (jump) --------------------\n\n    public get soundEffectOnJumpContainer() {\n        return this.soundPropertyContainer.soundEffectOnJumpContainer;\n    }\n\n    public get haveASoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.value;\n    }\n\n    public get amountOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.amount;\n    }\n\n    public get haveMultipleImagesOnJump() {\n        return this.soundEffectOnJumpContainer.haveMultipleImages;\n    }\n\n    public get gameOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (jump) --------------------\n    //region -------------------- Sound effect (ground after jump) --------------------\n\n    public get soundEffectOnGroundAfterJumpContainer() {\n        return this.soundPropertyContainer.soundEffectOnGroundAfterJumpContainer;\n    }\n\n    public get haveASoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (ground after jump) --------------------\n    //region -------------------- Sound effect (turn after run) --------------------\n\n    public get soundEffectOnTurnAfterRunContainer() {\n        return this.soundPropertyContainer.soundEffectOnTurnAfterRunContainer;\n    }\n\n    public get haveASoundEffectOnTurnAfterRun() {\n        return this.soundEffectOnTurnAfterRunContainer.value;\n    }\n\n    //endregion -------------------- Sound effect (turn after run) --------------------\n    //region -------------------- Special music (star mode) --------------------\n\n    public get specialMusicInStarModeContainer() {\n        return this.soundPropertyContainer.specialMusicInStarModeContainer;\n    }\n\n    public get haveASpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.value;\n    }\n\n    public get gameOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.gameReference;\n    }\n\n    public get translationKeyOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.translationKey;\n    }\n\n    //endregion -------------------- Special music (star mode) --------------------\n    //region -------------------- Sound effect (goal pole) --------------------\n\n    public get soundEffectOnGoalPoleContainer() {\n        return this.soundPropertyContainer.soundEffectOnGoalPoleContainer;\n    }\n\n    public get haveASoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.simpleTranslationKey;\n    }\n\n    public get typeOfMusicOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.type;\n    }\n\n    //endregion -------------------- Sound effect (goal pole) --------------------\n    //region -------------------- Sound effect (death) --------------------\n\n    public get soundEffectOnDeathContainer() {\n        return this.soundPropertyContainer.soundEffectOnDeathContainer;\n    }\n\n    public get haveASoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.value;\n    }\n\n    public get gameOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.simpleTranslationKey;\n    }\n\n    public get typeOfSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.type;\n    }\n\n    //endregion -------------------- Sound effect (death) --------------------\n\n    //endregion -------------------- Sound properties --------------------\n\n    //endregion -------------------- Properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {MysteryMushroomProperty} from './MysteryMushroomProperty';\nimport type {SoundProperty}           from './sound/SoundProperty';\nimport type {UnlockProperty}          from './UnlockProperty';\n\nexport class MysteryMushroomPropertyContainer\n    implements MysteryMushroomProperty {\n\n    //region -------------------- Fields --------------------\n\n    readonly #unlockPropertyContainer;\n    readonly #soundPropertyContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(unlock: UnlockProperty, sound: SoundProperty,) {\n        this.#unlockPropertyContainer = unlock;\n        this.#soundPropertyContainer = sound;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Unlock properties --------------------\n\n    public get unlockPropertyContainer() {\n        return this.#unlockPropertyContainer;\n    }\n\n    public get conditionToUnlockIt() {\n        return this.unlockPropertyContainer.conditionToUnlockIt;\n    }\n\n    public get canBeUnlockedByAnAmiibo() {\n        return this.unlockPropertyContainer.canBeUnlockedByAnAmiibo;\n    }\n\n    //endregion -------------------- Unlock properties --------------------\n    //region -------------------- Sound properties --------------------\n\n    public get soundPropertyContainer() {\n        return this.#soundPropertyContainer;\n    }\n\n    //region -------------------- Sound effect (when collected) --------------------\n\n    public get soundEffectWhenCollectedContainer() {\n        return this.soundPropertyContainer.soundEffectWhenCollectedContainer;\n    }\n\n    public get haveASoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.value;\n    }\n\n    public get gameOnSoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (when collected) --------------------\n    //region -------------------- Sound effect (taunt) --------------------\n\n    public get soundEffectOnTauntContainer() {\n        return this.soundPropertyContainer.soundEffectOnTauntContainer;\n    }\n\n    public get haveASoundEffectOnTaunt() {\n        return this.soundEffectOnTauntContainer.value;\n    }\n\n    //endregion -------------------- Sound effect (taunt) --------------------\n    //region -------------------- Sound effect (movement) --------------------\n\n    public get soundEffectOnMovementContainer() {\n        return this.soundPropertyContainer.soundEffectOnMovementContainer;\n    }\n\n    public get haveASoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.value;\n    }\n\n    public get translationKeyOnSoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.translationKey;\n    }\n\n    //endregion -------------------- Sound effect (movement) --------------------\n    //region -------------------- Sound effect (jump) --------------------\n\n    public get soundEffectOnJumpContainer() {\n        return this.soundPropertyContainer.soundEffectOnJumpContainer;\n    }\n\n    public get haveASoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.value;\n    }\n\n    public get amountOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.amount;\n    }\n\n    public get haveMultipleImagesOnJump() {\n        return this.soundEffectOnJumpContainer.haveMultipleImages;\n    }\n\n    public get gameOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (jump) --------------------\n    //region -------------------- Sound effect (ground after jump) --------------------\n\n    public get soundEffectOnGroundAfterJumpContainer() {\n        return this.soundPropertyContainer.soundEffectOnGroundAfterJumpContainer;\n    }\n\n    public get haveASoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Sound effect (ground after jump) --------------------\n    //region -------------------- Sound effect (turn after run) --------------------\n\n    public get soundEffectOnTurnAfterRunContainer() {\n        return this.soundPropertyContainer.soundEffectOnTurnAfterRunContainer;\n    }\n\n    public get haveASoundEffectOnTurnAfterRun() {\n        return this.soundEffectOnTurnAfterRunContainer.value;\n    }\n\n    //endregion -------------------- Sound effect (turn after run) --------------------\n    //region -------------------- Special music (star mode) --------------------\n\n    public get specialMusicInStarModeContainer() {\n        return this.soundPropertyContainer.specialMusicInStarModeContainer;\n    }\n\n    public get haveASpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.value;\n    }\n\n    public get gameOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.gameReference;\n    }\n\n    public get translationKeyOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.translationKey;\n    }\n\n    //endregion -------------------- Special music (star mode) --------------------\n    //region -------------------- Sound effect (goal pole) --------------------\n\n    public get soundEffectOnGoalPoleContainer() {\n        return this.soundPropertyContainer.soundEffectOnGoalPoleContainer;\n    }\n\n    public get haveASoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.simpleTranslationKey;\n    }\n\n    public get typeOfMusicOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.type;\n    }\n\n    //endregion -------------------- Sound effect (goal pole) --------------------\n    //region -------------------- Sound effect (death) --------------------\n\n    public get soundEffectOnDeathContainer() {\n        return this.soundPropertyContainer.soundEffectOnDeathContainer;\n    }\n\n    public get haveASoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.value;\n    }\n\n    public get gameOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.simpleTranslationKey;\n    }\n\n    public get typeOfSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.type;\n    }\n\n    //endregion -------------------- Sound effect (death) --------------------\n\n    //endregion -------------------- Sound properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ExtendedMap}                                                                                                                                                                                    from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleSimpleTranslationKeys, PossibleTranslationKeys, PossibleTypes, PossibleTypesReceived, PossibleValues, PossibleValuesReceived, SoundEffectOnDeath} from './SoundEffectOnDeath';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnDeathContainer\n    implements SoundEffectOnDeath {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectOnDeathContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #type;\n    readonly #game;\n    readonly #smallDefinition;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, type, game, smallDefinition,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer<PossibleValuesReceived, true, false, true>(value, true, false,);\n        this.#type = type;\n        this.#game = GameReferences.getValue(game);\n        this.#smallDefinition = smallDefinition;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get type(): PossibleTypes {\n        return this.#type;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    public get simpleTranslationKey(): PossibleSimpleTranslationKeys {\n        return this.#property.comment;\n    }\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#smallDefinition;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, type: PossibleTypesReceived, game: PossibleGamesReceived, smallDefinition: PossibleTranslationKeys,): SoundEffectOnDeath {\n        const argumentsReceived: ArgumentsReceived = [value, type, game, smallDefinition,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, type: PossibleTypesReceived, game: PossibleGamesReceived, smallDefinition: PossibleTranslationKeys,];\n","import type {ExtendedMap}                                                                                                                                                                                       from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleSimpleTranslationKeys, PossibleTranslationKeys, PossibleTypes, PossibleTypesReceived, PossibleValues, PossibleValuesReceived, SoundEffectOnGoalPole} from './SoundEffectOnGoalPole';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnGoalPoleContainer\n    implements SoundEffectOnGoalPole {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectOnGoalPoleContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #type;\n    readonly #game;\n    readonly #smallDefinition;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, type, game, smallDefinition,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer<PossibleValuesReceived, true, false, true>(value, true, false,);\n        this.#type = type;\n        this.#game = GameReferences.getValue(game);\n        this.#smallDefinition = smallDefinition;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get type(): PossibleTypes {\n        return this.#type;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    public get simpleTranslationKey(): PossibleSimpleTranslationKeys {\n        return this.#property.comment;\n    }\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#smallDefinition;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, type: PossibleTypesReceived, game: PossibleGamesReceived, smallDefinition: PossibleTranslationKeys,): SoundEffectOnGoalPole {\n        const argumentsReceived: ArgumentsReceived = [value, type, game, smallDefinition,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, type: PossibleTypesReceived, game: PossibleGamesReceived, smallDefinition: PossibleTranslationKeys,];\n","import type {ExtendedMap}                                                                                                from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleValues, PossibleValuesReceived, SoundEffectOnGroundAfterJump} from './SoundEffectOnGroundAfterJump';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnGroundAfterJumpContainer\n    implements SoundEffectOnGroundAfterJump {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectOnGroundAfterJumpContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #game;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, game,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer(value, true, false,);\n        this.#game = GameReferences.getValue(game);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, game: PossibleGamesReceived,): SoundEffectOnGroundAfterJump {\n        const argumentsReceived: ArgumentsReceived = [value, game,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, game: PossibleGamesReceived,];\n","import type {ExtendedMap}                                                                                                     from '../../../../util/extended/ExtendedMap';\nimport type {PossibleAmount, PossibleGames, PossibleGamesReceived, PossibleValues, PossibleValuesReceived, SoundEffectOnJump} from './SoundEffectOnJump';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnJumpContainer\n    implements SoundEffectOnJump {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly $3_IMAGES = '3 images';\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectOnJumpContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #game;\n    #haveMultipleImages?: boolean;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, game,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer<PossibleValuesReceived, true, true, true>(value, true, true,);\n        this.#game = GameReferences.getValue(game);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get haveMultipleImages(): boolean {\n        return this.#haveMultipleImages ??= this.#property.comment === SoundEffectOnJumpContainer.$3_IMAGES;\n    }\n\n    public get amount(): PossibleAmount {\n        return this.#property.amount;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, game: PossibleGamesReceived,): SoundEffectOnJump {\n        const argumentsReceived: ArgumentsReceived = [value, game,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, game: PossibleGamesReceived,];\n","import type {ExtendedMap}                                                                            from '../../../../util/extended/ExtendedMap';\nimport type {PossibleTranslationKeys, PossibleValues, PossibleValuesReceived, SoundEffectOnMovement} from './SoundEffectOnMovement';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnMovementContainer\n    implements SoundEffectOnMovement {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<PossibleValuesReceived, SoundEffectOnMovement> = new ExtendedMapContainer();\n\n    readonly #property;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: PossibleValuesReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer<PossibleValuesReceived, true, false, true>(value, true, false,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#property.comment;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived,): SoundEffectOnMovement {\n        return this.#EVERY_CONTAINERS.if(map => map.has(value))\n            .isNotMet(reference => reference.set(value, new this(value),))\n            .get(value);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n","import type {ExtendedMap}                                                                                      from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleValues, PossibleValuesReceived, SoundEffectOnTaunt} from './SoundEffectOnTaunt';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnTauntContainer\n    implements SoundEffectOnTaunt {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectOnTauntContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #game;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, game]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer(value, true, false,);\n        this.#game = GameReferences.getValue(game);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, game: PossibleGamesReceived,): SoundEffectOnTaunt {\n        const argumentsReceived: ArgumentsReceived = [value, game,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, game: PossibleGamesReceived,];\n","import type {ExtendedMap}                                                       from '../../../../util/extended/ExtendedMap';\nimport type {PossibleValues, PossibleValuesReceived, SoundEffectOnTurnAfterRun} from './SoundEffectOnTurnAfterRun';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectOnTurnAfterRunContainer\n    implements SoundEffectOnTurnAfterRun {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<PossibleValuesReceived, SoundEffectOnTurnAfterRun> = new ExtendedMapContainer();\n\n    readonly #property;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(value: PossibleValuesReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer(value, true, false,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived,): SoundEffectOnTurnAfterRun {\n        return this.#EVERY_CONTAINERS.if(map => map.has(value))\n            .isNotMet(reference => reference.set(value, new this(value),))\n            .get(value);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n","import type {ExtendedMap}                                                                                            from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleValues, PossibleValuesReceived, SoundEffectWhenCollected} from './SoundEffectWhenCollected';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SoundEffectWhenCollectedContainer\n    implements SoundEffectWhenCollected {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SoundEffectWhenCollectedContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #game;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, game,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer(value, true, false,);\n        this.#game = GameReferences.getValue(game);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, game: PossibleGamesReceived,): SoundEffectWhenCollected {\n        const argumentsReceived: ArgumentsReceived = [value, game,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, game: PossibleGamesReceived,];\n","import type {ExtendedMap}                                                                                                                   from '../../../../util/extended/ExtendedMap';\nimport type {PossibleGames, PossibleGamesReceived, PossibleTranslationKeys, PossibleValues, PossibleValuesReceived, SpecialMusicInStarMode} from './SpecialMusicInStarMode';\n\nimport {ExtendedMapContainer} from '../../../../util/extended/ExtendedMap.container';\nimport {GameReferences}       from '../../../gameReference/GameReferences';\nimport {PropertyProvider}     from '../../../_properties/PropertyProvider';\n\n/**\n * @todo move the content in the constructor in the builder instead\n * @multiton\n * @provider\n */\nexport class SpecialMusicInStarModeContainer\n    implements SpecialMusicInStarMode {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #EVERY_CONTAINERS: ExtendedMap<ArgumentsReceived, SpecialMusicInStarModeContainer> = new ExtendedMapContainer();\n\n    readonly #property;\n    readonly #game;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor([value, game,]: ArgumentsReceived,) {\n        this.#property = PropertyProvider.newBooleanContainer<PossibleValuesReceived, true, false, true>(value, true, false,);\n        this.#game = GameReferences.getValue(game);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get value(): PossibleValues {\n        return this.#property.value;\n    }\n\n\n    public get gameReference(): PossibleGames {\n        return this.#game;\n    }\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#property.comment;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    public static get(value: PossibleValuesReceived, game: PossibleGamesReceived,): SpecialMusicInStarMode {\n        const argumentsReceived: ArgumentsReceived = [value, game,];\n\n        return this.#EVERY_CONTAINERS.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new this(argumentsReceived)))\n            .get(argumentsReceived);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n\ntype ArgumentsReceived = readonly [value: PossibleValuesReceived, game: PossibleGamesReceived,];\n","import type {PossibleGamesReceived as GameInStarMode, PossibleValuesReceived as PossibleSpecialMusicInStarMode}                                                                                                                  from './SpecialMusicInStarMode';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnDeath, PossibleTranslationKeys as TranslationKeyOnDeath, PossibleTypesReceived as TypeOfSoundEffectOnDeath, PossibleValuesReceived as PossibleSoundEffectOnDeath}       from './SoundEffectOnDeath';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnGoalPole, PossibleTranslationKeys as TranslationKeyOnGoalPole, PossibleTypesReceived as TypeOfMusicOnGoalPole, PossibleValuesReceived as PossibleSoundEffectOnGoalPole} from './SoundEffectOnGoalPole';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnGroundAfterJump, PossibleValuesReceived as PossibleSoundEffectOnGroundAfterJump}                                                                                        from './SoundEffectOnGroundAfterJump';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnJump, PossibleValuesReceived as PossibleSoundEffectOnJump}                                                                                                              from './SoundEffectOnJump';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnTaunt, PossibleValuesReceived as PossibleSoundEffectOnTaunt}                                                                                                            from './SoundEffectOnTaunt';\nimport type {PossibleGamesReceived as GameOnSoundEffectWhenCollected, PossibleValuesReceived as PossibleSoundEffectWhenCollected}                                                                                                from './SoundEffectWhenCollected';\nimport type {PossibleValuesReceived as PossibleSoundEffectOnMovement}                                                                                                                                                            from './SoundEffectOnMovement';\nimport type {PossibleValuesReceived as PossibleSoundEffectOnTurnAfterRun}                                                                                                                                                        from './SoundEffectOnTurnAfterRun';\nimport type {SoundProperty}                                                                                                                                                                                                      from './SoundProperty';\n\nimport {SoundEffectOnDeathContainer}           from './SoundEffectOnDeath.container';\nimport {SoundEffectOnGoalPoleContainer}        from './SoundEffectOnGoalPole.container';\nimport {SoundEffectOnGroundAfterJumpContainer} from './SoundEffectOnGroundAfterJump.container';\nimport {SoundEffectOnJumpContainer}            from './SoundEffectOnJump.container';\nimport {SoundEffectOnMovementContainer}        from './SoundEffectOnMovement.container';\nimport {SoundEffectOnTauntContainer}           from './SoundEffectOnTaunt.container';\nimport {SoundEffectOnTurnAfterRunContainer}    from './SoundEffectOnTurnAfterRun.container';\nimport {SoundEffectWhenCollectedContainer}     from './SoundEffectWhenCollected.container';\nimport {SpecialMusicInStarModeContainer}       from './SpecialMusicInStarMode.container';\n\n/**\n * @todo Separate each \"sound effect\" or \"special music\" in their each class\n */\nexport class SoundPropertyContainer\n    implements SoundProperty {\n\n    //region -------------------- Fields --------------------\n\n    readonly #soundEffectWhenCollectedContainer;\n    readonly #soundEffectOnTauntContainer;\n    readonly #soundEffectOnMovementContainer;\n    readonly #soundEffectOnJumpContainer;\n    readonly #soundEffectOnGroundAfterJumpContainer;\n    readonly #soundEffectOnTurnAfterRunContainer;\n    readonly #specialMusicInStarModeContainer;\n    readonly #soundEffectOnGoalPoleContainer;\n    readonly #soundEffectOnDeathContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(valueWhenCollected: PossibleSoundEffectWhenCollected, gameWhenCollected: GameOnSoundEffectWhenCollected,\n                       valueOnTaunt: PossibleSoundEffectOnTaunt, gameOnTaunt: GameOnSoundEffectOnTaunt,\n                       valueOnMovement: PossibleSoundEffectOnMovement,\n                       valueOnJump: PossibleSoundEffectOnJump, gameOnJump: GameOnSoundEffectOnJump, valueOnGroundAfterJump: PossibleSoundEffectOnGroundAfterJump, gameOnGroundAfterJump: GameOnSoundEffectOnGroundAfterJump,\n                       valueOnTurnAfterRun: PossibleSoundEffectOnTurnAfterRun,\n                       valueInStarMode: PossibleSpecialMusicInStarMode, gameInStarMode: GameInStarMode,\n                       valueOnGoalPole: PossibleSoundEffectOnGoalPole, typeOnGoalPole: TypeOfMusicOnGoalPole, gameOnGoalPole: GameOnSoundEffectOnGoalPole, smallDefinitionOnGoalPole: TranslationKeyOnGoalPole,\n                       valueOnDeath: PossibleSoundEffectOnDeath, typeOnDeath: TypeOfSoundEffectOnDeath, gameOnDeath: GameOnSoundEffectOnDeath, smallDefinitionOnDeath: TranslationKeyOnDeath,) {\n        this.#soundEffectWhenCollectedContainer = SoundEffectWhenCollectedContainer.get(valueWhenCollected, gameWhenCollected,);\n        this.#soundEffectOnTauntContainer = SoundEffectOnTauntContainer.get(valueOnTaunt, gameOnTaunt,);\n        this.#soundEffectOnMovementContainer = SoundEffectOnMovementContainer.get(valueOnMovement,);\n        this.#soundEffectOnJumpContainer = SoundEffectOnJumpContainer.get(valueOnJump, gameOnJump,);\n        this.#soundEffectOnGroundAfterJumpContainer = SoundEffectOnGroundAfterJumpContainer.get(valueOnGroundAfterJump, gameOnGroundAfterJump,);\n        this.#soundEffectOnTurnAfterRunContainer = SoundEffectOnTurnAfterRunContainer.get(valueOnTurnAfterRun,);\n        this.#specialMusicInStarModeContainer = SpecialMusicInStarModeContainer.get(valueInStarMode, gameInStarMode,);\n        this.#soundEffectOnGoalPoleContainer = SoundEffectOnGoalPoleContainer.get(valueOnGoalPole, typeOnGoalPole, gameOnGoalPole, smallDefinitionOnGoalPole,);\n        this.#soundEffectOnDeathContainer = SoundEffectOnDeathContainer.get(valueOnDeath, typeOnDeath, gameOnDeath, smallDefinitionOnDeath,);\n    }\n\n    //region -------------------- When collected --------------------\n\n    public get soundEffectWhenCollectedContainer() {\n        return this.#soundEffectWhenCollectedContainer;\n    }\n\n    public get haveASoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.value;\n    }\n\n    public get gameOnSoundEffectWhenCollected() {\n        return this.soundEffectWhenCollectedContainer.gameReference;\n    }\n\n    //endregion -------------------- When collected --------------------\n    //region -------------------- Taunt --------------------\n\n    public get soundEffectOnTauntContainer() {\n        return this.#soundEffectOnTauntContainer;\n    }\n\n    public get haveASoundEffectOnTaunt() {\n        return this.soundEffectOnTauntContainer.value;\n    }\n\n    //endregion -------------------- Taunt --------------------\n    //region -------------------- Movement --------------------\n\n    public get soundEffectOnMovementContainer() {\n        return this.#soundEffectOnMovementContainer;\n    }\n\n    public get haveASoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.value;\n    }\n\n    public get translationKeyOnSoundEffectOnMovement() {\n        return this.soundEffectOnMovementContainer.translationKey;\n    }\n\n    //endregion -------------------- Movement --------------------\n    //region -------------------- Jump --------------------\n\n    public get soundEffectOnJumpContainer() {\n        return this.#soundEffectOnJumpContainer;\n    }\n\n    public get haveASoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.value;\n    }\n\n    public get amountOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.amount;\n    }\n\n    public get haveMultipleImagesOnJump() {\n        return this.soundEffectOnJumpContainer.haveMultipleImages;\n    }\n\n    public get gameOnSoundEffectOnJump() {\n        return this.soundEffectOnJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Jump --------------------\n    //region -------------------- Ground after jump --------------------\n\n    public get soundEffectOnGroundAfterJumpContainer() {\n        return this.#soundEffectOnGroundAfterJumpContainer;\n    }\n\n    public get haveASoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGroundAfterJump() {\n        return this.soundEffectOnGroundAfterJumpContainer.gameReference;\n    }\n\n    //endregion -------------------- Ground after jump --------------------\n    //region -------------------- Turn after run --------------------\n\n    public get soundEffectOnTurnAfterRunContainer() {\n        return this.#soundEffectOnTurnAfterRunContainer;\n    }\n\n    public get haveASoundEffectOnTurnAfterRun() {\n        return this.soundEffectOnTurnAfterRunContainer.value;\n    }\n\n    //endregion -------------------- Turn after run --------------------\n    //region -------------------- Star mode --------------------\n\n    public get specialMusicInStarModeContainer() {\n        return this.#specialMusicInStarModeContainer;\n    }\n\n    public get haveASpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.value;\n    }\n\n    public get gameOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.gameReference;\n    }\n\n    public get translationKeyOnSpecialMusicInStarMode() {\n        return this.specialMusicInStarModeContainer.translationKey;\n    }\n\n    //endregion -------------------- Star mode --------------------\n    //region -------------------- Goal pole --------------------\n\n    public get soundEffectOnGoalPoleContainer() {\n        return this.#soundEffectOnGoalPoleContainer;\n    }\n\n    public get haveASoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.value;\n    }\n\n    public get gameOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.simpleTranslationKey;\n    }\n\n    public get typeOfMusicOnGoalPole() {\n        return this.soundEffectOnGoalPoleContainer.type;\n    }\n\n    //endregion -------------------- Goal pole --------------------\n    //region -------------------- Death --------------------\n\n    public get soundEffectOnDeathContainer() {\n        return this.#soundEffectOnDeathContainer;\n    }\n\n    public get haveASoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.value;\n    }\n\n    public get gameOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.gameReference;\n    }\n\n    public get translationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.translationKey;\n    }\n\n    public get simpleTranslationKeyOnSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.simpleTranslationKey;\n    }\n\n    public get typeOfSoundEffectOnDeath() {\n        return this.soundEffectOnDeathContainer.type;\n    }\n\n    //endregion -------------------- Death --------------------\n\n}\n","import type {PossibleConditionToUnlockIt, UnlockProperty} from './UnlockProperty';\n\nexport class UnlockPropertyContainer\n    implements UnlockProperty {\n\n    //region -------------------- Fields --------------------\n\n    readonly #conditionToUnlockIt;\n    readonly #canBeUnlockedByAnAmiibo;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(conditionToUnlockIt: PossibleConditionToUnlockIt, canBeUnlockedByAnAmiibo: boolean,) {\n        this.#conditionToUnlockIt = conditionToUnlockIt;\n        this.#canBeUnlockedByAnAmiibo = canBeUnlockedByAnAmiibo;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get conditionToUnlockIt() {\n        return this.#conditionToUnlockIt;\n    }\n\n    public get canBeUnlockedByAnAmiibo() {\n        return this.#canBeUnlockedByAnAmiibo;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {PossibleConditionToUnlockIt, UnlockProperty} from './UnlockProperty';\nimport type {ProviderWithoutKey}                          from '../../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}        from '../../../util/provider/AbstractProvider';\nimport {UnlockPropertyContainer} from './UnlockProperty.container';\n\n/**\n * @singleton\n */\nexport class UnlockPropertyProvider\n    extends AbstractProvider<ArgumentsReceived, UnlockProperty>\n    implements ProviderWithoutKey<UnlockProperty, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: UnlockPropertyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public get(...argumentsReceived: ArgumentsReceived): UnlockProperty {\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(reference => reference.set(argumentsReceived, new UnlockPropertyContainer(...argumentsReceived,),))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [\n    conditionToUnlockIt: PossibleConditionToUnlockIt,\n    canBeUnlockedByAnAmiibo: boolean,\n];\n","import resource from '../../resources/compiled/Mystery Mushroom (SMM).json';\n\nimport type {EveryPossibleName_Version_SMM}                                                                                                                                                                                      from '../_util/loader/HeaderTypesForConvertorDefinition';\nimport type {Loader}                                                                                                                                                                                                             from '../../util/loader/Loader';\nimport type {MysteryMushroom}                                                                                                                                                                                                    from './MysteryMushroom';\nimport type {MysteryMushroomTemplate, PokemonGeneration}                                                                                                                                                                         from './MysteryMushroom.template';\nimport type {PossibleConditionToUnlockIt}                                                                                                                                                                                        from './properties/UnlockProperty';\nimport type {PossibleEnglishName as PossibleGameReference}                                                                                                                                                                       from '../gameReference/GameReferences.types';\nimport type {PossibleGamesReceived as GameInStarMode, PossibleValuesReceived as PossibleSpecialMusicInStarMode}                                                                                                                  from './properties/sound/SpecialMusicInStarMode';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnDeath, PossibleTranslationKeys as TranslationKeyOnDeath, PossibleTypesReceived as TypeOfSoundEffectOnDeath, PossibleValuesReceived as PossibleSoundEffectOnDeath}       from './properties/sound/SoundEffectOnDeath';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnGoalPole, PossibleTranslationKeys as TranslationKeyOnGoalPole, PossibleTypesReceived as TypeOfMusicOnGoalPole, PossibleValuesReceived as PossibleSoundEffectOnGoalPole} from './properties/sound/SoundEffectOnGoalPole';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnGroundAfterJump, PossibleValuesReceived as PossibleSoundEffectOnGroundAfterJump}                                                                                        from './properties/sound/SoundEffectOnGroundAfterJump';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnJump, PossibleValuesReceived as PossibleSoundEffectOnJump}                                                                                                              from './properties/sound/SoundEffectOnJump';\nimport type {PossibleGamesReceived as GameOnSoundEffectOnTaunt, PossibleValuesReceived as PossibleSoundEffectOnTaunt}                                                                                                            from './properties/sound/SoundEffectOnTaunt';\nimport type {PossibleGamesReceived as GameOnSoundEffectWhenCollected, PossibleValuesReceived as PossibleSoundEffectWhenCollected}                                                                                                from './properties/sound/SoundEffectWhenCollected';\nimport type {PossibleValuesReceived as PossibleSoundEffectOnMovement}                                                                                                                                                            from './properties/sound/SoundEffectOnMovement';\nimport type {PossibleValuesReceived as PossibleSoundEffectOnTurnAfterRun}                                                                                                                                                        from './properties/sound/SoundEffectOnTurnAfterRun';\nimport type {PropertiesArrayWithOptionalLanguages as LanguagesPropertyArray}                                                                                                                                                     from '../../lang/Loader.types';\nimport type {SoundPropertyTemplate}                                                                                                                                                                                              from './properties/sound/SoundProperty.template';\nimport type {PossibleUniqueEnglishName}                                                                                                                                                                                          from './MysteryMushrooms.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\nimport {MysteryMushroomBuilder}  from './MysteryMushroom.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n    conditionToUnlockIt,\n    canBeUnlockedByAnAmiibo,\n\n    firstAppearanceInMarioMaker,\n\n    reference,\n\n    uniqueName,\n\n    haveASoundEffectWhenCollected_game, haveASoundEffectWhenCollected,\n    haveASoundEffectOnTaunt_game, haveASoundEffectOnTaunt,\n    haveASoundEffectOnJump_game, haveASoundEffectOnJump,\n    haveASoundEffectOnGroundAfterJump_game, haveASoundEffectOnGroundAfterJump,\n    soundEffectOnMovement,\n    haveASoundEffectOnTurnAfterRun,\n    haveASpecialMusicInStarMode_game, haveASpecialMusicInStarMode,\n    haveASoundEffectWhenOnGoalPole_type, haveASoundEffectWhenOnGoalPole_game, haveASoundEffectWhenOnGoalPole_smallDefinition, haveASoundEffectWhenOnGoalPole,\n    haveASoundEffectOnDeath_type, haveASoundEffectOnDeath_game, haveASoundEffectOnDeath_smallDefinition, haveASoundEffectOnDeath,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype ExclusivePropertiesArray = [\n\n    conditionToUnlockIt: PossibleConditionToUnlockIt,\n    canBeUnlockedByAnAmiibo: boolean,\n\n    firstAppearanceInMarioMaker: EveryPossibleName_Version_SMM,\n\n    reference: | PossibleGameReference | PokemonGeneration,\n\n    uniqueName: PossibleUniqueEnglishName,\n\n\n    haveASoundEffectWhenCollected_game: GameOnSoundEffectWhenCollected,\n    haveASoundEffectWhenCollected: PossibleSoundEffectWhenCollected,\n\n    haveASoundEffectOnTaunt_game: GameOnSoundEffectOnTaunt,\n    haveASoundEffectOnTaunt: PossibleSoundEffectOnTaunt,\n\n    haveASoundEffectOnJump_game: GameOnSoundEffectOnJump,\n    haveASoundEffectOnJump: PossibleSoundEffectOnJump,\n    haveASoundEffectOnGroundAfterJump_game: GameOnSoundEffectOnGroundAfterJump,\n    haveASoundEffectOnGroundAfterJump: PossibleSoundEffectOnGroundAfterJump,\n\n    soundEffectOnMovement: PossibleSoundEffectOnMovement,\n\n    haveASoundEffectOnTurnAfterRun: PossibleSoundEffectOnTurnAfterRun,\n\n    haveASpecialMusicInStarMode_game: GameInStarMode,\n    haveASpecialMusicInStarMode: PossibleSpecialMusicInStarMode,\n\n    haveASoundEffectWhenOnGoalPole_type: TypeOfMusicOnGoalPole,\n    haveASoundEffectWhenOnGoalPole_game: GameOnSoundEffectOnGoalPole,\n    haveASoundEffectWhenOnGoalPole_smallDefinition: TranslationKeyOnGoalPole,\n    haveASoundEffectWhenOnGoalPole: PossibleSoundEffectOnGoalPole,\n\n    haveASoundEffectOnDeath_type: TypeOfSoundEffectOnDeath,\n    haveASoundEffectOnDeath_game: GameOnSoundEffectOnDeath,\n    haveASoundEffectOnDeath_smallDefinition: TranslationKeyOnDeath,\n    haveASoundEffectOnDeath: PossibleSoundEffectOnDeath,\n];\n\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link MysteryMushrooms}>\n */\nexport class MysteryMushroomLoader\n    implements Loader<ReadonlyMap<PossibleUniqueEnglishName, MysteryMushroom>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MysteryMushroomLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleUniqueEnglishName, MysteryMushroom>;\n\n    public load(): ReadonlyMap<PossibleUniqueEnglishName, MysteryMushroom> {\n        if (this.#map == null) {\n            const references = new Map<PossibleUniqueEnglishName, MysteryMushroom>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, MysteryMushroom, keyof typeof Headers>(resource, convertedContent => new MysteryMushroomBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleConditionToUnlockIt_mysteryMushroom, 'conditionToUnlockIt',)\n                .convertToBoolean('canBeUnlockedByAnAmiibo',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_version_smm, 'firstAppearanceInMarioMaker',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleAcronymWithPokemonGeneration_gameReference, 'reference',)\n\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectWhenCollected_game',)\n                .convertToNullableBoolean('haveASoundEffectWhenCollected',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectOnTaunt_game',)\n                .convertToNullableBoolean('haveASoundEffectOnTaunt',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectOnJump_game',)\n                .convertToNullableBooleanAnd([2, '3 images',], 'haveASoundEffectOnJump',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectOnGroundAfterJump_game',)\n                .convertToNullableBoolean('haveASoundEffectOnGroundAfterJump',)\n\n                .convertToNullableBooleanAnd(['Twinkle', 'Engine sound',], 'soundEffectOnMovement',)\n\n                .convertToNullableBoolean('haveASoundEffectOnTurnAfterRun',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASpecialMusicInStarMode_game',)\n                .convertToNullableBooleanAnd(['Flying Mario', 'Metal Mario', 'Super Star',], 'haveASpecialMusicInStarMode',)\n\n                .convertToEmptyableStringAnd(['Marimba', 'Rock',], 'haveASoundEffectWhenOnGoalPole_type',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectWhenOnGoalPole_game',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleSmallDefinition_soundEffectOnGoalPole_mysteryMushroom, 'haveASoundEffectWhenOnGoalPole_smallDefinition',)\n                .convertToNullableBooleanAnd(['+ sound', '+ \"Yatta\"', '+ barks', '+ \"Yeah\"', '+ humming', '+ singing', '+ Car sound',], 'haveASoundEffectWhenOnGoalPole',)\n\n                .convertToEmptyableStringAnd(['Marimba', 'Techno',], 'haveASoundEffectOnDeath_type',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'haveASoundEffectOnDeath_game',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleSmallDefinition_soundEffectOnDeath_mysteryMushroom, 'haveASoundEffectOnDeath_smallDefinition',)\n                .convertToNullableBooleanAnd(['+ \"Oh no!\"', '+ \"Nooo!\"', '+ \"Nooo\"', '+ \"Woah!\"', '+ \"Yaha!\"',], 'haveASoundEffectOnDeath',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleEnglishNameOnFile_mysteryMushroom, 'english', 'americanEnglish',)\n\n                .onAfterFinalObjectCreated((finalContent, convertedContent,) => references.set(convertedContent[Headers.uniqueName], finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"mystery mushroom\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"mystery mushroom\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<MysteryMushroomTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): MysteryMushroomTemplate {\n        return {\n            properties: {\n                firstAppearance: this._getContent(this._headersIndexMap.firstAppearanceInMarioMaker),\n                unlock: {\n                    condition: this._getContent(this._headersIndexMap.conditionToUnlockIt),\n                    amiibo: this._getContent(this._headersIndexMap.canBeUnlockedByAnAmiibo),\n                },\n                sound: this.#createSoundTemplate(),\n            },\n            uniqueName: this._getContent(this._headersIndexMap.uniqueName),\n            gameReference: this._getContent(this._headersIndexMap.reference),\n            name: this._createNameTemplate(),\n        };\n    }\n\n    #createSoundTemplate(): SoundPropertyTemplate {\n        return {\n            soundEffect: {\n                movement: this._getContent(this._headersIndexMap.soundEffectOnMovement),\n            },\n            hasSoundEffect: {\n                collected: {\n                    value: this._getContent(this._headersIndexMap.haveASoundEffectWhenCollected),\n                    game: this._getContent(this._headersIndexMap.haveASoundEffectWhenCollected_game),\n                },\n                taunt: {\n                    value: this._getContent(this._headersIndexMap.haveASoundEffectOnTaunt),\n                    game: this._getContent(this._headersIndexMap.haveASoundEffectOnTaunt_game),\n                },\n                jump: {\n                    value: {\n                        value: this._getContent(this._headersIndexMap.haveASoundEffectOnJump),\n                        game: this._getContent(this._headersIndexMap.haveASoundEffectOnJump_game),\n                    },\n                    ground: {\n                        value: this._getContent(this._headersIndexMap.haveASoundEffectOnGroundAfterJump),\n                        game: this._getContent(this._headersIndexMap.haveASoundEffectOnGroundAfterJump_game),\n                    },\n                },\n                turn: this._getContent(this._headersIndexMap.haveASoundEffectOnTurnAfterRun),\n                goalPole: {\n                    value: this._getContent(this._headersIndexMap.haveASoundEffectWhenOnGoalPole),\n                    game: this._getContent(this._headersIndexMap.haveASoundEffectWhenOnGoalPole_game),\n                    smallDefinition: this._getContent(this._headersIndexMap.haveASoundEffectWhenOnGoalPole_smallDefinition),\n                    type: this._getContent(this._headersIndexMap.haveASoundEffectWhenOnGoalPole_type),\n                },\n                death: {\n                    value: this._getContent(this._headersIndexMap.haveASoundEffectOnDeath),\n                    game: this._getContent(this._headersIndexMap.haveASoundEffectOnDeath_game),\n                    smallDefinition: this._getContent(this._headersIndexMap.haveASoundEffectOnDeath_smallDefinition),\n                    type: this._getContent(this._headersIndexMap.haveASoundEffectOnDeath_type),\n                },\n            },\n            hasSpecialMusic: {\n                starMode: {\n                    value: this._getContent(this._headersIndexMap.haveASpecialMusicInStarMode),\n                    game: this._getContent(this._headersIndexMap.haveASpecialMusicInStarMode_game),\n                },\n            },\n        };\n    }\n\n}\n","import type {Builder}                               from '../../util/builder/Builder';\nimport type {MysteryMushroomTemplate}               from './MysteryMushroom.template';\nimport type {MysteryMushroom, MysteryMushroomGames} from './MysteryMushroom';\nimport type {Name}                                  from '../../lang/name/Name';\n\nimport {GameReferences}                   from '../gameReference/GameReferences';\nimport {Games}                            from '../game/Games';\nimport {MysteryMushroomContainer}         from './MysteryMushroom.container';\nimport {MysteryMushroomPropertyContainer} from './properties/MysteryMushroomProperty.container';\nimport {SoundPropertyContainer}           from './properties/sound/SoundProperty.container';\nimport {TemplateWithNameBuilder}          from '../_template/TemplateWithName.builder';\nimport {UnlockPropertyProvider}           from './properties/UnlockProperty.provider';\n\nexport class MysteryMushroomBuilder\n    extends TemplateWithNameBuilder<MysteryMushroomTemplate, MysteryMushroom> {\n\n    //region -------------------- External object references --------------------\n\n    public static gameReferencesMap: ReadonlyMap<string, GameReferences>;\n\n    //endregion -------------------- External object references --------------------\n\n    public constructor(templateBuilder: Builder<MysteryMushroomTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_1, false,);//TODO change the false to true since it is a complete SMM1 name\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return MysteryMushroomBuilder;\n    }\n\n    protected override _uniqueName(template: MysteryMushroomTemplate,): string | null {\n        return template.uniqueName;\n    }\n\n    //region -------------------- Property helper methods --------------------\n\n    #createSoundPropertyFields() {\n        const propertyTemplate = this.template.properties.sound;\n        const {movement,} = propertyTemplate.soundEffect;\n        const {\n            collected: collectedTemplate, taunt: tauntTemplate, jump: {value: jumpTemplate, ground: groundAfterJumpTemplate},\n            turn: turnAfterRun, goalPole: goalPoleTemplate, death: deathTemplate,\n        } = propertyTemplate.hasSoundEffect;\n        const {starMode: starModeTemplate,} = propertyTemplate.hasSpecialMusic;\n\n        return [\n            collectedTemplate.value, collectedTemplate.game,\n            tauntTemplate.value, tauntTemplate.game,\n            movement,\n            jumpTemplate.value, jumpTemplate.game, groundAfterJumpTemplate.value, groundAfterJumpTemplate.game,\n            turnAfterRun,\n            starModeTemplate.value, starModeTemplate.game,\n            goalPoleTemplate.value, goalPoleTemplate.type, goalPoleTemplate.game, goalPoleTemplate.smallDefinition,\n            deathTemplate.value, deathTemplate.type, deathTemplate.game, deathTemplate.smallDefinition,\n        ] as const;\n    }\n\n    #createProperty() {\n        const propertyTemplate = this.template.properties;\n        const unlockTemplate = propertyTemplate.unlock;\n\n        return new MysteryMushroomPropertyContainer(\n            UnlockPropertyProvider.get.get(unlockTemplate.condition, unlockTemplate.amiibo,),\n            new SoundPropertyContainer(...this.#createSoundPropertyFields(),),\n        );\n    }\n\n    //endregion -------------------- Property helper methods --------------------\n\n    protected _getGames(): MysteryMushroomGames {\n        const reference = this.template.gameReference;\n\n        switch (reference) {\n            case 'Pokémon gen 1':\n                return [GameReferences.POKEMON_RED, GameReferences.POKEMON_GREEN, GameReferences.POKEMON_BLUE, GameReferences.POKEMON_YELLOW,];\n            case 'Pokémon gen 4':\n                return [GameReferences.POKEMON_DIAMOND, GameReferences.POKEMON_PEARL,];\n            case 'Pokémon gen 6':\n                return [GameReferences.POKEMON_X, GameReferences.POKEMON_Y,];\n            default:\n                return [GameReferences.getValue(reference)];\n        }\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    protected _build(name: Name<string>,): MysteryMushroom {\n        return new MysteryMushroomContainer(name, this._getGames(), this.#createProperty());\n    }\n}\n","import type {EveryLanguages}                            from '../EveryLanguages';\nimport type {Name}                                      from './Name';\nimport type {NameTrait}                                 from './NameTrait';\nimport type {NameTraitFromAnAlternativeContainer}       from './NameTraitFromAnAlternativeContainer';\nimport type {ObjectHolder, PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\n\nimport {ClassContainingAName}         from './ClassContainingAName';\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\n\nexport class ClassContainingANameAndAnAlternative<T, U, ALTERNATIVE extends NameTrait<U>, >\n    extends ClassContainingAName<T>\n    implements NameTraitFromAnAlternativeContainer<U, ALTERNATIVE> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #alternativeContainer: ObjectHolder<ALTERNATIVE>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<T>>, alternative: PossibleValueOnObjectHolder<ALTERNATIVE>,) {\n        super(name,);\n        this.#alternativeContainer = new DelayedObjectHolderContainer(alternative);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get alternativeContainer(): ALTERNATIVE {\n        return this.#alternativeContainer.get;\n    }\n\n    public get alternativeNameContainer(): this['alternativeContainer']['nameContainer'] {\n        return this.alternativeContainer.nameContainer;\n    }\n\n\n    public get alternativeLanguageValue(): this['alternativeNameContainer']['languageValue'] {\n        return this.alternativeNameContainer.languageValue;\n    }\n\n    //region -------------------- English properties --------------------\n\n    public get alternativeOriginalEnglish(): this['alternativeNameContainer']['originalEnglish'] {\n        return this.alternativeNameContainer.originalEnglish;\n    }\n\n    public get alternativeEnglish(): this['alternativeNameContainer']['english'] {\n        return this.alternativeNameContainer.english;\n    }\n\n    public get alternativeAmericanEnglish(): this['alternativeNameContainer']['americanEnglish'] {\n        return this.alternativeNameContainer.americanEnglish;\n    }\n\n    public get alternativeEuropeanEnglish(): this['alternativeNameContainer']['europeanEnglish'] {\n        return this.alternativeNameContainer.europeanEnglish;\n    }\n\n    //endregion -------------------- English properties --------------------\n    //region -------------------- French properties --------------------\n\n    public get alternativeOriginalFrench(): this['alternativeNameContainer']['originalFrench'] {\n        return this.alternativeNameContainer.originalFrench;\n    }\n\n    public get alternativeFrench(): this['alternativeNameContainer']['french'] {\n        return this.alternativeNameContainer.french;\n    }\n\n    public get alternativeCanadianFrench(): this['alternativeNameContainer']['canadianFrench'] {\n        return this.alternativeNameContainer.canadianFrench;\n    }\n\n    public get alternativeEuropeanFrench(): this['alternativeNameContainer']['europeanFrench'] {\n        return this.alternativeNameContainer.europeanFrench;\n    }\n\n    //endregion -------------------- French properties --------------------\n    //region -------------------- German properties --------------------\n\n    public get alternativeGerman(): this['alternativeNameContainer']['german'] {\n        return this.alternativeNameContainer.german;\n    }\n\n    //endregion -------------------- German properties --------------------\n    //region -------------------- Spanish properties --------------------\n\n    public get alternativeOriginalSpanish(): this['alternativeNameContainer']['originalSpanish'] {\n        return this.alternativeNameContainer.originalSpanish;\n    }\n\n    public get alternativeSpanish(): this['alternativeNameContainer']['spanish'] {\n        return this.alternativeNameContainer.spanish;\n    }\n\n    public get alternativeAmericanSpanish(): this['alternativeNameContainer']['americanSpanish'] {\n        return this.alternativeNameContainer.americanSpanish;\n    }\n\n    public get alternativeEuropeanSpanish(): this['alternativeNameContainer']['europeanSpanish'] {\n        return this.alternativeNameContainer.europeanSpanish;\n    }\n\n    //endregion -------------------- Spanish properties --------------------\n    //region -------------------- Italian properties --------------------\n\n    public get alternativeItalian(): this['alternativeNameContainer']['italian'] {\n        return this.alternativeNameContainer.italian;\n    }\n\n    //endregion -------------------- Italian properties --------------------\n    //region -------------------- Dutch properties --------------------\n\n    public get alternativeDutch(): this['alternativeNameContainer']['dutch'] {\n        return this.alternativeNameContainer.dutch;\n    }\n\n    //endregion -------------------- Dutch properties --------------------\n    //region -------------------- Portuguese properties --------------------\n\n    public get alternativeOriginalPortuguese(): this['alternativeNameContainer']['originalPortuguese'] {\n        return this.alternativeNameContainer.originalPortuguese;\n    }\n\n    public get alternativePortuguese(): this['alternativeNameContainer']['portuguese'] {\n        return this.alternativeNameContainer.portuguese;\n    }\n\n    public get alternativeAmericanPortuguese(): this['alternativeNameContainer']['americanPortuguese'] {\n        return this.alternativeNameContainer.americanPortuguese;\n    }\n\n    public get alternativeEuropeanPortuguese(): this['alternativeNameContainer']['europeanPortuguese'] {\n        return this.alternativeNameContainer.europeanPortuguese;\n    }\n\n    //endregion -------------------- Portuguese properties --------------------\n    //region -------------------- Russian properties --------------------\n\n    public get alternativeRussian(): this['alternativeNameContainer']['russian'] {\n        return this.alternativeNameContainer.russian;\n    }\n\n    //endregion -------------------- Russian properties --------------------\n    //region -------------------- Japanese properties --------------------\n\n    public get alternativeJapanese(): this['alternativeNameContainer']['japanese'] {\n        return this.alternativeNameContainer.japanese;\n    }\n\n    //endregion -------------------- Japanese properties --------------------\n    //region -------------------- Chinese properties --------------------\n\n    public get alternativeOriginalChinese(): this['alternativeNameContainer']['originalChinese'] {\n        return this.alternativeNameContainer.originalChinese;\n    }\n\n    public get alternativeChinese(): this['alternativeNameContainer']['chinese'] {\n        return this.alternativeNameContainer.chinese;\n    }\n\n    public get alternativeTraditionalChinese(): this['alternativeNameContainer']['traditionalChinese'] {\n        return this.alternativeNameContainer.traditionalChinese;\n    }\n\n    public get alternativeSimplifiedChinese(): this['alternativeNameContainer']['simplifiedChinese'] {\n        return this.alternativeNameContainer.simplifiedChinese;\n    }\n\n    //endregion -------------------- Chinese properties --------------------\n    //region -------------------- Korean properties --------------------\n\n    public get alternativeKorean(): this['alternativeNameContainer']['korean'] {\n        return this.alternativeNameContainer.korean;\n    }\n\n    //endregion -------------------- Korean properties --------------------\n    //region -------------------- Hebrew properties --------------------\n\n    public get alternativeIsHebrewUsed(): this['alternativeNameContainer']['isHebrewUsed'] {\n        return this.alternativeNameContainer.isHebrewUsed;\n    }\n\n    public get alternativeHebrew(): this['alternativeNameContainer']['hebrew'] {\n        return this.alternativeNameContainer.hebrew;\n    }\n\n    //endregion -------------------- Hebrew properties --------------------\n    //region -------------------- Polish properties --------------------\n\n    public get alternativeIsPolishUsed(): this['alternativeNameContainer']['isPolishUsed'] {\n        return this.alternativeNameContainer.isPolishUsed;\n    }\n\n    public get alternativePolish(): this['alternativeNameContainer']['polish'] {\n        return this.alternativeNameContainer.polish;\n    }\n\n    //endregion -------------------- Polish properties --------------------\n    //region -------------------- Ukrainian properties --------------------\n\n    public get alternativeIsUkrainianUsed(): this['alternativeNameContainer']['isUkrainianUsed'] {\n        return this.alternativeNameContainer.isUkrainianUsed;\n    }\n\n    public get alternativeUkrainian(): this['alternativeNameContainer']['ukrainian'] {\n        return this.alternativeNameContainer.ukrainian;\n    }\n\n    //endregion -------------------- Ukrainian properties --------------------\n    //region -------------------- Greek properties --------------------\n\n    public get alternativeIsGreekUsed(): this['alternativeNameContainer']['isGreekUsed'] {\n        return this.alternativeNameContainer.isGreekUsed;\n    }\n\n    public get alternativeGreek(): this['alternativeNameContainer']['greek'] {\n        return this.alternativeNameContainer.greek;\n    }\n\n    //endregion -------------------- Greek properties --------------------\n\n    public get alternativeOriginalLanguages(): this['alternativeNameContainer']['originalLanguages'] {\n        return this.alternativeNameContainer.originalLanguages;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toAlternativeNameMap(): ReadonlyMap<EveryLanguages, U> {\n        return this.alternativeNameContainer.toNameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {AlternativeEntityLimit, EntityLimit}         from './EntityLimit';\nimport type {EntityLimitAmount}                           from './properties/EntityLimitAmount';\nimport type {EntityLimitTypes}                            from './EntityLimitTypes';\nimport type {Name}                                        from '../../lang/name/Name';\nimport type {ObjectHolder, PossibleValueOnObjectHolder}   from '../../util/holder/ObjectHolder';\nimport type {PossibleAcronym, PossibleAlternativeAcronym} from './EntityLimits.types';\n\nimport {ClassContainingANameAndAnAlternative} from '../../lang/name/ClassContainingANameAndAnAlternative';\n\nexport abstract class AbstractEntityLimitContainer<ACRONYM extends PossibleAcronym | PossibleAlternativeAcronym | null = PossibleAcronym | PossibleAlternativeAcronym | null,\n    TYPE extends EntityLimitTypes = EntityLimitTypes,\n    LIMIT_AMOUNT extends EntityLimitAmount = EntityLimitAmount, >\n    extends ClassContainingANameAndAnAlternative<string, string, AlternativeEntityLimit>\n    implements EntityLimit<ACRONYM, TYPE, LIMIT_AMOUNT> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #acronym;\n    readonly #typeHolder;\n    readonly #limitHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(name: Name<string>, acronym: | PossibleAcronym | PossibleAlternativeAcronym | null, alternative: PossibleValueOnObjectHolder<AlternativeEntityLimit>, type: ObjectHolder<EntityLimitTypes>, limitAmount: ObjectHolder<EntityLimitAmount>,) {\n        super(name, alternative,);\n        this.#acronym = acronym;\n        this.#typeHolder = type;\n        this.#limitHolder = limitAmount;\n    }\n\n    //region -------------------- Type --------------------\n\n    public get type(): TYPE {\n        return this.#typeHolder.get as TYPE;\n    }\n\n    //endregion -------------------- Type --------------------\n    //region -------------------- Acronym --------------------\n\n    public get acronym(): ACRONYM {\n        return this.#acronym as ACRONYM;\n    }\n\n    //endregion -------------------- Acronym --------------------\n    //region -------------------- Alternative entity limit --------------------\n\n    public get alternativeAcronym(): this['alternativeContainer']['acronym'] {\n        return this.alternativeContainer.acronym;\n    }\n\n    //region -------------------- Limit amount --------------------\n\n    public get alternativeLimitContainer(): this['alternativeContainer']['limitContainer'] {\n        return this.alternativeContainer.limitContainer;\n    }\n\n    //region -------------------- SMM1 & SMM3DS limit --------------------\n\n    public get alternativeLimitContainerInSMM1AndSMM3DS(): this['alternativeLimitContainer']['limitContainerInSMM1AndSMM3DS'] {\n        return this.alternativeLimitContainer.limitContainerInSMM1AndSMM3DS;\n    }\n\n    public get alternativeLimitAmountInSMM1AndSMM3DS(): this['alternativeLimitContainerInSMM1AndSMM3DS']['value'] {\n        return this.alternativeLimitContainerInSMM1AndSMM3DS.value;\n    }\n\n    public get isUnknownAlternativeLimitInSMM1AndSMM3DS(): this['alternativeLimitContainerInSMM1AndSMM3DS']['isUnknown'] {\n        return this.alternativeLimitContainerInSMM1AndSMM3DS.isUnknown;\n    }\n\n    //endregion -------------------- SMM1 & SMM3DS limit --------------------\n    //region -------------------- SMM2 limit --------------------\n\n    public get alternativeLimitContainerInSMM2(): this['alternativeLimitContainer']['limitContainerInSMM2'] {\n        return this.alternativeLimitContainer.limitContainerInSMM2;\n    }\n\n    public get alternativeLimitAmountInSMM2(): this['alternativeLimitContainerInSMM2']['value'] {\n        return this.alternativeLimitContainerInSMM2.value;\n    }\n\n    public get isUnknownAlternativeLimitInSMM2(): this['alternativeLimitContainerInSMM2']['isUnknown'] {\n        return this.alternativeLimitContainerInSMM2.isUnknown;\n    }\n\n    //endregion -------------------- SMM2 limit --------------------\n\n    public get alternativeAmountComment(): this['alternativeLimitContainer']['comment'] {\n        return this.alternativeLimitContainer.comment;\n    }\n\n    //endregion -------------------- Limit amount --------------------\n\n    //endregion -------------------- Alternative entity limit --------------------\n    //region -------------------- Limit amount --------------------\n\n    public get limitContainer(): LIMIT_AMOUNT {\n        return this.#limitHolder.get as LIMIT_AMOUNT;\n    }\n\n    //region -------------------- SMM1 & SMM3DS limit --------------------\n\n    public get limitContainerInSMM1AndSMM3DS(): this['limitContainer']['limitContainerInSMM1AndSMM3DS'] {\n        return this.limitContainer.limitContainerInSMM1AndSMM3DS;\n    }\n\n    public get limitAmountInSMM1AndSMM3DS(): this['limitContainerInSMM1AndSMM3DS']['value'] {\n        return this.limitContainerInSMM1AndSMM3DS.value;\n    }\n\n    public get isUnknownLimitInSMM1AndSMM3DS(): this['limitContainerInSMM1AndSMM3DS']['isUnknown'] {\n        return this.limitContainerInSMM1AndSMM3DS.isUnknown;\n    }\n\n    //endregion -------------------- SMM1 & SMM3DS limit --------------------\n    //region -------------------- SMM2 limit --------------------\n\n    public get limitContainerInSMM2(): this['limitContainer']['limitContainerInSMM2'] {\n        return this.limitContainer.limitContainerInSMM2;\n    }\n\n    public get limitAmountInSMM2(): this['limitContainerInSMM2']['value'] {\n        return this.limitContainerInSMM2.value;\n    }\n\n    public get isUnknownLimitInSMM2(): this['limitContainerInSMM2']['isUnknown'] {\n        return this.limitContainerInSMM2.isUnknown;\n    }\n\n    //endregion -------------------- SMM2 limit --------------------\n\n    public get amountComment(): this['limitContainer']['comment'] {\n        return this.limitContainer.comment;\n    }\n\n    //endregion -------------------- Limit amount --------------------\n\n}\n","import type {AlternativeEntityLimit}     from './EntityLimit';\nimport type {EntityLimitAmount}          from './properties/EntityLimitAmount';\nimport type {EntityLimitTypes}           from './EntityLimitTypes';\nimport type {Name}                       from '../../lang/name/Name';\nimport type {ObjectHolder}               from '../../util/holder/ObjectHolder';\nimport type {PossibleAlternativeAcronym} from './EntityLimits.types';\n\nimport {AbstractEntityLimitContainer} from './AbstractEntityLimitContainer';\n\nexport class AlternativeEntityLimitContainer\n    extends AbstractEntityLimitContainer<| PossibleAlternativeAcronym | null>\n    implements AlternativeEntityLimit {\n\n    public constructor(name: Name<string>, acronym: | PossibleAlternativeAcronym | null, regularEntityLimit: ObjectHolder<EntityLimitTypes>, limitAmount: ObjectHolder<EntityLimitAmount>,) {\n        super(name, acronym, () => this, regularEntityLimit, limitAmount,);\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEntityLimitAmountName} from '../../../util/ClassWithNullObjectPattern';\nimport type {EntityLimitAmount}                                      from './EntityLimitAmount';\n\nimport {PropertyContainer} from '../../_properties/Property.container';\n\n/**\n * @singleton\n */\nexport class EmptyEntityLimitAmount\n    implements EntityLimitAmount, ClassWithNullObjectPattern<EmptyEntityLimitAmountName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEntityLimitAmount;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    public readonly limitContainerInSMM1AndSMM3DS = PropertyContainer.NULL_CONTAINER;\n    public readonly limitAmountInSMM1AndSMM3DS = this.limitContainerInSMM1AndSMM3DS.value;\n    public readonly isUnknownLimitInSMM1AndSMM3DS = this.limitContainerInSMM1AndSMM3DS.isUnknown;\n\n    public readonly limitContainerInSMM2 = PropertyContainer.NULL_CONTAINER;\n    public readonly limitAmountInSMM2 = this.limitContainerInSMM2.value;\n    public readonly isUnknownLimitInSMM2 = this.limitContainerInSMM2.isUnknown;\n\n    public readonly comment = null;\n\n    //endregion -------------------- Getter methods --------------------\n\n    public toString(): EmptyEntityLimitAmountName {\n        return 'Empty entity limit (amount)';\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyEntityLimitName} from '../../util/ClassWithNullObjectPattern';\nimport type {EntityLimit}                                      from './EntityLimit';\n\nimport {assert}                               from '../../util/utilitiesMethods';\nimport {ClassContainingANameAndAnAlternative} from '../../lang/name/ClassContainingANameAndAnAlternative';\nimport {EmptyStringName}                      from '../../lang/name/EmptyStringName';\nimport {EmptyEntityLimitAmount}               from './properties/EmptyEntityLimitAmount';\n\n/**\n * @singleton\n */\nexport class EmptyEntityLimit\n    extends ClassContainingANameAndAnAlternative<string, string, EmptyEntityLimit>\n    implements EntityLimit, ClassWithNullObjectPattern<EmptyEntityLimitName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyEntityLimit;\n\n    private constructor() {\n        super(EmptyStringName.get, () => this,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    //region -------------------- Type --------------------\n\n    public get type(): never {\n        throw assert(false, `No types is compatible with an ${this}.`,);\n    }\n\n    //endregion -------------------- Type --------------------\n    //region -------------------- Acronym --------------------\n\n    public readonly acronym = null;\n\n    //endregion -------------------- Acronym --------------------\n    //region -------------------- Alternative entity limit --------------------\n\n    public readonly alternativeAcronym = null;\n\n    //region -------------------- Limit amount --------------------\n\n    public readonly alternativeLimitContainer = EmptyEntityLimitAmount.get;\n\n    public readonly alternativeLimitContainerInSMM1AndSMM3DS = this.alternativeLimitContainer.limitContainerInSMM1AndSMM3DS;\n    public readonly alternativeLimitAmountInSMM1AndSMM3DS = this.alternativeLimitContainerInSMM1AndSMM3DS.value;\n    public readonly isUnknownAlternativeLimitInSMM1AndSMM3DS = this.alternativeLimitContainerInSMM1AndSMM3DS.isUnknown;\n\n    public readonly alternativeLimitContainerInSMM2 = this.alternativeLimitContainer.limitContainerInSMM2;\n    public readonly alternativeLimitAmountInSMM2 = this.alternativeLimitContainerInSMM2.value;\n    public readonly isUnknownAlternativeLimitInSMM2 = this.alternativeLimitContainerInSMM2.isUnknown;\n\n    public readonly alternativeAmountComment = this.alternativeLimitContainer.comment;\n\n    //endregion -------------------- Limit amount --------------------\n\n    //endregion -------------------- Alternative entity limit --------------------\n    //region -------------------- Limit amount --------------------\n\n    public readonly limitContainer = EmptyEntityLimitAmount.get;\n\n    public readonly limitContainerInSMM1AndSMM3DS = this.limitContainer.limitContainerInSMM1AndSMM3DS;\n    public readonly limitAmountInSMM1AndSMM3DS = this.limitContainerInSMM1AndSMM3DS.value;\n    public readonly isUnknownLimitInSMM1AndSMM3DS = this.limitContainerInSMM1AndSMM3DS.isUnknown;\n\n    public readonly limitContainerInSMM2 = this.limitContainer.limitContainerInSMM2;\n    public readonly limitAmountInSMM2 = this.limitContainerInSMM2.value;\n    public readonly isUnknownLimitInSMM2 = this.limitContainerInSMM2.isUnknown;\n\n    public readonly amountComment = this.limitContainer.comment;\n\n    //endregion -------------------- Limit amount --------------------\n\n    public override toString(): EmptyEntityLimitName {\n        return 'Empty entity limit';\n    }\n\n}\n","import type {EntityLimitAmount}                                                                                   from './EntityLimitAmount';\nimport type {NotApplicableProperty, UnknownProperty}                                                              from '../../_properties/PropertyWithEverything';\nimport type {NumberPropertyThatCanBeUnknown}                                                                      from '../../_properties/PropertyThatCanBeUnknown';\nimport type {ObjectHolder}                                                                                        from '../../../util/holder/ObjectHolder';\nimport type {PossibleLimitAmount_Comment, PossibleLimitAmount_SMM1And3DS_Amount, PossibleLimitAmount_SMM2_Amount} from '../EntityLimit.template';\n\nexport class EntityLimitAmountContainer\n    implements EntityLimitAmount {\n\n    //region -------------------- Fields --------------------\n\n    readonly #limitInSMM1AndSMM3DS;\n    readonly #limitInSMM2;\n    readonly #comment;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(limitInSMM1AndSMM3DS: ObjectHolder<| NumberPropertyThatCanBeUnknown<PossibleLimitAmount_SMM1And3DS_Amount> | NotApplicableProperty | UnknownProperty>,\n                       limitInSMM2: ObjectHolder<| NumberPropertyThatCanBeUnknown<PossibleLimitAmount_SMM2_Amount> | UnknownProperty>,\n                       comment: PossibleLimitAmount_Comment,) {\n        this.#limitInSMM1AndSMM3DS = limitInSMM1AndSMM3DS;\n        this.#limitInSMM2 = limitInSMM2;\n        this.#comment = comment;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- SMM1 & SMM3DS limit --------------------\n\n    public get limitContainerInSMM1AndSMM3DS() {\n        return this.#limitInSMM1AndSMM3DS.get;\n    }\n\n    public get limitAmountInSMM1AndSMM3DS() {\n        return this.limitContainerInSMM1AndSMM3DS.value;\n    }\n\n    public get isUnknownLimitInSMM1AndSMM3DS() {\n        return this.limitContainerInSMM1AndSMM3DS.isUnknown;\n    }\n\n    //endregion -------------------- SMM1 & SMM3DS limit --------------------\n    //region -------------------- SMM2 limit --------------------\n\n    public get limitContainerInSMM2() {\n        return this.#limitInSMM2.get;\n    }\n\n    public get limitAmountInSMM2() {\n        return this.limitContainerInSMM2.value;\n    }\n\n    public get isUnknownLimitInSMM2() {\n        return this.limitContainerInSMM2.isUnknown;\n    }\n\n    //endregion -------------------- SMM2 limit --------------------\n\n    public get comment() {\n        return this.#comment;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {AlternativeEntityLimit, EntityLimitWithPossibleAlternativeEntityLimit} from './EntityLimit';\nimport type {EntityLimitAmount}                                                     from './properties/EntityLimitAmount';\nimport type {EntityLimitTypes}                                                      from './EntityLimitTypes';\nimport type {Name}                                                                  from '../../lang/name/Name';\nimport type {ObjectHolder, PossibleValueOnObjectHolder}                             from '../../util/holder/ObjectHolder';\nimport type {PossibleAcronym}                                                       from './EntityLimits.types';\n\nimport {AbstractEntityLimitContainer} from './AbstractEntityLimitContainer';\n\nexport class EntityLimitContainer\n    extends AbstractEntityLimitContainer<| PossibleAcronym | null>\n    implements EntityLimitWithPossibleAlternativeEntityLimit {\n\n    public constructor(name: Name<string>, acronym: | PossibleAcronym | null, alternative: PossibleValueOnObjectHolder<AlternativeEntityLimit>, type: ObjectHolder<EntityLimitTypes>, limitAmount: ObjectHolder<EntityLimitAmount>,) {\n        super(name, acronym, alternative, type, limitAmount,);\n    }\n\n}\n","import type {NumberPropertyThatCanBeUnknown} from '../PropertyThatCanBeUnknown';\nimport type {PossibleNumber}                 from '../Property';\nimport type {PossibleValueOnObjectHolder}    from '../../../util/holder/ObjectHolder';\n\nimport {PropertyThatCanBeUnknownContainer} from '../PropertyThatCanBeUnknown.container';\n\nexport class NumberPropertyThatCanBeUnknownContainer<N extends PossibleNumber = PossibleNumber, IS_UNKNOWN extends boolean = boolean, >\n    extends PropertyThatCanBeUnknownContainer<N, IS_UNKNOWN>\n    implements NumberPropertyThatCanBeUnknown<N, IS_UNKNOWN> {\n\n    public constructor(value: PossibleValueOnObjectHolder<N>, isUnknown: IS_UNKNOWN,) {\n        super(value, isUnknown,);\n    }\n\n}\n","import type {PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\nimport type {PropertyThatCanBeUnknown}    from './PropertyThatCanBeUnknown';\n\nimport {PropertyContainer} from './Property.container';\n\nexport class PropertyThatCanBeUnknownContainer<T, IS_UNKNOWN extends boolean = boolean, >\n    extends PropertyContainer<T, IS_UNKNOWN>\n    implements PropertyThatCanBeUnknown<T, IS_UNKNOWN> {\n\n    public constructor(value: PossibleValueOnObjectHolder<T>, isUnknown: IS_UNKNOWN,) {\n        super(value, isUnknown,);\n    }\n\n}\n","import type {AlternativeEntityLimit, EntityLimit}                                                                                                                                         from './EntityLimit';\nimport type {AlternativeLimitTemplate, EntityLimitTemplate, LimitAmountTemplate, PossibleLimitAmount_SMM1And3DS, PossibleLimitAmount_SMM2, PossibleLimitAmount_SMM2_UnknownAmount_Amount} from './EntityLimit.template';\nimport type {Builder}                                                                                                                                                                     from '../../util/builder/Builder';\nimport type {EntityLimitAmount}                                                                                                                                                           from './properties/EntityLimitAmount';\nimport type {ObjectHolder}                                                                                                                                                                from '../../util/holder/ObjectHolder';\nimport type {Name}                                                                                                                                                                        from '../../lang/name/Name';\nimport type {NotApplicableProperty, UnknownProperty}                                                                                                                                      from '../_properties/PropertyWithEverything';\nimport type {PossibleAlternativeEnglishName, PossibleEnglishName}                                                                                                                         from './EntityLimits.types';\nimport type {PossibleEnglishName as PossibleEnglishName_EntityLimitType}                                                                                                                  from './EntityLimitTypes.types';\n\nimport {AlternativeEntityLimitContainer}         from './AlternativeEntityLimitContainer';\nimport {DelayedObjectHolderContainer}            from '../../util/holder/DelayedObjectHolder.container';\nimport {EmptyEntityLimit}                        from './EmptyEntityLimit';\nimport {EmptyEntityLimitAmount}                  from './properties/EmptyEntityLimitAmount';\nimport {EntityLimitAmountContainer}              from './properties/EntityLimitAmount.container';\nimport {EntityLimitContainer}                    from './EntityLimit.container';\nimport {EntityLimitTypes}                        from './EntityLimitTypes';\nimport {Import}                                  from '../../util/DynamicImporter';\nimport {Games}                                   from '../game/Games';\nimport {NumberPropertyThatCanBeUnknownContainer} from '../_properties/number/NumberPropertyThatCanBeUnknown.container';\nimport {ObjectHolderContainer}                   from '../../util/holder/ObjectHolder.container';\nimport {PropertyProvider}                        from '../_properties/PropertyProvider';\nimport {PropertyContainer}                       from '../_properties/Property.container';\nimport {TemplateWithNameBuilder}                 from '../_template/TemplateWithName.builder';\n\nexport class EntityLimitBuilder\n    extends TemplateWithNameBuilder<| EntityLimitTemplate | AlternativeLimitTemplate, EntityLimit>\n    implements Builder<EntityLimit> {\n\n    //region -------------------- External object references --------------------\n\n    public static references: Map<PossibleEnglishName | PossibleAlternativeEnglishName, EntityLimit>;\n\n    //endregion -------------------- External object references --------------------\n    //region -------------------- Fields --------------------\n\n    static readonly #NOT_APPLICABLE_CONTAINER: ObjectHolder<NotApplicableProperty> = new ObjectHolderContainer(PropertyContainer.NOT_APPLICABLE_CONTAINER);\n    static readonly #UNKNOWN_CONTAINER: ObjectHolder<UnknownProperty> = new ObjectHolderContainer(PropertyContainer.UNKNOWN_CONTAINER);\n\n    static readonly #EMPTY_ENTITY_LIMIT: ObjectHolder<EmptyEntityLimit> = new DelayedObjectHolderContainer(() => EmptyEntityLimit.get);\n    static readonly #EMPTY_ENTITY_LIMIT_AMOUNT: ObjectHolder<EmptyEntityLimitAmount> = new DelayedObjectHolderContainer(() => EmptyEntityLimitAmount.get);\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(templateBuilder: Builder<| EntityLimitTemplate | AlternativeLimitTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_2, false,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return EntityLimitBuilder;\n    }\n\n\n    /**\n     * Get the {@link EntityLimitTypes} based on the template name using the reference of the {@link EntityLimits}.\n     *\n     * @param template\n     */\n    #getEntityLimitTypeBy(template: AlternativeLimitTemplate,): ObjectHolder<EntityLimitTypes> {\n        return new DelayedObjectHolderContainer(() => Import.EntityLimits.getValue(template.name.english.simple!)!.reference.type);\n    }\n\n    #getAlternativeEntityLimitBy(limit: | PossibleAlternativeEnglishName | null,): ObjectHolder<AlternativeEntityLimit> {\n        return limit == null\n            ? EntityLimitBuilder.#EMPTY_ENTITY_LIMIT\n            : new DelayedObjectHolderContainer(() => EntityLimitBuilder.references.get(limit) as AlternativeEntityLimit);\n    }\n\n    /**\n     * Get a {@link EntityLimitTypes} based on the name received.\n     *\n     * @param name\n     */\n    #getTypeBy(name: PossibleEnglishName_EntityLimitType,): ObjectHolder<EntityLimitTypes> {\n        return new DelayedObjectHolderContainer(() => EntityLimitTypes.getValue(name));\n    }\n\n    //region -------------------- Limit amount helper methods --------------------\n\n    #createLimitTemplateInSMM1And3DS(amount: Exclude<PossibleLimitAmount_SMM1And3DS, null>,) {\n        return amount === 'N/A'\n            ? EntityLimitBuilder.#NOT_APPLICABLE_CONTAINER\n            : new DelayedObjectHolderContainer(() => PropertyProvider.newNumberContainer(amount, true,));\n    }\n\n    #createLimitTemplateInSMM2(amount: Exclude<PossibleLimitAmount_SMM2, null>,) {\n        return amount === '?'\n            ? EntityLimitBuilder.#UNKNOWN_CONTAINER\n            : new DelayedObjectHolderContainer(() =>\n                typeof amount == 'number'\n                    ? PropertyProvider.newNumberContainer(amount, true,)\n                    : new NumberPropertyThatCanBeUnknownContainer(Number(amount.substring(0, amount.length - 1)) as PossibleLimitAmount_SMM2_UnknownAmount_Amount, true,));\n    }\n\n    /**\n     * Create the {@link EntityLimitAmount} encapsulated in a {@link ObjectHolder} to return the proper amount\n     *\n     *\n     * @param template the limit amount template\n     * @canContainDuplicateObjects\n     */\n    #createLimitAmount({'1And3DS': amountInSMM1And3DS, 2: amountInSMM2, comment,}: LimitAmountTemplate,): ObjectHolder<EntityLimitAmount> {\n        return amountInSMM1And3DS == null || amountInSMM2 == null\n            ? EntityLimitBuilder.#EMPTY_ENTITY_LIMIT_AMOUNT\n            : new DelayedObjectHolderContainer(() => new EntityLimitAmountContainer(\n                this.#createLimitTemplateInSMM1And3DS(amountInSMM1And3DS),\n                this.#createLimitTemplateInSMM2(amountInSMM2),\n                comment,\n            ));\n\n    }\n\n    //endregion -------------------- Limit amount helper methods --------------------\n\n    //endregion -------------------- Build helper methods --------------------\n\n    public override _build(name: Name<string>,): EntityLimit {\n        const template = this.template;\n\n        return template.type == null\n            ? new AlternativeEntityLimitContainer(\n                name,\n                template.acronym,\n                this.#getEntityLimitTypeBy(template),\n                this.#createLimitAmount(template.limit),\n            )\n            : new EntityLimitContainer(\n                name,\n                template.acronym,\n                this.#getAlternativeEntityLimitBy(template.references.alternative),\n                this.#getTypeBy(template.type),\n                this.#createLimitAmount(template.limit),\n            );\n    }\n\n}\n","import resource from '../../resources/compiled/Entity limit.json';\n\nimport type {AlternativeLimitTemplate, EmptyLimitAmountTemplate, EntityLimitTemplate, LimitAmountTemplate, PossibleLimitAmount_Comment, PossibleLimitAmount_SMM1And3DS, PossibleLimitAmount_SMM2} from './EntityLimit.template';\nimport type {EntityLimit}                                                                                                                                                                         from './EntityLimit';\nimport type {DefaultNonNullablePropertiesArray as LanguagesPropertyArray}                                                                                                                         from '../../lang/Loader.types';\nimport type {Loader}                                                                                                                                                                              from '../../util/loader/Loader';\nimport type {PossibleAcronym, PossibleAlternativeAcronym, PossibleAlternativeEnglishName, PossibleEnglishName}                                                                                    from './EntityLimits.types';\nimport type {PossibleEnglishName as PossibleEnglishName_Entity}                                                                                                                                   from '../entity/Entities.types';\nimport type {PossibleEnglishName as PossibleEnglishName_LimitType}                                                                                                                                from './EntityLimitTypes.types';\nimport type {PossibleGroupName}                                                                                                                                                                   from '../entityTypes';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {EntityLimitBuilder}      from './EntityLimit.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    alternative,\n\n    type,\n    acronym,\n\n    limit_SMM1And3DS, limit_SMM2, limit_comment,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype ExclusivePropertyArray = [\n\n    alternative: | PossibleAlternativeEnglishName | null,\n\n    type: | PossibleEnglishName_LimitType | null,\n    acronym: | PossibleAcronym | PossibleAlternativeAcronym | null,\n\n    limit_SMM1And3DS: PossibleLimitAmount_SMM1And3DS,\n    limit_SMM2: PossibleLimitAmount_SMM2,\n    limit_comment: PossibleLimitAmount_Comment,\n\n    link_group: | PossibleGroupName | null,\n    link_entity: | PossibleEnglishName_Entity | null,\n\n];\ntype PropertiesArray = [\n    ...ExclusivePropertyArray,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n//region -------------------- Private types --------------------\n\ntype PossibleNullableAlternativeAcronym = | PossibleAlternativeAcronym | null;\ntype PossibleNullableAcronym = | PossibleAcronym | null;\n\n//endregion -------------------- Private types --------------------\n\n/**\n * @singleton\n * @recursiveReferenceVia<{@link EntityLimitBuilder}, {@link EntityLimits}>\n * @recursiveReference<{@link EntityLimits}>\n */\nexport class EntityLimitLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, EntityLimit>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityLimitLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, EntityLimit>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, EntityLimit> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, EntityLimit>();\n\n            //region -------------------- Builder initialisation --------------------\n\n            EntityLimitBuilder.references = references;\n\n            //endregion -------------------- Builder initialisation --------------------\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, EntityLimit, keyof typeof Headers>(resource, convertedContent => new EntityLimitBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyAlternativeAcronym_limit, 'alternative',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_limitType, 'type',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleAcronym_limit, 'acronym',)\n                .convertToNullableNumberAnd(['?', 'N/A',], 'Limit_SMM1And3DS',)\n                .convertToNullableNumberAnd(['?', '10?', '400?', '500?',], 'limit_SMM2',)\n                .convertToEmptyableStringAnd(['Crash online if met', 'Per player', 'Per pair', 'Per section',], 'limit_comment',)\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_limit, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"entity limit\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"entity limit\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<| EntityLimitTemplate | AlternativeLimitTemplate, PropertiesArray, typeof Headers> {\n\n    static readonly #EMPTY_LIMIT_AMOUNT_TEMPLATE: EmptyLimitAmountTemplate = {'1And3DS': null, 2: null, comment: null,};\n    static readonly #EMPTY_REFERENCES = {\n        regular: null,\n        alternative: null,\n    };\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): | EntityLimitTemplate | AlternativeLimitTemplate {\n        const type = this._getContent(this._headersIndexMap.type);\n        const acronym = this._getContent(this._headersIndexMap.acronym);\n\n        return type == null\n            ? this.#createAlternativeLimitTemplate(acronym as PossibleNullableAlternativeAcronym,)\n            : this.#createLimitTemplate(type, acronym as PossibleNullableAcronym,);\n    }\n\n    #createLimitTemplate(type: PossibleEnglishName_LimitType, acronym: PossibleNullableAcronym,): EntityLimitTemplate {\n        return {\n\n            references: {\n                regular: this._getContent(this._headersIndexMap.english) as PossibleEnglishName,\n                alternative: this._getContent(this._headersIndexMap.alternative),\n            },\n\n            type: type,\n\n            acronym: acronym,\n\n            limit: this.#createLimitAmountTemplate(),\n\n            name: this._createNameTemplate(),\n\n        };\n    }\n\n    #createAlternativeLimitTemplate(acronym: PossibleNullableAlternativeAcronym,): AlternativeLimitTemplate {\n        return {\n\n            references: TemplateBuilder.#EMPTY_REFERENCES,\n\n            type: null,\n            acronym: acronym,\n\n            limit: TemplateBuilder.#EMPTY_LIMIT_AMOUNT_TEMPLATE,\n\n            name: this._createNameTemplate(),\n\n        };\n    }\n\n\n    #createLimitAmountTemplate(): LimitAmountTemplate {\n        const limit_SMM1 = this._getContent(this._headersIndexMap.limit_SMM1And3DS);\n        const limit_SMM2 = this._getContent(this._headersIndexMap.limit_SMM2);\n\n        return limit_SMM1 == null && limit_SMM2 == null\n            ? TemplateBuilder.#EMPTY_LIMIT_AMOUNT_TEMPLATE\n            : {\n                '1And3DS': limit_SMM1,\n                2: limit_SMM2,\n                comment: this._getContent(this._headersIndexMap.limit_comment),\n            };\n    }\n\n}\n","import type {ClassThatIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {GameProperty}                     from '../entity/properties/game/GameProperty';\nimport type {Name}                             from '../../lang/name/Name';\nimport type {ObjectHolder}                     from '../../util/holder/ObjectHolder';\nimport type {Theme}                            from './Theme';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class AbstractTheme<PROPERTY extends GameProperty = GameProperty, >\n    extends ClassContainingAName<string>\n    implements Theme {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isInProperty;\n    readonly #isAvailableFromTheStartHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(name: Name<string>, isInProperty: PROPERTY, isAvailableFromTheStart: ObjectHolder<ClassThatIsAvailableFromTheStart>,) {\n        super(name,);\n        this.#isInProperty = isInProperty;\n        this.#isAvailableFromTheStartHolder = isAvailableFromTheStart;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public get isInProperty(): PROPERTY {\n        return this.#isInProperty;\n    }\n\n    public get isInSuperMarioMaker1(): this['isInProperty']['isInSuperMarioMaker1'] {\n        return this.isInProperty.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS(): this['isInProperty']['isInSuperMarioMakerFor3DS'] {\n        return this.isInProperty.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2(): this['isInProperty']['isInSuperMarioMaker2'] {\n        return this.isInProperty.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public get isAvailableFromTheStartContainer(): ClassThatIsAvailableFromTheStart {\n        return this.#isAvailableFromTheStartHolder.get;\n    }\n\n    public get isAvailableFromTheStartInSMM1() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM1;\n    }\n\n    public get isAvailableFromTheStartInSMM3DS() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM3DS;\n    }\n\n    public get isAvailableFromTheStartInSMM2() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM2;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.isInProperty.toGameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {ClassThatIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {CourseTheme}                      from './CourseTheme';\nimport type {Entity}                           from '../entity/Entity';\nimport type {GameProperty}                     from '../entity/properties/game/GameProperty';\nimport type {Name}                             from '../../lang/name/Name';\nimport type {NightEffects}                     from '../nightEffect/NightEffects';\nimport type {ObjectHolder}                     from '../../util/holder/ObjectHolder';\n\nimport {AbstractTheme} from './AbstractTheme';\n\nexport class CourseThemeContainer\n    extends AbstractTheme\n    implements CourseTheme {\n\n    //region -------------------- Fields --------------------\n\n    readonly #entitiesHolder;\n    readonly #effectHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: Name<string>, isInProperty: GameProperty, isAvailableFromTheStart: ObjectHolder<ClassThatIsAvailableFromTheStart>, entities: ObjectHolder<readonly Entity[]>, effect: ObjectHolder<NightEffects>,) {\n        super(name, isInProperty, isAvailableFromTheStart,);\n        this.#entitiesHolder = entities;\n        this.#effectHolder = effect;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get entities() {\n        return this.#entitiesHolder.get;\n    }\n\n    public get effect() {\n        return this.#effectHolder.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ClassThatIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {CourseAndWorldTheme}              from './CourseAndWorldTheme';\nimport type {CourseTheme}                      from './CourseTheme';\nimport type {GameProperty}                     from '../entity/properties/game/GameProperty';\nimport type {Name}                             from '../../lang/name/Name';\nimport type {WorldTheme}                       from './WorldTheme';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport abstract class AbstractCourseAndWorldTheme\n    extends ClassContainingAName<string>\n    implements CourseAndWorldTheme {\n\n    //region -------------------- Fields ----------------------------------------\n\n    readonly #courseTheme: CourseTheme;\n    readonly #worldTheme: WorldTheme;\n\n    //endregion -------------------- Fields ----------------------------------------\n\n    protected constructor(name: Name<string>, courseTheme: CourseTheme, worldTheme: WorldTheme,) {\n        super(name,);\n        this.#courseTheme = courseTheme;\n        this.#worldTheme = worldTheme;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Theme properties --------------------\n\n    public get courseTheme(): CourseTheme {\n        return this.#courseTheme;\n    }\n\n    public abstract get isInCourseTheme(): boolean;\n\n\n    public get worldTheme(): WorldTheme {\n        return this.#worldTheme;\n    }\n\n    public abstract get isInWorldTheme(): boolean;\n\n    //endregion -------------------- Theme properties --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public abstract get isInProperty(): GameProperty;\n\n    public get isInSuperMarioMaker1(): this['isInProperty']['isInSuperMarioMaker1'] {\n        return this.isInProperty.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS(): this['isInProperty']['isInSuperMarioMakerFor3DS'] {\n        return this.isInProperty.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2(): this['isInProperty']['isInSuperMarioMaker2'] {\n        return this.isInProperty.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public abstract get isAvailableFromTheStartContainer(): ClassThatIsAvailableFromTheStart;\n\n    public get isAvailableFromTheStartInSMM1(): this['isAvailableFromTheStartContainer']['isAvailableFromTheStartInSMM1'] {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM1;\n    }\n\n    public get isAvailableFromTheStartInSMM3DS(): this['isAvailableFromTheStartContainer']['isAvailableFromTheStartInSMM3DS'] {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM3DS;\n    }\n\n    public get isAvailableFromTheStartInSMM2(): this['isAvailableFromTheStartContainer']['isAvailableFromTheStartInSMM2'] {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM2;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.isInProperty.toGameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}","import type {ClassThatIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {CourseTheme}                      from './CourseTheme';\nimport type {GameProperty}                     from '../entity/properties/game/GameProperty';\nimport type {Name}                             from '../../lang/name/Name';\nimport type {ObjectHolder}                     from '../../util/holder/ObjectHolder';\nimport type {WorldTheme}                       from './WorldTheme';\n\nimport {AbstractCourseAndWorldTheme} from './AbstractCourseAndWorldTheme';\n\nexport class CourseAndWorldThemeContainer\n    extends AbstractCourseAndWorldTheme {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isInPropertyHolder;\n    readonly #isAvailableFromTheStartHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: Name<string>, gameProperty: ObjectHolder<GameProperty>, isAvailableFromTheStart: ObjectHolder<ClassThatIsAvailableFromTheStart>, courseTheme: CourseTheme, worldTheme: WorldTheme,) {\n        super(name, courseTheme, worldTheme,);\n        this.#isInPropertyHolder = gameProperty;\n        this.#isAvailableFromTheStartHolder = isAvailableFromTheStart;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Theme properties --------------------\n\n    public override get isInCourseTheme(): true {\n        return true;\n    }\n\n\n    public override get isInWorldTheme(): true {\n        return true;\n    }\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Game properties --------------------\n\n    public override get isInProperty(): GameProperty {\n        return this.#isInPropertyHolder.get;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public override get isAvailableFromTheStartContainer() {\n        return this.#isAvailableFromTheStartHolder.get;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {ClassWithNullObjectPattern, EmptyWorldThemeName} from '../../util/ClassWithNullObjectPattern';\nimport type {WorldTheme}                                      from './WorldTheme';\n\nimport {ClassContainingAName}                     from '../../lang/name/ClassContainingAName';\nimport {ClassThatIsAvailableFromTheStartProvider} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart.provider';\nimport {EMPTY_MAP}                                from '../../util/emptyVariables';\nimport {EmptyStringName}                          from '../../lang/name/EmptyStringName';\nimport {GamePropertyProvider}                     from '../entity/properties/game/GameProperty.provider';\n\n/**\n * @singleton\n */\nexport class EmptyWorldTheme\n    extends ClassContainingAName<string>\n    implements WorldTheme, ClassWithNullObjectPattern<EmptyWorldThemeName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyWorldTheme;\n\n    private constructor() {\n        super(EmptyStringName.get,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public readonly isInProperty = GamePropertyProvider.get.smm2Only;\n\n    public readonly isInSuperMarioMaker1 = this.isInProperty.isInSuperMarioMaker1;\n    public readonly isInSuperMarioMakerFor3DS = this.isInProperty.isInSuperMarioMakerFor3DS;\n    public readonly isInSuperMarioMaker2 = this.isInProperty.isInSuperMarioMaker2;\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public readonly isAvailableFromTheStartContainer = ClassThatIsAvailableFromTheStartProvider.get.null;\n\n    public readonly isAvailableFromTheStartInSMM1 = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM1;\n    public readonly isAvailableFromTheStartInSMM3DS = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM3DS;\n    public readonly isAvailableFromTheStartInSMM2 = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM2;\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public override toString(): EmptyWorldThemeName {\n        return 'Empty world theme';\n    }\n\n}\n","import type {CourseTheme} from './CourseTheme';\nimport type {Name}        from '../../lang/name/Name';\n\nimport {AbstractCourseAndWorldTheme} from './AbstractCourseAndWorldTheme';\nimport {EmptyWorldTheme}             from './EmptyWorldTheme';\n\nexport class CourseOnlyThemeContainer\n    extends AbstractCourseAndWorldTheme {\n\n    public constructor(name: Name<string>, courseTheme: CourseTheme,) {\n        super(name, courseTheme, EmptyWorldTheme.get,);\n    }\n\n    //region -------------------- Theme properties --------------------\n\n    public override get isInCourseTheme(): true {\n        return true;\n    }\n\n\n    public override get isInWorldTheme(): false {\n        return false;\n    }\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Game properties --------------------\n\n    public override get isInProperty() {\n        return this.courseTheme.isInProperty;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public override get isAvailableFromTheStartContainer() {\n        return this.courseTheme.isAvailableFromTheStartContainer;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n}\n","import type {AbstractExclusiveSMM2GameProperty, GameProperty} from '../entity/properties/game/GameProperty';\nimport type {ClassThatIsAvailableFromTheStart}                from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {Name}                                            from '../../lang/name/Name';\nimport type {ObjectHolder}                                    from '../../util/holder/ObjectHolder';\nimport type {WorldTheme}                                      from './WorldTheme';\n\nimport {AbstractTheme} from './AbstractTheme';\n\nexport class WorldThemeContainer\n    extends AbstractTheme<AbstractExclusiveSMM2GameProperty>\n    implements WorldTheme {\n\n\n    public constructor(name: Name<string>, isInProperty: GameProperty<false, false, true>, isAvailableFromTheStart: ObjectHolder<ClassThatIsAvailableFromTheStart<null, null, true>>,) {\n        super(name, isInProperty, isAvailableFromTheStart,);\n    }\n\n}\n","import type {ClassWithNullObjectPattern, EmptyCourseThemeName} from '../../util/ClassWithNullObjectPattern';\nimport type {CourseTheme}                                      from './CourseTheme';\n\nimport {ClassContainingAName}                     from '../../lang/name/ClassContainingAName';\nimport {ClassThatIsAvailableFromTheStartProvider} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart.provider';\nimport {EMPTY_ARRAY, EMPTY_MAP}                   from '../../util/emptyVariables';\nimport {EmptyIsInProperty}                        from '../entity/properties/EmptyIsInProperty';\nimport {EmptyStringName}                          from '../../lang/name/EmptyStringName';\n\n/**\n * @singleton\n */\nexport class EmptyCourseTheme\n    extends ClassContainingAName<string>\n    implements CourseTheme, ClassWithNullObjectPattern<EmptyCourseThemeName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyCourseTheme;\n\n    private constructor() {\n        super(EmptyStringName.get,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public readonly isInProperty = EmptyIsInProperty.get;\n\n    public readonly isInSuperMarioMaker1 = this.isInProperty.isInSuperMarioMaker1;\n    public readonly isInSuperMarioMakerFor3DS = this.isInProperty.isInSuperMarioMakerFor3DS;\n    public readonly isInSuperMarioMaker2 = this.isInProperty.isInSuperMarioMaker2;\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public readonly isAvailableFromTheStartContainer = ClassThatIsAvailableFromTheStartProvider.get.null;\n\n    public readonly isAvailableFromTheStartInSMM1 = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM1;\n    public readonly isAvailableFromTheStartInSMM3DS = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM3DS;\n    public readonly isAvailableFromTheStartInSMM2 = this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM2;\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n    public readonly entities = EMPTY_ARRAY;\n    public readonly effect = null;\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return EMPTY_MAP;\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n    public override toString(): EmptyCourseThemeName {\n        return 'Empty course theme';\n    }\n\n}\n","import type {Name}       from '../../lang/name/Name';\nimport type {WorldTheme} from './WorldTheme';\n\nimport {AbstractCourseAndWorldTheme} from './AbstractCourseAndWorldTheme';\nimport {EmptyCourseTheme}            from './EmptyCourseTheme';\n\nexport class WorldOnlyThemeContainer\n    extends AbstractCourseAndWorldTheme {\n\n    public constructor(name: Name<string>, worldTheme: WorldTheme,) {\n        super(name, EmptyCourseTheme.get, worldTheme,);\n    }\n\n    //region -------------------- Theme properties --------------------\n\n    public override get isInCourseTheme(): false {\n        return false;\n    }\n\n\n    public override get isInWorldTheme(): true {\n        return true;\n    }\n\n    //endregion -------------------- Theme properties --------------------\n    //region -------------------- Game properties --------------------\n\n    public override get isInProperty() {\n        return this.worldTheme.isInProperty;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public override get isAvailableFromTheStartContainer() {\n        return this.worldTheme.isAvailableFromTheStartContainer;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n}\n","import resource from '../../resources/compiled/Theme.json';\n\nimport type {CourseAndWorldTheme}                            from './CourseAndWorldTheme';\nimport type {PossibleEnglishName}                            from './Themes.types';\nimport type {PropertiesArrayFrom1And2 as GamesPropertyArray} from '../game/Loader.types';\nimport type {PropertiesArray as LanguagesPropertyArray}      from '../../lang/Loader.types';\nimport type {PossibleEffectInNightTheme, ThemeTemplate}      from './Theme.template';\nimport type {PossibleIsAvailableFromTheStart}                from '../availableFromTheStart/loader.types';\nimport type {Loader}                                         from '../../util/loader/Loader';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\nimport {ThemeBuilder}            from './Theme.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    isInCourseTheme,\n    isInWorldTheme,\n\n    //region -------------------- Games --------------------\n\n    isInSuperMarioMaker1And3DS,\n    isInSuperMarioMaker2,\n\n    //endregion -------------------- Games --------------------\n\n    isAvailableFromTheStart_SMM1,\n    effectInNightTheme,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype ExclusivePropertiesArray1 = [\n    isInCourseTheme: boolean,\n    isInWorldTheme: boolean,\n];\ntype ExclusivePropertiesArray2 = [\n    isAvailableFromTheStart_SMM1: PossibleIsAvailableFromTheStart,\n    effectInNightTheme: PossibleEffectInNightTheme,\n];\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray1,\n    ...GamesPropertyArray,\n    ...ExclusivePropertiesArray2,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReferenceVia<{@link ThemeBuilder}, {@link Themes}>\n * @recursiveReference<{@link Themes}>\n */\nexport class ThemeLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, CourseAndWorldTheme>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: ThemeLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, CourseAndWorldTheme>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, CourseAndWorldTheme> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, CourseAndWorldTheme>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, CourseAndWorldTheme, keyof typeof Headers>(resource, convertedContent => new ThemeBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToBoolean(\n                    'isInCourseTheme', 'isInWorldTheme',\n                    'isInSuperMarioMaker1And3DS', 'isInSuperMarioMaker2',\n                )\n                .convertToNullableBoolean('isAvailableFromTheStart_SMM1',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_themeNightEffect, 'effectInNightTheme')\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- theme has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- theme has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<ThemeTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): ThemeTemplate {\n        return {\n            is: {\n                in: {\n                    game: this._createGameTemplateFrom1And2(),\n                    theme: {\n                        course: this._getContent(this._headersIndexMap.isInCourseTheme),\n                        world: this._getContent(this._headersIndexMap.isInWorldTheme),\n                    },\n                },\n                availableFromTheStart: this._getContent(this._headersIndexMap.isAvailableFromTheStart_SMM1),\n            },\n            effect: this._getContent(this._headersIndexMap.effectInNightTheme),\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import type {Builder}                                                           from '../../util/builder/Builder';\nimport type {ClassThatIsAvailableFromTheStart, PossibleIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {CourseAndWorldTheme}                                               from './CourseAndWorldTheme';\nimport type {CourseTheme}                                                       from './CourseTheme';\nimport type {PossibleEnglishName}                                               from './Themes.types';\nimport type {Entity}                                                            from '../entity/Entity';\nimport type {GameProperty}                                                      from '../entity/properties/game/GameProperty';\nimport type {Name}                                                              from '../../lang/name/Name';\nimport type {ObjectHolder}                                                      from '../../util/holder/ObjectHolder';\nimport type {PossibleEnglishName as PossibleEnglishName_NightEffect}            from '../nightEffect/NightEffects.types';\nimport type {SimpleGameFrom1And2Template}                                       from '../game/SimpleGame.template';\nimport type {ThemeTemplate}                                                     from './Theme.template';\nimport type {WorldTheme}                                                        from './WorldTheme';\n\nimport {ClassThatIsAvailableFromTheStartProvider} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart.provider';\nimport {CourseThemeContainer}                     from './CourseTheme.container';\nimport {CourseAndWorldThemeContainer}             from './CourseAndWorldTheme.container';\nimport {CourseOnlyThemeContainer}                 from './CourseOnlyTheme.container';\nimport {DelayedObjectHolderContainer}             from '../../util/holder/DelayedObjectHolder.container';\nimport {Entities}                                 from '../entity/Entities';\nimport {GamePropertyProvider}                     from '../entity/properties/game/GameProperty.provider';\nimport {Games}                                    from '../game/Games';\nimport {NightEffects}                             from '../nightEffect/NightEffects';\nimport {TemplateWithNameBuilder}                  from '../_template/TemplateWithName.builder';\nimport {Themes}                                   from './Themes';\nimport {WorldThemeContainer}                      from './WorldTheme.container';\nimport {WorldOnlyThemeContainer}                  from './WorldOnlyTheme.container';\n\nexport class ThemeBuilder\n    extends TemplateWithNameBuilder<ThemeTemplate, CourseAndWorldTheme>\n    implements Builder<CourseAndWorldTheme> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #WORLD_THEME_PROPERTY = GamePropertyProvider.get.smm2Only;\n\n    static readonly #IS_NOT_APPLICABLE_ON_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<null, null, true>> = new DelayedObjectHolderContainer(() => ClassThatIsAvailableFromTheStartProvider.get.get(null,));\n    static readonly #IS_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<true, true, true>> = new DelayedObjectHolderContainer(() => ClassThatIsAvailableFromTheStartProvider.get.get(true,));\n    static readonly #IS_NOT_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<false, true, true>> = new DelayedObjectHolderContainer(() => ClassThatIsAvailableFromTheStartProvider.get.get(false,));\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(templateBuilder: Builder<ThemeTemplate>,) {\n        super(templateBuilder, ({is: {in: {game: {'1And3DS': isInSMM1And3DS,},},},},) => isInSMM1And3DS ? 'all' : Games.SUPER_MARIO_MAKER_2, true,);\n    }\n\n    //region -------------------- Builder helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return ThemeBuilder;\n    }\n\n    //region -------------------- Course theme builder helper methods --------------------\n\n    static #createCourseTheme(name: Name<string>, template: ThemeTemplate,): CourseTheme {\n        return new CourseThemeContainer(\n            name,\n            this.#getGameProperty(template.is.in.game,),\n            this.#getIsAvailableFromTheStart(template.is.availableFromTheStart,),\n            this.#getWhereEntityIs(name.english as PossibleEnglishName,),\n            this.#getWhereNightEffectIs(template.effect as PossibleEnglishName_NightEffect,),\n        );\n    }\n\n    static #getGameProperty(gameTemplate: SimpleGameFrom1And2Template<boolean, boolean>,): GameProperty {\n        return GamePropertyProvider.get.get(gameTemplate['1And3DS'], gameTemplate['2'],);\n    }\n\n    static #getIsAvailableFromTheStart(value: PossibleIsAvailableFromTheStart,): ObjectHolder<ClassThatIsAvailableFromTheStart> {\n        //TODO move this code elsewhere to remove duplicate code\n        return value == null\n            ? this.#IS_NOT_APPLICABLE_ON_AVAILABLE_FROM_THE_START_IN_SMM1\n            : value\n                ? this.#IS_AVAILABLE_FROM_THE_START_IN_SMM1\n                : this.#IS_NOT_AVAILABLE_FROM_THE_START_IN_SMM1;\n    }\n\n    /**\n     * Get the {@link Entity entities} where the theme is applied.\n     *\n     * @param name the english name to retrieve the {@link Themes}\n     * @see Themes.get\n     */\n    static #getWhereEntityIs(name: PossibleEnglishName,): ObjectHolder<readonly Entity[]> {\n        return new DelayedObjectHolderContainer(() => {\n            const theme = Themes.getValue(name);\n\n            return Entities.values.map(({reference,}) => reference)\n                .filter(reference => theme.get(reference));\n        });\n    }\n\n    /**\n     * Get the {@link NightEffects night effect} based on the name received.\n     *\n     * @param name the night effect\n     */\n    static #getWhereNightEffectIs(name: PossibleEnglishName_NightEffect,): ObjectHolder<NightEffects> {\n        return new DelayedObjectHolderContainer(() => NightEffects.getValue(name));\n    }\n\n    //endregion -------------------- Course theme builder helper methods --------------------\n    //region -------------------- World theme builder helper methods --------------------\n\n    static #createWorldTheme(name: Name<string>,): WorldTheme {\n        return new WorldThemeContainer(name,\n            this.#WORLD_THEME_PROPERTY,\n            this.#IS_NOT_APPLICABLE_ON_AVAILABLE_FROM_THE_START_IN_SMM1,\n        );\n    }\n\n    //endregion -------------------- World theme builder helper methods --------------------\n    //region -------------------- Course & world theme builder helper methods --------------------\n\n    static #createCourseAndWorldTheme(name: Name<string>, template: ThemeTemplate,): CourseAndWorldTheme {\n        const courseTheme = this.#createCourseTheme(name, template,);\n        const worldTheme = this.#createWorldTheme(name,);\n\n        return new CourseAndWorldThemeContainer(\n            name,\n            this.#getGameProperty2(courseTheme, worldTheme,),\n            this.#getIsAvailableFromTheStart2(template,),\n            courseTheme,\n            worldTheme,\n        );\n    }\n\n    static #getGameProperty2(courseTheme: CourseTheme, worldTheme: WorldTheme,): ObjectHolder<GameProperty> {\n        return new DelayedObjectHolderContainer(() => GamePropertyProvider.get.get(\n            courseTheme.isInSuperMarioMaker1 || worldTheme.isInSuperMarioMaker1,\n            courseTheme.isInSuperMarioMaker2 || worldTheme.isInSuperMarioMaker2,\n        ));\n    }\n\n    static #getIsAvailableFromTheStart2(template: ThemeTemplate,): ObjectHolder<ClassThatIsAvailableFromTheStart> {\n        //TODO since getIsAvailableFromTheStart needs to be moved, this one (\"getIsAvailableFromTheStart2\") too\n        return this.#getIsAvailableFromTheStart(template.is.availableFromTheStart);\n    }\n\n    //endregion -------------------- Course & world theme builder helper methods --------------------\n\n    //endregion -------------------- Builder helper methods --------------------\n\n    protected override _build(name: Name<string>,): CourseAndWorldTheme {\n        const template = this.template;\n        const {course: isInCourseTheme, world: isInWorldTheme,} = template.is.in.theme;\n\n        return isInCourseTheme && isInWorldTheme\n            ? ThemeBuilder.#createCourseAndWorldTheme(name, template,)\n            : isInCourseTheme\n                ? new CourseOnlyThemeContainer(name, ThemeBuilder.#createCourseTheme(name, template,),)\n                : new WorldOnlyThemeContainer(name, ThemeBuilder.#createWorldTheme(name,),);\n    }\n\n\n}\n","import englishLanguage                 from './locale/en/language.json';\nimport englishContent                  from './locale/en/content.json';\nimport englishGameContent              from './locale/en/gameContent.json';\nimport englishEntityContent            from './locale/en/entityContent.json';\nimport americanEnglishContent          from './locale/en/en_AM/content.json';\nimport europeanEnglishContent          from './locale/en/en_EU/content.json';\nimport frenchLanguage                  from './locale/fr/language.json';\nimport frenchContent                   from './locale/fr/content.json';\nimport frenchGameContent               from './locale/fr/gameContent.json';\nimport frenchEntityContent             from './locale/fr/entityContent.json';\nimport canadianFrenchContent           from './locale/fr/fr_CA/content.json';\nimport canadianFrenchGameContent       from './locale/fr/fr_CA/gameContent.json';\nimport europeanFrenchContent           from './locale/fr/fr_EU/content.json';\nimport europeanFrenchGameContent       from './locale/fr/fr_EU/gameContent.json';\nimport germanLanguage                  from './locale/de/language.json';\nimport germanContent                   from './locale/de/content.json';\nimport germanGameContent               from './locale/de/gameContent.json';\nimport germanEntityContent             from './locale/de/entityContent.json';\nimport spanishLanguage                 from './locale/es/language.json';\nimport spanishContent                  from './locale/es/content.json';\nimport spanishGameContent              from './locale/es/gameContent.json';\nimport spanishEntityContent            from './locale/es/entityContent.json';\nimport americanSpanishContent          from './locale/es/es_AM/content.json';\nimport americanSpanishEntityContent    from './locale/es/es_AM/entityContent.json';\nimport europeanSpanishContent          from './locale/es/es_EU/content.json';\nimport europeanSpanishEntityContent    from './locale/es/es_EU/entityContent.json';\nimport italianLanguage                 from './locale/it/language.json';\nimport italianContent                  from './locale/it/content.json';\nimport italianGameContent              from './locale/it/gameContent.json';\nimport italianEntityContent            from './locale/it/entityContent.json';\nimport dutchLanguage                   from './locale/nl/language.json';\nimport dutchContent                    from './locale/nl/content.json';\nimport dutchGameContent                from './locale/nl/gameContent.json';\nimport dutchEntityContent              from './locale/nl/entityContent.json';\nimport portugueseLanguage              from './locale/pt/language.json';\nimport portugueseContent               from './locale/pt/content.json';\nimport portugueseGameContent           from './locale/pt/gameContent.json';\nimport portugueseEntityContent         from './locale/pt/entityContent.json';\nimport americanPortugueseContent       from './locale/pt/pt_AM/content.json';\nimport europeanPortugueseContent       from './locale/pt/pt_EU/content.json';\nimport russianLanguage                 from './locale/ru/language.json';\nimport russianContent                  from './locale/ru/content.json';\nimport russianGameContent              from './locale/ru/gameContent.json';\nimport russianEntityContent            from './locale/ru/entityContent.json';\nimport japaneseLanguage                from './locale/ja/language.json';\nimport japaneseContent                 from './locale/ja/content.json';\nimport japaneseGameContent             from './locale/ja/gameContent.json';\nimport japaneseEntityContent           from './locale/ja/entityContent.json';\nimport chineseLanguage                 from './locale/zh/language.json';\nimport chineseContent                  from './locale/zh/content.json';\nimport chineseGameContent              from './locale/zh/gameContent.json';\nimport chineseEntityContent            from './locale/zh/entityContent.json';\nimport traditionalChineseLanguage      from './locale/zh/zh_T/language.json';\nimport traditionalChineseContent       from './locale/zh/zh_T/content.json';\nimport traditionalChineseGameContent   from './locale/zh/zh_T/gameContent.json';\nimport traditionalChineseEntityContent from './locale/zh/zh_T/entityContent.json';\nimport simplifiedChineseLanguage       from './locale/zh/zh_S/language.json';\nimport simplifiedChineseContent        from './locale/zh/zh_S/content.json';\nimport simplifiedChineseGameContent    from './locale/zh/zh_S/gameContent.json';\nimport simplifiedChineseEntityContent  from './locale/zh/zh_S/entityContent.json';\nimport koreanLanguage                  from './locale/ko/language.json';\nimport koreanContent                   from './locale/ko/content.json';\nimport koreanGameContent               from './locale/ko/gameContent.json';\nimport koreanEntityContent             from './locale/ko/entityContent.json';\n\nimport type {Resource}    from 'i18next';\nimport i18n               from 'i18next';\nimport {initReactI18next} from 'react-i18next';\n\nimport {isInProduction}                from '../variables';\n\ndeclare module 'react-i18next' {\n    interface Resources {\n        language: typeof englishLanguage\n        content: typeof englishContent\n        gameContent: typeof englishGameContent\n        entityContent: typeof englishEntityContent\n    }\n}\n\nconst resources: Resource = {\n    //region -------------------- English --------------------\n\n    en: {\n        language: englishLanguage,\n        content: englishContent,\n        gameContent: englishGameContent,\n        entityContent: englishEntityContent,\n    },\n    en_AM: {\n        content: americanEnglishContent,\n    },\n    en_EU: {\n        content: europeanEnglishContent,\n    },\n\n    //endregion -------------------- English --------------------\n    //region -------------------- French --------------------\n\n    fr: {\n        language: frenchLanguage,\n        content: frenchContent,\n        gameContent: frenchGameContent,\n        entityContent: frenchEntityContent,\n    },\n    fr_CA: {\n        content: canadianFrenchContent,\n        gameContent: canadianFrenchGameContent,\n    },\n    fr_EU: {\n        content: europeanFrenchContent,\n        gameContent: europeanFrenchGameContent,\n    },\n\n    //endregion -------------------- French --------------------\n    //region -------------------- German --------------------\n\n    de: {\n        language: germanLanguage,\n        content: germanContent,\n        gameContent: germanGameContent,\n        entityContent: germanEntityContent,\n    },\n\n    //endregion -------------------- German --------------------\n    //region -------------------- Spanish --------------------\n\n    es: {\n        language: spanishLanguage,\n        content: spanishContent,\n        gameContent: spanishGameContent,\n        entityContent: spanishEntityContent,\n    },\n    es_AM: {\n        content: americanSpanishContent,\n        entityContent: americanSpanishEntityContent,\n    },\n    es_EU: {\n        content: europeanSpanishContent,\n        entityContent: europeanSpanishEntityContent,\n    },\n\n    //endregion -------------------- Spanish --------------------\n    //region -------------------- Italian --------------------\n\n    it: {\n        language: italianLanguage,\n        content: italianContent,\n        gameContent: italianGameContent,\n        entityContent: italianEntityContent,\n    },\n\n    //endregion -------------------- Italian --------------------\n    //region -------------------- Dutch --------------------\n\n    nl: {\n        language: dutchLanguage,\n        content: dutchContent,\n        gameContent: dutchGameContent,\n        entityContent: dutchEntityContent,\n    },\n\n    //endregion -------------------- Dutch --------------------\n    //region -------------------- Portuguese --------------------\n\n    pt: {\n        language: portugueseLanguage,\n        content: portugueseContent,\n        gameContent: portugueseGameContent,\n        entityContent: portugueseEntityContent,\n    },\n    pt_AM: {\n        content: americanPortugueseContent,\n    },\n    pt_EU: {\n        content: europeanPortugueseContent,\n    },\n\n    //endregion -------------------- Portuguese --------------------\n    //region -------------------- Russian --------------------\n\n    ru: {\n        language: russianLanguage,\n        content: russianContent,\n        gameContent: russianGameContent,\n        entityContent: russianEntityContent,\n    },\n\n    //endregion -------------------- Russian --------------------\n    //region -------------------- Japanese --------------------\n\n    ja: {\n        language: japaneseLanguage,\n        content: japaneseContent,\n        gameContent: japaneseGameContent,\n        entityContent: japaneseEntityContent,\n    },\n\n    //endregion -------------------- Japanese --------------------\n    //region -------------------- Chinese --------------------\n\n    zh: {\n        language: chineseLanguage,\n        content: chineseContent,\n        gameContent: chineseGameContent,\n        entityContent: chineseEntityContent,\n    },\n    zh_T: {\n        content: traditionalChineseContent,\n        language: traditionalChineseLanguage,\n        gameContent: traditionalChineseGameContent,\n        entityContent: traditionalChineseEntityContent,\n    },\n    zh_S: {\n        content: simplifiedChineseContent,\n        language: simplifiedChineseLanguage,\n        gameContent: simplifiedChineseGameContent,\n        entityContent: simplifiedChineseEntityContent,\n    },\n\n    //endregion -------------------- Chinese --------------------\n    //region -------------------- Korean --------------------\n\n    ko: {\n        language: koreanLanguage,\n        content: koreanContent,\n        gameContent: koreanGameContent,\n        entityContent: koreanEntityContent,\n    },\n\n    //endregion -------------------- Korean --------------------\n};\n\ni18n\n    .use(initReactI18next)\n    .init({\n        fallbackLng: {\n            fr_CA: ['fr'],\n            fr_EU: ['fr'],\n            es_AM: ['es'],\n            es_EU: ['es'],\n            pt_AM: ['pt'],\n            pt_EU: ['pt'],\n            zh_S: ['zh'],\n            zh_T: ['zh'],\n            default: ['en'],\n        },\n        ns: ['language', 'content', 'gameContent', 'entityContent',],\n        resources,\n        debug: !isInProduction,\n\n        interpolation: {\n            escapeValue: false,\n        }\n    });\n\n\nexport default i18n;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Fragment} from 'react';\n\nimport type {EveryPossibleRouteInstance} from './everyRoutes.types';\nimport type {ReactProperty}              from '../util/react/ReactProperty';\n\nimport {ProjectLanguages} from '../lang/ProjectLanguages';\n\ninterface DirectRoutesProperties\n    extends ReactProperty {\n\n    language: ProjectLanguages\n\n    route: EveryPossibleRouteInstance\n}\n\n/**\n * Render the route received.\n * But, beforehand, it change the current language to be the one received since it is a link.\n *\n * @reactComponent\n */\nexport default function DirectRoute({language, route,}: DirectRoutesProperties,) {\n    ProjectLanguages.setCurrentLanguage(language);\n\n    return <Fragment key={route.name}>{route.renderCallback()}</Fragment>;\n}\n","import AbstractApp                 from './AbstractApp';\nimport ContentTranslationComponent from '../lang/components/ContentTranslationComponent';\nimport TextComponent               from './tools/text/TextComponent';\n\nexport default class LoadingApp\n    extends AbstractApp {\n\n    protected override _mainContent() {\n        return <TextComponent content={<><ContentTranslationComponent translationKey=\"Loading the page\"/>…</>}/>;\n    }\n\n}\n","import {Navigate} from 'react-router-dom';\n\nimport {ProjectLanguages} from '../lang/ProjectLanguages';\nimport {route}            from './route';\n\nexport function redirectToHome(language: ProjectLanguages = ProjectLanguages.default,) {\n    return <Navigate replace to={`${route('home', language,)}`}/>;\n}\n","import {HashRouter, Navigate, Route, Routes as ReactRoutes} from 'react-router-dom';\nimport {Suspense}                                           from 'react';\n\nimport DirectRoute         from './DirectRoute';\nimport {everySimpleRoutes} from './everyRoutes';\nimport LoadingApp          from '../app/LoadingApp';\nimport {ProjectLanguages}  from '../lang/ProjectLanguages';\nimport {redirectToHome}    from './redirectToHome';\n\n/**\n *\n * @reactComponent\n */\nexport default function Routes() {\n    return <HashRouter>\n        <Suspense fallback={<LoadingApp/>}>\n            <ReactRoutes>\n                <Route path=\"/\" element={redirectToHome()}/>\n                {getRedirectRoutesToProjectRoute_InDefault()}\n                {getRedirectRoutesToHome_InEveryLanguage()}\n                {getRoutesToProjectRoute_InEveryLanguage()}\n            </ReactRoutes>\n        </Suspense>\n    </HashRouter>;\n}\n\nfunction getRedirectRoutesToProjectRoute_InDefault() {\n    return everySimpleRoutes.map(route =>\n        <Route key={`redirect route - ${route.path}`} path={route.path} element={\n            <Navigate replace to={`/${ProjectLanguages.default.projectAcronym}${route.path}`}/>\n        }/>\n    );\n}\n\nfunction getRedirectRoutesToHome_InEveryLanguage() {\n    return ProjectLanguages.values.map(language =>\n        <Route key={`redirect route (home) (${language.projectAcronym})`} path={`/${language.projectAcronym}`} element={\n            redirectToHome(language)\n        }/>\n    );\n}\n\nfunction getRoutesToProjectRoute_InEveryLanguage() {\n    return ProjectLanguages.values.map(language => everySimpleRoutes.map(route =>\n        <Route key={`direct route - ${route.name}(${language.projectAcronym})`} path={`/${language.projectAcronym}${route.path}`} element={\n            <DirectRoute language={language} route={route}/>\n        }/>\n    )).flat();\n}","import React, {type ErrorInfo, PureComponent, useState} from 'react';\nimport {IntlProvider}                                   from 'react-intl';\n\nimport type {PossibleInternationalAcronym} from './lang/ProjectLanguages.types';\nimport type {ReactState}                   from './util/react/ReactState';\n\nimport {EveryLanguages}   from './lang/EveryLanguages';\nimport {ProjectLanguages} from './lang/ProjectLanguages';\nimport Routes             from './routes/Routes';\n\n/**\n *\n * @reactComponent\n */\nfunction FunctionIndexComponent() {\n    const [currentLanguage, setCurrentLanguage,] = useState(setAndGetCurrentLanguage());\n    EveryLanguages.INTERNATIONALISATION_SET_CURRENT_LANGUAGE = setCurrentLanguage;\n\n    return <IntlProvider locale={currentLanguage} key={`reactLanguageProvider_${currentLanguage}`}>\n        <React.StrictMode>\n            <Routes/>\n        </React.StrictMode>\n    </IntlProvider>;\n}\n\nfunction setAndGetCurrentLanguage(): PossibleInternationalAcronym {\n    ProjectLanguages.currentLanguage ??= 'en-AM';\n    return ProjectLanguages.currentLanguage.internationalAcronym;\n}\n\ninterface IndexState\n    extends ReactState {\n\n    hasError: boolean\n\n}\n\nexport default class IndexComponent\n    extends PureComponent<{}, IndexState> {\n\n    public constructor(props: {},) {\n        super(props);\n        this.state = {hasError: false,};\n    }\n\n    public static getDerivedStateFromError(error: Error,) {\n        return {hasError: true,};\n    }\n\n    public override componentDidCatch(error: Error, errorInfo: ErrorInfo,): void {\n        console.warn(error.message);\n        console.warn(errorInfo.componentStack);\n    }\n\n    public override render() {\n        if (this.state.hasError)\n            return <h1>An error happened in the application!</h1>;\n        return <FunctionIndexComponent/>;\n    }\n\n}\n","import 'bootstrap/dist/js/bootstrap.esm';\nimport './index.scss';\nimport './lang/i18n';\n\nimport {createRoot}    from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\n\nimport IndexComponent   from './IndexComponent';\nimport {isInProduction} from './variables';\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(<IndexComponent/>);\n\nif (isInProduction) {\n    // If you want to start measuring performance in your app, pass a function\n    // to log results (for example: reportWebVitals(console.log))\n    // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n    reportWebVitals();\n}\n","import {EntityBehaviour}                          from './EntityBehaviour';\nimport {EntityBehaviourLink}                      from './properties/EntityBehaviourLink';\nimport {EntityBehaviourIsInOnly}                  from './properties/EntityBehaviourIsInOnly';\nimport {PossibleAcronym, PossibleTranslationKeys} from './EntityBehaviours.types';\n\nexport class EntityBehaviourContainer\n    implements EntityBehaviour {\n\n    //region -------------------- Fields --------------------\n\n    readonly #acronym;\n    readonly #translationKey;\n    readonly #isInOnlyContainer;\n    readonly #linkContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(acronym: PossibleAcronym, translationKey: PossibleTranslationKeys, isInOnly: EntityBehaviourIsInOnly, link: EntityBehaviourLink,) {\n        this.#acronym = acronym;\n        this.#translationKey = translationKey;\n        this.#isInOnlyContainer = isInOnly;\n        this.#linkContainer = link;\n    }\n\n\n    public get acronym(): PossibleAcronym {\n        return this.#acronym;\n    }\n\n    public get translationKey(): PossibleTranslationKeys {\n        return this.#translationKey;\n    }\n\n    //region -------------------- Is in only --------------------\n\n    public get isInOnlyContainer() {\n        return this.#isInOnlyContainer;\n    }\n\n    public get isOnlineOnly() {\n        return this.isInOnlyContainer.isOnlineOnly;\n    }\n\n    public get isMultiplayerOnly() {\n        return this.isInOnlyContainer.isMultiplayerOnly;\n    }\n\n    //endregion -------------------- Is in only --------------------\n    //region -------------------- Links --------------------\n\n    public get linkContainer() {\n        return this.#linkContainer;\n    }\n\n    public get groupLink() {\n        return this.linkContainer.groupLink;\n    }\n\n    public get entityLink() {\n        return this.linkContainer.entityLink;\n    }\n\n    //endregion -------------------- Links --------------------\n\n}\n","import type {EntityBehaviourIsInOnly} from './EntityBehaviourIsInOnly';\n\nexport class EntityBehaviourIsInOnlyContainer\n    implements EntityBehaviourIsInOnly {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isInOnlineOnly;\n    readonly #isInMultiplayerOnly;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(isInOnlineOnly: boolean, isInMultiplayerOnly: boolean,) {\n        this.#isInOnlineOnly = isInOnlineOnly;\n        this.#isInMultiplayerOnly = isInMultiplayerOnly;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isOnlineOnly() {\n        return this.#isInOnlineOnly;\n    }\n\n    public get isMultiplayerOnly() {\n        return this.#isInMultiplayerOnly;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {EntityBehaviourIsInOnly} from './EntityBehaviourIsInOnly';\nimport type {ProviderWithoutKey}      from '../../../util/provider/ProviderWithoutKey';\n\nimport {AbstractProvider}                 from '../../../util/provider/AbstractProvider';\nimport {EntityBehaviourIsInOnlyContainer} from './EntityBehaviourIsInOnly.container';\n\n/**\n * An entity behaviour \"is in only\" {@link Provider}.\n *\n * It can only create a selected instances based on the arguments received:\n * <ol>\n *     <li>false, false</li>\n *     <li>true, false</li>\n *     <li>false, true</li>\n * </ol>\n * The [true, true] is not possible due to no \"is in only\" from a specific location.\n *\n * @singleton\n */\nexport class EntityBehaviourIsInOnlyProvider\n    extends AbstractProvider<ArgumentsReceived, EntityBehaviourIsInOnly>\n    implements ProviderWithoutKey<EntityBehaviourIsInOnly, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityBehaviourIsInOnlyProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public none(): EntityBehaviourIsInOnly {\n        return this.get(false, false,);\n    }\n\n    public get(...argumentsReceived: ArgumentsReceived): EntityBehaviourIsInOnly {\n        return this.everyContainers.if(map => map.has(argumentsReceived))\n            .isNotMet(map => map.set(argumentsReceived, new EntityBehaviourIsInOnlyContainer(...argumentsReceived),))\n            .get(argumentsReceived);\n    }\n\n}\n\ntype ArgumentsReceived = readonly [\n    isInOnline: boolean,\n    isInMultiplayer: boolean,\n];\n","import type {EntityBehaviourLink, PossibleEntity, PossibleGroup} from './EntityBehaviourLink';\nimport type {ObjectHolder}                                       from '../../../util/holder/ObjectHolder';\n\nexport class EntityBehaviourLinkContainer<GROUP extends PossibleGroup = PossibleGroup, ENTITY extends PossibleEntity = PossibleEntity, >\n    implements EntityBehaviourLink<GROUP, ENTITY> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #groupLinkHolder;\n    readonly #entityLinkHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(groupLink: ObjectHolder<GROUP>, entityLink: ObjectHolder<ENTITY>,) {\n        this.#groupLinkHolder = groupLink;\n        this.#entityLinkHolder = entityLink;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get groupLink() {\n        return this.#groupLinkHolder.get;\n    }\n\n    public get entityLink() {\n        return this.#entityLinkHolder.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {EntityBehaviourLink, PossibleEntity, PossibleGroup} from './EntityBehaviourLink';\nimport type {ObjectHolder}                                       from '../../../util/holder/ObjectHolder';\nimport type {PossibleEnglishName as PossibleEntityName}          from '../../entity/Entities.types';\nimport type {PossibleGroupName}                                  from '../../entityTypes';\nimport type {ProviderForNullable}                                from '../../../util/provider/ProviderForNullable';\nimport type {ProviderWithKey}                                    from '../../../util/provider/ProviderWithKey';\n\nimport {AbstractProvider}             from '../../../util/provider/AbstractProvider';\nimport {EntityBehaviourLinkContainer} from './EntityBehaviourLink.container';\nimport {ObjectHolders}                from '../../../util/holder/objectHolders';\n\n/**\n * An entity behaviour link {@link Provider}.\n *\n * It can create multiple instances based on the arguments received:\n * <ol>\n *     <li><b>null</b>, <b>null</b></li>\n *     <li><b>null</b>, {@link Entities.VINE Vine}</li>\n *     <li><b>null</b>, {@link Entities.QUESTION_MARK_BLOCK ? Block}</li>\n *     <li><b>null</b>, {@link Entities.PINK_COIN Pink Coin}</li>\n *     <li><b>null</b>, {@link Entities.CHECKPOINT_FLAG Checkpoint Flag}</li>\n *     <li>{@link EntityGroups.COINS Coins}, <b>null</b></li>\n *     <li>{@link EntityGroups.POWER_UPS Power-ups}, <b>null</b></li>\n * </ol>\n *\n * @singleton\n */\nexport class EntityBehaviourLinkProvider\n    extends AbstractProvider<Key, EntityBehaviourLink>\n    implements ProviderWithKey<EntityBehaviourLink, Key, ArgumentsReceived>, ProviderForNullable<EntityBehaviourLink, EntityBehaviourLink<null, null>, Key> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityBehaviourLinkProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    static #NULL_KEYS = [null, null,] as const;\n    static #NULL_ARGUMENTS = [ObjectHolders.NULL, ObjectHolders.NULL,] as const;\n\n    public get null() {\n        return this.get(EntityBehaviourLinkProvider.#NULL_KEYS, ...EntityBehaviourLinkProvider.#NULL_ARGUMENTS,);\n    }\n\n    /**\n     * Get (or create) a null {@link EntityBehaviourLink}\n     *\n     * @param key the null keys\n     * @param argumentsReceived the null arguments\n     * @see EntityBehaviourLinkProvider.null\n     */\n    public get(key: Key<null, null>, ...argumentsReceived: ArgumentsReceived<null, null>): EntityBehaviourLink<null, null>\n    /**\n     * Get (or create) an {@link EntityBehaviourLink} with no group.\n     *\n     * @param key The null group & nullable entity names\n     * @param argumentsReceived The null group & nullable entity\n     */\n    public get(key: Key<null>, ...argumentsReceived: ArgumentsReceived<null>): EntityBehaviourLink<null>\n    /**\n     * Get (or create) an {@link EntityBehaviourLink} with no entity.\n     *\n     * @param key The nullable group & null entity names\n     * @param argumentsReceived The nullable group & null entity\n     */\n    public get(key: Key<| PossibleGroupName | null, null>, ...argumentsReceived: ArgumentsReceived<PossibleGroup, null>): EntityBehaviourLink<PossibleGroup, null>\n    /**\n     * Get (or create) an {@link EntityBehaviourLink} with a nullable group & a nullable entity.\n     *\n     * @param key The nullable group & entity names\n     * @param argumentsReceived The nullable group & entity\n     */\n    public get(key: Key, ...argumentsReceived: ArgumentsReceived): EntityBehaviourLink\n    public get(key: Key, ...argumentsReceived: ArgumentsReceived): EntityBehaviourLink {\n        return this.everyContainers.if(map => map.has(key))\n            .isNotMet(map => map.set(key, new EntityBehaviourLinkContainer(...argumentsReceived),))\n            .get(key);\n    }\n\n}\n\ntype Key<GROUP extends | PossibleGroupName | null = PossibleGroupName | null, ENTITY extends | PossibleEntityName | null = | PossibleEntityName | null, > = readonly [\n    groupLink: GROUP,\n    entityLink: ENTITY,\n];\ntype ArgumentsReceived<GROUP extends PossibleGroup = PossibleGroup, ENTITY extends PossibleEntity = PossibleEntity, > = readonly [\n    groupLink: ObjectHolder<GROUP>,\n    entityLink: ObjectHolder<ENTITY>,\n];\n","import type {Builder}                                   from '../../util/builder/Builder';\nimport type {Entity}                                    from '../entity/Entity';\nimport type {EntityBehaviour}                           from './EntityBehaviour';\nimport type {EntityBehaviourIsInOnly}                   from './properties/EntityBehaviourIsInOnly';\nimport type {EntityBehaviourLink}                       from './properties/EntityBehaviourLink';\nimport type {EntityBehaviourLinkTemplate}               from './properties/EntityBehaviourLink.template';\nimport type {EntityBehaviourTemplate}                   from './EntityBehaviour.template';\nimport type {IsInOnlyTemplate}                          from './properties/IsInOnlyTemplate';\nimport type {PossibleEnglishName as PossibleEntityName} from '../entity/Entities.types';\nimport type {PossibleGroupName}                         from '../entityTypes';\n\nimport {DelayedObjectHolderContainer}    from '../../util/holder/DelayedObjectHolder.container';\nimport {EntityBehaviourContainer}        from './EntityBehaviour.container';\nimport {EntityBehaviourIsInOnlyProvider} from './properties/EntityBehaviourIsInOnly.provider';\nimport {EntityBehaviourLinkProvider}     from './properties/EntityBehaviourLink.provider';\nimport {Import}                          from '../../util/DynamicImporter';\nimport {ObjectHolders}                   from '../../util/holder/objectHolders';\nimport {TemplateBuilder}                 from '../_template/Template.builder';\n\nexport class EntityBehaviourBuilder\n    extends TemplateBuilder<EntityBehaviourTemplate, EntityBehaviour>\n    implements Builder<EntityBehaviour> {\n\n    public constructor(templateBuilder: Builder<EntityBehaviourTemplate>,) {\n        super(templateBuilder);\n    }\n\n    //region -------------------- Builder helper methods --------------------\n\n    static #createIsInOnly({online, multiplayer,}: IsInOnlyTemplate,): EntityBehaviourIsInOnly {\n        return EntityBehaviourIsInOnlyProvider.get.get(online, multiplayer,);\n    }\n\n\n    static #getEntityGroupByName(name: PossibleGroupName,): object {\n        return {};//TODO implement this methods when the group name is added.\n    }\n\n    static #getEntityByName(name: PossibleEntityName,): Entity {\n        return Import.Entities.getValue(name).reference;\n    }\n\n    static #createLinks({group, entity,}: EntityBehaviourLinkTemplate,): EntityBehaviourLink {\n        const isGroupNull = group == null;\n        const isEntityNull = entity == null;\n\n\n        if (isGroupNull && isEntityNull)\n            return EntityBehaviourLinkProvider.get.null;\n        return EntityBehaviourLinkProvider.get.get([group, entity,],\n            isGroupNull ? ObjectHolders.NULL : new DelayedObjectHolderContainer(() => EntityBehaviourBuilder.#getEntityGroupByName(group)),\n            isEntityNull ? ObjectHolders.NULL : new DelayedObjectHolderContainer(() => this.#getEntityByName(entity)),\n        );\n    }\n\n    //endregion -------------------- Builder helper methods --------------------\n\n    public build(): EntityBehaviour {\n        const template = this.template;\n\n        return new EntityBehaviourContainer(\n            template.acronym,\n            template.translationKey,\n            EntityBehaviourBuilder.#createIsInOnly(template.isOnly),\n            EntityBehaviourBuilder.#createLinks(template.links),\n        );\n    }\n\n}\n","import resource from '../../resources/compiled/Entity behaviour.json';\n\nimport type {EntityBehaviour}                          from './EntityBehaviour';\nimport type {EntityBehaviourTemplate}                  from './EntityBehaviour.template';\nimport type {Loader}                                   from '../../util/loader/Loader';\nimport type {PossibleAcronym, PossibleTranslationKeys} from './EntityBehaviours.types';\nimport type {PossibleEnglishName as EntityName}        from '../entity/Entities.types';\nimport type {PossibleGroupName}                        from '../entityTypes';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {EntityBehaviourBuilder}  from './EntityBehaviour.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    acronym,\n    translationKey,\n\n    isOnlineOnly,\n    isMultiplayerOnly,\n\n    link_group,\n    link_entity,\n\n}\n\n//region -------------------- Properties --------------------\n\ntype PropertiesArray = [\n    acronym: PossibleAcronym,\n    translationKey: PossibleTranslationKeys,\n\n    isOnlineOnly: boolean,\n    isMultiplayerOnly: boolean,\n\n    link_group: | PossibleGroupName | null,\n    link_entity: | EntityName | null,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link EntityBehaviours}>\n */\nexport class EntityBehaviourLoader\n    implements Loader<ReadonlyMap<PossibleTranslationKeys, EntityBehaviour>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityBehaviourLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleTranslationKeys, EntityBehaviour>;\n\n    public load(): ReadonlyMap<PossibleTranslationKeys, EntityBehaviour> {\n        if (this.#map == null) {\n            const references = new Map<PossibleTranslationKeys, EntityBehaviour>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, EntityBehaviour, keyof typeof Headers>(resource, convertedContent => new EntityBehaviourBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('boolean')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleAcronym_entityBehaviour, 'acronym',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleTranslationKey_entityBehaviour, 'translationKey',)\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_entityGroup, 'link_group',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_entity, 'link_entity',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.translationKey, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"game style\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"game style\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<EntityBehaviourTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected get _headersIndexMap() {\n        return Headers;\n    }\n\n    public build(): EntityBehaviourTemplate {\n        return {\n            acronym: this._getContent(this._headersIndexMap.acronym),\n            translationKey: this._getContent(this._headersIndexMap.translationKey),\n            isOnly: {\n                online: this._getContent(this._headersIndexMap.isOnlineOnly),\n                multiplayer: this._getContent(this._headersIndexMap.isMultiplayerOnly),\n            },\n            links: {\n                group: this._getContent(this._headersIndexMap.link_group),\n                entity: this._getContent(this._headersIndexMap.link_entity),\n            },\n        };\n    }\n\n}\n","import type {MiiCostume}                                from './MiiCostume';\nimport type {MiiCostumeCategory}                        from '../miiCostumeCategory/MiiCostumeCategory';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {ObjectHolder, PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\nimport type {OfficialNotificationHolder}                from '../officialNotification/holder/OfficialNotificationHolder';\nimport type {Versions}                                  from '../version/Versions';\n\nimport {ClassContainingANameAndACategory} from '../../lang/name/ClassContainingANameAndACategory';\n\nexport class MiiCostumeContainer\n    extends ClassContainingANameAndACategory<string, string, MiiCostumeCategory>\n    implements MiiCostume {\n\n    //region -------------------- Fields --------------------\n\n    readonly #officialNotificationHolder;\n    readonly #version;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<string>>, officialNotification: ObjectHolder<OfficialNotificationHolder>, version: ObjectHolder<| Versions | null>, category: PossibleValueOnObjectHolder<MiiCostumeCategory>,) {\n        super(name, category,);\n        this.#officialNotificationHolder = officialNotification;\n        this.#version = version;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Official notification --------------------\n\n    public get officialNotificationContainer() {\n        return this.#officialNotificationHolder.get;\n    }\n\n    public get officialNotification() {\n        return this.officialNotificationContainer.officialNotification;\n    }\n\n    public get officialNotificationAmount() {\n        return this.officialNotificationContainer.amount;\n    }\n\n    //endregion -------------------- Official notification --------------------\n\n    public get version() {\n        return this.#version.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import {OfficialNotificationHolder}                                from './OfficialNotificationHolder';\nimport {ClassWithNullObjectPattern, EmptyOfficialNotificationName} from '../../../util/ClassWithNullObjectPattern';\n\n/**\n * @singleton\n */\nexport class EmptyOfficialNotificationHolder\n    implements OfficialNotificationHolder, ClassWithNullObjectPattern<EmptyOfficialNotificationName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyOfficialNotificationHolder;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Getter methods --------------------\n\n    public readonly officialNotification = null;\n    public readonly amount = null;\n\n    //endregion -------------------- Getter methods --------------------\n\n    public toString(): EmptyOfficialNotificationName {\n        return 'Empty official notification';\n    }\n\n}\n","import type {OfficialNotificationHolder} from './OfficialNotificationHolder';\nimport type {OfficialNotifications}      from '../OfficialNotifications';\n\nexport class OfficialNotificationHolderContainer\n    implements OfficialNotificationHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #officialNotification;\n    readonly #amount;\n\n    //endregion -------------------- Fields --------------------\n\n    constructor(officialNotification: OfficialNotifications, amount: | number | null,) {\n        this.#officialNotification = officialNotification;\n        this.#amount = amount;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get officialNotification(): OfficialNotifications {\n        return this.#officialNotification;\n    }\n\n    public get amount(): | number | null {\n        return this.#amount;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {PossibleEnglishNameWithOnlyAmount} from '../OfficialNotifications.types';\nimport type {OfficialNotifications}             from '../OfficialNotifications';\nimport type {OfficialNotificationHolder}        from './OfficialNotificationHolder';\nimport type {ProviderWithKey}                   from '../../../util/provider/ProviderWithKey';\n\nimport {AbstractProvider}                    from '../../../util/provider/AbstractProvider';\nimport {OfficialNotificationHolderContainer} from './OfficialNotificationHolder.container';\n\n/**\n * @singleton\n */\nexport class OfficialNotificationHolderProvider\n    extends AbstractProvider<Key, OfficialNotificationHolder>\n    implements ProviderWithKey<OfficialNotificationHolder, Key, ArgumentsReceived> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: OfficialNotificationHolderProvider;\n\n    private constructor() {\n        super();\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    /**\n     * Get (or create) an {@link OfficialNotificationHolder} with a <b>null</b> amount.\n     *\n     * @param key the key to associate the instance\n     * @param officialNotification The {@link OfficialNotifications} instance\n     */\n    public get(key: Key, officialNotification: OfficialNotifications,): OfficialNotificationHolder\n    /**\n     * Get (or create) an {@link OfficialNotificationHolder} with a specified amount.\n     *\n     * @param key the key to associate the instance\n     * @param officialNotification The {@link OfficialNotifications} instance\n     * @param amount The amount associated to the official notification (it should not be null)\n     */\n    public get(key: Key, officialNotification: OfficialNotifications, amount: number,): OfficialNotificationHolder\n    public get(key: Key, ...argumentsReceived: ArgumentsReceived | ArgumentsReceived_Simplified): OfficialNotificationHolder {\n        if (argumentsReceived.length === 1)\n            // @ts-ignore\n            return this.get(key, argumentsReceived[0], null,);\n\n        return this.everyContainers.if(map => map.has(key))\n            .isNotMet(map => map.set(key, new OfficialNotificationHolderContainer(argumentsReceived[0], argumentsReceived[1],)))\n            .get(key);\n    }\n}\n\ntype Key = PossibleEnglishNameWithOnlyAmount;\ntype ArgumentsReceived = readonly [\n    officialNotification: OfficialNotifications,\n    amount: | number | null,\n];\ntype ArgumentsReceived_Simplified = readonly [OfficialNotifications,]\n","import type {Builder}                           from '../../../util/builder/Builder';\nimport type {OfficialNotificationHolder}        from './OfficialNotificationHolder';\nimport type {PossibleEnglishNameWithOnlyAmount} from '../OfficialNotifications.types';\n\nimport {EmptyOfficialNotificationHolder}    from './EmptyOfficialNotificationHolder';\nimport {OfficialNotificationHolderProvider} from './OfficialNotificationHolder.provider';\nimport {OfficialNotifications}              from '../OfficialNotifications';\n\nexport class OfficialNotificationHolderBuilder\n    implements Builder<OfficialNotificationHolder> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #NUMBER_ONLY_REGEX = /^\\d+$/;\n    static readonly #OFFICIAL_NOTIFICATION_SEPARATOR = ' ';\n    static readonly #POSSIBLE_EXCLUDED_CASES: readonly OfficialNotifications[] = [OfficialNotifications.RECEIVE_A_LOT_OF_FEEDBACK_1, OfficialNotifications.RECEIVE_A_LOT_OF_FEEDBACK_2,];\n    static readonly #NO_NUMBER_FOUND = -1;\n\n    readonly #name;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: | PossibleEnglishNameWithOnlyAmount | null,) {\n        this.#name = name;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get name() {\n        return this.#name;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public build(): OfficialNotificationHolder {\n        const name = this.name;\n\n        if (name == null)\n            return EmptyOfficialNotificationHolder.get;\n\n        const officialNotification = OfficialNotifications.getValue(name);\n\n        if (OfficialNotificationHolderBuilder.#POSSIBLE_EXCLUDED_CASES.includes(officialNotification))\n            return OfficialNotificationHolderProvider.get.get(name, officialNotification,);\n\n        const numberFoundInOfficialNotification = Number(name.split(OfficialNotificationHolderBuilder.#OFFICIAL_NOTIFICATION_SEPARATOR)\n            .find(value => OfficialNotificationHolderBuilder.#NUMBER_ONLY_REGEX.test(value)) ?? OfficialNotificationHolderBuilder.#NO_NUMBER_FOUND);\n\n        return numberFoundInOfficialNotification === OfficialNotificationHolderBuilder.#NO_NUMBER_FOUND\n            ? OfficialNotificationHolderProvider.get.get(name, officialNotification,)\n            : OfficialNotificationHolderProvider.get.get(name, officialNotification, numberFoundInOfficialNotification,);\n\n    }\n\n}\n","import resource from '../../resources/compiled/Mii Costume (SMM2).json';\n\nimport type {Loader}                                                                        from '../../util/loader/Loader';\nimport type {PossibleEnglishName}                                                           from './MiiCostumes.types';\nimport type {MiiCostume}                                                                    from './MiiCostume';\nimport type {MiiCostumeTemplate}                                                            from './MiiCostume.template';\nimport type {PossibleEnglishName as PossibleEnglishName_Category}                           from '../miiCostumeCategory/MiiCostumeCategories.types';\nimport type {PossibleEnglishNameWithOnlyAmount as PossibleEnglishName_OfficialNotification} from '../officialNotification/OfficialNotifications.types';\nimport type {PossibleName_SMM2_Number as PossibleMarioMakerVersion_SMM2_Number}             from '../version/Versions.types';\nimport type {PropertiesArrayWithOptionalLanguages as LanguagesPropertyArray}                from '../../lang/Loader.types';\n\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\nimport {MiiCostumeBuilder}       from './MiiCostume.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    notificationIfUnlocked,\n\n    MM2_version,\n    category,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype ExclusivePropertiesArray = [\n\n    notificationIfUnlocked: | PossibleEnglishName_OfficialNotification | null,\n\n    MM2_version: | PossibleMarioMakerVersion_SMM2_Number | null,\n    category: PossibleEnglishName_Category,\n\n];\n\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link MiiCostumes}>\n */\nexport class MiiCostumeLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, MiiCostume>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MiiCostumeLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, MiiCostume>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, MiiCostume> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, MiiCostume>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, MiiCostume, keyof typeof Headers>(resource, convertedContent => new MiiCostumeBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleNameWithAmount_officialNotification, 'notificationIfUnlocked',)\n                .convertToEmptyableStringAnd(['2.0.0', '3.0.0',], 'MM2_version',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_MiiCostumeCategory, 'category',)\n\n                .onAfterFinalObjectCreated(finalContent =>\n                    references.set(finalContent.americanEnglish as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"Mii costume\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"Mii costume\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<MiiCostumeTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): MiiCostumeTemplate {\n        return {\n            officialNotification: this._getContent(this._headersIndexMap.notificationIfUnlocked),\n            version: this._getContent(this._headersIndexMap.MM2_version),\n            category: this._getContent(this._headersIndexMap.category),\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import type {Builder}                    from '../../util/builder/Builder';\nimport type {MiiCostume}                 from './MiiCostume';\nimport type {MiiCostumeTemplate}         from './MiiCostume.template';\nimport type {Name}                       from '../../lang/name/Name';\nimport type {ObjectHolder}               from '../../util/holder/ObjectHolder';\nimport type {OfficialNotificationHolder} from '../officialNotification/holder/OfficialNotificationHolder';\n\nimport {Games}                             from '../game/Games';\nimport {DelayedObjectHolderContainer}      from '../../util/holder/DelayedObjectHolder.container';\nimport {MiiCostumeCategories}              from '../miiCostumeCategory/MiiCostumeCategories';\nimport {MiiCostumeContainer}               from './MiiCostume.container';\nimport {ObjectHolders}                     from '../../util/holder/objectHolders';\nimport {OfficialNotificationHolderBuilder} from '../officialNotification/holder/OfficialNotificationHolder.builder';\nimport {TemplateWithNameBuilder}           from '../_template/TemplateWithName.builder';\nimport {Versions}                          from '../version/Versions';\nimport {MiiCostumeCategory}                from '../miiCostumeCategory/MiiCostumeCategory';\n\nexport class MiiCostumeBuilder\n    extends TemplateWithNameBuilder<MiiCostumeTemplate, MiiCostume> {\n\n    public constructor(templateBuilder_or_template: Builder<MiiCostumeTemplate>,) {\n        super(templateBuilder_or_template, Games.SUPER_MARIO_MAKER_2, true,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return MiiCostumeBuilder;\n    }\n\n\n    static #createOfficialNotification({officialNotification: officialNotificationName,}: MiiCostumeTemplate,): ObjectHolder<OfficialNotificationHolder> {\n        return new DelayedObjectHolderContainer(() => new OfficialNotificationHolderBuilder(officialNotificationName).build());\n    }\n\n    static #createVersion({version,}: MiiCostumeTemplate,): ObjectHolder<Versions | null> {\n        return version == null\n            ? ObjectHolders.NULL\n            : new DelayedObjectHolderContainer(() => Versions.getValue(version));\n    }\n\n    static #createCategory({category,}: MiiCostumeTemplate,): ObjectHolder<MiiCostumeCategory> {\n        return new DelayedObjectHolderContainer(() => MiiCostumeCategories.getValue(category).reference);\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    public override _build(name: Name<string>,): MiiCostume {\n        const template = this.template;\n\n        return new MiiCostumeContainer(name,\n            MiiCostumeBuilder.#createOfficialNotification(template,),\n            MiiCostumeBuilder.#createVersion(template,),\n            MiiCostumeBuilder.#createCategory(template,)\n        );\n    }\n\n}","import type {ClassWithNullObjectPattern, EmptySoundEffectCategoryName} from '../../util/ClassWithNullObjectPattern';\nimport type {SoundEffectCategory}                                      from './SoundEffectCategory';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\nimport {EmptyStringName}      from '../../lang/name/EmptyStringName';\n\n/**\n * @singleton\n */\nexport class EmptySoundEffectCategory\n    extends ClassContainingAName<string>\n    implements SoundEffectCategory, ClassWithNullObjectPattern<EmptySoundEffectCategoryName> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptySoundEffectCategory;\n\n    private constructor() {\n        super(EmptyStringName.get,);\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public override toString(): EmptySoundEffectCategoryName {\n        return 'Empty sound effect category';\n    }\n\n}\n","import type {PlayerSoundEffectTriggerProperty, PossibleTranslation} from './PlayerSoundEffectTriggerProperty';\n\nimport {assert} from '../../../util/utilitiesMethods';\n\n/**\n * @multiton\n * @provider\n */\nexport class PlayerSoundEffectTriggerPropertyContainer\n    implements PlayerSoundEffectTriggerProperty {\n\n    //region -------------------- Predefined containers --------------------\n\n    static readonly #JUMP_AFTER_LANDING =                    new PlayerSoundEffectTriggerPropertyContainer('After landing and a jump is made',                                                                                                                 true,  false, false, false, false, false, false, false, false,);\n    static readonly #TURN_AROUND_AFTER_BEING_AT_FULL_SPEED = new PlayerSoundEffectTriggerPropertyContainer('After turning around after being at full speed',                                                                                                   false, true,  false, false, false, false, false, false, false,);\n    static readonly #ON_CROUCH =                             new PlayerSoundEffectTriggerPropertyContainer('On crouch',                                                                                                                                        false, false, true,  false, false, false, false, false, false,);\n    static readonly #AFTER_3_SECONDS_OF_NON_MOVEMENT =       new PlayerSoundEffectTriggerPropertyContainer('After 3 seconds of non movement (it repeat itself continuously)',                                                                                  false, false, false, true,  false, false, false, false, false,);\n\n    static readonly #COLLECT_POWER_UP =                      new PlayerSoundEffectTriggerPropertyContainer('When a power-up is collected (power-up / Buzzy Shell / Spiny Shell)',                                                                              false, false, false, false, true,  false, false, false, false,);\n    static readonly #GET_INTO_AN_ENTITY =                    new PlayerSoundEffectTriggerPropertyContainer('When getting into an entity (Clown car / Lakitu\\'s Cloud / Boots) / Yoshi (SMM2 only) / Dry Bones Shell (SMM2 only) / Swinging Claw (SMM2 only))', false, false, false, false, false, true,  false, false, false,);\n\n    static readonly #AT_SPAWN =                              new PlayerSoundEffectTriggerPropertyContainer('At spawn',                                                                                                                                         false, false, false, false, false, false, true,  false, false,);\n    static readonly #TAKE_DAMAGE =                           new PlayerSoundEffectTriggerPropertyContainer('When taking damage',                                                                                                                               false, false, false, false, false, false, false, true,  false,);\n    static readonly #LOST_A_LIFE =                           new PlayerSoundEffectTriggerPropertyContainer('When losing a life',                                                                                                                               false, false, false, false, false, false, false, false, true, );\n    static readonly #TAKE_DAMAGE_OR_LOST_A_LIFE =            new PlayerSoundEffectTriggerPropertyContainer('When taking damage or losing a life',                                                                                                              false, false, false, false, false, false, false, true,  true, );\n\n    //endregion -------------------- Predefined containers --------------------\n    //region -------------------- Fields, constructor & methods --------------------\n\n    readonly #translationKey: PossibleTranslation;\n\n    readonly #doesTriggerOnPlayerWhenJumpingAfterLanding;\n    readonly #doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed;\n    readonly #doesTriggerOnPlayerWhenCrouching;\n    readonly #doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly;\n\n    readonly #doesTriggerOnPlayerWhenCollectingAPowerUp;\n    readonly #doesTriggerOnPlayerWhenGettingIntoAEntity;\n\n    readonly #doesTriggerOnPlayerAtSpawn;\n    readonly #doesTriggerOnPlayerWhenTakingDamage;\n    readonly #doesTriggerOnPlayerWhenLosingALife;\n\n    private constructor(translationKey: PossibleTranslation,\n                        onJumpAfterLanding: boolean, onTurnAroundAfterBeingAtFullSpeed: boolean, onCrouch: boolean, after3SecondsOfNonMovementRepeatedly: boolean,\n                        onPowerUpCollected: boolean, whenGettingIntoAEntity: boolean,\n                        atSpawn: boolean, onDamageTaken: boolean, whenLosingALife: boolean,) {\n        this.#translationKey = translationKey;\n\n        this.#doesTriggerOnPlayerWhenJumpingAfterLanding = onJumpAfterLanding;\n        this.#doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed = onTurnAroundAfterBeingAtFullSpeed;\n        this.#doesTriggerOnPlayerWhenCrouching = onCrouch;\n        this.#doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly = after3SecondsOfNonMovementRepeatedly;\n\n        this.#doesTriggerOnPlayerWhenCollectingAPowerUp = onPowerUpCollected;\n        this.#doesTriggerOnPlayerWhenGettingIntoAEntity = whenGettingIntoAEntity;\n\n        this.#doesTriggerOnPlayerAtSpawn = atSpawn;\n        this.#doesTriggerOnPlayerWhenTakingDamage = onDamageTaken;\n        this.#doesTriggerOnPlayerWhenLosingALife = whenLosingALife;\n    }\n\n    public get translationKey() {\n        return this.#translationKey;\n    }\n\n    //region -------------------- Movement triggers --------------------\n\n    public get doesTriggerOnPlayerWhenJumpingAfterLanding(): boolean {\n        return this.#doesTriggerOnPlayerWhenJumpingAfterLanding;\n    }\n\n    public get doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed(): boolean {\n        return this.#doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed;\n    }\n\n    public get doesTriggerOnPlayerWhenCrouching(): boolean {\n        return this.#doesTriggerOnPlayerWhenCrouching;\n    }\n\n    public get doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly(): boolean {\n        return this.#doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly;\n    }\n\n    //endregion -------------------- Movement triggers --------------------\n    //region -------------------- Interaction triggers --------------------\n\n    public get doesTriggerOnPlayerWhenCollectingAPowerUp(): boolean {\n        return this.#doesTriggerOnPlayerWhenCollectingAPowerUp;\n    }\n\n    public get doesTriggerOnPlayerWhenGettingIntoAEntity(): boolean {\n        return this.#doesTriggerOnPlayerWhenGettingIntoAEntity;\n    }\n\n    //endregion -------------------- Interaction triggers --------------------\n    //region -------------------- Environment triggers --------------------\n\n    public get doesTriggerOnPlayerAtSpawn(): boolean {\n        return this.#doesTriggerOnPlayerAtSpawn;\n    }\n\n    public get doesTriggerOnPlayerWhenTakingDamage(): boolean {\n        return this.#doesTriggerOnPlayerWhenTakingDamage;\n    }\n\n    public get doesTriggerOnPlayerWhenLosingALife(): boolean {\n        return this.#doesTriggerOnPlayerWhenLosingALife;\n    }\n\n    //endregion -------------------- Environment triggers --------------------\n\n    //endregion -------------------- Fields, constructor & methods --------------------\n    //region -------------------- Provider / Multiton method --------------------\n\n    /**\n     * <p>\n     *  Return only one possible instance based on the boolean received.\n     *  It cannot receive any dual true since only the first boolean will be considered.\n     * </p>\n     *\n     * <p>\n     *  Note that only the last arguments (<b>onDamageTaken</b> & <b>whenLosingALife</b>) can be both true\n     *  to have a mix of both of them.\n     * </p>\n     *\n     * @param onJumpAfterLanding\n     * @param onTurnAroundAfterBeingAtFullSpeed\n     * @param onCrouch\n     * @param after3SecondsOfNonMovementRepeatedly\n     * @param onPowerUpCollected\n     * @param whenGettingIntoAEntity\n     * @param atSpawn\n     * @param onDamageTaken\n     * @param whenLosingALife\n     */\n    public static get(onJumpAfterLanding: boolean, onTurnAroundAfterBeingAtFullSpeed: boolean, onCrouch: boolean, after3SecondsOfNonMovementRepeatedly: boolean,\n                      onPowerUpCollected: boolean, whenGettingIntoAEntity: boolean,\n                      atSpawn: boolean, onDamageTaken: boolean, whenLosingALife: boolean,): PlayerSoundEffectTriggerProperty {\n        if (onJumpAfterLanding)\n            return this.#JUMP_AFTER_LANDING;\n        if (onTurnAroundAfterBeingAtFullSpeed)\n            return this.#TURN_AROUND_AFTER_BEING_AT_FULL_SPEED;\n        if (onCrouch)\n            return this.#ON_CROUCH;\n        if (after3SecondsOfNonMovementRepeatedly)\n            return this.#AFTER_3_SECONDS_OF_NON_MOVEMENT;\n\n        if (onPowerUpCollected)\n            return this.#COLLECT_POWER_UP;\n        if (whenGettingIntoAEntity)\n            return this.#GET_INTO_AN_ENTITY;\n\n        if (atSpawn)\n            return this.#AT_SPAWN;\n        if (onDamageTaken)\n            return whenLosingALife ? this.#TAKE_DAMAGE_OR_LOST_A_LIFE : this.#TAKE_DAMAGE;\n        if (whenLosingALife)\n            return this.#LOST_A_LIFE;\n\n        assert(false, 'There is no player sound effect trigger usable with no possible property.',);\n    }\n\n    //endregion -------------------- Provider / Multiton method --------------------\n\n}\n","import type {Name}                from '../../lang/name/Name';\nimport type {SoundEffect}         from './SoundEffect';\nimport type {SoundEffectCategory} from '../soundEffectCategory/SoundEffectCategory';\nimport type {SoundEffectProperty} from './properties/SoundEffectProperty';\n\nimport {ClassContainingANameAndACategory} from '../../lang/name/ClassContainingANameAndACategory';\n\nexport class SoundEffectContainer\n    extends ClassContainingANameAndACategory<string, string, SoundEffectCategory>\n    implements SoundEffect {\n\n    //region -------------------- Fields --------------------\n\n    readonly #propertyContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: Name<string>, category: SoundEffectCategory, property: SoundEffectProperty,) {\n        super(name, category,);\n        this.#propertyContainer = property;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Properties --------------------\n\n    public get propertyContainer(): SoundEffectProperty {\n        return this.#propertyContainer;\n    }\n\n    //region -------------------- Game properties --------------------\n\n    public get gameContainer(): this['propertyContainer']['gameContainer'] {\n        return this.propertyContainer.gameContainer;\n    }\n\n    public get isInSuperMarioMaker1(): this['gameContainer']['isInSuperMarioMaker1'] {\n        return this.gameContainer.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS(): this['gameContainer']['isInSuperMarioMakerFor3DS'] {\n        return this.gameContainer.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2(): this['gameContainer']['isInSuperMarioMaker2'] {\n        return this.gameContainer.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Player sound effect trigger properties --------------------\n\n    public get playerSoundEffectTriggerContainer(): this['propertyContainer']['playerSoundEffectTriggerContainer'] {\n        return this.propertyContainer.playerSoundEffectTriggerContainer;\n    }\n\n    public get translationKey(): this['playerSoundEffectTriggerContainer']['translationKey'] {\n        return this.playerSoundEffectTriggerContainer.translationKey;\n    }\n\n    //region -------------------- Movement triggers --------------------\n\n    public get doesTriggerOnPlayerWhenJumpingAfterLanding(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenJumpingAfterLanding'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenJumpingAfterLanding;\n    }\n\n    public get doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed;\n    }\n\n    public get doesTriggerOnPlayerWhenCrouching(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenCrouching'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenCrouching;\n    }\n\n    public get doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly;\n    }\n\n    //endregion -------------------- Movement triggers --------------------\n    //region -------------------- Interaction triggers --------------------\n\n    public get doesTriggerOnPlayerWhenCollectingAPowerUp(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenCollectingAPowerUp'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenCollectingAPowerUp;\n    }\n\n    public get doesTriggerOnPlayerWhenGettingIntoAEntity(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenGettingIntoAEntity'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenGettingIntoAEntity;\n    }\n\n    //endregion -------------------- Interaction triggers --------------------\n    //region -------------------- Environment triggers --------------------\n\n    public get doesTriggerOnPlayerAtSpawn(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerAtSpawn'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerAtSpawn;\n    }\n\n    public get doesTriggerOnPlayerWhenTakingDamage(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenTakingDamage'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenTakingDamage;\n    }\n\n    public get doesTriggerOnPlayerWhenLosingALife(): this['playerSoundEffectTriggerContainer']['doesTriggerOnPlayerWhenLosingALife'] {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenLosingALife;\n    }\n\n    //endregion -------------------- Environment triggers --------------------\n\n    //endregion -------------------- Player sound effect trigger properties --------------------\n\n    //endregion -------------------- Properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.propertyContainer.toGameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {GameProperty}                     from '../../entity/properties/game/GameProperty';\nimport type {PlayerSoundEffectTriggerProperty} from './PlayerSoundEffectTriggerProperty';\nimport type {SoundEffectProperty}              from './SoundEffectProperty';\n\nexport class SoundEffectPropertyContainer\n    implements SoundEffectProperty {\n\n    //region -------------------- Fields --------------------\n\n    readonly #gameContainer;\n    readonly #playerSoundEffectTriggerContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(game: GameProperty, playerSoundEffectTrigger: PlayerSoundEffectTriggerProperty,) {\n        this.#gameContainer = game;\n        this.#playerSoundEffectTriggerContainer = playerSoundEffectTrigger;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public get gameContainer() {\n        return this.#gameContainer;\n    }\n\n    public get isInSuperMarioMaker1() {\n        return this.gameContainer.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS() {\n        return this.gameContainer.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2() {\n        return this.gameContainer.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- Player sound effect trigger properties --------------------\n\n    public get playerSoundEffectTriggerContainer(): PlayerSoundEffectTriggerProperty {\n        return this.#playerSoundEffectTriggerContainer;\n    }\n\n    public get translationKey() {\n        return this.playerSoundEffectTriggerContainer.translationKey;\n    }\n\n    //region -------------------- Movement triggers --------------------\n\n    public get doesTriggerOnPlayerWhenJumpingAfterLanding(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenJumpingAfterLanding;\n    }\n\n    public get doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenTurningAroundAfterBeingAtFullSpeed;\n    }\n\n    public get doesTriggerOnPlayerWhenCrouching(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenCrouching;\n    }\n\n    public get doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerAfter3SecondsOfNonMovementRepeatedly;\n    }\n\n    //endregion -------------------- Movement triggers --------------------\n    //region -------------------- Interaction triggers --------------------\n\n    public get doesTriggerOnPlayerWhenCollectingAPowerUp(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenCollectingAPowerUp;\n    }\n\n    public get doesTriggerOnPlayerWhenGettingIntoAEntity(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenGettingIntoAEntity;\n    }\n\n    //endregion -------------------- Interaction triggers --------------------\n    //region -------------------- Environment triggers --------------------\n\n    public get doesTriggerOnPlayerAtSpawn(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerAtSpawn;\n    }\n\n    public get doesTriggerOnPlayerWhenTakingDamage(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenTakingDamage;\n    }\n\n    public get doesTriggerOnPlayerWhenLosingALife(): boolean {\n        return this.playerSoundEffectTriggerContainer.doesTriggerOnPlayerWhenLosingALife;\n    }\n\n    //endregion -------------------- Environment triggers --------------------\n\n    //endregion -------------------- Player sound effect trigger properties --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.gameContainer.toGameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}\n","import type {Builder}             from '../../util/builder/Builder';\nimport type {Name}                from '../../lang/name/Name';\nimport type {SoundEffect}         from './SoundEffect';\nimport type {SoundEffectTemplate} from './SoundEffect.template';\n\nimport {EmptySoundEffectCategory}                  from '../soundEffectCategory/EmptySoundEffectCategory';\nimport {GamePropertyProvider}                      from '../entity/properties/game/GameProperty.provider';\nimport {Games}                                     from '../game/Games';\nimport {PlayerSoundEffectTriggerPropertyContainer} from './properties/PlayerSoundEffectTriggerProperty.container';\nimport {SoundEffectContainer}                      from './SoundEffect.container';\nimport {SoundEffectPropertyContainer}              from './properties/SoundEffectProperty.container';\nimport {SoundEffectCategories}                     from '../soundEffectCategory/SoundEffectCategories';\nimport {TemplateWithNameBuilder}                   from '../_template/TemplateWithName.builder';\n\nexport class SoundEffectBuilder\n    extends TemplateWithNameBuilder<SoundEffectTemplate, SoundEffect> {\n\n    public constructor(templateBuilder: Builder<SoundEffectTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_2, false,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return SoundEffectBuilder;\n    }\n\n    #createCategory() {\n        return SoundEffectCategories.getValue(this.template.properties.category)?.reference\n            ?? EmptySoundEffectCategory.get;\n    }\n\n    #createProperty() {\n        const isInPropertiesTemplate = this.template.properties.isIn;\n        const gameTemplate = isInPropertiesTemplate.game;\n        const {movement: playerMovementTriggerTemplate, interaction: playerInteractionTriggerTemplate, environment: playerEnvironmentTriggerTemplate,} = isInPropertiesTemplate.trigger.player;\n\n        return new SoundEffectPropertyContainer(\n            GamePropertyProvider.get.get(gameTemplate['1And3DS'], gameTemplate['2'],),\n\n            PlayerSoundEffectTriggerPropertyContainer.get(playerMovementTriggerTemplate.jumpAfterLanding, playerMovementTriggerTemplate.turnAroundAfterBeingAtFullSpeed, playerMovementTriggerTemplate.crouch, playerMovementTriggerTemplate.after3SecondsRepeatedly,\n                playerInteractionTriggerTemplate.collectPowerUp, playerInteractionTriggerTemplate.getIntoAnEntity,\n                playerEnvironmentTriggerTemplate.spawn, playerEnvironmentTriggerTemplate.damage, playerEnvironmentTriggerTemplate.lostALife,),\n        );\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    protected override _build(name: Name<string>,): SoundEffect {\n        return new SoundEffectContainer(\n            name,\n            this.#createCategory(),\n            this.#createProperty(),\n        );\n    }\n\n}\n","import resource from '../../resources/compiled/Sound effect.json';\n\nimport type {PropertiesArray as LanguagesPropertyArray}            from '../../lang/Loader.types';\nimport type {Loader}                                               from '../../util/loader/Loader';\nimport type {PropertiesArrayFrom1And2 as GamesPropertyArray}       from '../game/Loader.types';\nimport type {PossibleSoundEffectCategoryType, SoundEffectTemplate} from './SoundEffect.template';\nimport type {PossibleEnglishName}                                  from './SoundEffects.types';\nimport type {SoundEffect}                                          from './SoundEffect';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {SoundEffectBuilder}      from './SoundEffect.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Games --------------------\n\n    isInSuperMarioMaker1And3DS,\n    isInSuperMarioMaker2,\n\n    //endregion -------------------- Games --------------------\n    //region -------------------- Triggers --------------------\n\n    doesTrigger_player_jumpAfterLanding,\n    doesTrigger_player_turnAroundAfterBeingAtFullSpeed,\n    doesTrigger_player_crouch,\n    doesTrigger_player_after3SecondsRepeatedly,\n\n    doesTrigger_player_collectPowerUp,\n    doesTrigger_player_getIntoAnEntity,\n\n    doesTrigger_player_spawn,\n    doesTrigger_player_damage,\n    doesTrigger_player_lostALife,\n\n    //endregion -------------------- Triggers --------------------\n    category,\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\n//region -------------------- Exclusive properties --------------------\n\ntype ExclusivePropertiesArray = [\n    //region -------------------- Triggers --------------------\n\n    doesTrigger_player_jumpAfterLanding: boolean,\n    doesTrigger_player_turnAroundAfterBeingAtFullSpeed: boolean,\n    doesTrigger_player_crouch: boolean,\n    doesTrigger_player_after3SecondsRepeatedly: boolean,\n\n    doesTrigger_player_collectPowerUp: boolean,\n    doesTrigger_player_getIntoAnEntity: boolean,\n\n    doesTrigger_player_atSpawn: boolean,\n    doesTrigger_player_takeDamage: boolean,\n    doesTrigger_player_lostALife: boolean,\n\n    //endregion -------------------- Triggers --------------------\n\n    category: PossibleSoundEffectCategoryType,\n\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\ntype PropertiesArray = [\n    ...GamesPropertyArray,\n    ...ExclusivePropertiesArray,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link SoundEffects}>\n */\nexport class SoundEffectLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, SoundEffect>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: SoundEffectLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, SoundEffect>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, SoundEffect> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, SoundEffect>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, SoundEffect, keyof typeof Headers>(resource, convertedContent => new SoundEffectBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToBoolean(\n                    'isInSuperMarioMaker1And3DS', 'isInSuperMarioMaker2',\n\n                    'doesTrigger_player_jumpAfterLanding', 'doesTrigger_player_turnAroundAfterBeingAtFullSpeed', 'doesTrigger_player_crouch', 'doesTrigger_player_after3SecondsRepeatedly',\n                    'doesTrigger_player_collectPowerUp', 'doesTrigger_player_getIntoAnEntity',\n                    'doesTrigger_player_spawn', 'doesTrigger_player_damage', 'doesTrigger_player_lostALife',\n                )\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_soundEffectCategory, 'category',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_soundEffect, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"sound effect\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"sound effect\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<SoundEffectTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): SoundEffectTemplate {\n        return {\n            properties: {\n                isIn: {\n                    game: this._createGameTemplateFrom1And2(),\n\n                    trigger: {\n                        player: {\n\n                            movement: {\n                                jumpAfterLanding: this._getContent(this._headersIndexMap.doesTrigger_player_jumpAfterLanding),\n                                turnAroundAfterBeingAtFullSpeed: this._getContent(this._headersIndexMap.doesTrigger_player_turnAroundAfterBeingAtFullSpeed),\n                                crouch: this._getContent(this._headersIndexMap.doesTrigger_player_crouch),\n                                after3SecondsRepeatedly: this._getContent(this._headersIndexMap.doesTrigger_player_after3SecondsRepeatedly),\n                            },\n\n                            interaction: {\n                                collectPowerUp: this._getContent(this._headersIndexMap.doesTrigger_player_collectPowerUp),\n                                getIntoAnEntity: this._getContent(this._headersIndexMap.doesTrigger_player_getIntoAnEntity),\n                            },\n\n                            environment: {\n                                spawn: this._getContent(this._headersIndexMap.doesTrigger_player_spawn),\n                                damage: this._getContent(this._headersIndexMap.doesTrigger_player_damage),\n                                lostALife: this._getContent(this._headersIndexMap.doesTrigger_player_lostALife),\n                            },\n\n                        },\n                    },\n                },\n                category: this._getContent(this._headersIndexMap.category),\n            },\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import resource from '../../resources/compiled/Entity category.json';\n\nimport type {EntityCategory}                            from './EntityCategory';\nimport type {EntityCategoryTemplate}                    from './EntityCategory.template';\nimport type {Loader}                                    from '../../util/loader/Loader';\nimport type {PropertiesArray as LanguagesPropertyArray} from '../../lang/Loader.types';\nimport type {PossibleEnglishName}                       from './EntityCategories.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {EntityCategoryBuilder}   from './EntityCategory.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype PropertiesArray = [\n    ...LanguagesPropertyArray\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * A single class made to handle the loading\n * and the unique creation of every categories.\n *\n * @singleton\n * @recursiveReference<{@link EntityCategories}>\n */\nexport class EntityCategoryLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, EntityCategory>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EntityCategoryLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, EntityCategory>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, EntityCategory> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, EntityCategory>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, EntityCategory, keyof typeof Headers>(resource, convertedContent => new EntityCategoryBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"entity category\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"entity category\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<EntityCategoryTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): EntityCategoryTemplate {\n        return {\n            entities: null,\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import type {EntityCategory} from './EntityCategory';\nimport type {Name}           from '../../lang/name/Name';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class EntityCategoryContainer\n    extends ClassContainingAName<string>\n    implements EntityCategory {\n\n    public constructor(name: Name<string>,) {\n        super(name,);\n    }\n\n}\n","import type {Builder}                from '../../util/builder/Builder';\nimport type {EntityCategory}         from './EntityCategory';\nimport type {EntityCategoryTemplate} from './EntityCategory.template';\nimport type {Name}                   from '../../lang/name/Name';\n\nimport {EntityCategoryContainer} from './EntityCategory.container';\nimport {Games}                   from '../game/Games';\nimport {TemplateWithNameBuilder} from '../_template/TemplateWithName.builder';\n\nexport class EntityCategoryBuilder\n    extends TemplateWithNameBuilder<EntityCategoryTemplate, EntityCategory>\n    implements Builder<EntityCategory> {\n\n    public constructor(templateBuilder: Builder<EntityCategoryTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_2, true,);\n    }\n\n    protected /*static*/ override get _static() {\n        return EntityCategoryBuilder;\n    }\n\n    protected override _build(name: Name<string>,): EntityCategory {\n        return new EntityCategoryContainer(\n            name,\n        );\n    }\n}","import resource from '../../resources/compiled/Game reference.json';\n\nimport type {GameReference}                             from './GameReference';\nimport type {GameReferenceTemplate}                     from './GameReference.template';\nimport type {Loader}                                    from '../../util/loader/Loader';\nimport type {PossibleAcronym, PossibleEnglishName}      from './GameReferences.types';\nimport type {PropertiesArray as LanguagesPropertyArray} from '../../lang/Loader.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\nimport {GameReferenceBuilder}    from './GameReference.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    acronym,\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\ntype ExclusivePropertiesArray = [\n    acronym: PossibleAcronym,\n];\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray,\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link GameReferences}>\n */\nexport class GameReferenceLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, GameReference>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: GameReferenceLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    #map?: Map<PossibleEnglishName, GameReference>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, GameReference> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, GameReference>();\n\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, GameReference, keyof typeof Headers>(resource, convertedContent => new GameReferenceBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'acronym',)\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_gameReference, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"game references\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"game references\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<GameReferenceTemplate, PropertiesArray, typeof Headers> {\n\n\n    public constructor(content: PropertiesArray) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap(): typeof Headers {\n        return Headers;\n    }\n\n    public override build(): GameReferenceTemplate {\n        return {\n            acronym: this._getContent(this._headersIndexMap.acronym),\n            name: this._createNameTemplate(),\n        };\n    }\n}","import type {GameReference}   from './GameReference';\nimport type {Name}            from '../../lang/name/Name';\nimport type {PossibleAcronym} from './GameReferences.types';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class GameReferenceContainer\n    extends ClassContainingAName<string>\n    implements GameReference {\n\n    //region -------------------- Fields --------------------\n\n    readonly #acronym;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(acronym: PossibleAcronym, name: Name<string>,) {\n        super(name,);\n        this.#acronym = acronym;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get acronym() {\n        return this.#acronym;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {Builder}               from '../../util/builder/Builder';\nimport type {GameReference}         from './GameReference';\nimport type {GameReferenceTemplate} from './GameReference.template';\nimport type {Name}                  from '../../lang/name/Name';\n\nimport {TemplateWithNameBuilder} from '../_template/TemplateWithName.builder';\nimport {GameReferenceContainer}  from './GameReference.container';\n\nexport class GameReferenceBuilder\n    extends TemplateWithNameBuilder<GameReferenceTemplate, GameReference> {\n\n    public constructor(templateBuilder: Builder<GameReferenceTemplate>,) {\n        super(templateBuilder, 'all', false,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return GameReferenceBuilder;\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    protected override _build(name: Name<string>,): GameReference {\n        return new GameReferenceContainer(this.template.acronym, name,);\n    }\n\n}\n","import type {ClassThatIsAvailableFromTheStart}                 from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {Entity}                                           from '../entity/Entity';\nimport type {GameProperty}                                     from '../entity/properties/game/GameProperty';\nimport type {GameStyle, PossibleNightDesertWindTranslationKey} from './GameStyle';\nimport type {Name}                                             from '../../lang/name/Name';\nimport type {ObjectHolder, PossibleValueOnObjectHolder}        from '../../util/holder/ObjectHolder';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class GameStyleContainer\n    extends ClassContainingAName<string>\n    implements GameStyle {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isInPropertyHolder;\n    readonly #entitiesHolder;\n    readonly #isAvailableFromTheStartHolder;\n    readonly #nightDesertWindTranslationKey;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<string>>, isInProperty: ObjectHolder<GameProperty>, isAvailableFromTheStart: ObjectHolder<ClassThatIsAvailableFromTheStart>, entities: ObjectHolder<readonly Entity[]>, nightDesertWindTranslationKey: PossibleNightDesertWindTranslationKey,) {\n        super(name,);\n        this.#isInPropertyHolder = isInProperty;\n        this.#isAvailableFromTheStartHolder = isAvailableFromTheStart;\n        this.#entitiesHolder = entities;\n        this.#nightDesertWindTranslationKey = nightDesertWindTranslationKey;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    //region -------------------- Game properties --------------------\n\n    public get isInProperty() {\n        return this.#isInPropertyHolder.get;\n    }\n\n    public get isInSuperMarioMaker1() {\n        return this.isInProperty.isInSuperMarioMaker1;\n    }\n\n    public get isInSuperMarioMakerFor3DS() {\n        return this.isInProperty.isInSuperMarioMakerFor3DS;\n    }\n\n    public get isInSuperMarioMaker2() {\n        return this.isInProperty.isInSuperMarioMaker2;\n    }\n\n    //endregion -------------------- Game properties --------------------\n    //region -------------------- \"Is available from the start\" properties --------------------\n\n    public get isAvailableFromTheStartContainer(): ClassThatIsAvailableFromTheStart {\n        return this.#isAvailableFromTheStartHolder.get;\n    }\n\n    public get isAvailableFromTheStartInSMM1() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM1;\n    }\n\n    public get isAvailableFromTheStartInSMM3DS() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM3DS;\n    }\n\n    public get isAvailableFromTheStartInSMM2() {\n        return this.isAvailableFromTheStartContainer.isAvailableFromTheStartInSMM2;\n    }\n\n    //endregion -------------------- \"Is available from the start\" properties --------------------\n\n    public get entities() {\n        return this.#entitiesHolder.get;\n    }\n\n    public get nightDesertWindTranslationKey() {\n        return this.#nightDesertWindTranslationKey;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Convertor methods --------------------\n\n    public toGameMap() {\n        return this.isInProperty.toGameMap();\n    }\n\n    //endregion -------------------- Convertor methods --------------------\n\n}","import type {ClassThatIsAvailableFromTheStart, PossibleIsAvailableFromTheStart} from '../availableFromTheStart/ClassThatIsAvailableFromTheStart';\nimport type {Builder}                                                           from '../../util/builder/Builder';\nimport type {Entity}                                                            from '../entity/Entity';\nimport type {GameProperty}                                                      from '../entity/properties/game/GameProperty';\nimport type {GameStyle, PossibleNightDesertWindTranslationKey}                  from './GameStyle';\nimport type {GameStyleTemplate, NightDesertWindTemplate}                        from './GameStyle.template';\nimport type {Name}                                                              from '../../lang/name/Name';\nimport type {ObjectHolder}                                                      from '../../util/holder/ObjectHolder';\nimport type {PossibleAcronym}                                                   from './GameStyles.types';\nimport type {SimpleGameFrom1And2Template}                                       from '../game/SimpleGame.template';\n\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\nimport {GameStyleContainer}           from './GameStyle.container';\nimport {Import}                       from '../../util/DynamicImporter';\nimport {TemplateBuilder}              from '../_template/Template.builder';\nimport {GamePropertyProvider}         from '../entity/properties/game/GameProperty.provider';\n\n/**\n * @classWithDynamicImport {@link Entities}, {@link GameReferences}, {@link GameStyles}, {@link ClassThatIsAvailableFromTheStartProvider}\n */\nexport class GameStyleBuilder\n    extends TemplateBuilder<GameStyleTemplate, GameStyle>\n    implements Builder<GameStyle> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #GAME_PROPERTY_IN_ALL_GAMES: ObjectHolder<GameProperty<true, true, true>> = new DelayedObjectHolderContainer(() => GamePropertyProvider.get.all);\n    static readonly #GAME_PROPERTY_IN_SMM2: ObjectHolder<GameProperty<false, false, true>> = new DelayedObjectHolderContainer(() => GamePropertyProvider.get.smm2Only);\n\n    static readonly #IS_NOT_APPLICABLE_ON_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<null, null, true>> = new DelayedObjectHolderContainer(() => Import.ClassThatIsAvailableFromTheStartProvider.get.get(null,));\n    static readonly #IS_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<true, true, true>> = new DelayedObjectHolderContainer(() => Import.ClassThatIsAvailableFromTheStartProvider.get.get(true,));\n    static readonly #IS_NOT_AVAILABLE_FROM_THE_START_IN_SMM1: ObjectHolder<ClassThatIsAvailableFromTheStart<false, true, true>> = new DelayedObjectHolderContainer(() => Import.ClassThatIsAvailableFromTheStartProvider.get.get(false,));\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(templateBuilder: Builder<GameStyleTemplate>,) {\n        super(templateBuilder,);\n    }\n\n    //region -------------------- Builder helper methods --------------------\n\n    static #getNameBy(reference: PossibleAcronym,): () => Name<string> {\n        return () => Import.GameReferences.getValue(reference).reference.nameContainer;\n    }\n\n    static #getGameProperty({'1And3DS': isInSMM1And3DS,}: SimpleGameFrom1And2Template<boolean, boolean>,): ObjectHolder<GameProperty> {\n        return isInSMM1And3DS\n            ? this.#GAME_PROPERTY_IN_ALL_GAMES\n            : this.#GAME_PROPERTY_IN_SMM2;\n    }\n\n    static #getIsAvailableFromTheStart(value: PossibleIsAvailableFromTheStart,): ObjectHolder<ClassThatIsAvailableFromTheStart> {\n        //TODO move this code elsewhere to remove duplicate code\n        return value == null\n            ? this.#IS_NOT_APPLICABLE_ON_AVAILABLE_FROM_THE_START_IN_SMM1\n            : value\n                ? this.#IS_AVAILABLE_FROM_THE_START_IN_SMM1\n                : this.#IS_NOT_AVAILABLE_FROM_THE_START_IN_SMM1;\n    }\n\n    static #getEntityBy(englishName: PossibleAcronym,): ObjectHolder<readonly Entity[]> {\n        return new DelayedObjectHolderContainer(() => {\n            const gameStyle = Import.GameStyles.getValue(englishName);\n\n            return Import.Entities.values.map(({reference,}) => reference)\n                .filter(reference => gameStyle.get(reference));\n        });\n    }\n\n    static #getNightDesertWindTranslationKey({direction, frequency,}: NightDesertWindTemplate,): PossibleNightDesertWindTranslationKey {\n        return direction == null\n            ? null\n            : `${direction} ${frequency}` as PossibleNightDesertWindTranslationKey;\n    }\n\n    //endregion -------------------- Builder helper methods --------------------\n\n    public build(): GameStyle {\n        const template = this.template;\n\n        return new GameStyleContainer(\n            GameStyleBuilder.#getNameBy(template.reference),\n            GameStyleBuilder.#getGameProperty(template.is.in.game),\n            GameStyleBuilder.#getIsAvailableFromTheStart(template.is.availableFromTheStart),\n            GameStyleBuilder.#getEntityBy(template.reference),\n            GameStyleBuilder.#getNightDesertWindTranslationKey(template.nightDesertWind),\n        );\n    }\n}\n","import resource from '../../resources/compiled/Game style.json';\n\nimport type {Loader}                                                             from '../../util/loader/Loader';\nimport type {GameStyle}                                                          from './GameStyle';\nimport type {GameStyleTemplate}                                                  from './GameStyle.template';\nimport type {PropertiesArrayFrom1And2 as GamesPropertyArray}                     from '../game/Loader.types';\nimport type {PossibleAcronym, PossibleEnglishName}                               from './GameStyles.types';\nimport type {PossibleIsAvailableFromTheStart}                                    from '../availableFromTheStart/loader.types';\nimport type {PossibleNightDesertWindDirection, PossibleNightDesertWindFrequency} from './Loader.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {GameStyleBuilder}        from './GameStyle.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Games --------------------\n\n    isInSuperMarioMaker1And3DS,\n    isInSuperMarioMaker2,\n\n    //endregion -------------------- Games --------------------\n\n    isAvailableFromTheStart_SMM1,\n\n    reference,\n\n    nightDesertWindDirection,\n    nightDesertWindFrequency,\n\n}\n\n//region -------------------- Properties --------------------\n\nexport type ExclusivePropertiesArray = [\n    isAvailableFromTheStart: PossibleIsAvailableFromTheStart,\n    reference: PossibleAcronym,\n    nightDesertWindDirection: PossibleNightDesertWindDirection,\n    nightDesertWindFrequency: PossibleNightDesertWindFrequency,\n];\n\ntype PropertiesArray = [\n    ...GamesPropertyArray,\n    ...ExclusivePropertiesArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReferenceVia<{@link GameStyleBuilder}, {@link GameStyles}>\n * @recursiveReference<{@link GameStyles}>\n */\nexport class GameStyleLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, GameStyle>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: GameStyleLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, GameStyle>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, GameStyle> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, GameStyle>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, GameStyle, keyof typeof Headers>(resource, convertedContent => new GameStyleBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToBoolean('isInSuperMarioMaker1And3DS', 'isInSuperMarioMaker2',)\n                .convertToNullableBoolean('isAvailableFromTheStart_SMM1',)\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleAcronym_gameReference, 'reference',)\n\n                .convertToEmptyableStringAnd(['←', '↔', '→',], 'nightDesertWindDirection',)\n                .convertToEmptyableStringAnd(['periodic', 'constant',], 'nightDesertWindFrequency',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"game style\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"game style\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<GameStyleTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): GameStyleTemplate {\n        return {\n            is: {\n                in: {game: this._createGameTemplateFrom1And2(),},\n                availableFromTheStart: this._getContent(this._headersIndexMap.isAvailableFromTheStart_SMM1),\n            },\n            reference: this._getContent(this._headersIndexMap.reference),\n            nightDesertWind: {\n                direction: this._getContent(this._headersIndexMap.nightDesertWindDirection),\n                frequency: this._getContent(this._headersIndexMap.nightDesertWindFrequency),\n            },\n        };\n    }\n\n}\n","import resource from '../../resources/compiled/Sound effect category.json';\n\nimport type {PropertiesArray as LanguagesPropertyArray} from '../../lang/Loader.types';\nimport type {Loader}                                    from '../../util/loader/Loader';\nimport type {PossibleEnglishName}                       from './SoundEffectCategories.types';\nimport type {SoundEffectCategory}                       from './SoundEffectCategory';\nimport type {SoundEffectCategoryTemplate}               from './SoundEffectCategory.template';\n\nimport {AbstractTemplateBuilder}    from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}                  from '../../util/loader/CSVLoader';\nimport {SoundEffectCategoryBuilder} from './SoundEffectCategory.builder';\nimport {HeaderTypesForConvertor}    from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n    greek,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype PropertiesArray = [\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link SoundEffectCategories}>\n */\nexport class SoundEffectCategoryLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, SoundEffectCategory>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: SoundEffectCategoryLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, SoundEffectCategory>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, SoundEffectCategory> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, SoundEffectCategory>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, SoundEffectCategory, keyof typeof Headers>(resource, convertedContent => new SoundEffectCategoryBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_soundEffectCategory, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"sound effect category\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"sound effect category\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<SoundEffectCategoryTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): SoundEffectCategoryTemplate {\n        return {\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import type {Name}                from '../../lang/name/Name';\nimport type {SoundEffectCategory} from './SoundEffectCategory';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class SoundEffectCategoryContainer\n    extends ClassContainingAName<string>\n    implements SoundEffectCategory {\n\n    public constructor(name: Name<string>,) {\n        super(name,);\n    }\n\n}\n","import type {Builder}                     from '../../util/builder/Builder';\nimport type {Name}                        from '../../lang/name/Name';\nimport type {SoundEffectCategory}         from './SoundEffectCategory';\nimport type {SoundEffectCategoryTemplate} from './SoundEffectCategory.template';\n\nimport {Games}                        from '../game/Games';\nimport {SoundEffectCategoryContainer} from './SoundEffectCategory.container';\nimport {TemplateWithNameBuilder}      from '../_template/TemplateWithName.builder';\n\nexport class SoundEffectCategoryBuilder\n    extends TemplateWithNameBuilder<SoundEffectCategoryTemplate, SoundEffectCategory> {\n\n    public constructor(templateBuilder: Builder<SoundEffectCategoryTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_2, false,);\n    }\n\n    protected /*static*/ override get _static() {\n        return SoundEffectCategoryBuilder;\n    }\n\n    protected override _build(name: Name<string>,): SoundEffectCategory {\n        return new SoundEffectCategoryContainer(name);\n    }\n\n}\n","import resource from '../../resources/compiled/Mii Costume category (SMM2).json';\n\nimport type {Loader}                                                         from '../../util/loader/Loader';\nimport type {MiiCostumeCategory}                                             from './MiiCostumeCategory';\nimport type {MiiCostumeCategoryTemplate}                                     from './MiiCostumeCategory.template';\nimport type {PossibleEnglishName}                                            from './MiiCostumeCategories.types';\nimport type {PropertiesArrayWithOptionalLanguages as LanguagesPropertyArray} from '../../lang/Loader.types';\n\nimport {AbstractTemplateBuilder}   from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}                 from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor}   from '../_util/loader/HeaderTypesForConvertor';\nimport {MiiCostumeCategoryBuilder} from './MiiCostumeCategory.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype PropertiesArray = [\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link MiiCostumeCategories}>\n */\nexport class MiiCostumeCategoryLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, MiiCostumeCategory>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MiiCostumeCategoryLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, MiiCostumeCategory>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, MiiCostumeCategory> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, MiiCostumeCategory>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, MiiCostumeCategory, keyof typeof Headers>(resource, convertedContent => new MiiCostumeCategoryBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_MiiCostumeCategory, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent =>\n                    references.set(finalContent.americanEnglish as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"Mii costume\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"Mii costume\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<MiiCostumeCategoryTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): MiiCostumeCategoryTemplate {\n        return {\n            name: this._createNameTemplate(),\n        };\n    }\n\n}","import type {Name}               from '../../lang/name/Name';\nimport type {MiiCostumeCategory} from './MiiCostumeCategory';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class MiiCostumeCategoryContainer\n    extends ClassContainingAName<string>\n    implements MiiCostumeCategory {\n\n    public constructor(name: Name<string>,) {\n        super(name);\n    }\n\n}\n","import type {Builder}                    from '../../util/builder/Builder';\nimport type {MiiCostumeCategory}         from './MiiCostumeCategory';\nimport type {MiiCostumeCategoryTemplate} from './MiiCostumeCategory.template';\nimport type {Name}                       from '../../lang/name/Name';\n\nimport {Games}                       from '../game/Games';\nimport {MiiCostumeCategoryContainer} from './MiiCostumeCategory.container';\nimport {TemplateWithNameBuilder}     from '../_template/TemplateWithName.builder';\n\nexport class MiiCostumeCategoryBuilder\n    extends TemplateWithNameBuilder<MiiCostumeCategoryTemplate, MiiCostumeCategory> {\n\n\n    public constructor(templateBuilder_or_template: Builder<MiiCostumeCategoryTemplate>,) {\n        super(templateBuilder_or_template, Games.SUPER_MARIO_MAKER_2, false,);\n    }\n\n    protected /*static*/ override get _static() {\n        return MiiCostumeCategoryBuilder;\n    }\n\n\n    protected override _build(name: Name<string>,): MiiCostumeCategory {\n        return new MiiCostumeCategoryContainer(name);\n    }\n\n}\n","import type {CourseTag}       from './CourseTag';\nimport type {Name}            from '../../lang/name/Name';\nimport type {Versions}        from '../version/Versions';\nimport type {ObjectHolder}    from '../../util/holder/ObjectHolder';\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class CourseTagContainer\n    extends ClassContainingAName<string>\n    implements CourseTag {\n\n    //region -------------------- Fields --------------------\n\n    readonly #isAnOfficialTag;\n    readonly #firstAppearanceContainer;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: Name<string>, isAnOfficialTag: boolean, firstAppearance: ObjectHolder<| Versions | null>,) {\n        super(name);\n        this.#isAnOfficialTag = isAnOfficialTag;\n        this.#firstAppearanceContainer = firstAppearance;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get isAnOfficialTag(): boolean {\n        return this.#isAnOfficialTag;\n    }\n\n    public get firstAppearance(): | Versions | null {\n        return this.#firstAppearanceContainer.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {Builder}           from '../../util/builder/Builder';\nimport type {CourseTag}         from './CourseTag';\nimport type {CourseTagTemplate} from './CourseTag.template';\nimport type {Name}              from '../../lang/name/Name';\nimport type {ObjectHolder}      from '../../util/holder/ObjectHolder';\n\nimport {CourseTagContainer}           from './CourseTag.container';\nimport {DelayedObjectHolderContainer} from '../../util/holder/DelayedObjectHolder.container';\nimport {Games}                        from '../game/Games';\nimport {ObjectHolders}                from '../../util/holder/objectHolders';\nimport {TemplateWithNameBuilder}      from '../_template/TemplateWithName.builder';\nimport {Versions}                     from '../version/Versions';\n\nexport class CourseTagBuilder\n    extends TemplateWithNameBuilder<CourseTagTemplate, CourseTag>\n    implements Builder<CourseTag> {\n\n    public constructor(templateBuilder: Builder<CourseTagTemplate>,) {\n        super(templateBuilder, Games.SUPER_MARIO_MAKER_2, false,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return CourseTagBuilder;\n    }\n\n\n    /**\n     * Get the version dependent on {@link CourseTagTemplate.firstAppearance} or null if not found.\n     *\n     * @param template\n     */\n    static #getFirstAppearance({firstAppearance,}: CourseTagTemplate,): ObjectHolder<| Versions | null> {\n        return firstAppearance == null\n            ? ObjectHolders.NULL\n            : new DelayedObjectHolderContainer(() => Versions.getValue(`v${firstAppearance}`));\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    protected override _build(name: Name<string>,): CourseTag {\n        const template = this.template;\n\n        return new CourseTagContainer(\n            name,\n            template.isOfficial,\n            CourseTagBuilder.#getFirstAppearance(template),\n        );\n    }\n\n}\n","import resource from '../../resources/compiled/Course tag (SMM2).json';\n\nimport type {CourseTag}                                              from './CourseTag';\nimport type {CourseTagTemplate, PossibleFirstAppearanceInMarioMaker} from './CourseTag.template';\nimport type {Loader}                                                 from '../../util/loader/Loader';\nimport type {PossibleEnglishName}                                    from './CourseTags.types';\nimport type {PropertiesArray as LanguagesPropertyArray}              from '../../lang/Loader.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {CourseTagBuilder}        from './CourseTag.builder';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    isAnOfficialTag,\n    firstAppearanceInMarioMaker,\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype ExclusivePropertiesArray = [\n    isAnOfficialTag: boolean,\n    firstAppearanceInMarioMaker: PossibleFirstAppearanceInMarioMaker,\n];\n\ntype PropertiesArray = [\n    ...ExclusivePropertiesArray,\n    ...LanguagesPropertyArray,\n]\n\n//endregion -------------------- Properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link CourseTags}>\n */\nexport class CourseTagLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, CourseTag>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CourseTagLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, CourseTag>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, CourseTag> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, CourseTag>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, CourseTag, keyof typeof Headers>(resource, convertedContent => new CourseTagBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertToBoolean('isAnOfficialTag',)\n                .convertToEmptyableStringAnd(HeaderTypesForConvertor.everyPossibleName_version, 'firstAppearanceInMarioMaker',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set((finalContent.english ?? finalContent.americanEnglish) as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"course tag\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"course tag\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<CourseTagTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): CourseTagTemplate {\n        return {\n            name: this._createNameTemplate(),\n            isOfficial: this._getContent(this._headersIndexMap.isAnOfficialTag),\n            firstAppearance: this._getContent(this._headersIndexMap.firstAppearanceInMarioMaker),\n        };\n    }\n\n}\n","import resource from '../../resources/compiled/Predefined message (SMM2).json';\n\nimport type {Loader}                                                         from '../../util/loader/Loader';\nimport type {PredefinedMessage}                                              from './PredefinedMessage';\nimport type {PredefinedMessageTemplate}                                      from './PredefinedMessage.template';\nimport type {PossibleEnglishName}                                            from './PredefinedMessages.types';\nimport type {PropertiesArrayWithOptionalLanguages as LanguagesPropertyArray} from '../../lang/Loader.types';\n\nimport {AbstractTemplateBuilder}  from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}                from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor}  from '../_util/loader/HeaderTypesForConvertor';\nimport {PredefinedMessageBuilder} from './PredefinedMessage.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\n//region -------------------- Properties --------------------\n\ntype PropertiesArray = [\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- Exclusive properties --------------------\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link PredefinedMessages}>\n */\nexport class PredefinedMessageLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, PredefinedMessage>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: PredefinedMessageLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, PredefinedMessage>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, PredefinedMessage> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, PredefinedMessage>();\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, PredefinedMessage, keyof typeof Headers>(resource, convertedContent => new PredefinedMessageBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_predefinedMessage, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"Predefined message\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"Predefined message\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<PredefinedMessageTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap() {\n        return Headers;\n    }\n\n    public override build(): PredefinedMessageTemplate {\n        return {\n            name: this._createNameTemplate(),\n        };\n    }\n\n}","import type {Name}              from '../../lang/name/Name';\nimport type {PredefinedMessage} from './PredefinedMessage';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class PredefinedMessageContainer\n    extends ClassContainingAName<string>\n    implements PredefinedMessage {\n\n    public constructor(name: Name<string>,) {\n        super(name);\n    }\n\n}\n","import type {Builder}                   from '../../util/builder/Builder';\nimport type {PredefinedMessage}         from './PredefinedMessage';\nimport type {PredefinedMessageTemplate} from './PredefinedMessage.template';\nimport type {Name}                      from '../../lang/name/Name';\n\nimport {Games}                      from '../game/Games';\nimport {PredefinedMessageContainer} from './PredefinedMessage.container';\nimport {TemplateWithNameBuilder}    from '../_template/TemplateWithName.builder';\n\nexport class PredefinedMessageBuilder\n    extends TemplateWithNameBuilder<PredefinedMessageTemplate, PredefinedMessage> {\n\n\n    public constructor(templateBuilder_or_template: Builder<PredefinedMessageTemplate>,) {\n        super(templateBuilder_or_template, Games.SUPER_MARIO_MAKER_2, true,);\n    }\n\n    protected /*static*/ override get _static() {\n        return PredefinedMessageBuilder;\n    }\n\n\n    protected override _build(name: Name<string>,): PredefinedMessage {\n        return new PredefinedMessageContainer(name);\n    }\n\n}\n","import resource from '../../resources/compiled/Instrument.json';\n\nimport type {Instrument}                                from './Instrument';\nimport type {InstrumentTemplate}                        from './Instrument.template';\nimport type {Loader}                                    from '../../util/loader/Loader';\nimport type {PossibleEnglishName}                       from './Instruments.types';\nimport type {PropertiesArray as LanguagesPropertyArray} from '../../lang/Loader.types';\n\nimport {AbstractTemplateBuilder} from '../_template/AbstractTemplate.builder';\nimport {CSVLoader}               from '../../util/loader/CSVLoader';\nimport {HeaderTypesForConvertor} from '../_util/loader/HeaderTypesForConvertor';\nimport {InstrumentBuilder}       from './Instrument.builder';\n\n//region -------------------- CSV array related types --------------------\n\nenum Headers {\n\n    //region -------------------- Languages --------------------\n\n    english, americanEnglish, europeanEnglish,\n    french, canadianFrench, europeanFrench,\n    german,\n    spanish, americanSpanish, europeanSpanish,\n    italian,\n    dutch,\n    portuguese, americanPortuguese, europeanPortuguese,\n    russian,\n    japanese,\n    chinese, traditionalChinese, simplifiedChinese,\n    korean,\n\n    //endregion -------------------- Languages --------------------\n\n}\n\ntype PropertiesArray = [\n    ...LanguagesPropertyArray,\n];\n\n//endregion -------------------- CSV array related types --------------------\n\n/**\n * @singleton\n * @recursiveReference<{@link Instruments}>\n */\nexport class InstrumentLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, Instrument>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: InstrumentLoader;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, Instrument>;\n\n    public load(): ReadonlyMap<PossibleEnglishName, Instrument> {\n        if (this.#map == null) {\n            const references = new Map<PossibleEnglishName, Instrument>();\n\n\n            //region -------------------- CSV Loader --------------------\n\n            new CSVLoader<PropertiesArray, Instrument, keyof typeof Headers>(resource, convertedContent => new InstrumentBuilder(new TemplateBuilder(convertedContent)).build())\n                .setDefaultConversion('emptyable string')\n\n                .convertTo(HeaderTypesForConvertor.everyPossibleName_instrument, 'english',)\n\n                .onAfterFinalObjectCreated(finalContent => references.set(finalContent.english as PossibleEnglishName, finalContent,))\n                .load();\n\n            //endregion -------------------- CSV Loader --------------------\n\n            console.log('-------------------- \"instrument\" has been loaded --------------------');// temporary console.log\n            console.log(references);// temporary console.log\n            console.log('-------------------- \"instrument\" has been loaded --------------------');// temporary console.log\n\n            this.#map = references;\n        }\n        return this.#map;\n    }\n\n}\n\nclass TemplateBuilder\n    extends AbstractTemplateBuilder<InstrumentTemplate, PropertiesArray, typeof Headers> {\n\n    public constructor(content: PropertiesArray,) {\n        super(content);\n    }\n\n    protected override get _headersIndexMap(): typeof Headers {\n        return Headers;\n    }\n\n    public override build(): InstrumentTemplate {\n        return {\n            name: this._createNameTemplate(),\n        };\n    }\n\n}\n","import type {Entity}                                    from '../entity/Entity';\nimport type {Instrument}                                from './Instrument';\nimport type {ObjectHolder, PossibleValueOnObjectHolder} from '../../util/holder/ObjectHolder';\nimport type {Name}                                      from '../../lang/name/Name';\n\nimport {ClassContainingAName} from '../../lang/name/ClassContainingAName';\n\nexport class InstrumentContainer\n    extends ClassContainingAName<string>\n    implements Instrument {\n\n    //region -------------------- Fields --------------------\n\n    readonly #entitiesHolder;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(name: PossibleValueOnObjectHolder<Name<string>>, entities: ObjectHolder<readonly Entity[]>,) {\n        super(name,);\n        this.#entitiesHolder = entities;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get entities(): readonly Entity[] {\n        return this.#entitiesHolder.get;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {Builder}            from '../../util/builder/Builder';\nimport type {Entity}             from '../entity/Entity';\nimport type {Instrument}         from './Instrument';\nimport type {InstrumentTemplate} from './Instrument.template';\nimport type {Name}               from '../../lang/name/Name';\nimport type {ObjectHolder}       from '../../util/holder/ObjectHolder';\n\nimport {InstrumentContainer}     from './Instrument.container';\nimport {ObjectHolders}           from '../../util/holder/objectHolders';\nimport {TemplateWithNameBuilder} from '../_template/TemplateWithName.builder';\n\nexport class InstrumentBuilder\n    extends TemplateWithNameBuilder<InstrumentTemplate, Instrument> {\n\n    public constructor(templateBuilder_or_template: Builder<InstrumentTemplate> | InstrumentTemplate,) {\n        super(templateBuilder_or_template, 'all', false,);\n    }\n\n    //region -------------------- Build helper methods --------------------\n\n    protected /*static*/ override get _static() {\n        return InstrumentBuilder;\n    }\n\n\n    static #getEntitiesReference(template: InstrumentTemplate,): ObjectHolder<readonly Entity[]> {\n        //TODO add other entity references by the instrument\n        return ObjectHolders.EMPTY_ARRAY;\n    }\n\n    //endregion -------------------- Build helper methods --------------------\n\n    protected _build(name: Name<string>,): Instrument {\n        return new InstrumentContainer(\n            name,\n            InstrumentBuilder.#getEntitiesReference(this.template),\n        );\n    }\n\n}"],"sourceRoot":""}