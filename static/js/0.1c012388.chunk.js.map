{"version":3,"sources":["app/withInterpreter/ViewDisplays.tsx","bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx","app/withInterpreter/ListDimension.creator.ts","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx"],"names":["Symbol","iterator","ViewDisplays","type","htmlType","this","currentValue","key","callbackOnClick","className","disabled","name","onClick","value","Enum","getValueOn","getValuesOn","values","TABLE","app","assert","createTable","SIMPLE_LIST","createList","CARD_LIST","createCardList","PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","getOrCreateInstance","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","addEventListener","event","children","EMPTY_REACT_ELEMENT","option","triggers","elementId","useEffect","flat","forEach","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","currentLanguage","get","state","listId","setDoesDisplayPopover","popoverOrientation","setState","ContentTranslationComponent","translation","createOption","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","toNameMap","entries","includes","map","languageKey","englishName","LanguageTranslationComponent","style","unionTrait","NameComponent","useState","english","StringContainer","getInHtml","ListDimensionCreator","dimension","ObjectHolderContainer","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","DEFAULT_DIMENSION","default","defaultDefault","sm","md","lg","xl","xxl","AbstractAppWithInterpreter","typeDisplayed","_createPossibleViewDisplay","_createKey","_createAppOptionInterpreter","_key","_createTitleContent","_createAsideContent","_createDescription","createComponent","AbstractApp","__possibleViewDisplay","viewDisplay","createButton","nextValue","AbstractSimpleListApp","enumerable","optionInterpreter","_appOptionInterpreter","dimensions","createListDimension","iterable","uniqueEnglishName","_createUniqueNameOnSimpleList","reference","nameContainer","englishNameInHtml","push","createDimensions"],"mappings":"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","file":"static/js/0.1c012388.chunk.js","sourcesContent":["import type {AbstractAppWithInterpreter}                                                                                                                                                            from './AbstractAppWithInterpreter';\nimport type {AbstractCardListApp}                                                                                                                                                                   from './AbstractCardListApp';\nimport type {AbstractSimpleListApp}                                                                                                                                                                 from './AbstractSimpleListApp';\nimport type {AbstractTableApp}                                                                                                                                                                      from './AbstractTableApp';\nimport type {StaticReference}                                                                                                                                                                       from '../../util/enum/Enum.types';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, HTMLType, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue, Type} from './ViewDisplays.types';\nimport type {ReactElement}                                                                                                                                                                          from '../../util/react/ReactProperties';\n\nimport {Enum}   from '../../util/enum/Enum';\nimport {assert} from '../../util/utilitiesMethods';\n\nexport abstract class ViewDisplays\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly TABLE =       new class ViewDisplays_Table extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createTable' in app, 'The application does not handle a table creation.',);\n            return app.createTable();\n        }\n\n    }('table', 'table',);\n    public static readonly SIMPLE_LIST = new class ViewDisplays_SimpleList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createList' in app, 'The application does not handle a \"simple list\" creation.',);\n            return app.createList();\n        }\n\n    }('simple-list', 'list',);\n    public static readonly CARD_LIST =   new class ViewDisplays_CardList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createCardList' in app, 'The application does not handle a \"card list\" creation.',);\n            return app.createCardList();\n        }\n\n    }('card-list', 'card-list',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ViewDisplays;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type;\n    readonly #htmlType;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: Type, htmlType: HTMLType,) {\n        super();\n        this.#type = type;\n        this.#htmlType = htmlType;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): Type {\n        return this.#type;\n    }\n\n    public get htmlType(): HTMLType {\n        return this.#htmlType;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract createComponent(app: PossibleApp,): ReactElement;\n\n    /**\n     * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n     *\n     * @param currentValue the current value selected in the \"button group\"\n     * @param key the react key\n     * @param callbackOnClick the callback to call when clicking the button (to change the view)\n     */\n    public createButton(currentValue: ViewDisplays, key: string, callbackOnClick: (nextValue: ViewDisplays,) => void,): ReactElement {\n        return this === currentValue\n            ? <button key={`${key} (${this.name})`} className={`btn btn-success bi-${this.htmlType} btn-viewDisplay`} disabled/>\n            : <button key={`${key} (${this.name})`} className={`btn btn-dark bi-${this.htmlType} btn-viewDisplay`} onClick={() => callbackOnClick(this)}/>;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ViewDisplays> {\n        return ViewDisplays;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends ViewDisplays = ViewDisplays, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): ViewDisplays\n    public static getValue(value: PossibleValue,): | ViewDisplays | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleApp = | AbstractAppWithInterpreter<any> | AbstractSimpleListApp<any> | AbstractCardListApp<any> | AbstractTableApp<any>;\n","import {Popover} from 'bootstrap';\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from './Popover.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Popover.Event.SHOW as Popover.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Popover.Event.SHOWN as Popover.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Popover.Event.HIDE as Popover.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Popover.Event.HIDDEN as Popover.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Popover.Event.INSERTED as Popover.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,);\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element);\n    }\n\n}\n","import {useEffect}         from 'react';\n\nimport type {PopoverConfiguration}                              from './Popover.types';\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from '../../util/react/ReactProperties';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {PopoverInstance}     from './PopoverInstance';\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)));\n    return children;\n}\n","import Popover from './Popover';\n\nimport type {SpanPopoverConfiguration}                          from './Popover.types';\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from '../../util/react/ReactProperties';\n\nimport TextComponent from '../../app/tools/text/TextComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>;\n}\n","import {Popover}                                       from 'bootstrap';\nimport {Component, type Dispatch, type SetStateAction} from 'react';\n\nimport type {Name}                                                                         from '../Name';\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from './Name.properties';\nimport type {ReactComponent} from '../../../util/react/ReactComponent';\nimport type {ReactElement}   from '../../../util/react/ReactProperties';\n\nimport ContentTranslationComponent from '../../components/ContentTranslationComponent';\nimport {ProjectLanguages}          from '../../ProjectLanguages';\nimport TextComponent               from '../../../app/tools/text/TextComponent';\nimport TextPopover                 from '../../../bootstrap/popover/TextPopover';\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent;\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,);\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name);\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        };\n    }\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get listId(): string {\n        return this.props.listId;\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover;\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties;\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name;\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation;\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id;\n        const setDoesDisplayPopover = this.setDoesDisplayPopover;\n\n        this.setState({\n            element: <ContentTranslationComponent key={`${id} - span popover (translation)`}>{translation =>\n                <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, translation('In other languages'),)}\n                             {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                    {this.#currentLanguageTextContent}\n                </TextPopover>\n            }</ContentTranslationComponent>,\n        });\n    }\n\n    public override render(): ReactElement {\n        return this.state.element;\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    };\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation;\n\n    return option;\n}\n","import type {NameListProperties} from './Name.properties';\n\nimport LanguageTranslationComponent from '../../components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../../ProjectLanguages';\nimport TextComponent                from '../../../app/tools/text/TextComponent';\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage);\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`;\n\n                return <LanguageTranslationComponent key={`${id} - language translation component (${languageKey})`}>{translation =>\n                    <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${translation(language.englishName)} ${language.unionTrait} '`,})}>\n                        <TextComponent key={`${id} - text component (${languageKey})`} content={value}/>\n                    </li>\n                }</LanguageTranslationComponent>;\n            })\n    }</ul>;\n}\n","import './Name.component.scss';\n\nimport {useState} from 'react';\n\nimport type {NameProperties} from './Name.properties';\n\nimport {StringContainer}    from '../../../util/StringContainer';\nimport NamePopoverComponent from './NamePopover.component';\nimport NameListComponent    from './NameList.component';\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false);\n    const {name,} = otherProperties;\n\n    const englishName = name.english;\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`;\n    const listId = `${elementId}-list`;\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>;\n}\n","import type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from './ListDimension.creator.types';\nimport type {ObjectHolder}                                                                                                                                                                                              from '../../util/holder/ObjectHolder';\n\nimport {ObjectHolderContainer} from '../../util/holder/ObjectHolder.container';\nimport {DimensionOnList}       from '../interpreter/DimensionOnList';\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    };\n\n    readonly #dimension;\n    #smallHolder: ObjectHolder<| SMALL | DefaultSmallDimension>;\n    #mediumHolder: ObjectHolder<| MEDIUM | DefaultMediumDimension>;\n    #largeHolder: ObjectHolder<| LARGE | DefaultLargeDimension>;\n    #extraLargeHolder: ObjectHolder<| EXTRA_LARGE | DefaultExtraLargeDimension>;\n    #extraExtraLargeHolder: ObjectHolder<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(dimension: | Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> | null,) {\n        this.#dimension = dimension;\n        this.#smallHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.small;\n            return value === undefined ? this.defaultSmall : value;\n        });\n        this.#mediumHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.medium;\n            return value === undefined ? ListDimensionCreator.defaultMedium : value;\n        });\n        this.#largeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.large;\n            return value === undefined ? this.defaultLarge : value;\n        });\n        this.#extraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraLarge;\n            return value === undefined ? this.defaultExtraLarge : value;\n        });\n        this.#extraExtraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge;\n            return value === undefined ? this.defaultExtraExtraLarge : value;\n        });\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): | Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>> | null {\n        return this.#dimension;\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>);\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default;\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default;\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault;\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.get;\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small;\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall;\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.get;\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium;\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium;\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.get;\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large;\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge;\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.get;\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge;\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge;\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.get;\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge;\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge;\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge;\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './AbstractAppWithInterpreter.scss';\n\nimport type {AppInterpreter}                     from '../interpreter/AppInterpreter';\nimport type {AppWithVariableDisplayStates}       from '../AppStates.types';\nimport type {ReactElement, ReactElementOrString} from '../../util/react/ReactProperties';\n\nimport AbstractApp    from '../AbstractApp';\nimport {ViewDisplays} from './ViewDisplays';\nimport {assert}       from '../../util/utilitiesMethods';\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewDisplays[];\n    #key?: string;\n    #appInterpreter?: APP;\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    /**\n     * Get the {@link ViewDisplays view display} state held by this instance.\n     */\n    public get typeDisplayed(): ViewDisplays {\n        assert(this.state != null, 'The state has not been initialised in the constructor.',);\n        assert(this.state.typeDisplayed != null, 'The state \"type displayed\" has not been initialised in the constructor.',);\n        return this.state.typeDisplayed;\n    }\n\n    /**\n     * Set the state {@link ViewDisplays view display} to the value received in this instance.\n     *\n     * @param value the new {@link ViewDisplays view display} state\n     */\n    public set typeDisplayed(value: ViewDisplays,) {\n        this.setState({typeDisplayed: value,});\n    }\n\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewDisplays[];\n\n    private get __possibleViewDisplay(): readonly ViewDisplays[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay();\n    }\n\n\n    protected abstract _createKey(): string;\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}.\n     * It is also used for the {@link Table} id.\n     *\n     * @see #createViewDisplayGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey();\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP;\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter();\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #createViewDisplayGroup(typeDisplayed: ViewDisplays, key: string,): ReactElement {\n        return <div key={`${key} (button group)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">\n            {this.__possibleViewDisplay.map(viewDisplay =>\n                viewDisplay.createButton(typeDisplayed, key, nextValue => this.typeDisplayed = nextValue,))}\n        </div>;\n    }\n\n    protected abstract _createTitleContent(): ReactElementOrString;\n\n    protected _createAsideContent(): | ReactElementOrString | null {\n        return null;\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <>--description--{/*TODO add description*/}</>;\n    }\n\n    protected override _mainContent(): ReactElement {\n        const typeDisplayed = this.typeDisplayed;\n        const key = this._key;\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${typeDisplayed.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    {this.#createViewDisplayGroup(typeDisplayed, key,)}\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${typeDisplayed.type})`} className=\"app-content\">{typeDisplayed.createComponent(this,)}</div>\n            </div>\n        </div>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppProperties}                from '../AppProperties.types';\nimport type {AppInterpreterWithSimpleList} from '../interpreter/AppInterpreterWithSimpleList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperties';\n\nimport {AbstractAppWithInterpreter} from './AbstractAppWithInterpreter';\nimport NameComponent                from '../../lang/name/component/Name.component';\nimport {ViewDisplays}               from './ViewDisplays';\nimport {ListDimensionCreator}       from './ListDimension.creator';\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractSimpleListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    protected _createUniqueNameOnSimpleList(enumerable: ReturnType<APP['iterable']['next']>['value'],): string {\n        //TODO find a better way to use the enumerable type than the complicated name\n        return enumerable.englishName;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            dimensions = optionInterpreter.createListDimension();\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable);\n            const name = enumerable.reference.nameContainer;\n            const id = `${key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main list container`} id={id}\n                     className={`${key}-container listElement-container ${new ListDimensionCreator(dimensions).createDimensions()}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"sourceRoot":""}