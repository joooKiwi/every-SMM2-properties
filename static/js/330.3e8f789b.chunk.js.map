{"version":3,"file":"static/js/330.3e8f789b.chunk.js","mappings":"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","sources":["core/entity/properties/instrument/InstrumentProperty.component.tsx","core/entityLimit/Limit.component.tsx","core/entityLimit/PlayLimit.component.tsx","core/entityLimit/SMM1And3DSEditorLimit.component.tsx","core/entityLimit/SMM2EditorLimit.component.tsx","core/theme/CourseTheme.component.tsx","app/options/EntityAppOption.tsx","app/EntityApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import './InstrumentProperty.scss'\n\nimport type {Entities}        from 'core/entity/Entities'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface InstrumentPropertyProperties\n    extends ReactProperties {\n\n    value: Entities\n\n}\n\n/**\n * @todo add on click event to play the music block sound (randomly if more than one)\n * @reactComponent\n */\nexport default function InstrumentPropertyComponent({value: {englishNameInHtml, reference: {canMakeASoundOutOfAMusicBlock: value, canMakeASoundOutOfAMusicBlockComment: comment,},},}: InstrumentPropertyProperties,) {\n    if (value !== true)\n        return null\n    const id = `${englishNameInHtml}-instrumentProperty`\n\n    if (comment == null)\n        return <i id={id} className=\"music-block\"/>\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} elementId={id}>\n        <i id={id} className=\"music-block-with-comment\"/>\n    </Tooltip>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {EntityLimits}     from 'core/entityLimit/EntityLimits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'play'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    readonly id: Id\n\n    readonly limits: | EntityLimits | ReadonlyMap<EntityLimits, boolean>\n\n    readonly displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof EntityLimits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly EntityLimits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.current.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, entityLimit: EntityLimits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = entityLimit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, entityLimit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(entityLimit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: entityLimit.reference.nameContainer.languageValue,}} elementId={acronymId}>\n            <TextComponent key={`${entityLimit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, entityLimit,)\n}\n\nfunction createSingleNameComponent(id: Id, entityLimit: EntityLimits,) {\n    return <NameComponent key={`${entityLimit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={entityLimit.reference}/>\n}","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport LimitComponent from 'core/entityLimit/Limit.component'\n\nexport default function PlayLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    return <LimitComponent id={`play-${reference.englishNameInHtml}`} limits={reference.reference.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/entityLimit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM1And3DSEditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const editorLimit = reference.reference.editorLimit_smm1And3ds\n\n    return editorLimit == null\n        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} content={NOT_APPLICABLE}/>\n        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/entityLimit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM2EditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const entity = reference.reference,\n        editorLimit = entity.editorLimit_smm2\n\n    return editorLimit == null || editorLimit === NOT_APPLICABLE\n        ? <TextComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} content={editorLimit} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n        : <LimitComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {ThemeProperty} from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport {ThemeComponent}          from 'core/theme/Theme.component'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class CourseThemeComponent\n    extends ThemeComponent<ThemeProperty> {\n\n\n    protected override get _map() {\n        return this.reference.toCourseThemeMap()\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInGroundTheme\n            && this.reference.isInUndergroundTheme\n            && this.reference.isInUnderwaterTheme\n            && (this.reference.isInDesertTheme ?? false)\n            && (this.reference.isInSnowTheme ?? false)\n            && (this.reference.isInSkyTheme ?? false)\n            && (this.reference.isInForestTheme ?? false)\n            && this.reference.isInGhostHouseTheme\n            && this.reference.isInAirshipTheme\n            && this.reference.isInCastleTheme\n    }\n\n    protected override _renderSingleComponent(theme: Themes,) {\n        return CourseThemeComponent.renderSingleComponent(theme, true, this.name.english,)\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage:<Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme => this._renderSingleComponent(courseTheme))}</div>\n    }\n\n}\n","import type {CollectionHolder, CollectionIterator}              from '@joookiwi/collection'\nimport type {CompanionEnumSingleton, PossibleEnumerableValueBy} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}                                    from '@joookiwi/enumerable'\nimport {Fragment}                                               from 'react'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/EntityAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {Entities}            from 'core/entity/Entities'\n\nimport {CommonOptions}                from 'app/options/CommonOptions'\nimport Image                          from 'app/tools/images/Image'\nimport {gameContentTranslation}       from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent      from 'core/editorVoice/EditorVoiceSound.component'\nimport InstrumentPropertyComponent    from 'core/entity/properties/instrument/InstrumentProperty.component'\nimport {EntityCategories}             from 'core/entityCategory/EntityCategories'\nimport PlayLimitComponent             from 'core/entityLimit/PlayLimit.component'\nimport SMM1And3DSEditorLimitComponent from 'core/entityLimit/SMM1And3DSEditorLimit.component'\nimport SMM2EditorLimitComponent       from 'core/entityLimit/SMM2EditorLimit.component'\nimport GameComponent                  from 'core/game/Game.component'\nimport {GameStyles}                   from 'core/gameStyle/GameStyles'\nimport GameStyleComponent             from 'core/gameStyle/GameStyle.component'\nimport CourseThemeComponent           from 'core/theme/CourseTheme.component'\nimport {Themes}                       from 'core/theme/Themes'\nimport {Times}                        from 'core/time/Times'\nimport TimeComponent                  from 'core/time/Time.component'\n\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Entities> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE_IN_SMB = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb`, element: GameStyles.SUPER_MARIO_BROS.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SMB3 = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS_3,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb3`, element: GameStyles.SUPER_MARIO_BROS_3.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SMW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smw`, element: GameStyles.SUPER_MARIO_WORLD.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_NSMBU = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.NEW_SUPER_MARIO_BROS_U,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-nsmbu`, element: GameStyles.NEW_SUPER_MARIO_BROS_U.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SM3DW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_3D_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-sm3dw`, element: GameStyles.SUPER_MARIO_3D_WORLD.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <div className=\"nameAndEditorVoiceSound-container container\">\n                {CommonOptions.get.getNameContent(enumeration)}\n                <div className=\"properties\">\n                    <InstrumentPropertyComponent value={enumeration}/>\n                </div>\n                <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameStyleComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <CourseThemeComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <TimeComponent reference={reference} name={reference} displayAllAsText={false}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'time', element: gameContentTranslation('time.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            const categoryName = enumeration.reference.categoryNameContainer\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imageFile,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS = new class EntityLimitOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm1And3dsHeader\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY = new class EntityLimitOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM2 = new class EntityLimitOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm2Header\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM2_ONLY = new class EntityLimitOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }()\n    public static readonly PLAY_LIMIT = new class EntityLimitOption_PlayLimit extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <PlayLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completePlayLimitHeader\n        }\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<EntityAppOption, typeof EntityAppOption> = class CompanionEnum_EntityAppOption\n        extends CompanionEnum<EntityAppOption, typeof EntityAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityAppOption\n\n        private constructor() {\n            super(EntityAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(enumeration: Entities,): ReactElement {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a content option`,)\n    }\n\n    public renderContent(enumeration: Entities,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a table header option`,)\n    }\n\n    public renderTableHeader(): NullOr<SingleHeaderContent> {\n        const content = this._createTableHeaderOption()\n        if (content == null)\n            return null\n        return content\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    public static getValue(value: PossibleEnumerableValueBy<EntityAppOption>,): EntityAppOption {\n        return EntityAppOption.CompanionEnum.get.getValue(value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return EntityAppOption.CompanionEnum.get.values\n    }\n\n    public static [Symbol.iterator](): CollectionIterator<EntityAppOption> {\n        return EntityAppOption.CompanionEnum.get[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {EntityProperties}                                     from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}                              from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {OtherWordInTheGames}     from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {unfinishedText}          from 'app/tools/text/UnfinishedText'\nimport {filterGame}              from 'util/utilitiesMethods'\n\n//region -------------------- Deconstruction imports --------------------\n\nconst {ENTITY,} = OtherWordInTheGames\n\n//endregion -------------------- Deconstruction imports --------------------\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, EntityProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase(),\n            pluralEntityName = ENTITY.pluralNameOnReferenceOrNull ?? unfinishedText(ENTITY.pluralEnglishName), pluralEntityLowerCaseName = ENTITY.pluralLowerCaseNameOnReferenceOrNull ?? pluralEntityName.toLowerCase()\n\n        return gameContentTranslation('entity.all', {\n            Entity: singularEntityName,\n            Entities: pluralEntityName,\n            entity: singularEntityLowerCaseName,\n            entities: pluralEntityLowerCaseName,\n        },)\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class EntityAppInterpreter implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get content() {\n                return filterGame(Entities.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public readonly tableHeadersColor = 'secondary' satisfies BootstrapThemeColor\n\n            public get tableCaption() {\n                const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase()\n                return gameContentTranslation('entity.all', {\n                    Entity: singularEntityName,\n                    entity: singularEntityLowerCaseName,\n                },) satisfies ReactElementOrString\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                const games = $this.props.games,\n                    hasSMM1Or3DSGames = games.hasSMM1Or3DS,\n                    hasSMM2Games = games.hasSMM2\n\n                const options: EntityAppOption[] = [\n                    EntityAppOption.IMAGE_IN_SMB,\n                    EntityAppOption.IMAGE_IN_SMB3,\n                    EntityAppOption.IMAGE_IN_SMW,\n                    EntityAppOption.IMAGE_IN_NSMBU,\n                ]\n                if (hasSMM2Games)\n                    options.push(EntityAppOption.IMAGE_IN_SM3DW,)\n                options.push(\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                )\n                if (hasSMM1Or3DSGames && hasSMM2Games)\n                    options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS, EntityAppOption.EDITOR_LIMIT_IN_SMM2,)\n                else {\n                    if (hasSMM1Or3DSGames)\n                        options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY,)\n                    if (hasSMM2Games)\n                        options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM2_ONLY,)\n                }\n                options.push(EntityAppOption.PLAY_LIMIT,)\n                return options\n            }\n\n\n            public createNewTableContent(content: Entities, option: EntityAppOption,) {\n                return option.renderContent(content,)\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader()\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSound>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["InstrumentPropertyComponent","_ref","_ref$value","value","englishNameInHtml","_ref$value$reference","reference","canMakeASoundOutOfAMusicBlock","comment","canMakeASoundOutOfAMusicBlockComment","id","concat","_jsx","className","Tooltip","option","title","gameContentTranslation","elementId","children","LimitComponent","limits","displayAcronymIfApplicable","EntityLimits","createSingleComponent","selectedLimits","_toConsumableArray","filter","_ref2","_slicedToArray","map","_ref4","length","_Fragment","limit","index","_jsxs","Fragment","createReturnOfLine","englishName","ProjectLanguages","current","comma","entityLimit","acronym","createSingleNameComponent","acronymId","StringContainer","getInHtml","nameContainer","languageValue","TextComponent","content","NameComponent","name","PlayLimitComponent","toLimitWhilePlayingMap","SMM1And3DSEditorLimitComponent","editorLimit","editorLimit_smm1And3ds","NOT_APPLICABLE","SMM2EditorLimitComponent","entity","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","CourseThemeComponent","_ThemeComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","toCourseThemeMap","_this$reference$isInD","_this$reference$isInS","_this$reference$isInS2","_this$reference$isInF","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","theme","renderSingleComponent","english","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","_this","Themes","courseThemes","courseTheme","_renderSingleComponent","ThemeComponent","_gameStyles","_classPrivateFieldLooseKey","_gameStyles_unusedImages","_times","_themes","_Symbol$iterator","Symbol","iterator","EntityAppOption","call","enumeration","ReferenceError","_createContentOption","_createTableHeaderOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","GameStyles","values","toArray","_classPrivateFieldLoo3","_classPrivateFieldLoo4","SUPER_MARIO_BROS","_classPrivateFieldLoo5","_classPrivateFieldLoo6","Times","_classPrivateFieldLoo7","_classPrivateFieldLoo8","CompanionEnum","getValue","Enum","IMAGE_IN_SMB","_EntityAppOption","EntityAppOption_Images","_super2","imageFiles","uniqueImage","size","images","Array","element","IMAGE_IN_SMB3","_EntityAppOption2","_super3","_ref3","SUPER_MARIO_BROS_3","IMAGE_IN_SMW","_EntityAppOption3","_super4","SUPER_MARIO_WORLD","IMAGE_IN_NSMBU","_EntityAppOption4","_super5","_ref5","NEW_SUPER_MARIO_BROS_U","IMAGE_IN_SM3DW","_EntityAppOption5","_super6","_ref6","SUPER_MARIO_3D_WORLD","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","_EntityAppOption6","EntityAppOption_Name","_super7","CommonOptions","getNameContent","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","nameHeader","GAME","_EntityAppOption7","EntityAppOption_Game","_super8","_ref7","GameComponent","displayAllAsText","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","_EntityAppOption8","EntityAppOption_GameStyle","_super9","_ref8","GameStyleComponent","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","_EntityAppOption9","EntityAppOption_CourseTheme","_super10","_ref9","WHEN_ALL_SELECTED_COURSE_THEME","TIME","_EntityAppOption10","EntityAppOption_Time","_super11","_ref10","TimeComponent","WHEN_ALL_SELECTED_TIME","CATEGORY","_EntityAppOption11","EntityAppOption_Category","_super12","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValueByName","imageFile","categoryHeader","CATEGORY_AS_TEXT","EDITOR_LIMIT_IN_SMM1_AND_3DS","_EntityAppOption12","EntityLimitOption_LimitInSMM1And3DS","_super13","completeEditorLimitInSmm1And3dsHeader","EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY","_EntityAppOption13","_super14","completeEditorLimitHeader","EDITOR_LIMIT_IN_SMM2","_EntityAppOption14","EntityLimitOption_LimitInSMM2","_super15","completeEditorLimitInSmm2Header","EDITOR_LIMIT_IN_SMM2_ONLY","_EntityAppOption15","_super16","PLAY_LIMIT","_EntityAppOption16","EntityLimitOption_PlayLimit","_super17","completePlayLimitHeader","_instance","_class","_CompanionEnum","CompanionEnum_EntityAppOption","_super18","_classPrivateFieldLoo9","_classPrivateFieldLoo10","Object","defineProperty","writable","ENTITY","OtherWordInTheGames","EntityApp","_AbstractTableApp","_ENTITY$singularNameO","_ENTITY$singularLower","_ENTITY$pluralNameOnR","_ENTITY$pluralLowerCa","singularEntityName","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","singularEntityLowerCaseName","singularLowerCaseNameOnReferenceOrNull","toLowerCase","pluralEntityName","pluralNameOnReferenceOrNull","pluralEnglishName","pluralEntityLowerCaseName","pluralLowerCaseNameOnReferenceOrNull","Entity","Entities","entities","$this","EntityAppInterpreter","tableHeadersColor","filterGame","props","games","small","medium","large","extraLarge","category","categoryEnglish","_ENTITY$singularNameO2","_ENTITY$singularLower2","hasSMM1Or3DSGames","hasSMM1Or3DS","hasSMM2Games","hasSMM2","options","push","renderContent","renderTableHeader","AbstractTableApp","regularFile","regularSound","europeanFile","europeanSound","SimpleSoundComponent"],"sourceRoot":""}