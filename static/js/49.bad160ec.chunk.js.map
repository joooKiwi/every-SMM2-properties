{"version":3,"file":"static/js/49.bad160ec.chunk.js","mappings":"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","sources":["app/GameReferenceApp.tsx","bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './GameReferenceApp.scss'\n\nimport {Fragment} from 'react'\n\nimport type {PossibleEnglishName_Games} from 'core/soundEffect/SoundEffects.types'\nimport type {GameContentTranslationKey} from 'lang/components/TranslationProperty'\nimport type {ReactElement}              from 'util/react/ReactProperties'\n\nimport AbstractApp              from 'app/AbstractApp'\nimport {Games}                  from 'core/game/Games'\nimport {GameReferences}         from 'core/gameReference/GameReferences'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\n/**\n * @reactComponent\n */\nexport default class GameReferenceApp\n    extends AbstractApp {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * Every {@link GameReferences} that will do a return of line after its rendering.\n     */\n    public static RETURN_OF_LINES = [GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n        GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n        GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n        GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n        GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n        GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n        GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n        GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n        GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n        GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n        GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n        GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n        GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n        GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n        GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n    ] as const\n\n    static #otherGameReferences?: readonly GameReferences[]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & initialisation methods --------------------\n\n    private static get __otherGameReferences(): readonly GameReferences[] {\n        if (this.#otherGameReferences == null) {\n            const alreadyIncludedNames = [\n                ...Games.values.map(game => game.englishName),\n                ...GameStyles.values.map(game => game.englishName),\n                ...SoundEffects.soundEffect_games.map(game => game.englishName) as PossibleEnglishName_Games[],\n            ]\n            this.#otherGameReferences = GameReferences.values.filter(it => !alreadyIncludedNames.includes(it.englishName as never)).toArray()\n        }\n        return this.#otherGameReferences\n    }\n\n    //endregion -------------------- Getter & initialisation methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly (| Games | GameStyles | SoundEffects)[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly GameReferences[], returnOfLine: readonly GameReferences[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly PossibleGameReference[], returnOfLine?: readonly GameReferences[],) {\n        return <div key={`names container - ${groupId}`} id={`${groupId}-names-container`} className=\"names-container\">\n            <h2 key={`names title - ${groupId}`} id={`${groupId}-names-title`} className=\"col-12 names-title\">{gameContentTranslation(title)}</h2>\n            <div key={`name (container) - ${groupId}`} id={`${groupId}-name-container`} className=\"container-fluid name-container\">{\n                enumReferences.map(gameReference => [gameReference, GameReferences.getValueByNameOrAcronym(gameReference.englishName),] as const).map(([enumReference, gameReference,]) =>\n                    <Fragment key={`single name container - ${gameReference.englishName}`}>\n                        <div id={`${gameReference.englishNameInHtml}-name-container`} className={`${enumReferences.length > 5 ? 'col-3' : 'col'} single-name-container`}>\n                            <div className=\"single-name-sub-container\">\n                                {enumReference.renderSingleComponent}\n                                <NameComponent id={`${groupId}-name`} name={gameReference.reference}/>\n                            </div>\n                        </div>\n                        {returnOfLine?.includes(gameReference) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : null}\n                    </Fragment>)\n            }</div>\n        </div>\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    protected override _mainContent() {\n        return <div id=\"gameReference-container\" className=\"container-fluid main-container\">\n            <h2 id=\"main-names-title\" className=\"col-12 names-title\">{gameContentTranslation('game reference.plural')}</h2>\n            {this._getContainer('game', 'game.plural', Games.values.toArray(),)}\n            {this._getContainer('gameStyle', 'game style.plural', GameStyles.values.toArray(),)}\n            {this._getContainer('soundEffect', 'sound effect.plural', SoundEffects.soundEffect_games,)}\n            {this._getContainer('otherGameReferences', 'game reference.others', GameReferenceApp.__otherGameReferences, GameReferenceApp.RETURN_OF_LINES,)}\n        </div>\n    }\n\n}\n\ntype PossibleGameReference = (Games | GameStyles | SoundEffects | GameReferences) & { renderSingleComponent?: ReactElement }\n","import {Popover} from 'bootstrap'\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from 'bootstrap/popover/Popover.types'\n\nimport {BootstrapInstance}                from 'bootstrap/BootstapInstance'\nimport {BootstrapWithBasicEventsInstance} from 'bootstrap/BootstrapWithBasicEventsInstance'\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {}\n    /** @see Popover.Events.show */\n    public static readonly SHOW_EVENT = `show${Popover.EVENT_KEY}` as Popover.Events.show\n    /** @see Popover.Events.shown */\n    public static readonly SHOWN_EVENT = `shown${Popover.EVENT_KEY}` as Popover.Events.shown\n    /** @see Popover.Events.hide */\n    public static readonly HIDE_EVENT = `hide${Popover.EVENT_KEY}` as Popover.Events.hide\n    /** @see Popover.Events.hidden */\n    public static readonly HIDDEN_EVENT = `hidden${Popover.EVENT_KEY}` as Popover.Events.hidden\n    /** @see Popover.Events.inserted */\n    public static readonly INSERTED_EVENT = `inserted${Popover.EVENT_KEY}` as Popover.Events.inserted\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,)\n        this.on(callbacks)\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,)\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,))\n        return this\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted)\n        return this\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,)\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element)\n    }\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                              from 'bootstrap/popover/Popover.types'\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {PopoverInstance} from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)))\n    return children ?? null\n}\n","import type {SpanPopoverConfiguration}                          from 'bootstrap/popover/Popover.types'\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import {Popover}                                       from 'bootstrap'\nimport {Component, type Dispatch, type SetStateAction} from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/Popover.types'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\nimport type {ReactElement}                                             from 'util/react/ReactProperties'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrentLanguage)\n\n    return <div key={`${id} - list container`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap()].filter(([language,]) => languagesToDisplay.includes(language)).map(([language, value,]) =>\n            <div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n                <TextComponent\n                    content={`${languageTranslation(language.englishName)}${ProjectLanguages.currentLanguage.space}${ProjectLanguages.currentLanguage.unionTrait}${ProjectLanguages.currentLanguage.space}`}\n                    className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n                <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n            </div>\n        )}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["GameReferenceApp","groupId","title","enumReferences","returnOfLine","id","className","gameContentTranslation","map","gameReference","GameReferences","englishName","enumReference","Fragment","englishNameInHtml","length","renderSingleComponent","name","reference","includes","this","_getContainer","Games","GameStyles","SoundEffects","__otherGameReferences","RETURN_OF_LINES","alreadyIncludedNames","game","it","toArray","AbstractApp","PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","BootstrapWithBasicEventsInstance","type","addEventListener","event","children","option","triggers","elementId","useEffect","flat","forEach","TextPopover","otherProperties","TextComponent","content","NamePopoverComponent","props","ProjectLanguages","state","listId","setDoesDisplayPopover","popoverOrientation","setState","createOption","contentTranslation","show","hide","Component","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","isCurrentLanguage","toNameMap","language","value","languageTranslation","NameComponent","useState","english","StringContainer"],"sourceRoot":""}