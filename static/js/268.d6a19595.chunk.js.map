{"version":3,"file":"static/js/268.d6a19595.chunk.js","mappings":"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","sources":["bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Popover} from 'bootstrap'\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from 'bootstrap/popover/Popover.types'\n\nimport {BootstrapInstance}                from 'bootstrap/BootstapInstance'\nimport {BootstrapWithBasicEventsInstance} from 'bootstrap/BootstrapWithBasicEventsInstance'\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {}\n    /** @see Popover.Events.show */\n    public static readonly SHOW_EVENT = `show${Popover.EVENT_KEY}` as Popover.Events.show\n    /** @see Popover.Events.shown */\n    public static readonly SHOWN_EVENT = `shown${Popover.EVENT_KEY}` as Popover.Events.shown\n    /** @see Popover.Events.hide */\n    public static readonly HIDE_EVENT = `hide${Popover.EVENT_KEY}` as Popover.Events.hide\n    /** @see Popover.Events.hidden */\n    public static readonly HIDDEN_EVENT = `hidden${Popover.EVENT_KEY}` as Popover.Events.hidden\n    /** @see Popover.Events.inserted */\n    public static readonly INSERTED_EVENT = `inserted${Popover.EVENT_KEY}` as Popover.Events.inserted\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,)\n        this.on(callbacks)\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,)\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,))\n        return this\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted)\n        return this\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,)\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element)\n    }\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                              from 'bootstrap/popover/Popover.types'\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {PopoverInstance} from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)))\n    return children ?? null\n}\n","import type {SpanPopoverConfiguration}                          from 'bootstrap/popover/Popover.types'\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import {Popover}                                       from 'bootstrap'\nimport {Component, type Dispatch, type SetStateAction} from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/Popover.types'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\nimport type {ReactElement}                                             from 'util/react/ReactProperties'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage)\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`\n\n                return <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${languageTranslation(language.englishName)} ${language.unionTrait} '`,})}>\n                    <TextComponent key={`${id} - text component (${languageKey})`} content={value}/>\n                </li>\n            })\n    }</ul>\n}\n","import './Name.component.scss'\n\nimport {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","this","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","BootstrapWithBasicEventsInstance","type","addEventListener","event","children","option","triggers","elementId","useEffect","flat","forEach","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","name","state","listId","setDoesDisplayPopover","popoverOrientation","setState","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","className","toNameMap","entries","includes","map","value","languageKey","englishName","style","languageTranslation","unionTrait","NameComponent","useState","english","StringContainer"],"sourceRoot":""}