{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/tools/sounds/SoundFounds.ts","app/tools/sounds/SoundStates.ts","app/tools/sounds/holder/SoundSubElementsHolder.ts","app/tools/sounds/SimpleSound.tsx","app/EveryInstrumentsApp.tsx"],"names":["AbstractCardListApp","optionInterpreter","this","_appOptionInterpreter","key","_key","content","iterable","enumerable","englishName","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","Symbol","iterator","SoundFounds","callback","Enum","getNonNullDefaultOn","value","setDefault","setNonNullDefaultOn","values","find","getValueOn","getValuesOn","YES","NO","ON_PLAY","ON_CREATE","_DEFAULT","SoundStates","STANDBY","playElement","PAUSED","stopElement","PLAYING","pauseElement","EXCEPTION","exceptionElement","SoundSubElementsHolder","SimpleSound","properties","state","isSourceRetrieved","__isSoundFound","setState","audio","source","_source","_everyAudioElements","has","get","set","Audio","onended","loop","isEveryAudioLoopsAfterCompleted","props","isSoundFound","default","Number","isFinite","_audio","duration","title","onCreate","getElements","onClick","_title","forEach","audioElement","Component","play","then","onPlay","catch","pause","currentTime","Map","EveryInstrumentsApp","typeDisplayed","translationKey","Instruments","soundPaths","map","soundPath","index"],"mappings":"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","file":"static/js/13.eee0ca32.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp';\nimport NameComponent           from '../../lang/name/component/Name.component';\nimport {ViewDisplays}          from './ViewDisplays';\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const englishName = enumerable.englishName;\n            const name = enumerable.reference.nameContainer;\n            const id = `${key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${englishName} - main card list container`} id={id}\n                     className={`${key}-container listElement-container col-12 col-sm-4 col-md-3 col-lg-2`}>\n                    <div key={`${name} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${englishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, IsSourceFoundCallback, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundFounds.types';\nimport type {ClassWithEnglishName}                                                                                                                                                                                      from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                                           from '../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundFounds\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly YES =       new class SoundFounds_Yes extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true);\n            return true;\n        }\n\n    }('yes',);\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly NO =        new class SoundFounds_No extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false);\n            return false;\n        }\n\n    }('no',);\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY =   new class SoundFounds_OnPlay extends SoundFounds {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback();\n            return null;\n        }\n\n    }('on play',);\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE = new class SoundFounds_OnCreate extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback();\n        }\n\n    }('on create',);\n\n    protected static readonly _DEFAULT = SoundFounds.ON_PLAY;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundFounds;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SimpleSound sound element} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): | boolean | null {\n        return null;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundFounds> {\n        return SoundFounds;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): SoundFounds {\n        return Enum.getNonNullDefaultOn(this);\n    }\n\n    public static set default(value: | SoundFounds | string,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | SoundFounds | string,): typeof SoundFounds {\n        return Enum.setNonNullDefaultOn(this, value,);\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundFounds, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundFounds\n    public static getValue(value: PossibleValue,): | SoundFounds | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundStates.types';\nimport type {ClassWithEnglishName}                                                                                                                                                               from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                    from '../../../util/enum/Enum.types';\nimport type {ReactElement}                                                                                                                                                                       from '../../../util/react/ReactProperty';\nimport type {SoundSubElementsHolder}                                                                                                                                                             from './holder/SoundSubElementsHolder';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY = new class SoundStates_Standby extends SoundStates {\n\n        public override getElements({playElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(),];\n        }\n\n    }('standby',);\n    public static readonly PAUSED =  new class SoundStates_Paused extends SoundStates {\n\n        public override getElements({playElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(), stopElement(),];\n        }\n\n    }('paused',);\n    public static readonly PLAYING = new class SoundStates_Playing extends SoundStates {\n\n        public override getElements({pauseElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [pauseElement(), stopElement(),];\n        }\n\n    }('playing',);\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElements({exceptionElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [exceptionElement(),];\n        }\n\n    }('exception',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElements(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<SoundStates> {\n        return SoundStates;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundStates, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundStates\n    public static getValue(value: PossibleValue,): | SoundStates | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {ReactElement} from '../../../../util/react/ReactProperty';\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement;\n    readonly #pauseElement;\n    readonly #stopElement;\n    readonly #exceptionElement;\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement;\n        this.#pauseElement = pauseElement;\n        this.#stopElement = stopElement;\n        this.#exceptionElement = exceptionElement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement;\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement;\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement;\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement;\n","import './SimpleSound.scss';\n\nimport {Component} from 'react';\n\nimport type {IsSourceFoundCallback} from './SoundFounds.types';\nimport type {SimpleSoundProperties} from './properties/SimpleSoundProperties';\nimport type {SimpleSoundState}      from './properties/SimpleSoundState';\nimport type {ReactElement}          from '../../../util/react/ReactProperty';\n\nimport {SoundFounds}            from './SoundFounds';\nimport {SoundStates}            from './SoundStates';\nimport {SoundSubElementsHolder} from './holder/SoundSubElementsHolder';\n\nexport default class SimpleSound\n    extends Component<SimpleSoundProperties, SimpleSoundState> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play';\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause';\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop';\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception';\n\n    static #IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = false;\n\n    static readonly #EVERY_AUDIO_ELEMENTS = new Map<string, HTMLAudioElement>();\n\n    #audio?: HTMLAudioElement;\n    readonly #isSourceFoundCallback: IsSourceFoundCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(properties: SimpleSoundProperties,) {\n        super(properties);\n        this.state = {\n            state: SoundStates.STANDBY,\n            isSourceRetrieved: false,\n        };\n        this.#isSourceFoundCallback = (value: boolean = this.__isSoundFound,) =>\n            value\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, state: SoundStates.EXCEPTION,});\n\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    /**\n     * A {@link Map} of every audio elements.<br/>\n     * The key is the source of the audio element created.\n     *\n     * @see _audio\n     */\n    protected static get _everyAudioElements() {\n        return this.#EVERY_AUDIO_ELEMENTS;\n    }\n\n    public static get isEveryAudioLoopsAfterCompleted(): boolean {\n        return this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED;\n    }\n\n    public static set isEveryAudioLoopsAfterCompleted(value: boolean,) {\n        this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = value;\n        this._everyAudioElements.forEach(audioElement => audioElement.loop = value);\n    }\n\n    /**\n     * A {@link HTMLAudioElement Audio} element created from the source\n     * and with the global property {@link isEveryAudioLoopsAfterCompleted}.\n     *\n     * @note The element is created only if any buttons (play, pause or stop) is handled. Otherwise, it will not be created.\n     */\n    protected get _audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const source = this._source;\n            let audio: HTMLAudioElement;\n            if (SimpleSound._everyAudioElements.has(source))\n                audio = SimpleSound._everyAudioElements.get(source)!;\n            else\n                SimpleSound._everyAudioElements.set(source, audio = new Audio(source));\n            this.#audio = audio;\n            audio.onended = () => this.setState({state: SoundStates.STANDBY,});\n            audio.loop = SimpleSound.isEveryAudioLoopsAfterCompleted;\n        }\n        return this.#audio;\n    }\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n    //region -------------------- Getter methods (source) --------------------\n\n    protected get _source() {\n        return this.props.source;\n    }\n\n    public get isSoundFound(): SoundFounds {\n        return this.props.isSoundFound ?? SoundFounds.default;\n    }\n\n    private get __isSoundFound(): boolean {\n        return Number.isFinite(this._audio.duration);\n    }\n\n    //endregion -------------------- Getter methods (source) --------------------\n\n    protected get _title() {\n        return this.props.title;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * <p>\n     *  Play the current audio element.\n     *\n     *  And when the audio element has finished playing,\n     *  it will change the state to {@link SoundStates.STANDBY standby}.\n     * </p>\n     *\n     * <p>\n     *  Depending on if an {@link Error exception} is raised,\n     *  it will change the state to {@link SoundStates.EXCEPTION exception}.\n     * </p>\n     *\n     * <p>\n     *  But, if the {@link SoundFounds} is {@link SoundFounds.YES},\n     *  it will assume that the source is valid.\n     * </p>\n     */\n    #play(): void {\n        this._audio.play()\n            .then(() => {\n                const isSoundFound = this.isSoundFound.onPlay(this.#isSourceFoundCallback) ?? this.__isSoundFound;\n                if (!isSoundFound)\n                    this.#stop(SoundStates.EXCEPTION);\n            })\n            .catch(() => this.setState({state: SoundStates.EXCEPTION,}));\n        this.setState({state: SoundStates.PLAYING,});\n    }\n\n    /**\n     * Pause the current audio element.\n     */\n    #pause(): void {\n        this._audio.pause();\n        this.setState({state: SoundStates.PAUSED,});\n    }\n\n    /**\n     * Stop the current audio element.\n     *\n     * @param state either {@link SoundStates.STANDBY standby} or {@link SoundStates.EXCEPTION exception} state\n     */\n    #stop(state: SoundStates = SoundStates.STANDBY,): void {\n        const audio = this._audio;\n        audio.pause();\n        audio.currentTime = 0;\n        this.setState({state: state,});\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.state.isSourceRetrieved)\n            this.isSoundFound.onCreate(this.#isSourceFoundCallback);\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio;\n        if (audio != null)\n            audio.onended = null;\n    }\n\n    public override render(): ReactElement {\n        return <div key={this._title} className=\"audio-state-container container\">{\n            this.state.state.getElements(new SoundSubElementsHolder(\n                () => <div key={`${this._title} - play`} className={SimpleSound.#PLAY_CLASSES} onClick={() => this.#play()}/>,\n                () => <div key={`${this._title} - pause`} className={SimpleSound.#PAUSE_CLASSES} onClick={() => this.#pause()}/>,\n                () => <div key={`${this._title} - stop`} className={SimpleSound.#STOP_CLASSES} onClick={() => this.#stop()}/>,\n                () => <div key={`${this._title} - exception`} className={SimpleSound.#EXCEPTION_CLASSES}/>,\n            ))\n        }</div>;\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n","import type {AppInterpreterWithCardList}         from './interpreter/AppInterpreterWithCardList';\nimport type {InstrumentAppStates}                from './AppStates.types';\nimport type {ReactElement, ReactElementOrString} from '../util/react/ReactProperty';\n\nimport {AbstractCardListApp}           from './withInterpreter/AbstractCardListApp';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {Instruments}                   from '../core/instrument/Instruments';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\nimport SimpleSound                     from './tools/sounds/SimpleSound';\n\nexport default class EveryInstrumentsApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<Instruments>, {}, InstrumentAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected _createKey(): string {\n        return 'instrument';\n    }\n\n    protected _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every instruments\"/>;\n    }\n\n    protected _createAppOptionInterpreter(): AppInterpreterWithCardList<Instruments> {\n        return new class implements AppInterpreterWithCardList<Instruments> {\n\n            public get iterable(): IterableIterator<Instruments> {\n                return Instruments[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({soundPaths, name,}: Instruments,): ReactElement {\n                return <div className=\"instrument-sounds\">{soundPaths.map((soundPath, index,) =>\n                    <SimpleSound source={soundPath} title={`${name} (instrument #${index})`}/>\n                )}</div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}