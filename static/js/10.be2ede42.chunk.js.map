{"version":3,"sources":["app/options/CommonOptions.tsx","app/tools/sounds/SoundFounds.ts","app/tools/sounds/SoundStates.ts","app/tools/sounds/holder/SoundSubElementsHolder.ts","app/tools/sounds/SimpleSound.tsx","app/options/MysteryMushroomAppOption.tsx","app/MysteryMushroomApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","Symbol","iterator","SoundFounds","callback","Enum","getNonNullDefaultOn","value","setDefault","setNonNullDefaultOn","values","find","enumerable","getValueOn","getValuesOn","YES","NO","ON_PLAY","ON_CREATE","_DEFAULT","SoundStates","STANDBY","playElement","PAUSED","stopElement","PLAYING","pauseElement","EXCEPTION","exceptionElement","SoundSubElementsHolder","SimpleSound","properties","state","isSourceRetrieved","__isSoundFound","setState","audio","_source","_everyAudioElements","has","set","Audio","onended","loop","isEveryAudioLoopsAfterCompleted","props","isSoundFound","default","Number","isFinite","_audio","duration","title","onCreate","getElements","onClick","_title","forEach","audioElement","Component","play","then","onPlay","catch","pause","currentTime","Map","MysteryMushroomAppOption","type","renderDiv","callbackToRender","_mysteryMushroomType","map","index","partialId","images","image","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","_createImageContent","_createSoundContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","POWER_UP_COLLECTED","WAITING","TAUNT","PRESSING_DOWN","WALK","RUNNING","SWIMMING","JUMP","FALLING_AFTER_JUMP","ON_GROUND_AFTER_JUMP","TURNING","CLIMBING","GOAL_POLE","LOST_A_LIFE","MysteryMushrooms","MYSTERY_MUSHROOM","CONDITION_TO_UNLOCK_IT","conditionToUnlockIt","GAME","games","game","length","ProjectLanguages","currentLanguage","comma","gameHeader","NAME","getNameContent","nameHeader","IMAGES_AND_SOUNDS","_imagesAndSounds","flat","_renderSoundContent","_createSound","powerUpCollectedSound","haveASoundEffectWhenCollected","_renderImageContent","_createImage","waitingImages","_createSingleImageAndSoundContainer","tauntImages","tauntSound","haveASoundEffectOnTaunt","pressingDownImages","_createAnimatedImages","walkImages","runningImages","swimmingImages","MysteryMushroomAppOption_Jump","jumpImages","_createSounds","jumpSounds","haveASoundEffectOnJump","fallingAfterJumpImages","onGroundAfterJumpSound","haveASoundEffectOnGroundAfterJump","turningImages","turningSound","haveASoundEffectOnTurnAfterRun","climbingImages","goalPoleImages","goalPoleSound","haveASoundEffectOnGoalPole","lostALifeSound","haveASoundEffectOnDeath","TextComponent","content","MysteryMushroomApp","typeDisplayed","ViewDisplays","CARD_LIST","GameContentTranslationComponent","translation","pluralName","small","medium","large","extraLarge","extraExtraLarge","amountOfImages","englishNameOnFile","contains2Images","appOption","renderImageContent","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/10.be2ede42.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame';\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}                        from '../../core/ClassWithReference';\nimport type {Enum}                                      from '../../util/enum/Enum';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {NameTrait}                                 from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory';\nimport type {ReactElement}                              from '../../util/react/ReactProperties';\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader';\nimport type {Themes}                                    from '../../core/theme/Themes';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {BASE_PATH}                     from '../../variables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n    #gameHeader?: SingleHeaderContent;\n    #gameHeaderWithAllGames?: SingleHeaderContent;\n    #gameHeaderWithMainGames?: SingleHeaderContent;\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,];\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        };\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames);\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ];\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference;\n        const isInSMM1 = reference.isInSuperMarioMaker1;\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS;\n        const isInSMM2 = reference.isInSuperMarioMaker2;\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference;\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>;\n","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, IsSourceFoundCallback, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundFounds.types';\nimport type {ClassWithEnglishName}                                                                                                                                                                                      from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                                           from '../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundFounds\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly YES =       new class SoundFounds_Yes extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true);\n            return true;\n        }\n\n    }('yes',);\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly NO =        new class SoundFounds_No extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false);\n            return false;\n        }\n\n    }('no',);\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY =   new class SoundFounds_OnPlay extends SoundFounds {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback();\n            return null;\n        }\n\n    }('on play',);\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE = new class SoundFounds_OnCreate extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback();\n        }\n\n    }('on create',);\n\n    protected static readonly _DEFAULT = SoundFounds.ON_PLAY;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundFounds;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SimpleSound sound element} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): | boolean | null {\n        return null;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundFounds> {\n        return SoundFounds;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): SoundFounds {\n        return Enum.getNonNullDefaultOn(this);\n    }\n\n    public static set default(value: | SoundFounds | string,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | SoundFounds | string,): typeof SoundFounds {\n        return Enum.setNonNullDefaultOn(this, value,);\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundFounds, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundFounds\n    public static getValue(value: PossibleValue,): | SoundFounds | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundStates.types';\nimport type {ClassWithEnglishName}                                                                                                                                                               from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                    from '../../../util/enum/Enum.types';\nimport type {ReactElement}                                                                                                                                                                       from '../../../util/react/ReactProperties';\nimport type {SoundSubElementsHolder}                                                                                                                                                             from './holder/SoundSubElementsHolder';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY = new class SoundStates_Standby extends SoundStates {\n\n        public override getElements({playElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(),];\n        }\n\n    }('standby',);\n    public static readonly PAUSED =  new class SoundStates_Paused extends SoundStates {\n\n        public override getElements({playElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(), stopElement(),];\n        }\n\n    }('paused',);\n    public static readonly PLAYING = new class SoundStates_Playing extends SoundStates {\n\n        public override getElements({pauseElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [pauseElement(), stopElement(),];\n        }\n\n    }('playing',);\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElements({exceptionElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [exceptionElement(),];\n        }\n\n    }('exception',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElements(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<SoundStates> {\n        return SoundStates;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundStates, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundStates\n    public static getValue(value: PossibleValue,): | SoundStates | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {ReactElement} from '../../../../util/react/ReactProperties';\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement;\n    readonly #pauseElement;\n    readonly #stopElement;\n    readonly #exceptionElement;\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement;\n        this.#pauseElement = pauseElement;\n        this.#stopElement = stopElement;\n        this.#exceptionElement = exceptionElement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement;\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement;\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement;\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement;\n","import './SimpleSound.scss';\n\nimport {Component} from 'react';\n\nimport type {IsSourceFoundCallback} from './SoundFounds.types';\nimport type {SimpleSoundProperties} from './properties/SimpleSoundProperties';\nimport type {SimpleSoundState}      from './properties/SimpleSoundState';\nimport type {ReactElement}          from '../../../util/react/ReactProperties';\n\nimport {SoundFounds}            from './SoundFounds';\nimport {SoundStates}            from './SoundStates';\nimport {SoundSubElementsHolder} from './holder/SoundSubElementsHolder';\n\nexport default class SimpleSound\n    extends Component<SimpleSoundProperties, SimpleSoundState> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play';\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause';\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop';\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception';\n\n    static #IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = false;\n\n    static readonly #EVERY_AUDIO_ELEMENTS = new Map<string, HTMLAudioElement>();\n\n    #audio?: HTMLAudioElement;\n    readonly #isSourceFoundCallback: IsSourceFoundCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(properties: SimpleSoundProperties,) {\n        super(properties);\n        this.state = {\n            state: SoundStates.STANDBY,\n            isSourceRetrieved: false,\n        };\n        this.#isSourceFoundCallback = (value: boolean = this.__isSoundFound,) =>\n            value\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, state: SoundStates.EXCEPTION,});\n\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    /**\n     * A {@link Map} of every audio elements.<br/>\n     * The key is the source of the audio element created.\n     *\n     * @see _audio\n     */\n    protected static get _everyAudioElements() {\n        return this.#EVERY_AUDIO_ELEMENTS;\n    }\n\n    public static get isEveryAudioLoopsAfterCompleted(): boolean {\n        return this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED;\n    }\n\n    public static set isEveryAudioLoopsAfterCompleted(value: boolean,) {\n        this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = value;\n        this._everyAudioElements.forEach(audioElement => audioElement.loop = value);\n    }\n\n    /**\n     * A {@link HTMLAudioElement Audio} element created from the source\n     * and with the global property {@link isEveryAudioLoopsAfterCompleted}.\n     *\n     * @note The element is created only if any buttons (play, pause or stop) is handled. Otherwise, it will not be created.\n     */\n    protected get _audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const source = this._source;\n            let audio: HTMLAudioElement;\n            if (SimpleSound._everyAudioElements.has(source))\n                audio = SimpleSound._everyAudioElements.get(source)!;\n            else\n                SimpleSound._everyAudioElements.set(source, audio = new Audio(source));\n            this.#audio = audio;\n            audio.onended = () => this.setState({state: SoundStates.STANDBY,});\n            audio.loop = SimpleSound.isEveryAudioLoopsAfterCompleted;\n        }\n        return this.#audio;\n    }\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n    //region -------------------- Getter methods (source) --------------------\n\n    protected get _source() {\n        return this.props.source;\n    }\n\n    public get isSoundFound(): SoundFounds {\n        return this.props.isSoundFound ?? SoundFounds.default;\n    }\n\n    private get __isSoundFound(): boolean {\n        return Number.isFinite(this._audio.duration);\n    }\n\n    //endregion -------------------- Getter methods (source) --------------------\n\n    protected get _title() {\n        return this.props.title;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * <p>\n     *  Play the current audio element.\n     *\n     *  And when the audio element has finished playing,\n     *  it will change the state to {@link SoundStates.STANDBY standby}.\n     * </p>\n     *\n     * <p>\n     *  Depending on if an {@link Error exception} is raised,\n     *  it will change the state to {@link SoundStates.EXCEPTION exception}.\n     * </p>\n     *\n     * <p>\n     *  But, if the {@link SoundFounds} is {@link SoundFounds.YES},\n     *  it will assume that the source is valid.\n     * </p>\n     */\n    #play(): void {\n        this._audio.play()\n            .then(() => {\n                const isSoundFound = this.isSoundFound.onPlay(this.#isSourceFoundCallback) ?? this.__isSoundFound;\n                if (!isSoundFound)\n                    this.#stop(SoundStates.EXCEPTION);\n            })\n            .catch(() => this.setState({state: SoundStates.EXCEPTION,}));\n        this.setState({state: SoundStates.PLAYING,});\n    }\n\n    /**\n     * Pause the current audio element.\n     */\n    #pause(): void {\n        this._audio.pause();\n        this.setState({state: SoundStates.PAUSED,});\n    }\n\n    /**\n     * Stop the current audio element.\n     *\n     * @param state either {@link SoundStates.STANDBY standby} or {@link SoundStates.EXCEPTION exception} state\n     */\n    #stop(state: SoundStates = SoundStates.STANDBY,): void {\n        const audio = this._audio;\n        audio.pause();\n        audio.currentTime = 0;\n        this.setState({state: state,});\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.state.isSourceRetrieved)\n            this.isSoundFound.onCreate(this.#isSourceFoundCallback);\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio;\n        if (audio != null)\n            audio.onended = null;\n    }\n\n    public override render(): ReactElement {\n        return <div key={this._title} className=\"audio-state-container container\">{\n            this.state.state.getElements(new SoundSubElementsHolder(\n                () => <div key={`${this._title} - play`} className={SimpleSound.#PLAY_CLASSES} onClick={() => this.#play()}/>,\n                () => <div key={`${this._title} - pause`} className={SimpleSound.#PAUSE_CLASSES} onClick={() => this.#pause()}/>,\n                () => <div key={`${this._title} - stop`} className={SimpleSound.#STOP_CLASSES} onClick={() => this.#stop()}/>,\n                () => <div key={`${this._title} - exception`} className={SimpleSound.#EXCEPTION_CLASSES}/>,\n            ))\n        }</div>;\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                                                   from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                                                 from './component/AppOptionWithTable';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleMysteryMushroomType, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './MysteryMushroomAppOption.types';\nimport type {PossibleImageSourceForFile, PossibleSoundSourceForFile}                                                                                                                                             from '../../core/mysteryMushroom/MysteryMushrooms.types';\nimport type {ReactElement}                                                                                                                                                                                       from '../../util/react/ReactProperties';\nimport type {SingleHeaderContent}                                                                                                                                                                                from '../tools/table/SimpleHeader';\nimport type {StaticReference}                                                                                                                                                                                    from '../../util/enum/Enum.types';\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {MysteryMushrooms}              from '../../core/mysteryMushroom/MysteryMushrooms';\nimport SimpleSound                     from '../tools/sounds/SimpleSound';\nimport TextComponent                   from '../tools/text/TextComponent';\nimport {ProjectLanguages}              from '../../lang/ProjectLanguages';\nimport {MysteryMushroom}               from '../../core/mysteryMushroom/MysteryMushroom';\nimport {NotApplicable}                 from '../../core/_properties/Property';\n\n//region -------------------- dynamic imports --------------------\n\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\nconst Image =         lazy(() => import('../tools/images/Image'));\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class MysteryMushroomAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly CONDITION_TO_UNLOCK_IT = new class MysteryMushroomAppOption_ConditionToUnlockIt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption({reference,}: MysteryMushrooms,): PossibleRenderReactElement {\n            return <>--{reference.conditionToUnlockIt}--</>;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'conditionToUnlockIt', element: <>--Condition to unlock it--</>,};\n        }\n\n    }(null,);\n    public static readonly GAME = new class MysteryMushroomAppOption_Game extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement {\n            const {englishName, englishNameInHtml, reference,} = enumeration;\n\n            return <div key={`games - ${englishName}`} id={`games-${englishNameInHtml}`}>{\n                    reference.games.map((game, index, games,) => <Fragment key={`game (${index + 1}) - ${enumeration.englishName}`}>\n                        <NameComponent id={`game_${index + 1}_${englishNameInHtml}`} name={game.reference} popoverOrientation=\"right\"/>\n                        {index === games.length - 1 ? EMPTY_REACT_ELEMENT : <>{ProjectLanguages.currentLanguage.comma}<br/></>}\n                    </Fragment>)\n                }</div>;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.gameHeader;\n        }\n\n    }(null,);\n    public static readonly NAME = new class MysteryMushroomAppOption_Name extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement {\n            return CommonOptions.get.getNameContent(enumeration);/*<YesOrNoResultTextComponent boolean={reference.canBeUnlockedByAnAmiibo}/>*/\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }(null,);\n\n\n    public static readonly IMAGES_AND_SOUNDS = new class MysteryMushroomAppOption_ImagesAndSounds extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderContent).flat();\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'imagesAndSounds', element: <>--Images & sounds--</>,\n                subHeaders: MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderTableHeader!)\n            };\n        }\n\n    }(null,);\n    public static readonly POWER_UP_COLLECTED = new class MysteryMushroomAppOption_PowerUpCollectedSound extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderSoundContent();\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.powerUpCollectedSound, reference => reference.haveASoundEffectWhenCollected, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'powerUpCollectedSound', element: <>--Power-up collected (sound)--</>,};\n        }\n\n    }('power-up collected',);\n    public static readonly WAITING = new class MysteryMushroomAppOption_WaitingImages extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        public override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.waitingImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'waitingImage', element: <>--Waiting (image)--</>,};\n        }\n\n    }('waiting',);\n    public static readonly TAUNT = new class MysteryMushroomAppOption_Taunt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>);\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.tauntImages, renderDiv,);\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.tauntSound, reference => reference.haveASoundEffectOnTaunt, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'tauntImageAndSound', element: <>--Taunt (image & sound)--</>,};\n        }\n\n    }('taunt',);\n    public static readonly PRESSING_DOWN = new class MysteryMushroomAppOption_PressingDown extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.pressingDownImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'pressingDownImage', element: <>--Pressing ↓ (image)--</>,};\n        }\n\n    }('pressing ↓',);\n    public static readonly WALK = new class MysteryMushroomAppOption_Walk extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.walkImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'walkImages', element: <>--Walk (image)--</>,};\n        }\n\n    }('walk',);\n    public static readonly RUNNING = new class MysteryMushroomAppOption_Running extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.runningImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'runningImages', element: <>--Running (images)--</>,};\n        }\n\n    }('running',);\n    public static readonly SWIMMING = new class MysteryMushroomAppOption_Swimming extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.swimmingImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'swimmingImages', element: <>--Swimming (images)--</>,};\n        }\n\n    }('swimming',);\n    public static readonly JUMP = new class MysteryMushroomAppOption_Jump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>);\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            const enumeration = MysteryMushroomAppOption_Jump.CALLBACK_TO_GET_ENUMERATION();\n            return (enumeration.jumpImages[0]?.length ?? 0) > 1\n                ? this._createAnimatedImages(() => enumeration.jumpImages, renderDiv,)\n                : this._createImage(() => enumeration.jumpImages.map(images => images[0]!) as unknown as PossibleImageSourceForFile<string>, renderDiv,);\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSounds(enumeration => enumeration.jumpSounds, reference => reference.haveASoundEffectOnJump, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'jumpingImagesAndSounds', element: <>--Jumping (images & sounds)--</>,};\n        }\n\n    }('jump',);\n    public static readonly FALLING_AFTER_JUMP = new class MysteryMushroomAppOption_FallingAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.fallingAfterJumpImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'fallingAfterJumpImage', element: <>--Falling after jump (images)--</>,};\n        }\n\n    }('falling after jump',);\n    public static readonly ON_GROUND_AFTER_JUMP = new class MysteryMushroomAppOption_OnGroundAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderSoundContent();\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.onGroundAfterJumpSound, reference => reference.haveASoundEffectOnGroundAfterJump, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'groundAfterJumpImage', element: <>--Ground after jump (sound)--</>,};\n        }\n\n    }('ground after jump',);\n    public static readonly TURNING = new class MysteryMushroomAppOption_Turning extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>);\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.turningImages, renderDiv,);\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.turningSound, reference => reference.haveASoundEffectOnTurnAfterRun, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'turningImageAndSound', element: <>-Turning (image & sound)--</>,};\n        }\n\n    }('turning',);\n    public static readonly CLIMBING = new class MysteryMushroomAppOption_Climbing extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderSoundContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.climbingImages, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'climbingImages', element: <>-Climbing (images)--</>,};\n        }\n\n    }('climbing',);\n    public static readonly GOAL_POLE = new class MysteryMushroomAppOption_GoalPole extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>);\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.goalPoleImages, renderDiv,);\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.goalPoleSound, reference => reference.haveASoundEffectOnGoalPole, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'goalPoleImagesAndSound', element: <>-Goal pole (images & sound)--</>,};\n        }\n\n    }('goal pole',);\n    public static readonly LOST_A_LIFE = new class MysteryMushroomAppOption_LostALife extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent();\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.lostALifeSound, reference => reference.haveASoundEffectOnDeath, renderDiv,);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'lostALifeSound', element: <>-Lost a life (sound)--</>,};\n        }\n\n    }('lost a life',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MysteryMushroomAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #imagesAndSounds?: readonly MysteryMushroomAppOption[];\n    public static CALLBACK_TO_GET_ENUMERATION: () => MysteryMushrooms;\n\n    static readonly #NOT_APPLICABLE_COMPONENT = <TextComponent content=\"N/A\"/>;\n\n    readonly #type;\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: PossibleMysteryMushroomType,) {\n        super();\n        this.#type = type;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _mysteryMushroomType(): PossibleMysteryMushroomType {\n        return this.#type;\n    }\n\n    protected static get _imagesAndSounds(): readonly MysteryMushroomAppOption[] {\n        return this.#imagesAndSounds ??= [\n            MysteryMushroomAppOption.POWER_UP_COLLECTED,\n            MysteryMushroomAppOption.WAITING,\n            MysteryMushroomAppOption.TAUNT,\n            MysteryMushroomAppOption.PRESSING_DOWN,\n            MysteryMushroomAppOption.WALK,\n            MysteryMushroomAppOption.RUNNING,\n            MysteryMushroomAppOption.SWIMMING,\n            MysteryMushroomAppOption.JUMP,\n            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n            MysteryMushroomAppOption.ON_GROUND_AFTER_JUMP,\n            MysteryMushroomAppOption.TURNING,\n            MysteryMushroomAppOption.CLIMBING,\n            MysteryMushroomAppOption.GOAL_POLE,\n            MysteryMushroomAppOption.LOST_A_LIFE,\n        ];\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    #createSingleImageAndSoundContainer(renderDiv: boolean, callback: (enumeration: MysteryMushrooms,) => ReactElement,): ReactElement {\n        const enumeration = MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION();\n        if (enumeration === MysteryMushrooms.MYSTERY_MUSHROOM)\n            return MysteryMushroomAppOption.#NOT_APPLICABLE_COMPONENT;\n\n        if (!renderDiv)\n            return callback(enumeration);\n        const englishName = enumeration.englishName;\n        const type = this._mysteryMushroomType;\n        return <div key={`${englishName} - ${type}`}>{callback(enumeration)}</div>;\n    }\n\n    protected _createSingleImageAndSoundContainer(callback: (enumeration: MysteryMushrooms,) => ReactElement, renderDiv: boolean = true,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, callback,);\n    }\n\n    protected _createSound(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<string>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const value = callback(enumeration);\n            if (value == null)\n                return EMPTY_REACT_ELEMENT;\n\n            const englishName = enumeration.englishName;\n            const type = this._mysteryMushroomType;\n            return <SimpleSound source={value} title={`${englishName} - ${type}`}/>;\n        },);\n    }\n\n    protected _createSounds(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<readonly string[]>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const englishName = enumeration.englishName;\n            const type = this._mysteryMushroomType;\n            return <>{callback(enumeration).map((value, index,) =>\n                <SimpleSound source={value} title={`${englishName} - ${type} #${index + 1}`}/>\n            )}</>;\n        },);\n    }\n\n    protected _createImage(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<string>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`;\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${fallbackName} #${index + 1}`} source={value} fallbackName={`${fallbackName} #${index + 1}`}/>\n            )}</>;\n        },);\n    }\n\n    protected _createAnimatedImages(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<readonly string[]>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`;\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${fallbackName} #${index + 1}`} partialId={`${enumeration.englishNameInHtml}-${index + 1}`}\n                       images={value.map((image, index,) =>\n                           ({source: image, fallbackName: `${fallbackName} #${index + 1}`,}))}/>\n            )}</>;\n        },);\n    }\n\n    protected abstract _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement;\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION()),);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n\n    protected _createImageContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT;\n    }\n\n    public renderImageContent(enumeration: MysteryMushrooms, renderDiv: boolean = false,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration;\n        return this._createImageContent(renderDiv,);\n    }\n\n    protected _renderImageContent(renderDiv: boolean = true,): ReactElement {\n        return this._createImageContent(renderDiv,);\n    }\n\n    public _createSoundContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT;\n    }\n\n    public renderSoundContent(enumeration: MysteryMushrooms,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration;\n        return this._createSoundContent(false);\n    }\n\n    protected _renderSoundContent(renderDiv: boolean = true,): ReactElement {\n        return this._createSoundContent(renderDiv,);\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent;\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),);\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MysteryMushroomAppOption> {\n        return MysteryMushroomAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MysteryMushroomAppOption = MysteryMushroomAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MysteryMushroomAppOption\n    public static getValue(value: PossibleValue,): | MysteryMushroomAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype ReferenceCallback = (reference: MysteryMushroom,) => | boolean | NotApplicable;\n","import './MysteryMushroomApp.scss';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from './interpreter/AppInterpreterWithTable';\nimport type {AppProperties}                                        from './AppProperties.types';\nimport type {MysteryMushroomAppStates}                             from './AppStates.types';\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList';\nimport type {ReactElement, ReactElementOrString}                   from '../util/react/ReactProperties';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {MysteryMushroomAppOption}      from './options/MysteryMushroomAppOption';\nimport {MysteryMushrooms}              from '../core/mysteryMushroom/MysteryMushrooms';\nimport {SingleHeaderContent}           from './tools/table/SimpleHeader';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\n/**\n * @reactComponent\n */\nexport default class MysteryMushroomApp\n    extends AbstractTableApp<AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption>, AppProperties, MysteryMushroomAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'mysteryMushroom';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => translation('Every Mystery Mushrooms', {pluralName: '--Mystery Mushrooms--'})}</GameContentTranslationComponent>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n        return new class implements AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n\n            public get iterable(): IterableIterator<MysteryMushrooms> {\n                return MysteryMushrooms[Symbol.iterator]();\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: 4,\n                    extraLarge: 3,\n                    extraExtraLarge: 2,\n                };\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list';\n            }\n\n            public createCardListContent(enumerable: MysteryMushrooms,): ReactElement {\n                const amountOfImages = enumerable.englishNameOnFile.length;\n                const contains2Images = amountOfImages === 2;\n\n                return amountOfImages === 0\n                    ? EMPTY_REACT_ELEMENT\n                    : <div className={`image-content-container ${contains2Images ? 'dual' : 'single'}-image-content-container`}>\n                        {[\n                            MysteryMushroomAppOption.WAITING,\n                            MysteryMushroomAppOption.TAUNT,\n                            MysteryMushroomAppOption.PRESSING_DOWN,\n                            MysteryMushroomAppOption.WALK,\n                            MysteryMushroomAppOption.RUNNING,\n                            MysteryMushroomAppOption.SWIMMING,\n                            MysteryMushroomAppOption.JUMP,\n                            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n                            MysteryMushroomAppOption.TURNING,\n                            MysteryMushroomAppOption.CLIMBING,\n                            MysteryMushroomAppOption.GOAL_POLE,\n                        ].map(appOption => appOption.renderImageContent(enumerable, contains2Images,))}\n                    </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => MysteryMushrooms,) {\n                MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): readonly MysteryMushroomAppOption[] {\n                return [\n                    MysteryMushroomAppOption.CONDITION_TO_UNLOCK_IT,\n                    MysteryMushroomAppOption.GAME,\n                    MysteryMushroomAppOption.NAME,\n                    MysteryMushroomAppOption.IMAGES_AND_SOUNDS,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent>{translation => translation('Every Mystery Mushrooms', {pluralName: 'Mystery Mushrooms'})}</GameContentTranslationComponent>,\n                };\n            }\n\n\n            public createTableContent(option: MysteryMushroomAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: MysteryMushroomAppOption): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}