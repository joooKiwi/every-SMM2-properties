{"version":3,"file":"static/js/42.339ee1bc.chunk.js","mappings":"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","sources":["app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/options/CommonOptions.tsx","app/tools/table/Table.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <div className=\"description-container\">{description}</div>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import type {Enumerable} from '@joookiwi/enumerable/dist/types'\n\nimport type {SimpleImageHeader, SimpleReactHeader, SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}                             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                                    from 'core/theme/Themes'\nimport type {Name}                                                      from 'lang/name/Name'\nimport type {NameTrait}                                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                                    from 'lang/name/NameTraitFromACategory'\nimport type {ImageFile}                                                 from 'util/file/image/ImageFile'\n\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                                             from 'app/tools/images/Image'\nimport GameImage                                         from 'core/game/GameImage'\nimport {Games}                                           from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {EmptyStringName}                                 from 'lang/name/EmptyStringName'\nimport NameComponent                                     from 'lang/name/component/Name.component'\n\n/** @singleton */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {}\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SimpleReactHeader\n    #smm1And3DSGameHeader?: SimpleImageHeader\n    #smm2GameHeader?: SimpleImageHeader\n    #gameHeader?: SimpleReactHeader\n    #categoryHeader?: SimpleReactHeader\n\n    #limitHeader?: SimpleReactHeader\n    #completePlayLimitHeader?: SimpleReactHeader\n    #completeEditorLimitHeader?: SimpleReactHeader\n    #completeEditorLimitInSmm1And3dsHeader?: SingleHeaderContent\n    #completeEditorLimitInSmm2Header?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SimpleReactHeader {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name',),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SimpleReactHeader {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category',),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | ImageFile | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if ('toNameMap' in imagePath_or_name)\n            return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n        return <Image key={`${startingKey} image`} file={imagePath_or_name}/>\n    }\n\n\n    public get gameHeader(): SimpleReactHeader {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('game.singular',),}\n    }\n\n    public get smm1And3dsGameHeader(): SimpleImageHeader {\n        return this.#smm1And3DSGameHeader ??= {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,}//TODO create a animated image for both games (SMM1 & SMM3DS)\n    }\n    public get smm2GameHeader(): SimpleImageHeader {\n        return this.#smm2GameHeader ??= {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,}\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {reference.isInSuperMarioMaker1 ? <GameImage reference={Games.SUPER_MARIO_MAKER_1}/> : null}\n            {reference.isInSuperMarioMakerFor3DS ? <GameImage reference={Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS}/> : null}\n            {reference.isInSuperMarioMaker2 ? <GameImage reference={Games.SUPER_MARIO_MAKER_2}/> : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image file={COURSE_THEME_IMAGE_FILE}/> : null}\n            {reference.isInWorldTheme ? <Image file={WORLD_THEME_IMAGE_FILE}/> : null}\n        </div>\n    }\n\n\n    public get limitHeader(): SimpleReactHeader {\n        return this.#limitHeader ??= {key: 'limit', element: gameContentTranslation('limit.singular',),}\n    }\n\n    public get completePlayLimitHeader(): SimpleReactHeader {\n        return this.#completePlayLimitHeader ??= {key: 'limit-play', element: gameContentTranslation('limit.play.complete',),}\n    }\n    public get completeEditorLimitHeader(): SimpleReactHeader {\n        return this.#completeEditorLimitHeader ??= {key: 'limit-editor', element: gameContentTranslation('limit.editor.complete',),}\n    }\n\n    public get completeEditorLimitInSmm1And3dsHeader(): SingleHeaderContent {\n        return this.#completeEditorLimitInSmm1And3dsHeader ??= {\n            key: 'limit-editor-smm1-and-smm3ds', element: gameContentTranslation('limit.editor.complete in SMM1&3DS', {\n                Name1: Games.SUPER_MARIO_MAKER_1.acronym,\n                Name3ds: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.acronym,\n            }),\n        }\n    }\n\n    public get completeEditorLimitInSmm2Header(): SingleHeaderContent {\n        return this.#completeEditorLimitInSmm2Header ??= {\n            key: 'limit-editor-smm2', element: gameContentTranslation('limit.editor.complete in SMM2', {\n                Name: Games.SUPER_MARIO_MAKER_2.acronym,\n            }),\n        }\n    }\n\n}\n\ntype EnumerationWithReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","import './Table.scss'\n\nimport type {Enumerable} from '@joookiwi/enumerable'\n\nimport type {AppInterpreterWithTable}                                                         from 'app/interpreter/AppInterpreterWithTable'\nimport type {SingleHeaderContent}                                                             from 'app/tools/table/SimpleHeader'\nimport type {SingleTableContent}                                                              from 'app/tools/table/Table.types'\nimport type {ReactProperties, ReactPropertiesWithChildren, SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Image             from 'app/tools/images/Image'\nimport Tooltip           from 'bootstrap/tooltip/Tooltip'\nimport {EMPTY_STRING}    from 'util/emptyVariables'\nimport {StringContainer} from 'util/StringContainer'\nimport {assert, nonNull} from 'util/utilitiesMethods'\n\ninterface TableProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly interpreter: AppInterpreterWithTable\n\n}\n\n/**\n * Create a {@link HTMLTableElement table}-like element with a multiple parts:\n *  - header\n *  - content\n *  - footer\n *  - caption\n *\n * @param id The element id\n * @param interpreter The interpreter to retrieve its content\n * @reactComponent\n */\nexport default function Table({id, interpreter,}: TableProperties,) {\n    const options = nonNull(interpreter.tableOptions,)\n    const color = interpreter.tableColor\n    const headersColor = interpreter.tableHeadersColor\n    const caption = interpreter.tableCaption\n    const additionalClasses = retrieveAdditionalClasses(interpreter, options,)\n    const contents = retrieveContent(interpreter, options,)\n    const headers = retrieveHeader(interpreter, options,)\n\n    return <div id={id} className={`ttable ${color == null ? '' : `table-${color}`} ${headersColor == null ? '' : `headers-${headersColor}`} w-100`}>\n        <TableHeader>{additionalClasses}{headers}</TableHeader>\n        <TableContent>{additionalClasses}{contents}</TableContent>\n        <TableFooter>{additionalClasses}{headers}</TableFooter>\n        <TableCaption>{caption}</TableCaption>\n    </div>\n}\n\nfunction TableHeader({children: [additionalClasses, headers,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleHeaderContent[],]>,) {\n    const size = headers.length\n    const columns = new Array<ReactJSXElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const it = headers[index]\n        const elementId = `${getHeaderKey(it,)}-header`\n        columns[index] = <div id={elementId} key={`table header (${getHeaderKey(it,)})`} className={`tcell${additionalClasses[index]}`}>\n            <HeaderTooltip elementId={elementId}>{it}</HeaderTooltip>\n            <HeaderOrFooterContent>{it}</HeaderOrFooterContent>\n        </div>\n    }\n    return <div className=\"theader\">{columns}</div>\n}\n\nfunction TableContent({children: [additionalClasses, contents,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleTableContent[]]>,) {\n    const size1 = contents.length\n    const tableContent = new Array<ReactJSXElement>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const content = contents[index1]\n        const rowContentKey = content[0]\n        const size2 = content.length\n        const rowContent = new Array<ReactJSXElement>(size2 - 1,)\n        let index2 = size2\n        while (index2-- > 1) {\n            const rowColumnContent = content[index2] as ReactElement//FIXME: Make the cast not present\n            if (rowColumnContent == null)\n                rowContent[index2] = <div key={`table content (empty ${rowContentKey} ${index1 + 1}-${index2 + 1})`} className=\"tcell empty-table-rowColumn-content-container\"/>\n            else\n                rowContent[index2] = <div key={`table content (${rowContentKey} ${index1 + 1}-${index2 + 1})`} className={`tcell${additionalClasses[index2 - 1]}`}>{rowColumnContent}</div>\n        }\n\n        tableContent[index1] =\n            <div key={`table row content (${rowContentKey} ${index1 + 1})`} className={`trow table-row-${StringContainer.getInHtml(rowContentKey,)}`}>{rowContent}</div>\n    }\n    return <div className=\"tcontent\">{tableContent}</div>\n}\n\nfunction TableFooter({children: [additionalClasses, headers,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleHeaderContent[],]>,) {\n    const size = headers.length\n    const columns = new Array<ReactJSXElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const it = headers[index]\n        const elementId = `${getHeaderKey(it,)}-footer`\n        columns[index] = <div id={elementId} key={`table footer (${getHeaderKey(it,)})`} className={`tcell${additionalClasses[index]}`}>\n            <FooterTooltip elementId={elementId}>{it}</FooterTooltip>\n            <HeaderOrFooterContent>{it}</HeaderOrFooterContent>\n        </div>\n    }\n\n    return <div className=\"tfooter mb-2\">{columns}</div>\n}\n\nfunction HeaderTooltip({children, elementId,}: ReactPropertiesWithChildren<{ readonly elementId: string, }, SingleHeaderContent>,) {\n    assert(typeof children != 'string', 'No tooltip can be displayed on a header that is a string.',)\n\n    const tooltip = children.tooltip\n    if (tooltip == null)\n        return null\n    return <Tooltip option={{title: tooltip, placement: 'bottom',}} reference={elementId}/>\n}\n\nfunction FooterTooltip({children, elementId,}: ReactPropertiesWithChildren<{ readonly elementId: string, }, SingleHeaderContent>,) {\n    assert(typeof children != 'string', 'No tooltip can be displayed on a footer that is a string.',)\n\n    const tooltip = children.tooltip\n    if (tooltip == null)\n        return null\n    return <Tooltip option={{title: tooltip, placement: 'top',}} reference={elementId}/>\n}\n\nfunction HeaderOrFooterContent({children,}: SimpleReactPropertiesWithChildren<SingleHeaderContent>,) {\n    if (typeof children == 'string')\n        return <>{children}</>\n    if ('element' in children)\n        return children.element\n    return <Image source={children.path} fallbackName={children.alt}/>\n}\n\nfunction TableCaption({children,}: SimpleReactPropertiesWithChildren<ReactElementOrString>,) {\n    if (children == null)\n        return null\n    return <small className=\"tcaption alert alert-info flex-grow-1 py-2\" role=\"alert\">{children}</small>\n}\n\n\n/**\n * Get the header key from either a {@link String} or a {@link SimpleHeader}\n *\n * @param header The header to retrieve its key\n */\nfunction getHeaderKey(header: SingleHeaderContent,): string {\n    return typeof header == 'string' ? header : header.key\n}\n\n/**\n * Get the classes with a space before and between the values\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its possible classes\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveAdditionalClasses({getAdditionalClass,}: AppInterpreterWithTable, options: readonly Enumerable[],): readonly string[] {\n    if (getAdditionalClass == null)\n        return Array.from({length: options.length,}, () => EMPTY_STRING,)\n\n    const size1 = options.length\n    const additionalClasses = new Array<string>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const additionalClass = getAdditionalClass(options[index1],)\n        if (additionalClass.length === 0) {\n            additionalClasses[index1] = EMPTY_STRING\n            continue\n        }\n\n        let classesJoined = ''\n        const size2 = additionalClass.length\n        let index2 = -1\n        while (++index2 < size2)\n            classesJoined += ` ${additionalClass[index2]}`\n        additionalClasses[index1] = classesJoined\n    }\n    return additionalClasses\n}\n\n/**\n * Retrieve the {@link SingleTableContent content} of the {@link interpreter} and put it in an {@link ReadonlyArray array}\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its content\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveContent({content, createTableContent,}: AppInterpreterWithTable, options: readonly Enumerable[],): readonly SingleTableContent[] {\n    const size2 = options.length\n    const size1 = content.length\n    const tableContents = new Array<SingleTableContent>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const contentValue = content[index1]\n\n        const tableContent: SingleTableContent = [contentValue.englishName,]\n        let index2 = -1\n        while (++index2 < size2) {\n            const tableContentCreated = createTableContent(contentValue, options[index2],)\n            const size3 = tableContentCreated.length\n            let index3 = -1\n            while (++index3 < size3)\n                tableContent.push(tableContentCreated[index3],)\n        }\n        tableContents[index1] = tableContent\n    }\n    return tableContents\n}\n\n/**\n * Retrieve the {@link SingleHeaderContent header} of the {@link interpreter} and put it in an {@link ReadonlyArray array}\n *\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its content\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveHeader({createTableHeader,}: AppInterpreterWithTable, options: readonly Enumerable[],): readonly SingleHeaderContent[] {\n    const headerContent = [] as SingleHeaderContent[]\n    const size = options.length\n    let index = -1\n    while (++index < size) {\n        const tableHeader = createTableHeader(options[index],)\n        if (tableHeader == null)\n            continue\n        headerContent.push(tableHeader,)\n    }\n    return headerContent\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["DisplayButtonGroup","_ref","reactKey","key","views","currentView","_jsx","id","className","children","map","_ref2","view","name","DisplayButton","routeName","concat","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","ViewDisplays","CompanionEnum","get","current","SubMainContainer","viewDisplayAndRouteName","viewDisplay","alert","titleContent","asideContent","description","_jsxs","UnfinishedText","isHidden","_instance","_classPrivateFieldLooseKey","_nameHeader","_smm1And3DSGameHeader","_smm2GameHeader","_gameHeader","_categoryHeader","_limitHeader","_completePlayLimitHeader","_completeEditorLimitHeader","_completeEditorLimitInSmm1And3dsHeader","_completeEditorLimitInSmm2Header","CommonOptions","constructor","Object","defineProperty","writable","value","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","this","nameHeader","_classPrivateFieldLoo3","_classPrivateFieldLoo4","element","contentTranslation","getNameContent","enumeration","NameComponent","reference","popoverOrientation","categoryHeader","_classPrivateFieldLoo5","_classPrivateFieldLoo6","gameContentTranslation","getCategoryContent","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","englishName","english","startingKey","englishNameInHtml","Image","file","gameHeader","_classPrivateFieldLoo7","_classPrivateFieldLoo8","smm1And3dsGameHeader","_classPrivateFieldLoo9","_classPrivateFieldLoo10","alt","Games","SUPER_MARIO_MAKER_1","imageFile","fallbackName","fullName","smm2GameHeader","_classPrivateFieldLoo11","_classPrivateFieldLoo12","SUPER_MARIO_MAKER_2","getGameContent","isInSuperMarioMaker1","GameImage","isInSuperMarioMakerFor3DS","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","isInSuperMarioMaker2","getThemeContent","isInCourseTheme","COURSE_THEME_IMAGE_FILE","isInWorldTheme","WORLD_THEME_IMAGE_FILE","limitHeader","_classPrivateFieldLoo13","_classPrivateFieldLoo14","completePlayLimitHeader","_classPrivateFieldLoo15","_classPrivateFieldLoo16","completeEditorLimitHeader","_classPrivateFieldLoo17","_classPrivateFieldLoo18","completeEditorLimitInSmm1And3dsHeader","_classPrivateFieldLoo19","_classPrivateFieldLoo20","Name1","acronym","Name3ds","completeEditorLimitInSmm2Header","_classPrivateFieldLoo21","_classPrivateFieldLoo22","Name","Table","interpreter","options","nonNull","tableOptions","color","tableColor","headersColor","tableHeadersColor","caption","tableCaption","additionalClasses","_ref9","getAdditionalClass","Array","from","length","EMPTY_STRING","size1","index1","additionalClass","classesJoined","size2","index2","retrieveAdditionalClasses","contents","_ref10","content","createTableContent","tableContents","contentValue","tableContent","tableContentCreated","size3","index3","push","retrieveContent","headers","_ref11","createTableHeader","headerContent","size","index","tableHeader","retrieveHeader","TableHeader","TableContent","TableFooter","TableCaption","columns","it","elementId","getHeaderKey","HeaderTooltip","HeaderOrFooterContent","rowContentKey","rowContent","rowColumnContent","StringContainer","getInHtml","_ref4","FooterTooltip","_ref5","assert","tooltip","Tooltip","option","title","placement","_ref6","_ref7","_Fragment","source","_ref8","role","header","CardList","_keyRetriever","keyRetriever","enumerable","dimensions","createCardListDimension","df","default","sm","small","md","medium","lg","large","xl","extraLarge","xxl","extraExtraLarge","createDimension","contentToDisplay","uniqueKey","nameContainer","createCardListContent","SimpleList","createListDimension","Popover","on","triggers","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","super","ProjectLanguages","state","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","document","getElementById","html","trigger","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","isCurrent","nameMap","toNameMap","language","includes","languageTranslation","space","unionTrait","hidden","useState"],"sourceRoot":""}