{"version":3,"file":"static/js/764.867fb2df.chunk.js","mappings":"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","sources":["app/property/InstrumentGames.ts","app/InstrumentApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {CompanionEnumWithParentSingleton}   from '@joookiwi/enumerable'\nimport {CompanionEnumWithParent, EnumWithParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/InstrumentGames.types'\nimport type {ViewDisplays}                       from 'app/withInterpreter/ViewDisplays'\nimport {Games}                                   from 'core/game/Games'\n\nexport abstract class InstrumentGames\n    extends EnumWithParent<Games, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER = new class InstrumentGames_SuperMarioMaker extends InstrumentGames {\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class InstrumentGames_SuperMarioMakerForNintendo3DS extends InstrumentGames {\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class InstrumentGames_SuperMarioMaker2 extends InstrumentGames {\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<InstrumentGames, typeof InstrumentGames, Games, typeof Games> = class CompanionEnum_InstrumentGames\n        extends CompanionEnumWithParent<InstrumentGames, typeof InstrumentGames, Games, typeof Games> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_InstrumentGames\n\n        private constructor() {\n            super(InstrumentGames, Games,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_InstrumentGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get smm1Color(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getSmm1RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyInstrument (${viewDisplay.urlValue as | 'list' | 'card'} Game=1)`\n    }\n\n    public getSmm3dsRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyInstrument (${viewDisplay.urlValue as | 'list' | 'card'} Game=3DS)`\n    }\n\n    public getSmm2RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyInstrument (${viewDisplay.urlValue as | 'list' | 'card'} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './InstrumentApp.scss'\n\nimport type {InstrumentAppProperties}    from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}           from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}             from 'util/collection/GameCollection'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {InstrumentGames}                            from 'app/property/InstrumentGames'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport {Instruments}                                from 'core/instrument/Instruments'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport SimpleSoundComponent                         from 'util/file/sound/component/SimpleSound.component'\nimport {assert, filterGame}                         from 'util/utilitiesMethods'\n\nclass InstrumentAppInterpreter\n    implements AppInterpreterWithCardList<Instruments> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection,) {\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(Instruments.CompanionEnum.get.values.toArray(), this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 5,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: Instruments,) {\n        const name = enumerable.name\n        const englishName = enumerable.englishName\n\n        return <div className=\"instrument-sounds\">{enumerable.sounds.map((sound, index,) =>\n            <SimpleSoundComponent key={`instrument sounds #${index} (${englishName})`} file={sound} title={`${name} (instrument #${index})`}/>\n        )}</div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyInstrument (list)',],\n    [ViewDisplays.CARD_LIST, 'everyInstrument (card)',],\n] as const satisfies readonly ViewAndRouteName[]\n\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nexport default function InstrumentApp({viewDisplay, games,}: InstrumentAppProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The InstrumentApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n\n    const titleContent = gameContentTranslation('instrument.all',)\n    const appInterpreter = new InstrumentAppInterpreter(games,)\n\n    const game = games.hasSMM2\n        ? InstrumentGames.SUPER_MARIO_MAKER_2\n        : games.hasSMM1\n            ? InstrumentGames.SUPER_MARIO_MAKER\n            : InstrumentGames.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"instrument\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<InstrumentDescription viewDisplay={viewDisplay} game={game}/>}\n                                 asideContent={<InstrumentAsideContent viewDisplay={viewDisplay} game={game}/>}>\n            <SimpleList reactKey=\"instrument\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"instrument\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             description={<InstrumentDescription viewDisplay={viewDisplay} game={game}/>}\n                             asideContent={<InstrumentAsideContent viewDisplay={viewDisplay} game={game}/>}>\n        <CardList reactKey=\"instrument\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Description content --------------------\n\ninterface InstrumentDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: InstrumentGames\n\n}\n\n/** @reactComponent */\nfunction InstrumentDescription({viewDisplay, game,}: InstrumentDescriptionProperties,) {\n    const smm1Link = game.getSmm1RouteName(viewDisplay,)\n    const smm3dsLink = game.getSmm3dsRouteName(viewDisplay,)\n    const smm2Link = game.getSmm2RouteName(viewDisplay,)\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyInstrument (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyInstrument (card)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation('instrument.description.intro page', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1Link}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('instrument.description.intro variants', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-variant-description\" routeName={smm1Link}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-variant-description\" routeName={smm3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-variant-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('instrument.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface InstrumentAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: InstrumentGames\n\n}\n\n/** @reactComponent */\nfunction InstrumentAsideContent({viewDisplay, game,}: InstrumentAsideContentProperties,) {\n    return <div id=\"instrument-gamesButton-container\" className=\"gameAsideContent-container btn-group btn-group-sm\">\n        <LinkButton partialId=\"smm1Game\" routeName={game.getSmm1RouteName(viewDisplay,)} color={game.smm1Color}>\n            <GameImage reference={smm1}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm3dsGame\" routeName={game.getSmm3dsRouteName(viewDisplay,)} color={game.smm3dsColor}>\n            <GameImage reference={smm3ds}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm2Game\" routeName={game.getSmm2RouteName(viewDisplay,)} color={game.smm2Color}>\n            <GameImage reference={smm2}/>\n        </LinkButton>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <div className=\"description-container\">{description}</div>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or a simple underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["InstrumentGames","EnumWithParent","constructor","super","smm1Color","smm3dsColor","smm2Color","getSmm1RouteName","viewDisplay","concat","urlValue","getSmm3dsRouteName","getSmm2RouteName","_InstrumentGames","SUPER_MARIO_MAKER","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_InstrumentGames","CompanionEnum_InstrumentGames","CompanionEnumWithParent","Games","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","this","Object","defineProperty","writable","value","_games","InstrumentAppInterpreter","games","content","filterGame","Instruments","values","toArray","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","createCardListContent","enumerable","name","englishName","_jsx","className","children","sounds","map","sound","index","SimpleSoundComponent","file","title","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","smm1","SUPER_MARIO_MAKER_1","smm3ds","smm2","InstrumentApp","_ref","assert","TABLE","titleContent","gameContentTranslation","appInterpreter","game","hasSMM2","hasSMM1","SubMainContainer","reactKey","description","InstrumentDescription","asideContent","InstrumentAsideContent","SimpleList","interpreter","CardList","_ref2","smm1Link","smm3dsLink","smm2Link","listLink","cardLink","_jsxs","_Fragment","TextOrLink","id","routeName","GameImage","reference","LinkText","partialId","color","contentTranslation","toLowerCase","cardsLink","_ref3","LinkButton","DisplayButtonGroup","key","views","currentView","view","DisplayButton","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","UnfinishedText","isHidden","_keyRetriever","keyRetriever","dimensions","df","sm","md","lg","xl","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","uniqueKey","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}