{"version":3,"file":"static/js/210.a317f030.chunk.js","mappings":"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","sources":["app/options/ThemeAppOption.tsx","app/property/ThemeGames.ts","app/ThemeApp.tsx","app/tools/button/LinkButton.tsx","core/nightEffect/NightEffect.component.tsx","core/time/TimeImage.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/ThemeAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport Image                    from 'app/tools/images/Image'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport ThemeImage               from 'core/theme/ThemeImage'\nimport {Themes}                 from 'core/theme/Themes'\nimport TimeImage                from 'core/time/TimeImage'\nimport {Times}                  from 'core/time/Times'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Themes> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <ThemeImage reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly ENDLESS_MARIO_ICON =    new class ThemeAppOption_EndlessMarioImage extends ThemeAppOption {\n\n        protected override _createContentOption({endlessMarioImageFile,}: Themes,) {\n            return <Image file={endlessMarioImageFile}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'endless-mario-icon', element: unfinishedText('Endless Mario'),}//TODO add Endless Mario\n        }\n\n    }()\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <div className=\"nameWithContent-container\">\n                <div className=\"col-10\">\n                    {CommonOptions.get.getGameContent(enumeration)}\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,) {\n            return <NightEffectComponent theme={courseTheme}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <div className=\"nightDesert-header-image-container position-relative mx-auto\">\n                    <ThemeImage reference={Themes.DESERT}/>\n                    <TimeImage reference={Times.NIGHT}/>\n                </div>,\n                tooltip: gameContentTranslation('Effect (night)', {night: unfinishedText('night effect name',),},)//TODO add translation for the night effect name\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<ThemeAppOption, typeof ThemeAppOption> = class CompanionEnum_ThemeAppOption\n        extends CompanionEnum<ThemeAppOption, typeof ThemeAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_ThemeAppOption\n\n        private constructor() {\n            super(ThemeAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_ThemeAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): ReactElement\n\n    public renderContent(enumeration: Themes,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/ThemeGames.types'\nimport type {ThemeTypes}                         from 'app/property/ThemeTypes'\nimport type {ViewDisplays}                       from 'app/withInterpreter/ViewDisplays'\n\nexport class ThemeGames\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class ThemeGames_SuperMarioMakerOrSuperMarioMakerForNintendo3DS extends ThemeGames {\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1Or3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class ThemeGames_SuperMarioMaker2 extends ThemeGames {\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<ThemeGames, typeof ThemeGames> = class CompanionEnum_ThemeGames\n        extends CompanionEnum<ThemeGames, typeof ThemeGames> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_ThemeGames\n\n        private constructor() {\n            super(ThemeGames,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_ThemeGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get smm1Or3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getSmm1Or3dsRouteName(type: ThemeTypes, viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `${type.routeName} (${viewDisplay.urlValue} Game=1)`\n    }\n\n    public getSmm2RouteName(type: ThemeTypes, viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `${type.routeName} (${viewDisplay.urlValue} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './ThemeApp.scss'\n\nimport type {ThemeAppProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ClassWithType}           from 'core/ClassWithType'\nimport type {Themes}                  from 'core/theme/Themes'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\n\nimport SubMainContainer                                  from 'app/_SubMainContainer'\nimport {CommonOptions}                                   from 'app/options/CommonOptions'\nimport {ThemeAppOption}                                  from 'app/options/ThemeAppOption'\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport {ThemeGames}                                      from 'app/property/ThemeGames'\nimport {ThemeTypes}                                      from 'app/property/ThemeTypes'\nimport LinkButton                                        from 'app/tools/button/LinkButton'\nimport Image                                             from 'app/tools/images/Image'\nimport Table                                             from 'app/tools/table/Table'\nimport CardList                                          from 'app/withInterpreter/CardList'\nimport SimpleList                                        from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                                    from 'app/withInterpreter/ViewDisplays'\nimport GameImage                                         from 'core/game/GameImage'\nimport {Games}                                           from 'core/game/Games'\nimport ThemeImage                                        from 'core/theme/ThemeImage'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {filterGame}                                      from 'util/utilitiesMethods'\n\nclass ThemeAppInterpreter\n    implements AppInterpreterWithTable<Themes, ThemeAppOption>,\n        ClassWithType<ThemeTypes> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(type: ThemeTypes, games: GameCollection,) {\n        this.#type = type\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get type(): ThemeTypes {\n        return this.#type\n    }\n\n    public get content() {\n        return filterGame(this.type.content, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        const type = this.type\n        if (type === ThemeTypes.COURSE)\n            return {\n                default: 1,\n                small: 2,\n                medium: 5,\n            }\n        if (type === ThemeTypes.WORLD)\n            return {\n                default: 1,\n                small: 2,\n                medium: 4,\n            }\n        return {\n            default: 1,\n            small: 2,\n            medium: 3,\n            large: 4,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: Themes,) {\n        const {englishNameInHtml, endlessMarioImageFile,} = enumerable\n\n        return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n            <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable,)}</div>\n            <div className=\"images-container col-7\">\n                <ThemeImage reference={enumerable} isSmallPath/>\n                <Image file={endlessMarioImageFile}/>\n            </div>\n            <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable,)}</div>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('theme.all.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): readonly ThemeAppOption[] {\n        return [\n            ThemeAppOption.ICON,\n            ThemeAppOption.ENDLESS_MARIO_ICON,\n            ThemeAppOption.NAME,\n            ThemeAppOption.NIGHT_EFFECT,\n        ]\n    }\n\n\n    public createTableContent(content: Themes, option: ThemeAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: ThemeAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\n/** @reactComponent */\nexport default function ThemeApp({viewDisplay, type, games,}: ThemeAppProperties,) {\n    const routeName = type.routeName\n    const viewDisplayAndRouteName = [\n        [ViewDisplays.SIMPLE_LIST, `${routeName} (list)`,],\n        [ViewDisplays.CARD_LIST, `${routeName} (card)`,],\n        [ViewDisplays.TABLE, `${routeName} (table)`,],\n    ] as const satisfies readonly ViewAndRouteName[]\n    const titleContent = gameContentTranslation('theme.all.all',)\n    const appInterpreter = new ThemeAppInterpreter(type, games,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type} games={games}/>}>\n            <SimpleList reactKey=\"theme\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type} games={games}/>}>\n            <CardList reactKey=\"theme\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type} games={games}/>}>\n        <Table id=\"theme-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Aside content --------------------\n\ninterface ThemeAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: ThemeTypes\n\n    readonly games: GameCollection\n\n}\n\n/** @reactComponent */\nfunction ThemeAsideContent({viewDisplay, type, games,}: ThemeAsideContentProperties,) {\n    return <div className=\"theme-asideContent-container\">\n        <TypeAsideContent viewDisplay={viewDisplay} type={type}/>\n        <div className=\"d-inline mx-1\"/>\n        <GameAsideContent viewDisplay={viewDisplay} type={type} games={games}/>\n    </div>\n}\n\ninterface ThemeTypeAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: ThemeTypes\n\n}\n\n/** @reactComponent */\nfunction TypeAsideContent({viewDisplay, type,}: ThemeTypeAsideContentProperties,) {\n    return <div id=\"theme-linkButton-container\" className=\"btn-group btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allTheme\" routeName={viewDisplay.getRoutePath(type.allRouteName,)} color={type.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"theme-linkButton-courseAndWorld-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"courseTheme\" routeName={viewDisplay.getRoutePath(type.courseRouteName,)} color={type.courseColor}>\n                <Image id=\"courseTheme-button-image\" file={COURSE_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n            </LinkButton>\n            <LinkButton partialId=\"worldTheme\" routeName={viewDisplay.getRoutePath(type.worldRouteName,)} color={type.worldColor}>\n                <Image id=\"worldTheme-button-image\" file={WORLD_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nfunction GameAsideContent({viewDisplay, type, games,}: ThemeAsideContentProperties,) {\n    const themeGame = games.hasSMM2\n        ? ThemeGames.SUPER_MARIO_MAKER_2\n        : ThemeGames.SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    return <div id=\"theme-gamesButton-singularGame-container\" className=\"gameAsideContent-container btn-group btn-group-sm\">\n        <LinkButton partialId=\"smm1Or3dsGame\" routeName={themeGame.getSmm1Or3dsRouteName(type, viewDisplay,)} color={themeGame.smm1Or3dsColor}>\n            <GameImage reference={smm1}/>\n            <GameImage reference={smm3ds}/>\n        </LinkButton>\n        <LinkButton partialId=\"smm2Game\" routeName={themeGame.getSmm2RouteName(type, viewDisplay,)} color={themeGame.smm2Color}>\n            <GameImage reference={smm2}/>\n        </LinkButton>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    readonly gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    readonly theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`,)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n","import type {Times}           from 'core/time/Times'\nimport type {ReactProperties} from 'util/react/ReactProperties'\nimport Image                  from 'app/tools/images/Image'\n\ninterface TimeImageProperties\n    extends ReactProperties {\n\n    readonly reference: Times\n\n}\n\nexport default function TimeImage({reference,}: TimeImageProperties,) {\n    return <Image file={reference.imageFile} className={`time-image ${reference.englishNameInHtml}-image`}/>\n}\n"],"names":["ThemeAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","_ThemeAppOption","ICON","_jsx","ThemeImage","reference","key","element","unfinishedText","ENDLESS_MARIO_ICON","_ref","endlessMarioImageFile","Image","file","NAME","_jsxs","className","children","CommonOptions","get","getGameContent","getNameContent","getThemeContent","nameHeader","NIGHT_EFFECT","_ref2","courseTheme","NightEffectComponent","theme","Themes","DESERT","TimeImage","Times","NIGHT","tooltip","gameContentTranslation","night","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_ThemeAppOption","CompanionEnum_ThemeAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","value","ThemeGames","smm1Or3dsColor","smm2Color","getSmm1Or3dsRouteName","type","viewDisplay","concat","routeName","urlValue","getSmm2RouteName","_ThemeGames","SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_ThemeGames","CompanionEnum_ThemeGames","_type","_games","ThemeAppInterpreter","games","tableHeadersColor","tableCaption","content","filterGame","createListDimension","ThemeTypes","COURSE","default","small","medium","WORLD","large","extraLarge","createCardListDimension","createCardListContent","enumerable","englishNameInHtml","id","isSmallPath","tableOptions","createTableContent","option","createTableHeader","ThemeApp","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","titleContent","appInterpreter","SubMainContainer","reactKey","asideContent","ThemeAsideContent","SimpleList","interpreter","CardList","Table","TypeAsideContent","GameAsideContent","_ref3","LinkButton","partialId","getRoutePath","allRouteName","color","allColor","contentTranslation","courseRouteName","courseColor","COURSE_THEME_IMAGE_FILE","worldRouteName","worldColor","WORLD_THEME_IMAGE_FILE","smm1","Games","SUPER_MARIO_MAKER_1","smm3ds","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","smm2","_ref4","themeGame","hasSMM2","GameImage","disabled","Link","to","routeFromName","properties","NightEffectByGameStyle","NightEffectByTheme","gameStyle","nightDesertWindTranslationKey","translationKey","_Fragment","_effect$createNewComp","effect","createNewComponent","imageFile"],"sourceRoot":""}