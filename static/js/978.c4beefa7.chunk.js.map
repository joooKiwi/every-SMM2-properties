{"version":3,"file":"static/js/978.c4beefa7.chunk.js","mappings":"gUAoBMA,GAAuBC,EAAAA,EAAAA,OAAK,kBAAM,sCAAN,IAC5BC,GAAuBD,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAOlC,oEAkImBE,OAAOC,SAjInB,IAAeC,EAAtB,0CA+EI,aAAuB,IAAD,wBAClB,eADkB,+HAErB,CAjFL,mDA2FI,WAA4D,IAAD,WACvD,4BAAOC,KAAP,2BAAsC,IAAIC,EAAAA,GAA8B,kBAAM,EAAKC,qBAAqBH,EAAeI,8BAA/C,GAC3E,GA7FL,yBA+FI,WACI,OAAOH,KAAKI,uBAAuBC,aACtC,GAjGL,gCAwGI,WAAwD,IAAD,WACnD,4BAAOL,KAAP,2BAAoC,IAAIM,EAAAA,GAA4B,kBAAM,EAAKC,0BAAX,GACvE,GA1GL,6BA4GI,WACI,OAAOP,KAAKQ,qBAAqBC,iBACpC,GA9GL,mBAqHI,WACI,OAAOV,CACV,IAvHL,uBAyHI,SAAuBW,GACnB,OAAOC,EAAAA,GAAAA,WAAgBX,KAAMU,EAChC,GA3HL,kBA6HI,WACI,OAAOC,EAAAA,GAAAA,YAAiBX,KAC3B,GA/HL,aAiII,WACI,OAAOA,KAAKY,OAAOf,OAAOC,WAC7B,KAnIL,GACYa,EAAAA,IADUZ,EAKKc,MAAyB,4JAE5C,SAAwCC,GACpC,IAAOC,EAA0BD,EAA1BC,sBAEP,MAAO,CACHD,EAAYE,uBAAsB,GACT,MAAzBD,EAAgC,MAAO,SAACrB,EAAD,CAAOuB,OAAQF,EAAuBG,aAAY,+BAA0BJ,EAAYK,YAAtC,OAEhG,GAT2C,sCAW5C,WACI,MAAO,CACHC,IAAK,QAASC,SAASC,EAAAA,EAAAA,IAAmB,SAC1CC,WAAY,CACR,CAACH,IAAK,cAAeC,QAAS,MAC9B,CAACD,IAAK,sBAAuBC,QAAS,sBAGjD,KAnB2C,EAAG,CAAoCtB,IALrEA,EA2BKyB,KAAyB,4JAE5C,SAAwCV,GACpC,OAAO,iBAAKW,UAAU,4BAAf,WACH,iBAAKA,UAAU,SAAf,UACKC,EAAAA,EAAAA,IAAAA,eAAiCZ,GACjCY,EAAAA,EAAAA,IAAAA,eAAiCZ,OAEtC,gBAAKW,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,gBAAkCZ,OAEjE,GAV2C,sCAY5C,WACI,OAAOY,EAAAA,EAAAA,IAAAA,UACV,KAd2C,EAAG,CAAkC3B,IA3BnEA,EA4CK4B,aAAyB,4JAE5C,YAAgF,IAA3BC,EAA0B,EAAtCC,UAAYD,YACjD,OAAO,SAAChC,EAAD,CAAsBkC,MAAOF,GACvC,GAJ2C,sCAM5C,WACI,MAAO,CACHR,IAAK,SAAUC,SAAS,SAAC3B,EAAD,CAAOuB,OAAQc,EAAAA,EAAAA,MAAAA,UAAuBb,aAAY,mBAAca,EAAAA,EAAAA,MAAAA,eACxFC,SAASC,EAAAA,EAAAA,IAAuB,iBAAkB,CAACC,MAAO,0BAEjE,KAX2C,EAAG,CAA0CnC,IA5C3EA,EAwEJI,iCAAAA,E,4CClFGgC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAGjB,WAAmBC,GAAwB,IAAD,yBACtC,cAAMA,IACDC,MAAQ,CACTC,cAAeC,EAAAA,EAAAA,WAHmB,CAKzC,C,yCAID,WACI,MAAO,OACV,oCAED,WACI,OAAON,EAAAA,EAAAA,IAAuB,eACjC,4CAED,WACI,OAAO,iFAEH,WACI,OAAOO,EAAAA,EAAO3C,OAAOC,WACxB,GAJE,iCAQH,WACI,MAAO,CACH2C,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,WAAY,EAEnB,GAfE,qCAoBH,WACI,MAAO,MACV,GAtBE,mCAwBH,SAA6BC,GACzB,IAAO1B,EAA0D0B,EAA1D1B,YAAa2B,EAA6CD,EAA7CC,kBAAmB/B,EAA0B8B,EAA1B9B,sBAEvC,OAAO,iBAAKU,UAAU,YAAYsB,GAAE,gBAAWD,GAAxC,WACH,gBAAKrB,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,eAAiCmB,MACzD,iBAAKpB,UAAU,yBAAf,UACKoB,EAAW7B,uBAAsB,GACR,MAAzBD,EAAgC,MAAO,SAAC,UAAD,CAAOE,OAAQF,EAAuBG,aAAY,UAAKC,EAAL,0BAE9F,gBAAKM,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,gBAAkCmB,OAEjE,GAnCE,mCAwCH,SAAmCnC,GAC/BX,EAAeI,4BAA8BO,CAChD,GA1CE,wBA4CH,WACI,MAAO,CACHX,EAAec,MACfd,EAAeyB,KACfzB,EAAe4B,aAEtB,GAlDE,2BAoDH,WACI,MAAO,CACHqB,SAASf,EAAAA,EAAAA,IAAuB,gBAEvC,GAxDE,gCA2DH,SAA0BgB,GACtB,OAAOA,EAAO5C,aACjB,GA7DE,+BA+DH,SAAyB4C,GACrB,OAAOA,EAAOxC,iBACjB,KAjEE,KAsEV,K,EA3FgB0B,CACTe,EAAAA,E,wKCANxD,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,sCAAN,IACrBwD,GAAgBxD,EAAAA,EAAAA,OAAK,kBAAM,sCAAN,IAM3B,kMACa+B,EAAb,WAMI,cAAuB,oWACtB,CAPL,uCAyBI,WAA8C,IAAD,IACzC,4BAAO1B,KAAP,2BAA4B,CAACoB,IAAK,OAAQC,SAASC,EAAAA,EAAAA,IAAmB,QACzE,GA3BL,4BA6BI,SAAsBR,GAClB,OAAO,SAACqC,EAAD,CAAeJ,GAAG,OAAOK,KAAMtC,EAAYe,UAAWwB,mBAAmB,QACnF,GA/BL,0BAkCI,WAAkD,IAAD,IAC7C,4BAAOrD,KAAP,2BAAgC,CAACoB,IAAK,WAAYC,SAASY,EAAAA,EAAAA,IAAuB,YACrF,GApCL,gCAsCI,SAA0BnB,EAA+CwC,GACrE,IAAMF,EAAOtC,EAAYe,UAAU0B,sBACnC,GAAIH,IAASI,EAAAA,EAAAA,IACT,OAAO,KAEX,IAAMC,EAAoBH,IACpBnC,EAAciC,EAAKM,QACnBC,EAAW,yBAAqBxC,EAArB,KACjB,MAAgC,iBAArBsC,GACA,SAAC/D,EAAD,CAAoCuB,OAAQwC,EAAmBvC,aAAY,UAAKkC,EAAKM,QAAV,aAA3E,UAAeC,EAAf,YACJ,SAACR,EAAD,CAA2CJ,GAAE,wBAAmBjC,EAAYgC,mBAAqBM,KAAMA,EAAMC,mBAAmB,QAAhI,UAAuBM,EAAvB,SACV,GAjDL,sBAoDI,WAA8C,IAAD,IACzC,4BAAO3D,KAAP,2BAA4B,CAACoB,IAAK,OAAQC,SAASY,EAAAA,EAAAA,IAAuB,QAC7E,GAtDL,2BAwDI,WAAgF,IAAD,uBAAvDV,EAAuD,yBAAvDA,EAAuD,gBAC3E,MAAO,CACHH,IAAK,OAAQC,SAASY,EAAAA,EAAAA,IAAuB,QAC7CV,WAAYA,EAEnB,GA7DL,kCAgEI,WAA0D,IAAD,IACrD,4BAAOvB,KAAP,2BAAwCA,KAAK4D,cACzC,CAACxC,IAAK,uBAAwByC,IAAKC,EAAAA,EAAAA,oBAAAA,YAAuCC,KAAMD,EAAAA,EAAAA,oBAAAA,WAChF,CAAC1C,IAAK,4BAA6ByC,IAAKC,EAAAA,EAAAA,mCAAAA,YAAsDC,KAAMD,EAAAA,EAAAA,mCAAAA,WACpG,CAAC1C,IAAK,uBAAwByC,IAAKC,EAAAA,EAAAA,oBAAAA,YAAuCC,KAAMD,EAAAA,EAAAA,oBAAAA,WAEvF,GAtEL,mCAwEI,WAA2D,IAAD,IACtD,4BAAO9D,KAAP,2BAAyCA,KAAK4D,cAAL,MAAA5D,MAAA,OAAsBA,KAAKgE,WACvE,GA1EL,qBA4EI,WAA8E,IAAD,IACzE,4BAAOhE,KAAP,2BAA2B,CACvB,CAACoB,IAAK,6BAA8ByC,IAAKC,EAAAA,EAAAA,oBAAAA,YAAuCC,KAAMD,EAAAA,EAAAA,oBAAAA,WACtF,CAAC1C,IAAK,uBAAwByC,IAAKC,EAAAA,EAAAA,oBAAAA,YAAuCC,KAAMD,EAAAA,EAAAA,oBAAAA,WAEvF,GAjFL,4BAyFI,SAAsBhD,GAClB,IAAMe,EAAYf,EAAYe,UACxBoC,EAAWpC,EAAUqC,qBACrBC,EAAatC,EAAUuC,0BACvBC,EAAWxC,EAAUyC,qBAE3B,OAAO,iBAA8DvB,GAAE,UAAKjC,EAAYgC,kBAAjB,gCAAkErB,UAAU,8BAA5I,UACFwC,EAAWH,EAAAA,EAAAA,oBAAAA,sBAAkD,KAC7DK,EAAaL,EAAAA,EAAAA,mCAAAA,sBAAiE,KAC9EO,EAAWP,EAAAA,EAAAA,oBAAAA,sBAAkD,OAH3D,UAAahD,EAAYK,YAAzB,0BAKV,GApGL,6BAuGI,SAAuBL,GACnB,IAAMe,EAAYf,EAAYe,UAE9B,OAAO,iBAA+DkB,GAAE,UAAKjC,EAAYgC,kBAAjB,iCAAmErB,UAAU,+BAA9I,UACFI,EAAU0C,iBAAkB,SAAC7E,EAAD,CAAOuB,OAAM,WAAMuD,EAAAA,EAAN,4BAA2CtD,aAAa,iBAAmB,KACpHW,EAAU4C,gBAAiB,SAAC/E,EAAD,CAAOuB,OAAM,WAAMuD,EAAAA,EAAN,2BAA0CtD,aAAa,gBAAkB,OAF/G,UAAaJ,EAAYK,YAAzB,2BAIV,IA9GL,gBASI,WAAyB,IAAD,IACpB,4BAAOnB,KAAP,2BAA0B,IAAIA,IACjC,KAXL,2BAAa0B,EAAAA,EAAAA,CAAAA,UAAAA,EAAAA,WAAAA,G","sources":["app/options/ThemeAppOption.tsx","app/ThemeApp.tsx","app/options/CommonOptions.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {lazy}                                                                    from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/ThemeAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Themes}                                           from 'core/theme/Themes'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\n\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {Times}                                      from 'core/time/Times'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =                lazy(() => import('app/tools/images/Image'))\nconst NightEffectComponent = lazy(() => import('core/nightEffect/NightEffect.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            const {endlessMarioImagePath,} = enumeration\n\n            return [\n                enumeration.renderSingleComponent(false),\n                endlessMarioImagePath == null ? null : <Image source={endlessMarioImagePath} fallbackName={`Endless Mario Image (${enumeration.englishName})`}/>,\n            ]\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: [\n                    {key: 'image-empty', element: null,},\n                    {key: 'image-endless-mario', element: '--Endless Mario--',},//TODO add Endless Mario\n                ],\n            }\n        }\n\n    }()\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <div className=\"nameWithContent-container\">\n                <div className=\"col-10\">\n                    {CommonOptions.get.getGameContent(enumeration)}\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,) {\n            return <NightEffectComponent theme={courseTheme}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <Image source={Times.NIGHT.imagePath} fallbackName={`effect - ${Times.NIGHT.englishName}`}/>,\n                tooltip: gameContentTranslation('Effect (night)', {night: '--night effect name--',},)//TODO add translation for the night effect name\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ThemeAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link ThemeAppOption} and get by {@link ThemeApp}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Themes\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(ThemeAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return ThemeAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<ThemeAppOption>,): ThemeAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<ThemeAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './ThemeApp.scss'\n\nimport type {AppProperties}                                        from 'app/AppProperties.types'\nimport type {ThemeAppStates}                                       from 'app/AppStates.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport {ThemeAppOption}         from 'app/options/ThemeAppOption'\nimport Image                    from 'app/tools/images/Image'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {Themes}                 from 'core/theme/Themes'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class ThemeApp\n    extends AbstractTableApp<AppInterpreterWithTable<Themes, ThemeAppOption>, AppProperties, ThemeAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'theme'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every themes')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Themes, ThemeAppOption> {\n        return new class implements AppInterpreterWithTable<Themes, ThemeAppOption> {\n\n            public get iterable() {\n                return Themes[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: Themes,) {\n                const {englishName, englishNameInHtml, endlessMarioImagePath,} = enumerable\n\n                return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n                    <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable)}</div>\n                    <div className=\"images-container col-7\">\n                        {enumerable.renderSingleComponent(true)}\n                        {endlessMarioImagePath == null ? null : <Image source={endlessMarioImagePath} fallbackName={`${englishName} (Endless mario)`}/>}\n                    </div>\n                    <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable)}</div>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Themes,) {\n                ThemeAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): ThemeAppOption[] {\n                return [\n                    ThemeAppOption.IMAGE,\n                    ThemeAppOption.NAME,\n                    ThemeAppOption.NIGHT_EFFECT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every themes')\n                }\n            }\n\n\n            public createTableContent(option: ThemeAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: ThemeAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {Enum} from '@joookiwi/enumerable/dist/types'\nimport {lazy}      from 'react'\n\nimport type {SingleHeaderContent, SingleHeadersContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                    from 'core/theme/Themes'\nimport type {Name}                                      from 'lang/name/Name'\nimport type {NameTrait}                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from 'lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from 'util/react/ReactProperties'\n\nimport {BASE_PATH}                                  from 'variables'\nimport {Games}                                      from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {EmptyStringName}                            from 'lang/name/EmptyStringName'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('app/tools/images/Image'))\nconst NameComponent = lazy(() => import('lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('Game'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: gameContentTranslation('Game'),\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : null}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : null}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : null}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : null}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n"],"names":["Image","lazy","NightEffectComponent","Symbol","iterator","ThemeAppOption","this","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","values","IMAGE","enumeration","endlessMarioImagePath","renderSingleComponent","source","fallbackName","englishName","key","element","contentTranslation","subHeaders","NAME","className","CommonOptions","NIGHT_EFFECT","courseTheme","reference","theme","Times","tooltip","gameContentTranslation","night","ThemeApp","props","state","typeDisplayed","ViewDisplays","Themes","small","medium","large","extraLarge","enumerable","englishNameInHtml","id","caption","option","AbstractTableApp","NameComponent","name","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","english","startingKey","getGameHeader","alt","Games","path","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","isInCourseTheme","BASE_PATH","isInWorldTheme"],"sourceRoot":""}