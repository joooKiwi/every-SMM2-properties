{"version":3,"file":"static/js/916.a70f069b.chunk.js","mappings":"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","sources":["core/entity/properties/instrument/InstrumentProperty.component.tsx","core/limit/Limit.component.tsx","core/limit/PlayLimit.component.tsx","core/limit/SMM1And3DSEditorLimit.component.tsx","core/limit/SMM2EditorLimit.component.tsx","core/theme/CourseTheme.component.tsx","app/options/EntityAppOption.tsx","app/EntityApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import './InstrumentProperty.scss'\n\nimport type {Entities}        from 'core/entity/Entities'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface InstrumentPropertyProperties\n    extends ReactProperties {\n\n    value: Entities\n\n}\n\n/**\n * @todo add on click event to play the music block sound (randomly if more than one)\n * @reactComponent\n */\nexport default function InstrumentPropertyComponent({value: {englishNameInHtml, reference: {canMakeASoundOutOfAMusicBlock: value, canMakeASoundOutOfAMusicBlockComment: comment,},},}: InstrumentPropertyProperties,) {\n    if (value !== true)\n        return null\n    const id = `${englishNameInHtml}-instrumentProperty`\n\n    if (comment == null)\n        return <i id={id} className=\"music-block\"/>\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} elementId={id}>\n        <i id={id} className=\"music-block-with-comment\"/>\n    </Tooltip>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {Limits}           from 'core/limit/Limits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'play'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    readonly id: Id\n\n    readonly limits: | Limits | ReadonlyMap<Limits, boolean>\n\n    readonly displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof Limits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly Limits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.current.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, limit: Limits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = limit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, limit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(limit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: limit.reference.nameContainer.languageValue,}} elementId={acronymId}>\n            <TextComponent key={`${limit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, limit,)\n}\n\nfunction createSingleNameComponent(id: Id, limit: Limits,) {\n    return <NameComponent key={`${limit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={limit.reference}/>\n}","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport LimitComponent from 'core/limit/Limit.component'\n\nexport default function PlayLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    return <LimitComponent id={`play-${reference.englishNameInHtml}`} limits={reference.reference.toPlayLimitMap()} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/limit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM1And3DSEditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const editorLimit = reference.reference.editorLimit_smm1And3ds\n\n    return editorLimit == null\n        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} content={NOT_APPLICABLE}/>\n        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/limit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM2EditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const entity = reference.reference,\n        editorLimit = entity.editorLimit_smm2\n\n    return editorLimit == null || editorLimit === NOT_APPLICABLE\n        ? <TextComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} content={editorLimit} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n        : <LimitComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {ThemeProperty} from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport {ThemeComponent}          from 'core/theme/Theme.component'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class CourseThemeComponent\n    extends ThemeComponent<ThemeProperty> {\n\n\n    protected override get _map() {\n        return this.reference.toCourseThemeMap()\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInGroundTheme\n            && this.reference.isInUndergroundTheme\n            && this.reference.isInUnderwaterTheme\n            && (this.reference.isInDesertTheme ?? false)\n            && (this.reference.isInSnowTheme ?? false)\n            && (this.reference.isInSkyTheme ?? false)\n            && (this.reference.isInForestTheme ?? false)\n            && this.reference.isInGhostHouseTheme\n            && this.reference.isInAirshipTheme\n            && this.reference.isInCastleTheme\n    }\n\n    protected override _renderSingleComponent(theme: Themes,) {\n        return CourseThemeComponent.renderSingleComponent(theme, true, this.name.english,)\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage:<Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme => this._renderSingleComponent(courseTheme))}</div>\n    }\n\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\nimport {Fragment}                    from 'react'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/EntityAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {Entities}            from 'core/entity/Entities'\n\nimport {CommonOptions}                from 'app/options/CommonOptions'\nimport Image                          from 'app/tools/images/Image'\nimport {gameContentTranslation}       from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent      from 'core/editorVoice/EditorVoiceSound.component'\nimport InstrumentPropertyComponent    from 'core/entity/properties/instrument/InstrumentProperty.component'\nimport {EntityCategories}             from 'core/entityCategory/EntityCategories'\nimport GameComponent                  from 'core/game/Game.component'\nimport {GameStyles}                   from 'core/gameStyle/GameStyles'\nimport GameStyleComponent             from 'core/gameStyle/GameStyle.component'\nimport PlayLimitComponent             from 'core/limit/PlayLimit.component'\nimport SMM1And3DSEditorLimitComponent from 'core/limit/SMM1And3DSEditorLimit.component'\nimport SMM2EditorLimitComponent       from 'core/limit/SMM2EditorLimit.component'\nimport CourseThemeComponent           from 'core/theme/CourseTheme.component'\nimport {Themes}                       from 'core/theme/Themes'\nimport {Times}                        from 'core/time/Times'\nimport TimeComponent                  from 'core/time/Time.component'\n\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Entities> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE_IN_SMB = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb`, element: GameStyles.SUPER_MARIO_BROS.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SMB3 = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS_3,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb3`, element: GameStyles.SUPER_MARIO_BROS_3.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SMW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smw`, element: GameStyles.SUPER_MARIO_WORLD.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_NSMBU = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.NEW_SUPER_MARIO_BROS_U,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-nsmbu`, element: GameStyles.NEW_SUPER_MARIO_BROS_U.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly IMAGE_IN_SM3DW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_3D_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-sm3dw`, element: GameStyles.SUPER_MARIO_3D_WORLD.renderSingleComponent,} satisfies SingleHeaderContent\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <div className=\"nameAndEditorVoiceSound-container container\">\n                {CommonOptions.get.getNameContent(enumeration)}\n                <div className=\"properties\">\n                    <InstrumentPropertyComponent value={enumeration}/>\n                </div>\n                <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameStyleComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <CourseThemeComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <TimeComponent reference={reference} name={reference} displayAllAsText={false}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'time', element: gameContentTranslation('time.singular'),} satisfies SingleHeaderContent\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            const categoryName = enumeration.reference.categoryNameContainer\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.CompanionEnum.get.getValueByName(categoryName.english,).imageFile,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS = new class EntityAppOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm1And3dsHeader\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY = new class EntityAppOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM2 = new class EntityAppOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm2Header\n        }\n\n    }()\n    public static readonly EDITOR_LIMIT_IN_SMM2_ONLY = new class EntityAppOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }()\n    public static readonly PLAY_LIMIT = new class EntityAppOption_PlayLimit extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <PlayLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completePlayLimitHeader\n        }\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<EntityAppOption, typeof EntityAppOption> = class CompanionEnum_EntityAppOption\n        extends CompanionEnum<EntityAppOption, typeof EntityAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityAppOption\n\n        private constructor() {\n            super(EntityAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.CompanionEnum.get.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.CompanionEnum.get.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(enumeration: Entities,): ReactElement {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a content option`,)\n    }\n\n    public renderContent(enumeration: Entities,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a table header option`,)\n    }\n\n    public renderTableHeader(): NullOr<SingleHeaderContent> {\n        const content = this._createTableHeaderOption()\n        if (content == null)\n            return null\n        return content\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {EntityProperties}                                     from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}                              from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}                                    from 'route/EveryRoutes.types'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {OtherWordInTheGames}     from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {unfinishedText}          from 'app/tools/text/UnfinishedText'\nimport {filterGame}              from 'util/utilitiesMethods'\n\n//region -------------------- Deconstruction imports --------------------\n\nconst {ENTITY,} = OtherWordInTheGames\n\n//endregion -------------------- Deconstruction imports --------------------\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, EntityProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): PossibleRouteName {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase(),\n            pluralEntityName = ENTITY.pluralNameOnReferenceOrNull ?? unfinishedText(ENTITY.pluralEnglishName), pluralEntityLowerCaseName = ENTITY.pluralLowerCaseNameOnReferenceOrNull ?? pluralEntityName.toLowerCase()\n\n        return gameContentTranslation('entity.all', {\n            Entity: singularEntityName,\n            Entities: pluralEntityName,\n            entity: singularEntityLowerCaseName,\n            entities: pluralEntityLowerCaseName,\n        },)\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class EntityAppInterpreter implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get content() {\n                return filterGame(Entities.CompanionEnum.get.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public readonly tableHeadersColor = 'secondary' satisfies BootstrapThemeColor\n\n            public get tableCaption() {\n                const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase()\n                return gameContentTranslation('entity.all', {\n                    Entity: singularEntityName,\n                    entity: singularEntityLowerCaseName,\n                },) satisfies ReactElementOrString\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                const games = $this.props.games,\n                    hasSMM1Or3DSGames = games.hasSMM1Or3DS,\n                    hasSMM2Games = games.hasSMM2\n\n                const options: EntityAppOption[] = [\n                    EntityAppOption.IMAGE_IN_SMB,\n                    EntityAppOption.IMAGE_IN_SMB3,\n                    EntityAppOption.IMAGE_IN_SMW,\n                    EntityAppOption.IMAGE_IN_NSMBU,\n                ]\n                if (hasSMM2Games)\n                    options.push(EntityAppOption.IMAGE_IN_SM3DW,)\n                options.push(\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                )\n                if (hasSMM1Or3DSGames && hasSMM2Games)\n                    options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS, EntityAppOption.EDITOR_LIMIT_IN_SMM2,)\n                else {\n                    if (hasSMM1Or3DSGames)\n                        options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY,)\n                    if (hasSMM2Games)\n                        options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM2_ONLY,)\n                }\n                options.push(EntityAppOption.PLAY_LIMIT,)\n                return options\n            }\n\n\n            public createNewTableContent(content: Entities, option: EntityAppOption,) {\n                return option.renderContent(content,)\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader()\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSound>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["InstrumentPropertyComponent","_ref","_ref$value","value","englishNameInHtml","_ref$value$reference","reference","canMakeASoundOutOfAMusicBlock","comment","canMakeASoundOutOfAMusicBlockComment","id","concat","_jsx","className","Tooltip","option","title","gameContentTranslation","elementId","children","LimitComponent","limits","displayAcronymIfApplicable","Limits","createSingleComponent","selectedLimits","_toConsumableArray","filter","_ref2","_slicedToArray","map","_ref4","length","_Fragment","limit","index","_jsxs","Fragment","createReturnOfLine","englishName","ProjectLanguages","current","comma","acronym","createSingleNameComponent","acronymId","StringContainer","getInHtml","nameContainer","languageValue","TextComponent","content","NameComponent","name","PlayLimitComponent","toPlayLimitMap","SMM1And3DSEditorLimitComponent","editorLimit","editorLimit_smm1And3ds","NOT_APPLICABLE","SMM2EditorLimitComponent","entity","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","CourseThemeComponent","_ThemeComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","toCourseThemeMap","_this$reference$isInD","_this$reference$isInS","_this$reference$isInS2","_this$reference$isInF","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","theme","renderSingleComponent","english","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","_this","Themes","courseThemes","courseTheme","_renderSingleComponent","ThemeComponent","_gameStyles","_classPrivateFieldLooseKey","_gameStyles_unusedImages","_times","_themes","EntityAppOption","call","enumeration","ReferenceError","_createContentOption","_createTableHeaderOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","GameStyles","CompanionEnum","values","toArray","_classPrivateFieldLoo3","_classPrivateFieldLoo4","SUPER_MARIO_BROS","_classPrivateFieldLoo5","_classPrivateFieldLoo6","Times","_classPrivateFieldLoo7","_classPrivateFieldLoo8","Enum","IMAGE_IN_SMB","_EntityAppOption","EntityAppOption_Images","_super2","imageFiles","uniqueImage","size","images","Array","element","IMAGE_IN_SMB3","_EntityAppOption2","_super3","_ref3","SUPER_MARIO_BROS_3","IMAGE_IN_SMW","_EntityAppOption3","_super4","SUPER_MARIO_WORLD","IMAGE_IN_NSMBU","_EntityAppOption4","_super5","_ref5","NEW_SUPER_MARIO_BROS_U","IMAGE_IN_SM3DW","_EntityAppOption5","_super6","_ref6","SUPER_MARIO_3D_WORLD","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","_EntityAppOption6","EntityAppOption_Name","_super7","CommonOptions","getNameContent","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","nameHeader","GAME","_EntityAppOption7","EntityAppOption_Game","_super8","_ref7","GameComponent","displayAllAsText","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","_EntityAppOption8","EntityAppOption_GameStyle","_super9","_ref8","GameStyleComponent","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","_EntityAppOption9","EntityAppOption_CourseTheme","_super10","_ref9","WHEN_ALL_SELECTED_COURSE_THEME","TIME","_EntityAppOption10","EntityAppOption_Time","_super11","_ref10","TimeComponent","WHEN_ALL_SELECTED_TIME","CATEGORY","_EntityAppOption11","EntityAppOption_Category","_super12","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValueByName","imageFile","categoryHeader","CATEGORY_AS_TEXT","EDITOR_LIMIT_IN_SMM1_AND_3DS","_EntityAppOption12","EntityAppOption_LimitInSMM1And3DS","_super13","completeEditorLimitInSmm1And3dsHeader","EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY","_EntityAppOption13","_super14","completeEditorLimitHeader","EDITOR_LIMIT_IN_SMM2","_EntityAppOption14","EntityAppOption_LimitInSMM2","_super15","completeEditorLimitInSmm2Header","EDITOR_LIMIT_IN_SMM2_ONLY","_EntityAppOption15","_super16","PLAY_LIMIT","_EntityAppOption16","EntityAppOption_PlayLimit","_super17","completePlayLimitHeader","_instance","_class","_CompanionEnum","CompanionEnum_EntityAppOption","_super18","_classPrivateFieldLoo9","_classPrivateFieldLoo10","Object","defineProperty","writable","ENTITY","OtherWordInTheGames","EntityApp","_AbstractTableApp","_ENTITY$singularNameO","_ENTITY$singularLower","_ENTITY$pluralNameOnR","_ENTITY$pluralLowerCa","singularEntityName","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","singularEntityLowerCaseName","singularLowerCaseNameOnReferenceOrNull","toLowerCase","pluralEntityName","pluralNameOnReferenceOrNull","pluralEnglishName","pluralEntityLowerCaseName","pluralLowerCaseNameOnReferenceOrNull","Entity","Entities","entities","$this","EntityAppInterpreter","tableHeadersColor","filterGame","props","games","small","medium","large","extraLarge","category","categoryEnglish","_ENTITY$singularNameO2","_ENTITY$singularLower2","hasSMM1Or3DSGames","hasSMM1Or3DS","hasSMM2Games","hasSMM2","options","push","renderContent","renderTableHeader","AbstractTableApp","regularFile","regularSound","europeanFile","europeanSound","SimpleSoundComponent"],"sourceRoot":""}