{"version":3,"file":"static/js/372.066058bd.chunk.js","mappings":"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","sources":["core/entity/properties/component/CanBeInAParachute.tsx","core/entity/properties/component/CanHaveWings.tsx","core/entity/properties/component/CanMakeASoundOutOfAMusicBlock.tsx","core/entity/properties/component/HasAMushroomVariant.tsx","core/game/Game.component.tsx","core/gameStyle/GameStyle.component.tsx","core/limit/Limit.component.tsx","core/limit/PlayLimit.component.tsx","core/limit/SMM1And3DSEditorLimit.component.tsx","core/limit/SMM2EditorLimit.component.tsx","core/theme/CourseTheme.component.tsx","core/time/Time.component.tsx","app/options/EntityAppOption.tsx","app/property/EntityGames.ts","app/property/EntityGameStyles.ts","app/EntityApp.tsx","app/tools/button/LinkButton.tsx","core/editorVoice/EditorVoiceSound.component.tsx","core/time/TimeImage.tsx"],"sourcesContent":["import './CanBeInAParachute.scss'\nimport './PropertyWithComment.scss'\n\nimport {useRef} from 'react'\n\nimport type {EntityOnlyProperties} from 'core/entity/properties/EntityOnlyProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {Limits}                 from 'core/limit/Limits'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default function CanBeInAParachute({value: entity,}: EntityOnlyProperties,) {\n    const htmlElement = useRef<HTMLElement>(null,)\n\n    const reference = entity.reference\n    const value = reference.canBeInAParachute\n    if (value !== true)\n        return null\n\n    const comment = reference.canBeInAParachuteComment\n    if (comment == null)\n        return <em className=\"canBeInAParachute-property parachute-image-property\"/>\n\n    const limit = Limits.LOOSE_COIN_LIMIT\n    return <Tooltip option={{title: gameContentTranslation(`entity.property.${comment}`, {acronym: limit.acronym!, limit: limit.reference.languageValue,},),}} reference={htmlElement}>\n        <em ref={htmlElement} className=\"canBeInAParachute-property parachute-image-property property-with-comment\"/>\n    </Tooltip>\n}\n","import './CanHaveWings.scss'\nimport './PropertyWithComment.scss'\n\nimport {useRef} from 'react'\n\nimport type {EntityOnlyProperties} from 'core/entity/properties/EntityOnlyProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {Limits}                 from 'core/limit/Limits'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default function CanHaveWings({value: entity,}: EntityOnlyProperties,) {\n    const htmlElement = useRef<HTMLElement>(null,)\n    const reference = entity.reference\n    const value = reference.canHaveWings\n    if (value !== true)\n        return null\n\n    const comment = reference.canHaveWingsComment\n    if (comment == null)\n        return <em className=\"canHaveWings wing-image-property\"/>\n\n    const limit = Limits.LOOSE_COIN_LIMIT\n    return <Tooltip option={{title: gameContentTranslation(`entity.property.${comment}`, {acronym: limit.acronym!, limit: limit.reference.languageValue,},),}} reference={htmlElement}>\n        <em ref={htmlElement} className=\"canHaveWings wing-image-property property-with-comment\"/>\n    </Tooltip>\n}\n","import './CanMakeASoundOutOfAMusicBlock.scss'\nimport './PropertyWithComment.scss'\n\nimport {useRef} from 'react'\n\nimport type {EntityOnlyProperties} from 'core/entity/properties/EntityOnlyProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default function CanMakeASoundOutOfAMusicBlock({value: entity,}: EntityOnlyProperties,) {\n    const htmlElement = useRef<HTMLElement>(null,)\n    const reference = entity.reference\n    const value = reference.canMakeASoundOutOfAMusicBlock\n    if (value !== true)\n        return null\n\n    const comment = reference.canMakeASoundOutOfAMusicBlockComment\n    if (comment == null)\n        return <em className=\"canMakeASoundOutOfAMusicBlock-property music-block-property\"/>\n\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} reference={htmlElement}>\n        <em ref={htmlElement} className=\"canMakeASoundOutOfAMusicBlock-property music-block-property property-with-comment\"/>\n    </Tooltip>\n}\n","import './HasAMushroomVariant.scss'\n\nimport type {EntityOnlyProperties} from 'core/entity/properties/EntityOnlyProperties'\n\n/** @reactComponent */\nexport default function HasAMushroomVariant({value: entity,}: EntityOnlyProperties,) {\n    const reference = entity.reference\n    const value = reference.hasAMushroomVariant\n    if (value !== true)\n        return null\n\n    return <em className=\"hasAMushroom-property mushroom-image-property\"/>\n}\n","import type {GameProperty}             from 'core/entity/properties/game/GameProperty'\nimport type {EntityPropertyProperties} from 'core/_component/EntityPropertyProperties'\n\nimport TextComponent            from 'app/tools/text/TextComponent'\nimport GameImage                from 'core/game/GameImage'\nimport {Games}                  from 'core/game/Games'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @deprecated This component should be replaced to something else\n * @reactComponent\n */\nexport default function GameComponent({reference, name, displayAllAsText,}: EntityPropertyProperties<GameProperty>,) {\n    if (reference.isInSuperMarioMaker1 && reference.isInSuperMarioMakerFor3DS && reference.isInSuperMarioMaker2) {\n        if (displayAllAsText)\n            return <TextComponent content={gameContentTranslation('game.all',)}/>\n        return <div key={`${name.english} (every games)`}>{Games.CompanionEnum.get.values.map(it =>\n            <GameImage reference={it}/>,)}</div>\n    }\n\n    const games = [] as Games[]\n    reference.toGameMap().forEach((isSelected, game,) => {\n        if (isSelected)\n            games.push(game,)\n    },)\n    if (games.length === 1)\n        return <GameImage reference={games[0]}/>\n    return <div key={`${name.english} - group`}>{games.map(it => <GameImage reference={it}/>)}</div>\n}\n","import type {EntityPropertyProperties} from 'core/_component/EntityPropertyProperties'\nimport type {GameStyleProperty}        from 'core/entity/properties/gameStyle/GameStyleProperty'\n\nimport TextComponent            from 'app/tools/text/TextComponent'\nimport GameStyleImage           from 'core/gameStyle/GameStyleImage'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @deprecated This component should be replaced to something else\n * @reactComponent\n */\nexport default function GameStyleComponent({reference, name, displayAllAsText,}: EntityPropertyProperties<GameStyleProperty>,) {\n    if (reference.isInSuperMarioBrosStyle\n        && reference.isInSuperMarioBros3Style\n        && reference.isInSuperMarioWorldStyle\n        && reference.isInNewSuperMarioBrosUStyle\n        && reference.isInSuperMario3DWorldStyle === true) {\n        if (displayAllAsText)\n            return <TextComponent content={gameContentTranslation('game style.all',)}/>\n        return <div key={`${name.english} (every game styles)`}>{GameStyles.CompanionEnum.get.values.map(it =>\n            <GameStyleImage reference={it}/>,)}</div>\n    }\n\n    const gameStyles = [] as GameStyles[]\n    reference.toGameStyleMap().forEach((isSelected, gameStyle,) => {\n        if (isSelected)\n            gameStyles.push(gameStyle,)\n    },)\n    if (gameStyles.length === 1)\n        return <GameStyleImage reference={gameStyles[0]}/>\n    return <div key={`${name.english} - group`}>{gameStyles.map(it => <GameStyleImage reference={it}/>)}</div>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {Limits}           from 'core/limit/Limits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'play'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    readonly id: Id\n\n    readonly limits: | Limits | ReadonlyMap<Limits, boolean>\n\n    readonly displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof Limits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly Limits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.current.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, limit: Limits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = limit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, limit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(limit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: limit.reference.nameContainer.languageValue,}} reference={acronymId}>\n            <TextComponent key={`${limit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, limit,)\n}\n\nfunction createSingleNameComponent(id: Id, limit: Limits,) {\n    return <NameComponent key={`${limit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={limit.reference}/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport LimitComponent from 'core/limit/Limit.component'\n\nexport default function PlayLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    return <LimitComponent id={`play-${reference.englishNameInHtml}`} limits={reference.reference.toPlayLimitMap()} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/limit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM1And3DSEditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const editorLimit = reference.reference.editorLimit_smm1And3ds\n\n    if (editorLimit == null)\n        return null\n    if (editorLimit === NOT_APPLICABLE)\n        return <TextComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} content={NOT_APPLICABLE}/>\n    return <LimitComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/limit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/limit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM2EditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const entity = reference.reference\n    const editorLimit = entity.editorLimit_smm2\n\n    return editorLimit == null || editorLimit === NOT_APPLICABLE\n        ? <TextComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} content={editorLimit} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n        : <LimitComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {EntityPropertyProperties} from 'core/_component/EntityPropertyProperties'\nimport type {ThemeProperty}            from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport ThemeImage                from 'core/theme/ThemeImage'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/**\n * @deprecated This should be replaced with something else\n * @reactComponent\n */\nexport default function CourseThemeComponent({reference, name, displayAllAsText,}: EntityPropertyProperties<ThemeProperty>,) {\n    if (reference.isInGroundTheme\n        && reference.isInUndergroundTheme\n        && reference.isInUnderwaterTheme\n        && (reference.isInDesertTheme ?? false)\n        && (reference.isInSnowTheme ?? false)\n        && (reference.isInSkyTheme ?? false)\n        && (reference.isInForestTheme ?? false)\n        && reference.isInGhostHouseTheme\n        && reference.isInAirshipTheme\n        && reference.isInCastleTheme) {\n        if (displayAllAsText)\n            return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage: <Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n        return <div key={`${name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme =>\n            <ThemeImage reference={courseTheme}/>,)}</div>\n    }\n\n    const enumInstances = [] as Themes[]\n    reference.toCourseThemeMap().forEach((isInEnumInstance, enumInstance,) => {\n        if (isInEnumInstance)\n            enumInstances.push(enumInstance)\n    })\n    if (enumInstances.length === 1)\n        return <ThemeImage reference={enumInstances[0]}/>\n    return <div key={`${name.english} - group`}>{enumInstances.map(enumInstance =>\n        <ThemeImage reference={enumInstance}/>,)}</div>\n}\n","import type {EntityPropertyProperties} from 'core/_component/EntityPropertyProperties'\nimport type {TimeProperty}             from 'core/entity/properties/time/TimeProperty'\n\nimport TextComponent            from 'app/tools/text/TextComponent'\nimport TimeImage                from 'core/time/TimeImage'\nimport {Times}                  from 'core/time/Times'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @deprecated This component should be replaced with something else\n * @reactComponent\n */\nexport default function TimeComponent({reference, name, displayAllAsText,}: EntityPropertyProperties<TimeProperty>,) {\n    if (reference.isInDayTheme && reference.isInNightTheme === true) {\n        if (displayAllAsText)\n            return <TextComponent content={gameContentTranslation('time.all',)}/>\n        return <div key={`Every times images (${name.english})`}>{Times.CompanionEnum.get.values.map(it =>\n            <TimeImage reference={it}/>,)}</div>\n    }\n\n    if (reference.isInDayTheme)\n        return <TimeImage reference={Times.DAY}/>\n    return <TimeImage reference={Times.NIGHT}/>\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\nimport {Fragment}                    from 'react'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/EntityAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {Entities}            from 'core/entity/Entities'\n\nimport {CommonOptions}                from 'app/options/CommonOptions'\nimport Image                          from 'app/tools/images/Image'\nimport {gameContentTranslation}       from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent      from 'core/editorVoice/EditorVoiceSound.component'\nimport CanBeInAParachute              from 'core/entity/properties/component/CanBeInAParachute'\nimport CanHaveWings                   from 'core/entity/properties/component/CanHaveWings'\nimport CanMakeASoundOutOfAMusicBlock  from 'core/entity/properties/component/CanMakeASoundOutOfAMusicBlock'\nimport HasAMushroomVariant            from 'core/entity/properties/component/HasAMushroomVariant'\nimport {EntityCategories}             from 'core/entityCategory/EntityCategories'\nimport GameComponent                  from 'core/game/Game.component'\nimport {GameStyles}                   from 'core/gameStyle/GameStyles'\nimport GameStyleImage                 from 'core/gameStyle/GameStyleImage'\nimport GameStyleComponent             from 'core/gameStyle/GameStyle.component'\nimport PlayLimitComponent             from 'core/limit/PlayLimit.component'\nimport SMM1And3DSEditorLimitComponent from 'core/limit/SMM1And3DSEditorLimit.component'\nimport SMM2EditorLimitComponent       from 'core/limit/SMM2EditorLimit.component'\nimport CourseThemeComponent           from 'core/theme/CourseTheme.component'\nimport {Themes}                       from 'core/theme/Themes'\nimport {Times}                        from 'core/time/Times'\nimport TimeComponent                  from 'core/time/Time.component'\n\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Entities> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE_IN_SMB = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image key={`Entity image (${englishName} - SMB - image #${index + 1})`} className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb`, element: <GameStyleImage reference={GameStyles.SUPER_MARIO_BROS}/>,} satisfies SingleHeaderContent\n        }\n\n    }('smb-images',)\n    public static readonly IMAGE_IN_SMB3 = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_BROS_3,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image key={`Entity image (${englishName} - SMB3 - image #${index + 1})`} className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smb3`, element: <GameStyleImage reference={GameStyles.SUPER_MARIO_BROS_3}/>,} satisfies SingleHeaderContent\n        }\n\n    }('smb3-images',)\n    public static readonly IMAGE_IN_SMW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image key={`Entity image (${englishName} - SMW - image #${index + 1})`} className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-smw`, element: <GameStyleImage reference={GameStyles.SUPER_MARIO_WORLD}/>,} satisfies SingleHeaderContent\n        }\n\n    }('smw-images',)\n    public static readonly IMAGE_IN_NSMBU = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.NEW_SUPER_MARIO_BROS_U,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image key={`Entity image (${englishName} - NSMBU - image #${index + 1})`} className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-nsmbu`, element: <GameStyleImage reference={GameStyles.NEW_SUPER_MARIO_BROS_U}/>,} satisfies SingleHeaderContent\n        }\n\n    }('nsmbu-images',)\n    public static readonly IMAGE_IN_SM3DW = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption({englishName, englishNameInHtml, uniqueImage,}: Entities,) {\n            const imageFiles = uniqueImage.map.get(GameStyles.SUPER_MARIO_3D_WORLD,)\n            if (imageFiles == null)\n                return null\n\n            const size = imageFiles.length\n            const images = new Array<ReactJSXElement>(size,)\n            let index = size\n            while (index-- > 0)\n                images[index] = <Image key={`Entity image (${englishName} - SM3DW - image #${index + 1})`} className={`entity-image ${englishNameInHtml}-image`} file={imageFiles[index]}/>\n            return <Fragment key={`unique image (${englishName})`}>{images}</Fragment>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: `image-sm3dw`, element: <GameStyleImage reference={GameStyles.SUPER_MARIO_3D_WORLD}/>,} satisfies SingleHeaderContent\n        }\n\n    }('sm3dw-images',)\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption('editor-images',)\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption('clearCondition-images',)\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption('play-images',)\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption('unused-images',)\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <div className=\"nameAndEditorVoiceSound-container container\">\n                <div className=\"nameAndEditorVoiceSound-nameAndProperties-container\">\n                    <div className=\"properties\">\n                        <HasAMushroomVariant value={enumeration}/>\n                        <CanBeInAParachute value={enumeration}/>\n                        <CanHaveWings value={enumeration}/>\n                        <CanMakeASoundOutOfAMusicBlock value={enumeration}/>\n                    </div>\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }('game',)\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption('???',)\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <GameStyleComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular',),} satisfies SingleHeaderContent\n        }\n\n    }('gameStyle',)\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption('???',)\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <CourseThemeComponent reference={reference} name={reference} displayAllAsText/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular',),} satisfies SingleHeaderContent\n        }\n\n    }('courseTheme',)\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption('???',)\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption({reference,}: Entities,) {\n            return <TimeComponent reference={reference} name={reference} displayAllAsText={false}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return {key: 'time', element: gameContentTranslation('time.singular',),} satisfies SingleHeaderContent\n        }\n\n    }('time',)\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption('???',)\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            const categoryName = enumeration.reference.categoryNameContainer\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.CompanionEnum.get.getValueByName(categoryName.english,).imageFile,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }('category',)\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption('???',)\n\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS = new class EntityAppOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm1And3dsHeader\n        }\n\n    }('smm1And3ds-editorLimit',)\n    public static readonly EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY = new class EntityAppOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM1And3DSEditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }('editorLimit',)\n    public static readonly EDITOR_LIMIT_IN_SMM2 = new class EntityAppOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitInSmm2Header\n        }\n\n    }('smm2-editorLimit',)\n    public static readonly EDITOR_LIMIT_IN_SMM2_ONLY = new class EntityAppOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <SMM2EditorLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completeEditorLimitHeader\n        }\n\n    }('editorLimit',)\n    public static readonly PLAY_LIMIT = new class EntityAppOption_PlayLimit extends EntityAppOption {\n\n        protected override _createContentOption(enumeration: Entities,) {\n            return <PlayLimitComponent reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.completePlayLimitHeader\n        }\n    }('playLimit',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<EntityAppOption, typeof EntityAppOption> = class CompanionEnum_EntityAppOption\n        extends CompanionEnum<EntityAppOption, typeof EntityAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityAppOption\n\n        private constructor() {\n            super(EntityAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.CompanionEnum.get.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.CompanionEnum.get.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(enumeration: Entities,): ReactElement {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a content option`,)\n    }\n\n    public renderContent(enumeration: Entities,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n        throw new ReferenceError(`The EntityAppOption.${this.name} cannot create a table header option`,)\n    }\n\n    public renderTableHeader(): NullOr<SingleHeaderContent> {\n        const content = this._createTableHeaderOption()\n        if (content == null)\n            return null\n        return content\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumWithParentSingleton}   from '@joookiwi/enumerable'\nimport {CompanionEnumWithParent, EnumWithParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/EntityGames.types'\nimport type {FullGroupUrlName}                   from 'core/gameStyle/GameStyles.types'\n\nimport {ViewDisplays} from 'app/withInterpreter/ViewDisplays'\nimport {Games}        from 'core/game/Games'\n\nexport class EntityGames\n    extends EnumWithParent<Games, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAMES = new class EntityGames_AllGames extends EntityGames {\n\n        public override getAllRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER = new class EntityGames_SuperMarioMaker extends EntityGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class EntityGames_SuperMarioMakerForNintendo3DS extends EntityGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class EntityGames_SuperMarioMaker2 extends EntityGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm3dsColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<EntityGames, typeof EntityGames, Games, typeof Games> = class CompanionEnum_EntityGames\n        extends CompanionEnumWithParent<EntityGames, typeof EntityGames, Games, typeof Games> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityGames\n\n        private constructor() {\n            super(EntityGames, Games,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_EntityGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm1Color(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getAllRouteName(viewDisplay: ViewDisplays, gameStyleName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} Game=all ${gameStyleName})`\n    }\n\n    public getSmm1RouteName(viewDisplay: ViewDisplays, gameStyleName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        // README: We imply that the game cannot be in SM3DW with SMM1 for this path in the EntityApp itself\n        return `everyEntity (${viewDisplay.urlValue} Game=1 ${gameStyleName})` as PossibleRouteName\n    }\n\n    public getSmm3dsRouteName(viewDisplay: ViewDisplays, gameStyleName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        // README: We imply that the game cannot be in SM3DW with SMM3DS for this path in the EntityApp itself\n        return `everyEntity (${viewDisplay.urlValue} Game=3DS ${gameStyleName})` as PossibleRouteName\n    }\n\n    public getSmm2RouteName(viewDisplay: ViewDisplays, gameStyleName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} Game=2 ${gameStyleName})`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import type {CompanionEnumWithParentSingleton}   from '@joookiwi/enumerable'\nimport {CompanionEnumWithParent, EnumWithParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/EntityGameStyles.types'\nimport type {FullGroupUrlName}                   from 'core/game/Games.types'\n\nimport {ViewDisplays} from 'app/withInterpreter/ViewDisplays'\nimport {GameStyles}   from 'core/gameStyle/GameStyles'\n\nexport class EntityGameStyles\n    extends EnumWithParent<GameStyles, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAME_STYLES = new class EntityGameStyles_AllGameStyles extends EntityGameStyles {\n\n        public override getAllRouteName() {\n            return null\n        }\n\n    }()\n\n    public static readonly SUPER_MARIO_BROS = new class EntityGameStyles_SuperMarioBros extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override sm3dwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmbRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_BROS_3 = new class EntityGameStyles_SuperMarioBros3 extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override sm3dwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmb3RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_WORLD = new class EntityGameStyles_SuperMarioWorld extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override sm3dwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmwRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly NEW_SUPER_MARIO_BROS_U = new class EntityGameStyles_NewSuperMarioBrosU extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override sm3dwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getNsmbuRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_3D_WORLD = new class EntityGameStyles_SuperMario3DWorld extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smb3Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smwColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override nsmbuColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSm3dwRouteName() {\n            return null\n        }\n\n    }()\n\n    public static readonly NOT_INDIVIDUAL_GAME_STYLE = new class EntityGameStyles_NotIndividualGameStyle extends EntityGameStyles {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override smbColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override smb3Color(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override smwColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override nsmbuColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n        public override sm3dwColor(isSelected: boolean,): PossibleColor {\n            return isSelected ? 'success' : 'warning'\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<EntityGameStyles, typeof EntityGameStyles, GameStyles, typeof GameStyles> = class CompanionEnum_EntityGameStyles\n        extends CompanionEnumWithParent<EntityGameStyles, typeof EntityGameStyles, GameStyles, typeof GameStyles> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityGameStyles\n\n        private constructor() {\n            super(EntityGameStyles, GameStyles,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_EntityGameStyles()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public smbColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public smb3Color(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public smwColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public nsmbuColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    public sm3dwColor(isSelected: boolean,): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getAllRouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=all)`\n    }\n\n    public getSmbRouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=1)`\n    }\n\n    public getSmb3RouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=3)`\n    }\n\n    public getSmwRouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=W)`\n    }\n\n    public getNsmbuRouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=U)`\n    }\n\n    public getSm3dwRouteName(viewDisplay: ViewDisplays, gameName: FullGroupUrlName,): NullOr<PossibleRouteName> {\n        // README: We imply that the game cannot be in SMM1 or SMM3DS with SM3DW for this path in the EntityApp itself\n        return `everyEntity (${viewDisplay.urlValue} ${gameName} GameStyle=3DW)` as PossibleRouteName\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport 'app/_GameStyleAsideContent.scss'\nimport './EntityApp.scss'\nimport 'app/options/EntityAppOption.scss'\n\nimport type {EntityProperties}                               from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}                        from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}                                from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}                               from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {FullGroupUrlName as FullGroupUrlName_Game}      from 'core/game/Games.types'\nimport type {FullGroupUrlName as FullGroupUrlName_GameStyle} from 'core/gameStyle/GameStyles.types'\nimport type {GameCollection}                                 from 'util/collection/GameCollection'\nimport type {GameStyleCollection}                            from 'util/collection/GameStyleCollection'\nimport type {ReactProperties}                                from 'util/react/ReactProperties'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {EntityAppOption}                            from 'app/options/EntityAppOption'\nimport {EntityGames}                                from 'app/property/EntityGames'\nimport {EntityGameStyles}                           from 'app/property/EntityGameStyles'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport Table                                        from 'app/tools/table/Table'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                                   from 'core/entity/Entities'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport GameStyleImage                               from 'core/gameStyle/GameStyleImage'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame, filterGameStyle, intersect}     from 'util/utilitiesMethods'\n\nclass EntityAppInterpreter\n    implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n    readonly #gameStyles\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection, gameStyles: GameStyleCollection,) {\n        this.#games = games\n        this.#gameStyles = gameStyles\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGameStyle(filterGame(Entities.CompanionEnum.get.values, this.#games,), this.#gameStyles,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 3,\n            large: 4,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n        //TODO encapsulate the voiceSound into a sound interpreter.\n        const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n        return <div className={`${category}`}>\n            <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'secondary' satisfies BootstrapThemeColor\n\n    public get tableCaption() {\n        const entity = OtherWordInTheGames.ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName,)\n        const entityAsLowerCase = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? entity.toLowerCase()\n        return gameContentTranslation('entity.all', {Entity: entity, entity: entityAsLowerCase,},) satisfies ReactElementOrString\n    }\n\n    public get tableOptions(): readonly EntityAppOption[] {\n        const games = this.#games\n        const gameStyles = this.#gameStyles\n        const hasSMM2 = games.hasSMM2\n\n        const options: EntityAppOption[] = []\n        if (gameStyles.hasSMB)\n            options.push(EntityAppOption.IMAGE_IN_SMB,)\n        if (gameStyles.hasSMB3)\n            options.push(EntityAppOption.IMAGE_IN_SMB3,)\n        if (gameStyles.hasSMW)\n            options.push(EntityAppOption.IMAGE_IN_SMW,)\n        if (gameStyles.hasNSMBU)\n            options.push(EntityAppOption.IMAGE_IN_NSMBU,)\n        if (gameStyles.hasSM3DW && hasSMM2) // The SMM2 validation is a fail-safe\n            options.push(EntityAppOption.IMAGE_IN_SM3DW,)\n        options.push(\n            EntityAppOption.NAME,\n            // EntityAppOption.GAME,\n            // EntityAppOption.GAME_STYLE,\n            // EntityAppOption.COURSE_THEME,\n            // EntityAppOption.TIME,\n            EntityAppOption.CATEGORY,\n        )\n        if (games.hasAllGames)\n            options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS, EntityAppOption.EDITOR_LIMIT_IN_SMM2,)\n        else {\n            if (games.hasSMM1Or3DS)\n                options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY,)\n            if (hasSMM2)\n                options.push(EntityAppOption.EDITOR_LIMIT_IN_SMM2_ONLY,)\n        }\n        options.push(EntityAppOption.PLAY_LIMIT,)\n        return options\n    }\n\n\n    public getAdditionalClass(option: EntityAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: Entities, option: EntityAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: EntityAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEntity (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEntity (card)',],\n    [ViewDisplays.TABLE, 'everyEntity (table)',],\n] as const satisfies readonly ViewAndRouteName[]\n\n/** @reactComponent */\nexport default function EntityApp({viewDisplay, games, gameStyles,}: EntityProperties,) {\n    const entity = OtherWordInTheGames.ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName,)\n    const entityAsLowerCase = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? entity.toLowerCase()\n    const entities = OtherWordInTheGames.ENTITY.pluralNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.pluralEnglishName,)\n    const entitiesAsLowerCase = OtherWordInTheGames.ENTITY.pluralLowerCaseNameOnReferenceOrNull ?? entities.toLowerCase()\n\n    const titleContent = gameContentTranslation('entity.all', {Entity: entity, Entities: entities, entity: entityAsLowerCase, entities: entitiesAsLowerCase,},)\n    const appInterpreter = new EntityAppInterpreter(games, gameStyles,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"entity\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<EntityAsideContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles}/>}>\n            <SimpleList reactKey=\"entity\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"entity\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<EntityAsideContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles}/>}>\n            <CardList reactKey=\"entity\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"entity\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             asideContent={<EntityAsideContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles}/>}>\n        <Table id=\"entity-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Aside content --------------------\n\ninterface EntityAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly games: GameCollection\n\n    readonly gameStyles: GameStyleCollection\n\n}\n\n/** @reactComponent */\nfunction EntityAsideContent({viewDisplay, games, gameStyles,}: EntityAsideContentProperties,) {\n    return <div className=\"entity-asideContent-container\">\n        <GameAsideContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles}/>\n        <div className=\"d-inline mx-1\"/>\n        <GameStyleAsideContent viewDisplay={viewDisplay} games={games} gameStyles={gameStyles}/>\n    </div>\n}\n\nconst GameCompanion = Games.CompanionEnum.get\nconst GameStyleCompanion = GameStyles.CompanionEnum.get\n\nconst GamePossibilities = Games.Possibilities.get\nconst allGames = GamePossibilities.ALL_GAMES\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nfunction GameAsideContent({viewDisplay, games, gameStyles,}: EntityAsideContentProperties,) {\n    const gameStyleName = `GameStyle=${GameStyleCompanion.getGroupUrlName(gameStyles,)}` satisfies FullGroupUrlName_GameStyle\n    const entityGame = intersect(allGames, games,).length === 3\n        ? EntityGames.ALL_GAMES\n        : games.hasSMM2\n            ? EntityGames.SUPER_MARIO_MAKER_2\n            : games.hasSMM1\n                ? EntityGames.SUPER_MARIO_MAKER\n                : EntityGames.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    if (gameStyles.hasSM3DW) {\n        const amountOfGameStyles = gameStyles.size\n        if (!(amountOfGameStyles === 5 || amountOfGameStyles === 4))\n            return <div id=\"entity-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n                <LinkButton partialId=\"allGameLimit\" routeName={entityGame.getAllRouteName(viewDisplay, gameStyleName,)} color={entityGame.allColor}>{contentTranslation('All',)}</LinkButton>\n                <LinkButton partialId=\"smm2Game\" routeName={entityGame.getSmm2RouteName(viewDisplay, gameStyleName,)} color={entityGame.smm2Color}>\n                    <GameImage reference={smm2}/>\n                </LinkButton>\n            </div>\n    }\n\n    return <div id=\"entity-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameLimit\" routeName={entityGame.getAllRouteName(viewDisplay, gameStyleName,)} color={entityGame.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"entity-gamesButton-singularGame-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smm1Game\" routeName={entityGame.getSmm1RouteName(viewDisplay, gameStyleName,)} color={entityGame.smm1Color}>\n                <GameImage reference={smm1}/>\n            </LinkButton>\n            <LinkButton partialId=\"smm3dsGame\" routeName={entityGame.getSmm3dsRouteName(viewDisplay, gameStyleName,)} color={entityGame.smm3dsColor}>\n                <GameImage reference={smm3ds}/>\n            </LinkButton>\n            <LinkButton partialId=\"smm2Game\" routeName={entityGame.getSmm2RouteName(viewDisplay, gameStyleName,)} color={entityGame.smm2Color}>\n                <GameImage reference={smm2}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\nconst GameStylePossibilities = GameStyles.Possibilities.get\nconst allGameStyles = GameStylePossibilities.ALL_GAME_STYLES\nconst smb = GameStyles.SUPER_MARIO_BROS\nconst smb3 = GameStyles.SUPER_MARIO_BROS_3\nconst smw = GameStyles.SUPER_MARIO_WORLD\nconst nsmbu = GameStyles.NEW_SUPER_MARIO_BROS_U\nconst sm3dw = GameStyles.SUPER_MARIO_3D_WORLD\n\n/** @reactComponent */\nfunction GameStyleAsideContent({viewDisplay, games, gameStyles,}: EntityAsideContentProperties,) {\n    const gameName = `Game=${GameCompanion.getGroupUrlName(games,)}` satisfies FullGroupUrlName_Game\n    const amountOfSelectedGameStyles = intersect(allGameStyles, gameStyles,).length\n    const isSmbSelected = gameStyles.hasSMB\n    const isSmb3Selected = gameStyles.hasSMB3\n    const isSmwSelected = gameStyles.hasSMW\n    const isNsmbuSelected = gameStyles.hasNSMBU\n\n    if (games.hasSMM2) {\n        const isSm3dwSelected = gameStyles.hasSM3DW\n        const entityGameStyle = amountOfSelectedGameStyles === 5\n            ? EntityGameStyles.ALL_GAME_STYLES\n            : amountOfSelectedGameStyles !== 1\n                ? EntityGameStyles.NOT_INDIVIDUAL_GAME_STYLE\n                : isSmbSelected\n                    ? EntityGameStyles.SUPER_MARIO_BROS\n                    : isSmb3Selected\n                        ? EntityGameStyles.SUPER_MARIO_BROS_3\n                        : isSmwSelected\n                            ? EntityGameStyles.SUPER_MARIO_WORLD\n                            : isNsmbuSelected\n                                ? EntityGameStyles.NEW_SUPER_MARIO_BROS_U\n                                : EntityGameStyles.SUPER_MARIO_3D_WORLD\n\n        return <div id=\"entity-gameStylesButton-container\" className=\"gameStyleAsideContent-container btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"allGameStyleLimit\" routeName={entityGameStyle.getAllRouteName(viewDisplay, gameName,)} color={entityGameStyle.allColor}>{contentTranslation('All',)}</LinkButton>\n            <div id=\"entity-gameStylesButton-singularGameStyle-top-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"smbGameStyleLimit\" routeName={entityGameStyle.getSmbRouteName(viewDisplay, gameName,)} color={entityGameStyle.smbColor(isSmbSelected,)}>\n                    <GameStyleImage reference={smb}/>\n                </LinkButton>\n                <LinkButton partialId=\"smb3GameStyleLimit\" routeName={entityGameStyle.getSmb3RouteName(viewDisplay, gameName,)} color={entityGameStyle.smb3Color(isSmb3Selected,)}>\n                    <GameStyleImage reference={smb3}/>\n                </LinkButton>\n                <LinkButton partialId=\"smwGameStyleLimit\" routeName={entityGameStyle.getSmwRouteName(viewDisplay, gameName,)} color={entityGameStyle.smwColor(isSmwSelected,)}>\n                    <GameStyleImage reference={smw}/>\n                </LinkButton>\n            </div>\n            <div id=\"entity-gameStylesButton-singularGameStyle-bottom-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"nsmbuGameStyleLimit\" routeName={entityGameStyle.getNsmbuRouteName(viewDisplay, gameName,)} color={entityGameStyle.nsmbuColor(isNsmbuSelected,)}>\n                    <GameStyleImage reference={nsmbu}/>\n                </LinkButton>\n                <LinkButton partialId=\"sm3dwGameStyleLimit\" routeName={entityGameStyle.getSm3dwRouteName(viewDisplay, gameName,)} color={entityGameStyle.sm3dwColor(isSm3dwSelected,)}>\n                    <GameStyleImage reference={sm3dw}/>\n                </LinkButton>\n            </div>\n        </div>\n    }\n\n    const entityGameStyle = amountOfSelectedGameStyles === 5 || amountOfSelectedGameStyles === 4\n        ? EntityGameStyles.ALL_GAME_STYLES\n        : amountOfSelectedGameStyles !== 1\n            ? EntityGameStyles.NOT_INDIVIDUAL_GAME_STYLE\n            : isSmbSelected\n                ? EntityGameStyles.SUPER_MARIO_BROS\n                : isSmb3Selected\n                    ? EntityGameStyles.SUPER_MARIO_BROS_3\n                    : isSmwSelected\n                        ? EntityGameStyles.SUPER_MARIO_WORLD\n                        : EntityGameStyles.NEW_SUPER_MARIO_BROS_U\n\n    return <div id=\"entity-gameStylesButton-container\" className=\"gameStyleAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameStyleLimit\" routeName={entityGameStyle.getAllRouteName(viewDisplay, gameName,)} color={entityGameStyle.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"entity-gameStylesButton-singularGameStyle-top-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smbGameStyleLimit\" routeName={entityGameStyle.getSmbRouteName(viewDisplay, gameName,)} color={entityGameStyle.smbColor(isSmbSelected,)}>\n                <GameStyleImage reference={smb}/>\n            </LinkButton>\n            <LinkButton partialId=\"smb3GameStyleLimit\" routeName={entityGameStyle.getSmb3RouteName(viewDisplay, gameName,)} color={entityGameStyle.smb3Color(isSmb3Selected,)}>\n                <GameStyleImage reference={smb3}/>\n            </LinkButton>\n        </div>\n        <div id=\"entity-gameStylesButton-singularGameStyle-bottom-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smwGameStyleLimit\" routeName={entityGameStyle.getSmwRouteName(viewDisplay, gameName,)} color={entityGameStyle.smwColor(isSmwSelected,)}>\n                <GameStyleImage reference={smw}/>\n            </LinkButton>\n            <LinkButton partialId=\"nsmbuGameStyleLimit\" routeName={entityGameStyle.getNsmbuRouteName(viewDisplay, gameName,)} color={entityGameStyle.nsmbuColor(isNsmbuSelected,)}>\n                <GameStyleImage reference={nsmbu}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    readonly editorVoiceSound: Nullable<EditorVoiceSound>\n\n    readonly name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n","import type {Times}           from 'core/time/Times'\nimport type {ReactProperties} from 'util/react/ReactProperties'\nimport Image                  from 'app/tools/images/Image'\n\ninterface TimeImageProperties\n    extends ReactProperties {\n\n    readonly reference: Times\n\n}\n\nexport default function TimeImage({reference,}: TimeImageProperties,) {\n    return <Image file={reference.imageFile} className={`time-image ${reference.englishNameInHtml}-image`}/>\n}\n"],"names":["CanBeInAParachute","_ref","value","entity","htmlElement","useRef","reference","canBeInAParachute","comment","canBeInAParachuteComment","_jsx","className","limit","Limits","LOOSE_COIN_LIMIT","Tooltip","option","title","gameContentTranslation","concat","acronym","languageValue","children","ref","CanHaveWings","canHaveWings","canHaveWingsComment","CanMakeASoundOutOfAMusicBlock","canMakeASoundOutOfAMusicBlock","canMakeASoundOutOfAMusicBlockComment","HasAMushroomVariant","hasAMushroomVariant","GameComponent","name","displayAllAsText","isInSuperMarioMaker1","isInSuperMarioMakerFor3DS","isInSuperMarioMaker2","TextComponent","content","Games","CompanionEnum","get","values","map","it","GameImage","english","games","toGameMap","forEach","isSelected","game","push","length","GameStyleComponent","isInSuperMarioBrosStyle","isInSuperMarioBros3Style","isInSuperMarioWorldStyle","isInNewSuperMarioBrosUStyle","isInSuperMario3DWorldStyle","GameStyles","GameStyleImage","gameStyles","toGameStyleMap","gameStyle","LimitComponent","id","limits","displayAcronymIfApplicable","createSingleComponent","selectedLimits","filter","_ref2","hasLimit","_ref3","_Fragment","index","_jsxs","Fragment","createReturnOfLine","englishName","ProjectLanguages","current","comma","createSingleNameComponent","acronymId","StringContainer","getInHtml","nameContainer","NameComponent","PlayLimitComponent","englishNameInHtml","toPlayLimitMap","SMM1And3DSEditorLimitComponent","editorLimit","editorLimit_smm1And3ds","NOT_APPLICABLE","SMM2EditorLimitComponent","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","CourseThemeComponent","_reference$isInDesert","_reference$isInSnowTh","_reference$isInSkyThe","_reference$isInForest","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","Themes","courseThemes","courseTheme","ThemeImage","enumInstances","toCourseThemeMap","isInEnumInstance","enumInstance","TimeComponent","isInDayTheme","isInNightTheme","Times","TimeImage","DAY","NIGHT","_gameStyles","_classPrivateFieldLooseKey","_gameStyles_unusedImages","_times","_themes","_associatedClass","_additionalClasses","EntityAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","_classPrivateFieldLooseBase","this","additionalClasses","_classPrivateFieldLoo","_classPrivateFieldLoo2","toArray","_classPrivateFieldLoo3","_classPrivateFieldLoo4","SUPER_MARIO_BROS","times","_classPrivateFieldLoo5","_classPrivateFieldLoo6","themes","_classPrivateFieldLoo7","_classPrivateFieldLoo8","_createContentOption","enumeration","ReferenceError","renderContent","_createTableHeaderOption","renderTableHeader","_EntityAppOption","IMAGE_IN_SMB","uniqueImage","imageFiles","size","images","Array","key","element","IMAGE_IN_SMB3","SUPER_MARIO_BROS_3","IMAGE_IN_SMW","SUPER_MARIO_WORLD","IMAGE_IN_NSMBU","_ref4","NEW_SUPER_MARIO_BROS_U","IMAGE_IN_SM3DW","_ref5","SUPER_MARIO_3D_WORLD","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","CommonOptions","getNameContent","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","nameHeader","GAME","_ref6","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","_ref7","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","_ref8","WHEN_ALL_SELECTED_COURSE_THEME","TIME","_ref9","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValueByName","imageFile","categoryHeader","CATEGORY_AS_TEXT","EDITOR_LIMIT_IN_SMM1_AND_3DS","completeEditorLimitInSmm1And3dsHeader","EDITOR_LIMIT_IN_SMM1_AND_3DS_ONLY","completeEditorLimitHeader","EDITOR_LIMIT_IN_SMM2","completeEditorLimitInSmm2Header","EDITOR_LIMIT_IN_SMM2_ONLY","PLAY_LIMIT","completePlayLimitHeader","_instance","_CompanionEnum_EntityAppOption","_classPrivateFieldLoo9","_classPrivateFieldLoo10","EntityGames","EnumWithParent","allColor","smm1Color","smm3dsColor","smm2Color","getAllRouteName","viewDisplay","gameStyleName","urlValue","getSmm1RouteName","getSmm3dsRouteName","getSmm2RouteName","_EntityGames","ALL_GAMES","SUPER_MARIO_MAKER","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_EntityGames","CompanionEnum_EntityGames","CompanionEnumWithParent","EntityGameStyles","smbColor","smb3Color","smwColor","nsmbuColor","sm3dwColor","gameName","getSmbRouteName","getSmb3RouteName","getSmwRouteName","getNsmbuRouteName","getSm3dwRouteName","_EntityGameStyles","ALL_GAME_STYLES","NOT_INDIVIDUAL_GAME_STYLE","_CompanionEnum_EntityGameStyles","CompanionEnum_EntityGameStyles","_games","EntityAppInterpreter","tableHeadersColor","filterGameStyle","filterGame","Entities","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","createCardListContent","category","categoryEnglish","tableCaption","_OtherWordInTheGames$","_OtherWordInTheGames$2","OtherWordInTheGames","ENTITY","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","entityAsLowerCase","singularLowerCaseNameOnReferenceOrNull","toLowerCase","Entity","tableOptions","hasSMM2","options","hasSMB","hasSMB3","hasSMW","hasNSMBU","hasSM3DW","hasAllGames","hasSMM1Or3DS","getAdditionalClass","createTableContent","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","EntityApp","_OtherWordInTheGames$3","_OtherWordInTheGames$4","_OtherWordInTheGames$5","_OtherWordInTheGames$6","entities","pluralNameOnReferenceOrNull","pluralEnglishName","entitiesAsLowerCase","pluralLowerCaseNameOnReferenceOrNull","titleContent","appInterpreter","SubMainContainer","reactKey","asideContent","EntityAsideContent","SimpleList","interpreter","CardList","Table","GameAsideContent","GameStyleAsideContent","GameCompanion","GameStyleCompanion","allGames","Possibilities","smm1","SUPER_MARIO_MAKER_1","smm3ds","smm2","getGroupUrlName","entityGame","intersect","hasSMM1","amountOfGameStyles","LinkButton","partialId","routeName","color","contentTranslation","allGameStyles","smb","smb3","smw","nsmbu","sm3dw","amountOfSelectedGameStyles","isSmbSelected","isSmb3Selected","isSmwSelected","isNsmbuSelected","isSm3dwSelected","entityGameStyle","type","disabled","Link","to","routeFromName","regularSound","regularFile","europeanSound","europeanFile","SimpleSoundComponent"],"sourceRoot":""}