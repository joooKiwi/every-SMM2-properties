{"version":3,"file":"static/js/892.8ada3a09.chunk.js","mappings":"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","sources":["app/property/CourseTagTypes.ts","app/CourseTagApp.tsx","app/tools/button/LinkButton.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName, PossibleType} from 'app/property/CourseTagTypes.types'\nimport type {BootstrapColor}                                   from 'bootstrap/Bootstrap.types'\nimport type {ClassWithType}                                    from 'core/ClassWithType'\nimport type {Nullable, NullOr}                                 from 'util/types/nullable'\n\nimport {CourseTags}     from 'core/courseTag/CourseTags'\nimport {getValueByType} from 'util/utilitiesMethods'\n\nexport abstract class CourseTagTypes\n    extends Enum<Ordinals, Names>\n    implements ClassWithType<PossibleType> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL =              new class CourseTagTypes_All extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags[Symbol.iterator]()\n        }\n\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }('all', 'everyCourseTag',)\n    public static readonly OFFICIAL =         new class CourseTagTypes_Official extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.officialCourseTags[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get officialRouteName() {\n            return null\n        }\n\n        public override get unofficialColor(): PossibleColor {\n            return 'danger'\n        }\n\n        public override get makerCentralColor(): PossibleColor {\n            return 'warning'\n        }\n\n    }('official', 'officialCourseTag',)\n    public static readonly UNOFFICIAL =       new class CourseTagTypes_Unofficial extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.unofficialCourseTags[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get officialColor(): PossibleColor {\n            return 'danger'\n        }\n\n        public override get unofficialRouteName() {\n            return null\n        }\n\n        public override get makerCentralColor(): PossibleColor {\n            return 'warning'\n        }\n\n    }('unofficial', 'unofficialCourseTag',)\n    public static readonly MAKER_CENTRAL =    new class CourseTagTypes_MakerCentral extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.makerCentralCourseTags[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get officialColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get unofficialColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get makerCentralRouteName() {\n            return null\n        }\n\n    }('makerCentral', 'makerCentralCourseTag',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: CourseTagTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #routeName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(type: PossibleType, routeName: PossibleRouteName,) {\n        super()\n        this.#type = type\n        this.#routeName = routeName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get type(): PossibleType {\n        return this.#type\n    }\n\n    public get routeName(): PossibleRouteName {\n        return this.#routeName\n    }\n\n    public abstract get iterator(): IterableIterator<CourseTags>\n\n    //region -------------------- Link button methods --------------------\n\n    /** The route name for the path with every course tags */\n    public get allRouteName(): NullOr<Extract<PossibleRouteName, 'everyCourseTag'>> {\n        return 'everyCourseTag'\n    }\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    /**\n     * The route name for the path with only the official {@link CourseTags}\n     *\n     * @see CourseTags.officialCourseTags\n     */\n    public get officialRouteName(): NullOr<Extract<PossibleRouteName, 'officialCourseTag'>> {\n        return 'officialCourseTag'\n    }\n\n    public get officialColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    /**\n     * The route name for the path with only the unofficial {@link CourseTags}\n     *\n     * @see CourseTags.unofficialCourseTags\n     */\n    public get unofficialRouteName(): NullOr<Extract<PossibleRouteName, 'unofficialCourseTag'>> {\n        return 'unofficialCourseTag'\n    }\n\n    public get unofficialColor(): PossibleColor {\n        return 'success'\n    }\n\n    /**\n     * The route name for the path with only the \"Maker Central\" {@link CourseTags}\n     *\n     * @see CourseTags.makerCentralCourseTags\n     */\n    public get makerCentralRouteName(): NullOr<Extract<PossibleRouteName, 'makerCentralCourseTag'>> {\n        return 'makerCentralCourseTag'\n    }\n\n    public get makerCentralColor(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Link button methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static getValueByType(value: Nullable<| CourseTagTypes | string>,): CourseTagTypes {\n        return getValueByType(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return CourseTagTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<CourseTagTypes>,): CourseTagTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<CourseTagTypes> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<CourseTagTypes> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning' | 'danger'>\n","import './CourseTagApp.scss'\n\nimport type {CourseTagAppProperties}                               from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList,}                          from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ClassWithType}                                        from 'core/ClassWithType'\nimport type {CourseTags}                                           from 'core/courseTag/CourseTags'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {NullOr}                                               from 'util/types/nullable'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {CourseTagTypes}                             from 'app/property/CourseTagTypes'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport {AbstractCardListApp}                        from 'app/withInterpreter/AbstractCardListApp'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {TAG, COURSE,} = OtherWordInTheGames\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class CourseTagApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CourseTags>, CourseTagAppProperties>\n    implements ClassWithType<CourseTagTypes> {\n\n    //region -------------------- Fields --------------------\n\n    #type?: CourseTagTypes\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get type(): CourseTagTypes {\n        return this.#type ??= CourseTagTypes.getValueByType(this.props.type)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'courseTag'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return `${this.type.routeName} (list)`\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return `${this.type.routeName} (card)`\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('course tag.all', {\n            course: COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.singularEnglishName).toLowerCase(),\n            courses: COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.pluralEnglishName).toLowerCase(),\n            tag: TAG.singularLowerCaseNameOnReference,\n            tags: TAG.pluralLowerCaseNameOnReference,\n        },)\n    }\n\n    protected override _createAsideContent(): NullOr<ReactElementOrString> {\n        const {type, typeDisplayed,} = this\n\n        return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"everyCourseTag\" routeName={typeDisplayed.getRoutePathAsListOnly(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"officialCourseTag\" routeName={typeDisplayed.getRoutePathAsListOnly(type.officialRouteName)} color={type.officialColor}>{contentTranslation('Official.Yes')}</LinkButton>\n                <LinkButton partialId=\"unofficialCourseTag\" routeName={typeDisplayed.getRoutePathAsListOnly(type.unofficialRouteName)} color={type.unofficialColor}>{contentTranslation('Official.No')}</LinkButton>\n            </div>\n            <LinkButton partialId=\"makerCentralCourseTag\" routeName={typeDisplayed.getRoutePathAsListOnly(type.makerCentralRouteName)} color={type.makerCentralColor}>Maker Central</LinkButton>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<CourseTags> {\n        const $this = this\n\n        return new class implements AppInterpreterWithCardList<CourseTags> {\n\n            public get iterable() {\n                return $this.type.iterator\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n                return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n                //TODO add Maker Central name\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {BootstrapColor}                                                     from 'bootstrap/Bootstrap.types'\nimport type {EveryPossibleRouteNames}                                            from 'routes/everyRoutes.types'\nimport type {ReactElementOrString, ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\nimport type {Nullable}                                                           from 'util/types/nullable'\n\nimport {route} from 'routes/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<EveryPossibleRouteNames>\n\n    color: BootstrapColor\n\n}\n\n/**\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`,\n        className = `btn btn-${color} link-button`\n\n    return routeName == null\n        ? <button type=\"button\" id={id} className={className} disabled>{children}</button>\n        : <Link type=\"button\" id={id} className={className} to={route(routeName)}>{children}</Link>\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the route name is <b>null</b>)\n *\n * @param partialId The partial ID (with \"-button\") added after-end\n * @param routeName The route name\n * @param color The Bootstrap color\n * @param value The value to display\n */\nexport function createLinkButton(partialId: string, [routeName, color,]: readonly [Nullable<EveryPossibleRouteNames>, BootstrapColor,], value: ReactElementOrString,) {\n    return <LinkButton partialId={partialId} routeName={routeName} color={color}>{value}</LinkButton>\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'routes/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {CARD_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["Symbol","iterator","CourseTagTypes","type","routeName","this","value","getValueByType","Enum","values","ALL","CourseTags","OFFICIAL","UNOFFICIAL","MAKER_CENTRAL","TAG","OtherWordInTheGames","COURSE","CourseTagApp","props","gameContentTranslation","course","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","courses","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","tag","singularLowerCaseNameOnReference","tags","pluralLowerCaseNameOnReference","typeDisplayed","id","className","LinkButton","partialId","getRoutePathAsListOnly","allRouteName","color","allColor","contentTranslation","officialRouteName","officialColor","unofficialRouteName","unofficialColor","makerCentralRouteName","makerCentralColor","$this","courseTag","reference","name","englishName","firstAppearance","simpleName","AbstractCardListApp","children","disabled","to","route","CARD_LIST","ViewDisplays","__cardRouteName","_createCardListRouteName","enumerable","optionInterpreter","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","nameContainer","englishNameInHtml","push","popoverOrientation","createCardListContent","AbstractSimpleListApp"],"sourceRoot":""}