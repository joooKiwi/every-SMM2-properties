{"version":3,"file":"static/js/88.5c7132eb.chunk.js","mappings":"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","sources":["app/options/GameStyleAppOption.tsx","app/GameStyleApp.tsx","app/tools/text/BooleanResultTextComponent.tsx","app/tools/text/BooleanTextComponent.tsx","app/tools/text/YesOrNoResultTextComponent.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals}                                  from 'app/options/GameStyleAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {GameStyles}                                       from 'core/gameStyle/GameStyles'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport YesOrNoResultTextComponent                   from 'app/tools/text/YesOrNoResultTextComponent'\nimport NightEffectComponent                         from 'core/nightEffect/NightEffect.component'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\nimport {ProjectLanguages}                           from 'lang/ProjectLanguages'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\nexport abstract class GameStyleAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =             new class GameStyleAppOption_Images extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return enumeration.renderSingleComponent\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'image', element: contentTranslation('Image'),}\n        }\n\n    }()\n    public static readonly NAME =              new class GameStyleAppOption_Name extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly GAME =              new class GameStyleAppOption_Game extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,) {\n            return [\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker1}/>,\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMakerFor3DS}/>,\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker2}/>,\n            ]\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeaderWithAllGames\n        }\n\n    }()\n    public static readonly NIGHT_DESERT_WIND = new class GameStyleAppOption_NightDesertWind extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,) {\n            return <NightEffectComponent gameStyle={reference}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'nightDesertWind',\n                element: <div className=\"night-desert-wind-effect-container\">{Themes.DESERT.renderSingleComponent(false)}{Times.NIGHT.renderSingleComponent}</div>,\n                tooltip: gameContentTranslation('Wind effect (night desert)', {\n                    night: unfinishedText('night'),//TODO add night reference\n                    desert: ProjectLanguages.currentLanguage.get(Themes.DESERT.reference)!.toLowerCase(),\n                },),\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GameStyleAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link GameStyleAppOption} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => GameStyles\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: GameStyles,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(GameStyleAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return GameStyleAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<GameStyleAppOption>,): GameStyleAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<GameStyleAppOption> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<GameStyleAppOption> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './GameStyleApp.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {GameStyleAppOption}     from 'app/options/GameStyleAppOption'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class GameStyleApp\n    extends AbstractTableApp<AppInterpreterWithTable<GameStyles, GameStyleAppOption>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'gameStyle'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyGameStyle (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyGameStyle (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyGameStyle (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('game style.all')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n        return new class implements AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n\n            public get iterable() {\n                return GameStyles[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: null,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: GameStyles,) {\n                return <div className=\"card-body\" id={`gameStyle-${enumerable.englishNameInHtml}`}>\n                    {enumerable.renderSingleComponent}\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => GameStyles,) {\n                GameStyleAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly GameStyleAppOption[] {\n                return [\n                    GameStyleAppOption.IMAGE,\n                    GameStyleAppOption.NAME,\n                    GameStyleAppOption.GAME,\n                    GameStyleAppOption.NIGHT_DESERT_WIND,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('game style.all'),\n                }\n            }\n\n\n            public createTableContent(option: GameStyleAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: GameStyleAppOption,) {\n                return option.renderTableHeader\n            }\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {BooleanResultTextProperties, TextColor} from 'app/tools/text/properties/BooleanResultTextProperties'\n\nimport BooleanTextComponent from 'app/tools/text/BooleanTextComponent'\n\nconst TRUE_DEFAULT_COLOR: TextColor = 'text-success'\nconst FALSE_DEFAULT_COLOR: TextColor = 'text-danger'\n\n/**\n * Create a coloration based on the boolean value.\n *\n * Return a new {@link BooleanTextComponent}\n * with the classes \"text-success\" or \"text-danger\".\n * @reactComponent\n */\nexport default function BooleanResultTextComponent({boolean, classes, true: _true, false: _false, ...otherProperties}: BooleanResultTextProperties,) {\n    const [trueValue, trueColor,] = typeof _true == 'string' ? [_true, TRUE_DEFAULT_COLOR] : _true\n    const [falseValue, falseColor,] = typeof _false == 'string' ? [_false, FALSE_DEFAULT_COLOR] : _false\n\n    return <BooleanTextComponent classes={[...(classes ?? []), (boolean ? trueColor : falseColor)]} boolean={boolean} true={trueValue} false={falseValue} {...otherProperties}/>\n}\n","import type {BooleanTextProperties} from 'app/tools/text/properties/BooleanTextProperties'\n\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n * Create a simple {@link TextComponent}\n * with a variable value based on a simple boolean.\n * @reactComponent\n */\nexport default function BooleanTextComponent({boolean, true: _true, false: _false, ...otherProperties}: BooleanTextProperties,) {\n    return <TextComponent content={boolean ? _true : _false} {...otherProperties}/>\n}\n","import './YesOrNoResultTextComponent.scss'\n\nimport type {TextColor}             from 'app/tools/text/properties/BooleanResultTextProperties'\nimport type {YesOrNoTextProperties} from 'app/tools/text/properties/YesOrNoTextProperties'\n\nimport BooleanResultTextComponent from 'app/tools/text/BooleanResultTextComponent'\nimport {contentTranslation}       from 'lang/components/translationMethods'\n\nconst YES_COLOR: TextColor = 'text-yes'\nconst NO_COLOR: TextColor = 'text-no'\n\n/**\n * Return a new {@link BooleanResultTextComponent} with a value based on the translation \"Yes\" or \"No\".\n *\n * @return {@link BooleanResultContainer}\n * @reactComponent\n */\nexport default function YesOrNoResultTextComponent(properties: YesOrNoTextProperties,): JSX.Element {\n    return <BooleanResultTextComponent\n        true={[contentTranslation('Yes'), YES_COLOR,]}\n        false={[contentTranslation('No'), NO_COLOR,]}\n        {...properties}\n    />\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["Symbol","iterator","GameStyleAppOption","this","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","values","IMAGE","enumeration","renderSingleComponent","key","element","contentTranslation","NAME","CommonOptions","GAME","reference","YesOrNoResultTextComponent","boolean","isInSuperMarioMaker1","isInSuperMarioMakerFor3DS","isInSuperMarioMaker2","NIGHT_DESERT_WIND","gameStyle","className","Themes","Times","tooltip","gameContentTranslation","night","unfinishedText","desert","ProjectLanguages","toLowerCase","GameStyleApp","GameStyles","small","medium","large","enumerable","id","englishNameInHtml","caption","option","AbstractTableApp","BooleanResultTextComponent","classes","_true","true","_false","false","otherProperties","trueValue","trueColor","falseValue","falseColor","BooleanTextComponent","content","properties","NightEffectComponent","NightEffectByGameStyle","NightEffectByTheme","translationKey","nightDesertWindTranslationKey","effect","theme","createNewComponent"],"sourceRoot":""}