{"version":3,"file":"static/js/118.890e91fb.chunk.js","mappings":"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","sources":["app/options/EntityLimitAppOption.tsx","app/property/EntityLimitTypes.ts","app/EntityLimitApp.tsx","app/tools/button/LinkButton.tsx"],"sourcesContent":["import './EntityLimitAppOption.scss'\n\nimport type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityLimitAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {EntityLimit}                                      from 'core/entityLimit/EntityLimit'\nimport type {EntityLimits}                                     from 'core/entityLimit/EntityLimits'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\n\nimport {CommonOptions}                 from 'app/options/CommonOptions'\nimport {COURSE_THEME_IMAGE_FILE}       from 'app/options/file/themeImageFiles'\nimport {AppOptionWithContentComponent} from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}   from 'app/options/component/AppOptionWithTable.component'\nimport TextComponent                   from 'app/tools/text/TextComponent'\nimport Image                           from 'app/tools/images/Image'\nimport {Games}                         from 'core/game/Games'\nimport {EmptyEntityLimit}              from 'core/entityLimit/EmptyEntityLimit'\nimport {contentTranslation}            from 'lang/components/translationMethods'\nimport NameComponent                   from 'lang/name/component/Name.component'\n\nexport abstract class EntityLimitAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ACRONYM = new class EntityLimitAppOption_Acronym extends EntityLimitAppOption {\n\n        protected override _createContentOption({reference: {acronym, alternativeAcronym,},}: EntityLimits,) {\n            return alternativeAcronym == null\n                ? acronym == null\n                    ? null\n                    : <TextComponent content={acronym}/>\n                : <div className=\"acronyms-container d-flex flex-column flex-md-row\">\n                    <TextComponent content={acronym}/>\n                    <div className=\"vertical-separator vr mx-2 d-none d-md-inline-block\"/>\n                    <hr className=\"horizontal-separator my-1 d-block d-md-none\"/>\n                    <TextComponent content={alternativeAcronym}/>\n                </div>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'acronym', element: contentTranslation('Acronym(s)'),}\n        }\n\n    }()\n    public static readonly NAME = new class EntityLimitAppOption_Name extends EntityLimitAppOption {\n\n        protected override _createContentOption({reference, isEditorLimit,}: EntityLimits,) {\n            const {alternativeContainer} = reference\n            return alternativeContainer instanceof EmptyEntityLimit\n                ? this.#createNameComponent(reference, isEditorLimit,)\n                : <div className=\"names-container d-flex flex-column flex-md-row\">\n                    {this.#createNameComponent(reference, isEditorLimit,)}\n                    <div className=\"vertical-separator vr mx-3 d-none d-md-inline-block\"/>\n                    <hr className=\"horizontal-separator my-1 d-block d-md-none\"/>\n                    <NameComponent id=\"alternativeName\" name={alternativeContainer} popoverOrientation=\"bottom\"/>\n                </div>\n        }\n\n        #createNameComponent(reference: EntityLimit, isEditorLimit: boolean,): ReactElement {\n            return isEditorLimit\n                ? <div className=\"nameWithImage-container d-flex position-relative\">\n                    <Image file={COURSE_THEME_IMAGE_FILE} className=\"course-theme-image badge bg-transparent position-absolute top-0 start-0\"/>\n                    <NameComponent id=\"name\" name={reference} popoverOrientation=\"bottom\"/>\n                </div>\n                : <NameComponent id=\"name\" name={reference} popoverOrientation=\"bottom\"/>\n        }\n\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly AMOUNT = new class EntityLimitAppOption_Amount extends EntityLimitAppOption {\n\n        protected override _createContentOption({reference, englishName,}: EntityLimits,) {\n            return [\n                <TextComponent key={`${englishName} - text component (amount SMM1&3DS)`} content={reference.limitAmountInSMM1AndSMM3DS} isUnknown={reference.isUnknownLimitInSMM1AndSMM3DS}/>,\n                <TextComponent key={`${englishName} - text component (amount SMM2)`} content={reference.limitAmountInSMM2} isUnknown={reference.isUnknownLimitInSMM2}/>,\n            ]\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'limit', element: contentTranslation('Limit'), subHeaders: [\n                    {key: 'limit-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n                    {key: 'limit-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n                ],\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityLimitAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityLimitAppOption} and get by {@link EntityLimitApp}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => EntityLimits\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: EntityLimits,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(EntityLimitAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityLimitAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityLimitAppOption>,): EntityLimitAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityLimitAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName, PossibleType} from 'app/property/EntityLimitTypes.types'\nimport type {ClassWithType}                                    from 'core/ClassWithType'\nimport type {BootstrapColor}                                   from 'bootstrap/Bootstrap.types'\nimport type {Nullable, NullOr}                                 from 'util/types/nullable'\n\nimport {EntityLimits}   from 'core/entityLimit/EntityLimits'\nimport {getValueByType} from 'util/utilitiesMethods'\n\nexport abstract class EntityLimitTypes\n    extends Enum<Ordinals, Names>\n    implements ClassWithType<PossibleType> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL =           new class EntityLimitTypes_All extends EntityLimitTypes {\n\n        public override get iterator(): IterableIterator<EntityLimits> {\n            return EntityLimits[Symbol.iterator]()\n        }\n\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }('all',)\n    public static readonly WHILE_PLAYING = new class EntityLimitTypes_WhilePlaying extends EntityLimitTypes {\n\n        public override get iterator(): IterableIterator<EntityLimits> {\n            return EntityLimits.whilePlayingEntityLimits[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get playRouteName() {\n            return null\n        }\n\n        public override get editorColor(): PossibleColor {\n            return 'danger'\n        }\n\n    }('play',)\n    public static readonly EDITOR =        new class EntityLimitTypes_Editor extends EntityLimitTypes {\n\n        public override get iterator(): IterableIterator<EntityLimits> {\n            return EntityLimits.editorEntityLimits[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get playColor(): PossibleColor {\n            return 'danger'\n        }\n\n        public override get editorRouteName() {\n            return null\n        }\n\n    }('editor',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityLimitTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(type: PossibleType,) {\n        super()\n        this.#type = type\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get type(): PossibleType {\n        return this.#type\n    }\n\n    public abstract get iterator(): IterableIterator<EntityLimits>\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- Link button methods --------------------\n\n    public get allRouteName(): NullOr<PossibleRouteName> {\n        return 'everyLimits'\n    }\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    public get playRouteName(): NullOr<PossibleRouteName> {\n        return 'playLimits'\n    }\n\n    public get playColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    public get editorRouteName(): NullOr<PossibleRouteName> {\n        return 'editorLimits'\n    }\n\n    public get editorColor(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Link button methods --------------------\n\n    public static getValueByType(value: Nullable<| EntityLimitTypes | string>,): EntityLimitTypes {\n        return getValueByType(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityLimitTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityLimitTypes>,): EntityLimitTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityLimitTypes> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static* [Symbol.iterator]() {\n        yield* this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning' | 'danger'>\n","import './EntityLimitApp.scss'\n\nimport type {EntityLimitAppProperties}                             from 'app/AppProperties.types'\nimport type {EntityLimitAppStates}                                 from 'app/AppStates.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ClassWithType}                                        from 'core/ClassWithType'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityLimitAppOption}                       from 'app/options/EntityLimitAppOption'\nimport {EntityLimitTypes}                           from 'app/property/EntityLimitTypes'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport TextComponent                                from 'app/tools/text/TextComponent'\nimport {AbstractTableApp}                           from 'app/withInterpreter/AbstractTableApp'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport {EntityLimits}                               from 'core/entityLimit/EntityLimits'\nimport {EntityLimitTypes as EntityLimitTypes2}      from 'core/entityLimit/EntityLimitTypes'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport Image                                        from 'app/tools/images/Image'\nimport {COURSE_THEME_IMAGE_FILE}                    from 'app/options/file/themeImageFiles'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {WHILE_PLAYING, EDITOR,} = EntityLimitTypes2\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @reactComponent\n */\nexport default class EntityLimitApp\n    extends AbstractTableApp<AppInterpreterWithTable<EntityLimits, EntityLimitAppOption>, EntityLimitAppProperties, EntityLimitAppStates>\n    implements ClassWithType<EntityLimitTypes> {\n\n    //region -------------------- Fields --------------------\n\n    #type?: EntityLimitTypes\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: EntityLimitAppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): EntityLimitTypes {\n        return this.#type ??= EntityLimitTypes.getValueByType(this.props.type)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'limit'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every entity limits')\n    }\n\n    protected override _createAsideContent(): ReactElementOrString {\n        const type = this.type\n\n        return <div id=\"limit-linkButton-container\" className=\"btn-group btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"allLimit\" routeName={type.allRouteName} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"limit-linkButton-playAndEditor-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"playLimit\" routeName={type.playRouteName} color={type.playColor}>{gameContentTranslation(WHILE_PLAYING.englishCommonText)}</LinkButton>\n                <LinkButton partialId=\"editorLimit\" routeName={type.editorRouteName} color={type.editorColor}>{gameContentTranslation(EDITOR.englishCommonText)}</LinkButton>\n            </div>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<EntityLimits, EntityLimitAppOption> {\n        const $this = this\n\n        return new class implements AppInterpreterWithTable<EntityLimits, EntityLimitAppOption> {\n\n            public get iterable() {\n                return $this.type.iterator\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    large: null,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumeration: EntityLimits,) {\n                EntityLimitAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration\n\n                return enumeration.isEditorLimit\n                    ? <div className=\"card-bodyWithEditor-container\">\n                        <Image file={COURSE_THEME_IMAGE_FILE} className=\"course-theme-image position-absolute start-0 bottom-0\"/>\n                        {this.#createBody(enumeration)}\n                    </div>\n                    : this.#createBody(enumeration)\n            }\n\n            #createBody({reference: {limitAmountInSMM1AndSMM3DS, limitAmountInSMM2, isUnknownLimitInSMM2,}, englishName, englishNameInHtml,}: EntityLimits,) {\n                return <div className=\"card-body\" id={`limit-${englishNameInHtml}`}>\n                    {limitAmountInSMM1AndSMM3DS === limitAmountInSMM2\n                        ? <TextComponent key={`${englishName} - card list text component`} content={limitAmountInSMM2} isUnknown={isUnknownLimitInSMM2}/>\n                        : EntityLimitAppOption.AMOUNT.renderContent}\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => EntityLimits,) {\n                EntityLimitAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityLimitAppOption[] {\n                return [\n                    EntityLimitAppOption.ACRONYM,\n                    EntityLimitAppOption.NAME,\n                    EntityLimitAppOption.AMOUNT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every entity limits'),\n                }\n            }\n\n\n            public createTableContent(option: EntityLimitAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityLimitAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n}\n","import {Link} from 'react-router-dom'\n\nimport type {BootstrapColor}                                                     from 'bootstrap/Bootstrap.types'\nimport type {EveryPossibleRouteNames}                                            from 'routes/everyRoutes.types'\nimport type {ReactElementOrString, ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\nimport type {Nullable}                                                           from 'util/types/nullable'\n\nimport {route} from 'routes/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<EveryPossibleRouteNames>\n\n    color: BootstrapColor\n\n}\n\n/**\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`,\n        className = `btn btn-${color} link-button`\n\n    return routeName == null\n        ? <button type=\"button\" id={id} className={className} disabled>{children}</button>\n        : <Link type=\"button\" id={id} className={className} to={route(routeName)}>{children}</Link>\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the route name is <b>null</b>)\n *\n * @param partialId The partial ID (with \"-button\") added after-end\n * @param routeName The route name\n * @param color The Bootstrap color\n * @param value The value to display\n */\nexport function createLinkButton(partialId: string, [routeName, color,]: readonly [Nullable<EveryPossibleRouteNames>, BootstrapColor,], value: ReactElementOrString,) {\n    return <LinkButton partialId={partialId} routeName={routeName} color={color}>{value}</LinkButton>\n}\n"],"names":["Symbol","iterator","EntityLimitAppOption","this","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","values","reference","isEditorLimit","className","Image","file","COURSE_THEME_IMAGE_FILE","id","name","popoverOrientation","ACRONYM","acronym","alternativeAcronym","TextComponent","content","key","element","contentTranslation","NAME","alternativeContainer","EmptyEntityLimit","CommonOptions","AMOUNT","englishName","limitAmountInSMM1AndSMM3DS","isUnknown","isUnknownLimitInSMM1AndSMM3DS","limitAmountInSMM2","isUnknownLimitInSMM2","subHeaders","alt","Games","path","EntityLimitTypes","type","getValueByType","ALL","EntityLimits","WHILE_PLAYING","EDITOR","EntityLimitTypes2","EntityLimitApp","props","state","typeDisplayed","ViewDisplays","gameContentTranslation","LinkButton","partialId","routeName","allRouteName","color","allColor","playRouteName","playColor","englishCommonText","editorRouteName","editorColor","$this","small","large","extraLarge","enumeration","caption","option","englishNameInHtml","AbstractTableApp","children","disabled","to","route"],"sourceRoot":""}