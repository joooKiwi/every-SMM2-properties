{"version":3,"file":"static/js/573.ff97ae2f.chunk.js","mappings":"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","sources":["app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/withInterpreter/ListDimension.creator.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport {ListDimensionCreator}       from 'app/withInterpreter/ListDimension.creator'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const dimensions = new ListDimensionCreator(optionInterpreter.createListDimension(),).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {Lazy} from '@joookiwi/lazy'\nimport {lazy}      from '@joookiwi/lazy'\n\nimport type {DimensionOnList}                                                                                                                                                                                           from 'app/interpreter/DimensionOnList'\nimport type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from 'app/withInterpreter/ListDimension.creator.types'\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    }\n\n    readonly #dimension\n    #smallHolder: Lazy<| SMALL | DefaultSmallDimension>\n    #mediumHolder: Lazy<| MEDIUM | DefaultMediumDimension>\n    #largeHolder: Lazy<| LARGE | DefaultLargeDimension>\n    #extraLargeHolder: Lazy<| EXTRA_LARGE | DefaultExtraLargeDimension>\n    #extraExtraLargeHolder: Lazy<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>,) {\n        this.#dimension = dimension\n        this.#smallHolder = lazy(() => {\n            const value = this.dimensionOrDefault.small\n            return value === undefined ? this.defaultSmall : value\n        },)\n        this.#mediumHolder = lazy(() => {\n            const value = this.dimensionOrDefault.medium\n            return value === undefined ? ListDimensionCreator.defaultMedium : value\n        },)\n        this.#largeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.large\n            return value === undefined ? this.defaultLarge : value\n        },)\n        this.#extraLargeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.extraLarge\n            return value === undefined ? this.defaultExtraLarge : value\n        },)\n        this.#extraExtraLargeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge\n            return value === undefined ? this.defaultExtraExtraLarge : value\n        },)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>>> {\n        return this.#dimension\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>)\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.value\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.value\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.value\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.value\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.value\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["DisplayButtonGroup","_ref","key","reactKey","views","currentView","_jsx","id","className","children","map","_ref2","_ref3","_slicedToArray","view","name","DisplayButton","routeName","concat","_ref4","currentPath","useLocation","pathname","path","routeFromName","htmlType","type","disabled","Link","to","onClick","ViewDisplays","CompanionEnum","get","current","_possibleViewDisplay","_classPrivateFieldLooseKey","_key","_appInterpreter","AbstractAppWithInterpreter","_AbstractApp","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","writable","value","_createClass","this","viewDisplay","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createPossibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_createKey","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAppOptionInterpreter","UnfinishedText","isHidden","_jsxs","_createTitleContent","__possibleViewDisplay","_createAsideContent","_createDescription","createComponent","AbstractApp","_routeName","AbstractSimpleListApp","_AbstractAppWithInter","_len","arguments","length","args","Array","apply","SIMPLE_LIST","__listRouteName","_createSimpleListRouteName","enumerable","englishName","optionInterpreter","_appOptionInterpreter","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","size","contentToDisplay","index","uniqueEnglishName","_createUniqueNameOnSimpleList","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","_Fragment","_dimension","_smallHolder","_mediumHolder","_largeHolder","_extraLargeHolder","_extraExtraLargeHolder","dimension","lazy","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","_this$dimension","DEFAULT_DIMENSION","_this$dimension$defau","_this$dimension2","default","defaultDefault","sm","md","lg","xl","xxl","Popover","option","triggers","on","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","_objectWithoutProperties","_excluded","_objectSpread","TextComponent","_currentLanguageTextContent","NamePopoverComponent","ProjectLanguages","state","element","listId","setDoesDisplayPopover","setState","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","_step","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","language","includes","push","languageTranslation","space","unionTrait","err","e","f","hidden","_useState","useState","_useState2","english","StringContainer","getInHtml"],"sourceRoot":""}