{"version":3,"sources":["bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx","app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/EverySoundEffectsApp.tsx"],"names":["PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","getOrCreateInstance","this","type","callback","addEventListener","event","inserted","onInserted","__addEventListener","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","children","EMPTY_REACT_ELEMENT","option","triggers","elementId","useEffect","flat","forEach","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","currentLanguage","get","name","state","listId","setDoesDisplayPopover","popoverOrientation","setState","ContentTranslationComponent","translation","createOption","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","className","toNameMap","entries","includes","map","value","languageKey","englishName","LanguageTranslationComponent","style","unionTrait","NameComponent","useState","StringContainer","getInHtml","english","Symbol","iterator","HeaderTypes","values","find","enumerable","simpleName","Enum","getValueOn","getValuesOn","HEAD","FOOT","layout","reverse","HeaderHolderContainer","tableIdentifier","header","callbackToRenderHead","callbackToRenderFoot","__addInstance","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","__getMaximumSubLevel","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","instance","has","set","push","maximumSubLevel","__getEveryInstances","previousHeader","Map","TableContent","key","innerContent","index","TableHeaders","headers","everyHeadersHolder","headerAsTh","createSingleHeaderContent","everyHeaderHolders","headerHolder","resetRendered","getLayout","layoutAsTr","layoutAsTh","render","EMPTY_ARRAY","Image","source","path","fallbackName","alt","tooltip","AnyTranslationComponent","namespace","Tooltip","translationKey","replace","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","array","getSubHeaders","__getEveryHeaders","everyHeaders","subHeader","headerContainer","j","i","isHeaderNull","DelayedObjectHolderContainer","__getEveryHeaderHolders","layoutHolder","__getLayout","tableColor","headersColor","EverySoundEffectsApp","display","asText","category","soundEffect","categoryName","categoryNameContainer","EmptyStringName","_displayCategoryAsText","categoryEnglishName","SoundEffectCategories","getValue","imagePath","SoundEffects","reference","isInSuperMarioMaker1","game","Games","SUPER_MARIO_MAKER_1","isInSuperMarioMaker2","SUPER_MARIO_MAKER_2","__createCategoryComponent","AbstractApp"],"mappings":"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","file":"static/js/13.1eb6b1d0.chunk.js","sourcesContent":["import {Popover} from 'bootstrap';\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from './Popover.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Popover.Event.SHOW as Popover.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Popover.Event.SHOWN as Popover.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Popover.Event.HIDE as Popover.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Popover.Event.HIDDEN as Popover.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Popover.Event.INSERTED as Popover.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,);\n    }\n\n\n    private __addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element);\n    }\n\n}\n","import {useEffect}         from 'react';\n\nimport type {PopoverConfiguration}                            from './Popover.types';\nimport type {ReactElement, ReactPropertyWithOptionalChildren} from '../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {PopoverInstance}     from './PopoverInstance';\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertyWithOptionalChildren<PopoverConfiguration, T>,): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)));\n    return children;\n}\n","import Popover from './Popover';\n\nimport type {SpanPopoverConfiguration}                        from './Popover.types';\nimport type {ReactElementOrString, ReactPropertyWithChildren} from '../../util/react/ReactProperty';\n\nimport TextComponent from '../../app/tools/text/TextComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertyWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>;\n}\n","import {Popover}                                       from 'bootstrap';\nimport {Component, type Dispatch, type SetStateAction} from 'react';\n\nimport type {Name}                                                                         from '../Name';\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from './Name.properties';\nimport type {ReactComponent}                                                               from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                                                 from '../../../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../../components/ContentTranslationComponent';\nimport {ProjectLanguages}          from '../../ProjectLanguages';\nimport TextComponent               from '../../../app/tools/text/TextComponent';\nimport TextPopover                 from '../../../bootstrap/popover/TextPopover';\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent;\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,);\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name);\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        };\n    }\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get listId(): string {\n        return this.props.listId;\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover;\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties;\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name;\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation;\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id;\n        const setDoesDisplayPopover = this.setDoesDisplayPopover;\n\n        this.setState({\n            element: <ContentTranslationComponent>{translation =>\n                <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, translation('In other languages'),)}\n                             {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                    {this.#currentLanguageTextContent}\n                </TextPopover>\n            }</ContentTranslationComponent>,\n        });\n    }\n\n    public override render(): ReactElement {\n        return this.state.element;\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    };\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation;\n\n    return option;\n}\n","import type {NameListProperties} from './Name.properties';\n\nimport LanguageTranslationComponent from '../../components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../../ProjectLanguages';\nimport TextComponent                from '../../../app/tools/text/TextComponent';\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage);\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`;\n\n                return <LanguageTranslationComponent key={`${id} - language translation component (${languageKey})`}>{translation =>\n                    <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${translation(language.englishName)} ${language.unionTrait} '`,})}>\n                        <TextComponent content={value}/>\n                    </li>\n                }</LanguageTranslationComponent>;\n            })\n    }</ul>;\n}\n","import './Name.component.scss';\n\nimport {useState} from 'react';\n\nimport type {NameProperties} from './Name.properties';\n\nimport {StringContainer}    from '../../../util/StringContainer';\nimport NamePopoverComponent from './NamePopover.component';\nimport NameListComponent    from './NameList.component';\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false);\n    const {name,} = otherProperties;\n\n    const elementId = `${id}-${StringContainer.getInHtml(name.english)}`;\n    const listId = `${elementId}-list`;\n\n    return <div key={`${elementId} - container`} id={`${elementId}-container`}>\n        <NamePopoverComponent id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>;\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleNonNullableValue, PossiblePlacement, PossibleStringValue, PossibleValue} from './HeaderTypes.types';\nimport type {StaticReference}                                                                                                                                                                                        from '../../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../../util/enum/Enum';\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static/* readonly*/ HEAD;\n    public static/* readonly*/ FOOT;\n\n    static {\n        this.HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n            public override getLayout(layout: readonly string[][]): readonly string[][] {\n                return layout;\n            }\n\n        }('head', 'top',);\n        this.FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n            public override getLayout(layout: readonly string[][]): readonly string[][] {\n                return [...layout].reverse();\n            }\n\n        }('foot', 'bottom',);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: HeaderTypes;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    readonly #name;\n    readonly #placement;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super();\n        this.#name = name;\n        this.#placement = placement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<HeaderTypes> {\n        return HeaderTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrAcronym: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(nameOrAcronym: S,): EnumByString<S>\n    public static getValue<I extends HeaderTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): HeaderTypes\n    public static getValue(value: PossibleValue,): | HeaderTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder';\nimport type {SingleHeaderContent} from '../SimpleHeader';\nimport type {ReactElement}        from '../../../../util/react/ReactProperty';\n\nimport {assert}              from '../../../../util/utilitiesMethods';\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Attributes --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>();\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>();\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #tableIdentifier: string;\n    readonly #header;\n    #parent: | HeaderHolder | null;\n    #subHeaders?: readonly HeaderHolder[];\n    #subLevel?: number;\n    #width?: number;\n    #height?: number;\n    #wasRendered;\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement;\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement;\n\n    //endregion -------------------- Attributes --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier;\n        this.#parent = null;\n        this.#header = header;\n        this.#wasRendered = false;\n        this.#callbackToRenderHead = callbackToRenderHead;\n        this.#callbackToRenderFoot = callbackToRenderFoot;\n\n        HeaderHolderContainer.__addInstance(this);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    private static __addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES;\n        const tableIdentifier = instance.#tableIdentifier;\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!;\n\n        array.push(instance);\n    }\n\n    private static __getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!;\n    }\n\n    private static __getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP;\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!;\n\n        let maximumSubLevel = this.__getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel;\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!;\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header;\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): | HeaderHolder | null {\n        return this.#parent;\n    }\n\n    public set parent(value: | HeaderHolder | null,) {\n        this.setParent(value);\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: | HeaderHolder | null,): | this | never\n    public setParent(value: | HeaderHolder | null,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',);\n        this.#parent = value;\n        return this;\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY;\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value);\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value;\n        return this;\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0;\n            let parent: this['parent'] = this.parent;\n            while (parent != null) {\n                currentSubLevel++;\n                parent = parent.parent;\n            }\n            this.#subLevel = currentSubLevel;\n        }\n        return this.#subLevel;\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1;\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.__getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel;\n            this.#height = currentHeight;\n        }\n        return this.#height;\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,);\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1;\n        }\n        return this.#width;\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered;\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value;\n        return this;\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false);\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot();\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderHead(this);\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderFoot(this);\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types';\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map(content => {\n        const key = content[0];\n        return <tr key={`${key} (header)`}>\n            {content.map((innerContent, index) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${key}-${index}`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>;\n    })}</>;\n}\n","import {PureComponent} from 'react';\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types';\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader';\n\nimport AnyTranslationComponent from '../../../lang/components/AnyTranslationComponent';\nimport {EMPTY_ARRAY}           from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}   from '../../../util/emptyReactVariables';\nimport {HeaderTypes}           from './header/HeaderTypes';\nimport Image                   from '../images/Image';\nimport Tooltip                 from '../../../bootstrap/tooltip/Tooltip';\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Attributes --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders;\n    #layout?: Layout;\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected get id(): string {\n        return this.props.id;\n    }\n\n    protected get type(): HeaderTypes {\n        return this.props.type;\n    }\n\n    protected get headers(): SingleHeadersContent {\n        return this.props.headers;\n    }\n\n    protected get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder();\n    }\n\n    protected get layout(): Layout {\n        return this.#layout ??= this.props.layout();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key;\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY;\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>;\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT;\n\n        const tooltip = header.tooltip;\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT;\n\n        return <AnyTranslationComponent namespace={tooltip.namespace}>{translation =>\n            <Tooltip option={({title: translation(tooltip.translationKey, tooltip.replace,) as string, placement: type.placement,})}\n                     elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>}</AnyTranslationComponent>;\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header);\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>;\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers;\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length;\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>;\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders;\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered());\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>;\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react';\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types';\nimport type {HeaderHolder}               from './header/HeaderHolder';\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types';\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder';\nimport type {ReactComponent}             from '../../../util/react/ReactComponent';\nimport type {ReactElement}               from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent}        from './SimpleHeader';\nimport type {TableProperties}            from './Table.types';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables';\nimport {HeaderTypes}                  from './header/HeaderTypes';\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container';\nimport TableContent                   from './TableContent';\nimport TableHeaders                   from './TableHeaders';\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Attributes --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary';\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info';\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected get id() {\n        return this.props.id;\n    }\n\n    protected get caption() {\n        return this.props.caption;\n    }\n\n    protected get headers() {\n        return this.props.headers;\n    }\n\n    protected get content() {\n        return this.props.content;\n    }\n\n    protected get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR;\n    }\n\n    protected get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR;\n    }\n\n\n    private __getEveryHeaders(): EveryHeaders\n    private __getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    private __getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][];\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header);\n            array.push([TableHeaders.getHeaderKey(header), header,]);\n            if (subHeaders.length !== 0)\n                array.push(...this.__getEveryHeaders(subHeaders,));\n        }\n        return array;\n    }\n\n    private __getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]));\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))));\n\n        return everyHeaderHolders;\n    }\n\n    private __getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = [];\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel;\n            const height = headerContainer.height;\n            const width = headerContainer.width;\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key);\n        });\n        return layout;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption;\n        const headers = this.headers;\n        const isHeaderNull = headers == null;\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.__getEveryHeaderHolders(this.__getEveryHeaders()));\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.__getLayout(everyHeadersHolder.get));\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>;\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][];\n","import './EverySoundEffectsApp.scss';\nimport type {PossibleEnglishName as PossibleEnglishName_Category} from '../core/soundEffectCategory/SoundEffectCategories.types';\nimport type {SoundEffect}                                         from '../core/soundEffect/SoundEffect';\nimport type {SoundEffectAppStates}                                from './AppStates.types';\n\nimport AbstractApp                     from './AbstractApp';\nimport ContentTranslationComponent     from '../lang/components/ContentTranslationComponent';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../core/game/Games';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {EmptyStringName}               from '../lang/name/EmptyStringName';\nimport NameComponent                   from '../lang/name/component/Name.component';\nimport {SingleTableContent}            from './tools/table/Table.types';\nimport {SoundEffects}                  from '../core/soundEffect/SoundEffects';\nimport Table                           from './tools/table/Table';\nimport Image                           from './tools/images/Image';\nimport {SoundEffectCategories}         from '../core/soundEffectCategory/SoundEffectCategories';\nimport SoundEffectComponent            from '../core/soundEffect/SoundEffect.component';\n\n/**\n * @reactComponent\n */\nexport default class EverySoundEffectsApp\n    extends AbstractApp<{}, SoundEffectAppStates> {\n\n    //region -------------------- Attributes & getter methods --------------------\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {display: {asText: {category: false,},},};\n    }\n\n    protected get _displayCategoryAsText(): boolean {\n        return this.state.display.asText.category;\n    }\n\n    //endregion -------------------- Attributes & getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    private __createCategoryComponent(index: number, soundEffect: SoundEffect,) {\n        const categoryName = soundEffect.categoryNameContainer;\n        if (categoryName === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        if (this._displayCategoryAsText)\n            return <NameComponent id={`${index}_soundEffectCategory-name`} name={categoryName} popoverOrientation=\"right\"/>;\n\n        const categoryEnglishName = categoryName.english as PossibleEnglishName_Category;\n        return <Image source={SoundEffectCategories.getValue(categoryEnglishName)!.imagePath} fallbackName={`${categoryEnglishName} - image`}/>;\n    }\n\n    protected get content() {\n        const content = [] as SingleTableContent[];\n\n        let index = 1;\n        for (const enumerable of SoundEffects) {\n            const soundEffect = enumerable.reference;\n\n            content.push([enumerable.englishName,\n                <>{index}</>,\n                soundEffect.isInSuperMarioMaker1 ? <SoundEffectComponent reference={enumerable} name={soundEffect} game={Games.SUPER_MARIO_MAKER_1}/> : EMPTY_REACT_ELEMENT,\n                soundEffect.isInSuperMarioMaker2 ? <SoundEffectComponent reference={enumerable} name={soundEffect} game={Games.SUPER_MARIO_MAKER_2}/> : EMPTY_REACT_ELEMENT,\n                <NameComponent id=\"name\" name={soundEffect} popoverOrientation=\"right\"/>,\n                this.__createCategoryComponent(index, soundEffect,),\n                <>--{soundEffect.translationKey}--</>,\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    protected override _mainContent() {\n        return <Table\n            id=\"soundEffect-table\"\n            caption={<GameContentTranslationComponent translationKey=\"Every sound effects\"/>}\n            headers={[\n                {key: 'originalOrder', element: <>#</>,},\n                {\n                    key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n                    subHeaders: [\n                        {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                        {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                    ],\n                },\n                {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,},\n                {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,},\n                {key: 'player behaviour', element: <>--Player behaviour--</>/*<GameContentTranslationComponent translationKey=\"Player behaviour\"/>*/,},\n            ]}\n            content={this.content}\n        />;\n    }\n\n}\n"],"sourceRoot":""}