{"version":3,"file":"static/js/453.bf7d509e.chunk.js","mappings":"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","sources":["app/CharacterNameApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {CharacterNameProperties}    from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport {AbstractCardListApp}     from 'app/withInterpreter/AbstractCardListApp'\nimport {CharacterNames}          from 'core/characterName/CharacterNames'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {filterGame}              from 'util/utilitiesMethods'\n\nexport default class CharacterNameApp\n    extends AbstractCardListApp<CharacterNames, AppInterpreterWithCardList<CharacterNames>, CharacterNameProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'characterName'\n    }\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyCharacterName (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyCharacterName (card)'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('character name.all',)\n    }\n\n    protected override _createUniqueNameOnSimpleList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createUniqueNameOnCardList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class CharacterNameAppInterpreter implements AppInterpreterWithCardList<CharacterNames> {\n\n            public get content() {\n                return filterGame(CharacterNames.CompanionEnum.get.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default:1,\n                    small: 2,\n                    medium: 4,\n                    large: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent({uniqueEnglishName: name, editorVoiceSoundFileHolder,}: CharacterNames,) {\n                return <div className=\"card-body\">\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSound>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["CharacterNameApp","AbstractCardListApp","_createKey","_createSimpleListRouteName","_createCardListRouteName","_createTitleContent","gameContentTranslation","_createUniqueNameOnSimpleList","enumerable","uniqueEnglishName","_createUniqueNameOnCardList","_createAppOptionInterpreter","$this","this","content","filterGame","CharacterNames","CompanionEnum","get","values","props","games","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","_ref","name","editorVoiceSoundFileHolder","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","_routeName","_classPrivateFieldLooseKey","AbstractSimpleListApp","constructor","arguments","Object","defineProperty","writable","value","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","englishName","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","lg","extraLarge","xl","extraExtraLarge","xxl","dimensions","concat","size","length","contentToDisplay","Array","index","id","englishNameInHtml","_jsxs","NameComponent","reference","nameContainer","popoverOrientation","DisplayButtonGroup","reactKey","views","currentView","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","viewDisplay","__possibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","createList","regularSound","regularFile","europeanSound","europeanFile","SimpleSoundComponent","file","title","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}