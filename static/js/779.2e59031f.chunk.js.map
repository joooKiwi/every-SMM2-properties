{"version":3,"file":"static/js/779.2e59031f.chunk.js","mappings":"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","sources":["app/EditorVoiceApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","core/editorVoice/EditorVoiceSound.component.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {EditorVoiceProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}           from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}             from 'util/collection/GameCollection'\n\nimport SubMainContainer          from 'app/_SubMainContainer'\nimport CardList                  from 'app/withInterpreter/CardList'\nimport SimpleList                from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}            from 'app/withInterpreter/ViewDisplays'\nimport {EditorVoices}            from 'core/editorVoice/EditorVoices'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {assert, filterGame}      from 'util/utilitiesMethods'\n\nclass EditorVoiceAppInterpreter\n    implements AppInterpreterWithCardList<EditorVoices> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection,) {\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(EditorVoices.CompanionEnum.get.values, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: EditorVoices,) {\n        return <div className=\"editorVoices-container\">\n            <EditorVoiceSoundComponent editorVoiceSound={enumerable.editorVoiceSoundFileHolder} name={enumerable.englishName}/>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEditorVoice (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEditorVoice (card)',],\n] as const satisfies readonly ViewAndRouteName[]\nconst titleContent = gameContentTranslation('editor voice.all',)\n\n/** @reactComponent */\nexport default function EditorVoiceApp({viewDisplay, games,}: EditorVoiceProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The EditorVoiceApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n    const appInterpreter = new EditorVoiceAppInterpreter(games,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"editorVoice\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <SimpleList reactKey=\"editorVoice\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"editorVoice\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <CardList reactKey=\"editorVoice\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <p className=\"description-container\">{description}</p>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    readonly editorVoiceSound: Nullable<EditorVoiceSound>\n\n    readonly name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_games","_classPrivateFieldLooseKey","EditorVoiceAppInterpreter","constructor","games","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","content","filterGame","EditorVoices","CompanionEnum","get","values","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","enumerable","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","name","englishName","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","titleContent","gameContentTranslation","EditorVoiceApp","_ref","viewDisplay","assert","TABLE","appInterpreter","SubMainContainer","reactKey","SimpleList","interpreter","CardList","DisplayButtonGroup","key","views","currentView","id","map","_ref2","view","DisplayButton","routeName","concat","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","asideContent","description","_jsxs","UnfinishedText","isHidden","_keyRetriever","keyRetriever","dimensions","df","sm","md","lg","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","index","uniqueKey","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","regularSound","regularFile","europeanSound","europeanFile","SimpleSoundComponent","file","title","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","super","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}