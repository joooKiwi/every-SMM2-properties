{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/MysteryMushroomAppOption.tsx","app/MysteryMushroomApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","SimpleSoundComponent","Symbol","iterator","MysteryMushroomAppOption","type","callback","renderDiv","callbackToRender","value","_mysteryMushroomType","file","title","map","index","uniqueEnglishName","partialId","images","image","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","_createImageContent","_createSoundContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","POWER_UP_COLLECTED","WAITING","TAUNT","PRESSING_DOWN","WALK","RUNNING","SWIMMING","JUMP","FALLING_AFTER_JUMP","ON_GROUND_AFTER_JUMP","TURNING","CLIMBING","GOAL_POLE","LOST_A_LIFE","Enum","getValueOn","getValuesOn","values","MysteryMushrooms","MYSTERY_MUSHROOM","CONDITION_TO_UNLOCK_IT","conditionToUnlockIt","GAME","games","game","length","ProjectLanguages","currentLanguage","comma","gameHeader","NAME","getNameContent","nameHeader","IMAGES_AND_SOUNDS","_imagesAndSounds","enumerable","flat","_renderSoundContent","_createSound","powerUpCollectedSound","haveASoundEffectWhenCollected","_renderImageContent","_createImage","waitingImage","_createSingleImageAndSoundContainer","tauntImage","tauntSound","haveASoundEffectOnTaunt","pressingDownImage","_createAnimatedImages","walkImages","runningImages","swimmingImages","MysteryMushroomAppOption_Jump","jumpImages","_createSounds","jumpSounds","haveASoundEffectOnJump","fallingAfterJumpImage","onGroundAfterJumpSound","haveASoundEffectOnGroundAfterJump","turningImage","turningSound","haveASoundEffectOnTurnAfterRun","climbingImages","goalPoleImages","goalPoleSound","haveASoundEffectOnGoalPole","lostALifeSound","haveASoundEffectOnDeath","TextComponent","content","MysteryMushroomApp","props","state","typeDisplayed","ViewDisplays","CARD_LIST","GameContentTranslationComponent","translation","pluralName","small","medium","large","extraLarge","extraExtraLarge","amountOfImages","fileName","imageFileNames","contains2Images","appOption","renderImageContent","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/15.b46c5991.chunk.js","sourcesContent":["import {lazy} from 'react'\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame'\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from '../../core/ClassWithReference'\nimport type {Enum}                                      from '../../util/enum/Enum'\nimport type {Name}                                      from '../../lang/name/Name'\nimport type {NameTrait}                                 from '../../lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader'\nimport type {Themes}                                    from '../../core/theme/Themes'\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent'\nimport {BASE_PATH}                     from '../../variables'\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables'\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName'\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent'\nimport {Games}                         from '../../core/game/Games'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'))\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","import {Fragment, lazy} from 'react'\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                                                   from './component/AppOptionWithContent'\nimport type {AppOptionWithTable}                                                                                                                                                                                 from './component/AppOptionWithTable'\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleMysteryMushroomType, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './MysteryMushroomAppOption.types'\nimport type {MysteryMushroom}               from '../../core/mysteryMushroom/MysteryMushroom'\nimport type {MysteryMushroomSoundFile}      from '../../core/mysteryMushroom/file/MysteryMushroomSoundFile'\nimport type {NotApplicable}                 from '../../core/_properties/Property'\nimport type {PossibleImageSourceForFile, PossibleSoundSourceForFile}                                                                                                                                             from '../../core/mysteryMushroom/MysteryMushrooms.types'\nimport type {ReactElement}                                                                                                                                                                                       from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent}                                                                                                                                                                                from '../tools/table/SimpleHeader'\nimport type {StaticReference}                                                                                                                                                                                    from '../../util/enum/Enum.types'\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component'\nimport {CommonOptions}                 from './CommonOptions'\nimport {Enum}                          from '../../util/enum/Enum'\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables'\nimport {MysteryMushrooms}              from '../../core/mysteryMushroom/MysteryMushrooms'\nimport TextComponent                   from '../tools/text/TextComponent'\nimport {ProjectLanguages}              from '../../lang/ProjectLanguages'\n\n//region -------------------- dynamic imports --------------------\n\nconst NameComponent =        lazy(() => import('../../lang/name/component/Name.component'))\nconst Image =                lazy(() => import('../tools/images/Image'))\nconst SimpleSoundComponent = lazy(() => import('../../util/sound/component/SimpleSound.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class MysteryMushroomAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly CONDITION_TO_UNLOCK_IT = new class MysteryMushroomAppOption_ConditionToUnlockIt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption({reference,}: MysteryMushrooms,): PossibleRenderReactElement {\n            return <>--{reference.conditionToUnlockIt}--</>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'conditionToUnlockIt', element: <>--Condition to unlock it--</>,}\n        }\n\n    }(null,)\n    public static readonly GAME = new class MysteryMushroomAppOption_Game extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement {\n            const {uniqueEnglishName, englishNameInHtml, reference,} = enumeration\n\n            return <div key={`games - ${uniqueEnglishName}`} id={`games-${englishNameInHtml}`}>{\n                    reference.games.map((game, index, games,) => <Fragment key={`game (${index + 1}) - ${uniqueEnglishName}`}>\n                        <NameComponent id={`game_${index + 1}_${englishNameInHtml}`} name={game.reference} popoverOrientation=\"right\"/>\n                        {index === games.length - 1 ? EMPTY_REACT_ELEMENT : <>{ProjectLanguages.currentLanguage.comma}<br/></>}\n                    </Fragment>)\n                }</div>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.gameHeader\n        }\n\n    }(null,)\n    public static readonly NAME = new class MysteryMushroomAppOption_Name extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement {\n            return CommonOptions.get.getNameContent(enumeration)/*<YesOrNoResultTextComponent boolean={reference.canBeUnlockedByAnAmiibo}/>*/\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader\n        }\n\n    }(null,)\n\n\n    public static readonly IMAGES_AND_SOUNDS = new class MysteryMushroomAppOption_ImagesAndSounds extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderContent).flat()\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'imagesAndSounds', element: <>--Images & sounds--</>,\n                subHeaders: MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderTableHeader!)\n            }\n        }\n\n    }(null,)\n    public static readonly POWER_UP_COLLECTED = new class MysteryMushroomAppOption_PowerUpCollectedSound extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderSoundContent()\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.powerUpCollectedSound, reference => reference.haveASoundEffectWhenCollected, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'powerUpCollectedSound', element: <>--Power-up collected (sound)--</>,}\n        }\n\n    }('power-up collected',)\n    public static readonly WAITING = new class MysteryMushroomAppOption_WaitingImages extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        public override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.waitingImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'waitingImage', element: <>--Waiting (image)--</>,}\n        }\n\n    }('waiting',)\n    public static readonly TAUNT = new class MysteryMushroomAppOption_Taunt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.tauntImage, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.tauntSound, reference => reference.haveASoundEffectOnTaunt, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'tauntImageAndSound', element: <>--Taunt (image & sound)--</>,}\n        }\n\n    }('taunt',)\n    public static readonly PRESSING_DOWN = new class MysteryMushroomAppOption_PressingDown extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.pressingDownImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'pressingDownImage', element: <>--Pressing ↓ (image)--</>,}\n        }\n\n    }('pressing ↓',)\n    public static readonly WALK = new class MysteryMushroomAppOption_Walk extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.walkImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'walkImages', element: <>--Walk (image)--</>,}\n        }\n\n    }('walk',)\n    public static readonly RUNNING = new class MysteryMushroomAppOption_Running extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.runningImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'runningImages', element: <>--Running (images)--</>,}\n        }\n\n    }('running',)\n    public static readonly SWIMMING = new class MysteryMushroomAppOption_Swimming extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.swimmingImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'swimmingImages', element: <>--Swimming (images)--</>,}\n        }\n\n    }('swimming',)\n    public static readonly JUMP = new class MysteryMushroomAppOption_Jump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            const enumeration = MysteryMushroomAppOption_Jump.CALLBACK_TO_GET_ENUMERATION()\n            return (enumeration.jumpImages[0]?.length ?? 0) > 1\n                ? this._createAnimatedImages(() => enumeration.jumpImages, renderDiv,)\n                : this._createImage(() => enumeration.jumpImages.map(images => images[0]!) as unknown as PossibleImageSourceForFile<string>, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSounds(enumeration => enumeration.jumpSounds, reference => reference.haveASoundEffectOnJump, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'jumpingImagesAndSounds', element: <>--Jumping (images & sounds)--</>,}\n        }\n\n    }('jump',)\n    public static readonly FALLING_AFTER_JUMP = new class MysteryMushroomAppOption_FallingAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.fallingAfterJumpImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'fallingAfterJumpImage', element: <>--Falling after jump (images)--</>,}\n        }\n\n    }('falling after jump',)\n    public static readonly ON_GROUND_AFTER_JUMP = new class MysteryMushroomAppOption_OnGroundAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderSoundContent()\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.onGroundAfterJumpSound, reference => reference.haveASoundEffectOnGroundAfterJump, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'groundAfterJumpImage', element: <>--Ground after jump (sound)--</>,}\n        }\n\n    }('ground after jump',)\n    public static readonly TURNING = new class MysteryMushroomAppOption_Turning extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createImage(enumeration => enumeration.turningImage, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.turningSound, reference => reference.haveASoundEffectOnTurnAfterRun, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'turningImageAndSound', element: <>-Turning (image & sound)--</>,}\n        }\n\n    }('turning',)\n    public static readonly CLIMBING = new class MysteryMushroomAppOption_Climbing extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.climbingImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'climbingImages', element: <>-Climbing (images)--</>,}\n        }\n\n    }('climbing',)\n    public static readonly GOAL_POLE = new class MysteryMushroomAppOption_GoalPole extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createAnimatedImages(enumeration => enumeration.goalPoleImages, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.goalPoleSound, reference => reference.haveASoundEffectOnGoalPole, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'goalPoleImagesAndSound', element: <>-Goal pole (images & sound)--</>,}\n        }\n\n    }('goal pole',)\n    public static readonly LOST_A_LIFE = new class MysteryMushroomAppOption_LostALife extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(): PossibleRenderReactElement {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,): ReactElement {\n            return this._createSound(enumeration => enumeration.lostALifeSound, reference => reference.haveASoundEffectOnDeath, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'lostALifeSound', element: <>-Lost a life (sound)--</>,}\n        }\n\n    }('lost a life',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MysteryMushroomAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #imagesAndSounds?: readonly MysteryMushroomAppOption[]\n    public static CALLBACK_TO_GET_ENUMERATION: () => MysteryMushrooms\n\n    static readonly #NOT_APPLICABLE_COMPONENT = <TextComponent content=\"N/A\"/>\n\n    readonly #type\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: PossibleMysteryMushroomType,) {\n        super()\n        this.#type = type\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _mysteryMushroomType(): PossibleMysteryMushroomType {\n        return this.#type\n    }\n\n    protected static get _imagesAndSounds(): readonly MysteryMushroomAppOption[] {\n        return this.#imagesAndSounds ??= [\n            MysteryMushroomAppOption.POWER_UP_COLLECTED,\n            MysteryMushroomAppOption.WAITING,\n            MysteryMushroomAppOption.TAUNT,\n            MysteryMushroomAppOption.PRESSING_DOWN,\n            MysteryMushroomAppOption.WALK,\n            MysteryMushroomAppOption.RUNNING,\n            MysteryMushroomAppOption.SWIMMING,\n            MysteryMushroomAppOption.JUMP,\n            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n            MysteryMushroomAppOption.ON_GROUND_AFTER_JUMP,\n            MysteryMushroomAppOption.TURNING,\n            MysteryMushroomAppOption.CLIMBING,\n            MysteryMushroomAppOption.GOAL_POLE,\n            MysteryMushroomAppOption.LOST_A_LIFE,\n        ]\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    #createSingleImageAndSoundContainer(renderDiv: boolean, callback: (enumeration: MysteryMushrooms,) => ReactElement,): ReactElement {\n        const enumeration = MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n        return enumeration === MysteryMushrooms.MYSTERY_MUSHROOM\n            ? MysteryMushroomAppOption.#NOT_APPLICABLE_COMPONENT\n            : renderDiv\n                ? <div key={`${enumeration.uniqueEnglishName} - ${this._mysteryMushroomType}`}>{callback(enumeration)}</div>\n                : callback(enumeration)\n    }\n\n    protected _createSingleImageAndSoundContainer(callback: (enumeration: MysteryMushrooms,) => ReactElement, renderDiv: boolean = true,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, callback,)\n    }\n\n    protected _createSound(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<MysteryMushroomSoundFile>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const value = callback(enumeration)\n            if (value == null)\n                return EMPTY_REACT_ELEMENT\n\n            const englishName = enumeration.englishName\n            const type = this._mysteryMushroomType\n            return <SimpleSoundComponent file={value} title={`${englishName} - ${type}`}/>\n        },)\n    }\n\n    protected _createSounds(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<readonly MysteryMushroomSoundFile[]>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const englishName = enumeration.englishName\n            const type = this._mysteryMushroomType\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <SimpleSoundComponent file={value} title={`${englishName} - ${type} #${index + 1}`}/>\n            )}</>\n        },)\n    }\n\n    protected _createImage(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<string>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const uniqueEnglishName = enumeration.uniqueEnglishName\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${uniqueEnglishName} #${index + 1}`} source={value} fallbackName={`${fallbackName} #${index + 1}`}/>\n            )}</>\n        },)\n    }\n\n    protected _createAnimatedImages(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<readonly string[]>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const uniqueEnglishName = enumeration.uniqueEnglishName\n            const englishNameInHtml = enumeration.englishNameInHtml\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${uniqueEnglishName} #${index + 1}`} partialId={`${englishNameInHtml}-${index + 1}`}\n                       images={value.map((image, index,) =>\n                           ({source: image, fallbackName: `${fallbackName} #${index + 1}`,}))}/>\n            )}</>\n        },)\n    }\n\n    protected abstract _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n\n    protected _createImageContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT\n    }\n\n    public renderImageContent(enumeration: MysteryMushrooms, renderDiv: boolean = false,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration\n        return this._createImageContent(renderDiv,)\n    }\n\n    protected _renderImageContent(renderDiv: boolean = true,): ReactElement {\n        return this._createImageContent(renderDiv,)\n    }\n\n    public _createSoundContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT\n    }\n\n    public renderSoundContent(enumeration: MysteryMushrooms,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration\n        return this._createSoundContent(false)\n    }\n\n    protected _renderSoundContent(renderDiv: boolean = true,): ReactElement {\n        return this._createSoundContent(renderDiv,)\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MysteryMushroomAppOption> {\n        return MysteryMushroomAppOption\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MysteryMushroomAppOption = MysteryMushroomAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MysteryMushroomAppOption\n    public static getValue(value: PossibleValue,): | MysteryMushroomAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this)\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype ReferenceCallback = (reference: MysteryMushroom,) => | boolean | NotApplicable\n","import './MysteryMushroomApp.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from './interpreter/AppInterpreterWithTable'\nimport type {AppProperties}                                        from './AppProperties.types'\nimport type {MysteryMushroomAppStates}                             from './AppStates.types'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList'\nimport type {ReactElement, ReactElementOrString}                   from '../util/react/ReactProperties'\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp'\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables'\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent'\nimport {MysteryMushroomAppOption}      from './options/MysteryMushroomAppOption'\nimport {MysteryMushrooms}              from '../core/mysteryMushroom/MysteryMushrooms'\nimport {SingleHeaderContent}           from './tools/table/SimpleHeader'\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays'\n\n/**\n * @reactComponent\n */\nexport default class MysteryMushroomApp\n    extends AbstractTableApp<AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption>, AppProperties, MysteryMushroomAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'mysteryMushroom'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => translation('Every Mystery Mushrooms', {pluralName: '--Mystery Mushrooms--'})}</GameContentTranslationComponent>\n    }\n\n    protected override _createUniqueNameOnSimpleList(enumerable: MysteryMushrooms,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createUniqueNameOnCardList(enumerable: MysteryMushrooms,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n        return new class implements AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n\n            public get iterable(): IterableIterator<MysteryMushrooms> {\n                return MysteryMushrooms[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: 4,\n                    extraLarge: 3,\n                    extraExtraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: MysteryMushrooms,): ReactElement {\n                const amountOfImages = enumerable.fileName.imageFileNames.length\n                const contains2Images = amountOfImages === 2\n\n                return amountOfImages === 0\n                    ? EMPTY_REACT_ELEMENT\n                    : <div className={`image-content-container ${contains2Images ? 'dual' : 'single'}-image-content-container`}>\n                        {[\n                            MysteryMushroomAppOption.WAITING,\n                            MysteryMushroomAppOption.TAUNT,\n                            MysteryMushroomAppOption.PRESSING_DOWN,\n                            MysteryMushroomAppOption.WALK,\n                            MysteryMushroomAppOption.RUNNING,\n                            MysteryMushroomAppOption.SWIMMING,\n                            MysteryMushroomAppOption.JUMP,\n                            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n                            MysteryMushroomAppOption.TURNING,\n                            MysteryMushroomAppOption.CLIMBING,\n                            MysteryMushroomAppOption.GOAL_POLE,\n                        ].map(appOption => appOption.renderImageContent(enumerable, contains2Images,))}\n                    </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => MysteryMushrooms,) {\n                MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly MysteryMushroomAppOption[] {\n                return [\n                    MysteryMushroomAppOption.CONDITION_TO_UNLOCK_IT,\n                    MysteryMushroomAppOption.GAME,\n                    MysteryMushroomAppOption.NAME,\n                    MysteryMushroomAppOption.IMAGES_AND_SOUNDS,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent>{translation => translation('Every Mystery Mushrooms', {pluralName: 'Mystery Mushrooms'})}</GameContentTranslationComponent>,\n                }\n            }\n\n\n            public createTableContent(option: MysteryMushroomAppOption,): readonly ReactElement[] {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: MysteryMushroomAppOption): | SingleHeaderContent | null {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}