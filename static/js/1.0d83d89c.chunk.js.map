{"version":3,"sources":["app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/options/component/AppOptionWithContent.component.ts","app/options/component/AppOptionWithTable.component.ts","app/options/CommonOptions.tsx","app/options/component/AbstractAppOptionWithSomething.ts"],"names":["Symbol","iterator","HeaderTypes","name","placement","this","value","values","find","enumerable","simpleName","Enum","getValueOn","getValuesOn","HEAD","FOOT","layout","reverse","HeaderHolderContainer","tableIdentifier","header","callbackToRenderHead","callbackToRenderFoot","__addInstance","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","__getMaximumSubLevel","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","EMPTY_REACT_ELEMENT","instance","map","has","get","set","push","maximumSubLevel","__getEveryInstances","previousHeader","Map","TableContent","content","key","innerContent","index","filter","TableHeaders","props","id","type","headers","everyHeadersHolder","className","headerAsTh","createSingleHeaderContent","everyHeaderHolders","forEach","headerHolder","resetRendered","getLayout","layoutAsTr","layoutAsTh","render","EMPTY_ARRAY","element","Image","source","path","fallbackName","alt","tooltip","AnyTranslationComponent","namespace","translation","Tooltip","option","title","translationKey","replace","elementId","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","array","getSubHeaders","__getEveryHeaders","everyHeaders","subHeader","headerContainer","j","i","isHeaderNull","DelayedObjectHolderContainer","__getEveryHeaderHolders","layoutHolder","__getLayout","tableColor","headersColor","AppOptionWithContentComponent","callbackToRender","_callbackToRender","Array","AbstractAppOptionWithSomething","AppOptionWithTableComponent","lazy","NameComponent","CommonOptions","enumeration","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","englishName","english","startingKey","englishNameInHtml"],"mappings":"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","file":"static/js/1.0d83d89c.chunk.js","sourcesContent":["import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleNonNullableValue, PossiblePlacement, PossibleStringValue, PossibleValue} from './HeaderTypes.types';\nimport type {StaticReference}                                                                                                                                                                                        from '../../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../../util/enum/Enum';\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static/* readonly*/ HEAD;\n    public static/* readonly*/ FOOT;\n\n    static {\n        this.HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n            public override getLayout(layout: readonly string[][]): readonly string[][] {\n                return layout;\n            }\n\n        }('head', 'top',);\n        this.FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n            public override getLayout(layout: readonly string[][]): readonly string[][] {\n                return [...layout].reverse();\n            }\n\n        }('foot', 'bottom',);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: HeaderTypes;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    readonly #name;\n    readonly #placement;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super();\n        this.#name = name;\n        this.#placement = placement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<HeaderTypes> {\n        return HeaderTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrAcronym: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(nameOrAcronym: S,): EnumByString<S>\n    public static getValue<I extends HeaderTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): HeaderTypes\n    public static getValue(value: PossibleValue,): | HeaderTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder';\nimport type {SingleHeaderContent} from '../SimpleHeader';\nimport type {ReactElement}        from '../../../../util/react/ReactProperty';\n\nimport {assert}              from '../../../../util/utilitiesMethods';\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Attributes --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>();\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>();\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #tableIdentifier: string;\n    readonly #header;\n    #parent: | HeaderHolder | null;\n    #subHeaders?: readonly HeaderHolder[];\n    #subLevel?: number;\n    #width?: number;\n    #height?: number;\n    #wasRendered;\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement;\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement;\n\n    //endregion -------------------- Attributes --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier;\n        this.#parent = null;\n        this.#header = header;\n        this.#wasRendered = false;\n        this.#callbackToRenderHead = callbackToRenderHead;\n        this.#callbackToRenderFoot = callbackToRenderFoot;\n\n        HeaderHolderContainer.__addInstance(this);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    private static __addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES;\n        const tableIdentifier = instance.#tableIdentifier;\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!;\n\n        array.push(instance);\n    }\n\n    private static __getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!;\n    }\n\n    private static __getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP;\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!;\n\n        let maximumSubLevel = this.__getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel;\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!;\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header;\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): | HeaderHolder | null {\n        return this.#parent;\n    }\n\n    public set parent(value: | HeaderHolder | null,) {\n        this.setParent(value);\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: | HeaderHolder | null,): | this | never\n    public setParent(value: | HeaderHolder | null,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',);\n        this.#parent = value;\n        return this;\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY;\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value);\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value;\n        return this;\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0;\n            let parent: this['parent'] = this.parent;\n            while (parent != null) {\n                currentSubLevel++;\n                parent = parent.parent;\n            }\n            this.#subLevel = currentSubLevel;\n        }\n        return this.#subLevel;\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1;\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.__getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel;\n            this.#height = currentHeight;\n        }\n        return this.#height;\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,);\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1;\n        }\n        return this.#width;\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered;\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value;\n        return this;\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false);\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot();\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderHead(this);\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderFoot(this);\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types';\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map(content => {\n        const key = content[0];\n        return <tr key={`${key} (header)`}>\n            {content.map((innerContent, index) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${key}-${index}`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>;\n    })}</>;\n}\n","import {PureComponent} from 'react';\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types';\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader';\n\nimport AnyTranslationComponent from '../../../lang/components/AnyTranslationComponent';\nimport {EMPTY_ARRAY}           from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}   from '../../../util/emptyReactVariables';\nimport {HeaderTypes}           from './header/HeaderTypes';\nimport Image                   from '../images/Image';\nimport Tooltip                 from '../../../bootstrap/tooltip/Tooltip';\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Attributes --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders;\n    #layout?: Layout;\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected get id(): string {\n        return this.props.id;\n    }\n\n    protected get type(): HeaderTypes {\n        return this.props.type;\n    }\n\n    protected get headers(): SingleHeadersContent {\n        return this.props.headers;\n    }\n\n    protected get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder();\n    }\n\n    protected get layout(): Layout {\n        return this.#layout ??= this.props.layout();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key;\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY;\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>;\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT;\n\n        const tooltip = header.tooltip;\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT;\n\n        return <AnyTranslationComponent namespace={tooltip.namespace}>{translation =>\n            <Tooltip option={({title: translation(tooltip.translationKey, tooltip.replace,) as string, placement: type.placement,})}\n                     elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>}</AnyTranslationComponent>;\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header);\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>;\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers;\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length;\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>;\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders;\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered());\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>;\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react';\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types';\nimport type {HeaderHolder}               from './header/HeaderHolder';\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types';\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder';\nimport type {ReactComponent}             from '../../../util/react/ReactComponent';\nimport type {ReactElement}               from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent}        from './SimpleHeader';\nimport type {TableProperties}            from './Table.types';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables';\nimport {HeaderTypes}                  from './header/HeaderTypes';\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container';\nimport TableContent                   from './TableContent';\nimport TableHeaders                   from './TableHeaders';\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Attributes --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary';\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info';\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected get id() {\n        return this.props.id;\n    }\n\n    protected get caption() {\n        return this.props.caption;\n    }\n\n    protected get headers() {\n        return this.props.headers;\n    }\n\n    protected get content() {\n        return this.props.content;\n    }\n\n    protected get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR;\n    }\n\n    protected get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR;\n    }\n\n\n    private __getEveryHeaders(): EveryHeaders\n    private __getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    private __getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][];\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header);\n            array.push([TableHeaders.getHeaderKey(header), header,]);\n            if (subHeaders.length !== 0)\n                array.push(...this.__getEveryHeaders(subHeaders,));\n        }\n        return array;\n    }\n\n    private __getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]));\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))));\n\n        return everyHeaderHolders;\n    }\n\n    private __getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = [];\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel;\n            const height = headerContainer.height;\n            const width = headerContainer.width;\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key);\n        });\n        return layout;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption;\n        const headers = this.headers;\n        const isHeaderNull = headers == null;\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.__getEveryHeaderHolders(this.__getEveryHeaders()));\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.__getLayout(everyHeadersHolder.get));\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>;\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][];\n","import type {AppOptionWithContent, PossibleRenderReactElement} from './AppOptionWithContent';\nimport type {ReactElement}                                     from '../../../util/react/ReactProperty';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithContentComponent\n    extends AbstractAppOptionWithSomething<PossibleRenderReactElement>\n    implements AppOptionWithContent {\n\n    public constructor(callbackToRender: () => PossibleRenderReactElement,) {\n        super(callbackToRender,);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        const value = this._callbackToRender();\n        return value instanceof Array ? value : [value];\n    }\n\n}\n","import type {AppOptionWithTable}  from './AppOptionWithTable';\nimport type {SingleHeaderContent} from '../../tools/table/SimpleHeader';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithTableComponent\n    extends AbstractAppOptionWithSomething<SingleHeaderContent>\n    implements AppOptionWithTable {\n\n    public constructor(callbackToRender: () => SingleHeaderContent,) {\n        super(callbackToRender,);\n    }\n\n    public get renderTableHeader(): SingleHeaderContent {\n        return this._callbackToRender();\n    }\n\n}\n","import {lazy, ReactElement} from 'react';\n\nimport type {ClassWithEnglishName}   from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}     from '../../core/ClassWithReference';\nimport type {Enum}                   from '../../util/enum/Enum';\nimport type {Name}                   from '../../lang/name/Name';\nimport type {NameTrait}              from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory} from '../../lang/name/NameTraitFromACategory';\nimport type {SingleHeaderContent}    from '../tools/table/SimpleHeader';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Attributes --------------------\n\n    #nameHeader?: SingleHeaderContent;\n\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Attributes --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\n","export abstract class AbstractAppOptionWithSomething<T, > {\n\n    //region -------------------- Attributes --------------------\n\n    readonly #callbackToRender;\n\n    //endregion -------------------- Attributes --------------------\n\n    protected constructor(callbackToRender: () => T,) {\n        this.#callbackToRender = callbackToRender;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _callbackToRender() {\n        return this.#callbackToRender;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n"],"sourceRoot":""}