{"version":3,"file":"static/js/361.0abb4e22.chunk.js","mappings":"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","sources":["core/entity/properties/instrument/InstrumentProperty.component.tsx","core/entityLimit/Limit.component.tsx","core/entityLimit/PlayLimit.component.tsx","core/entityLimit/SMM1And3DSEditorLimit.component.tsx","core/entityLimit/SMM2EditorLimit.component.tsx","core/theme/CourseTheme.component.tsx","app/options/EntityAppOption.tsx","app/EntityApp.tsx","app/options/component/EmptyAppOption.ts","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import './InstrumentProperty.scss'\n\nimport type {Entities}        from 'core/entity/Entities'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface InstrumentPropertyProperties\n    extends ReactProperties {\n\n    value: Entities\n\n}\n\n/**\n * @todo add on click event to play the music block sound (randomly if more than one)\n * @reactComponent\n */\nexport default function InstrumentPropertyComponent({value: {englishNameInHtml, reference: {canMakeASoundOutOfAMusicBlock: value, canMakeASoundOutOfAMusicBlockComment: comment,},},}: InstrumentPropertyProperties,) {\n    if (value !== true)\n        return null\n    const id = `${englishNameInHtml}-instrumentProperty`\n\n    if (comment == null)\n        return <i id={id} className=\"music-block\"/>\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} elementId={id}>\n        <i id={id} className=\"music-block-with-comment\"/>\n    </Tooltip>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {EntityLimits}     from 'core/entityLimit/EntityLimits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'play'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    readonly id: Id\n\n    readonly limits: | EntityLimits | ReadonlyMap<EntityLimits, boolean>\n\n    readonly displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof EntityLimits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly EntityLimits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.current.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, entityLimit: EntityLimits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = entityLimit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, entityLimit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(entityLimit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: entityLimit.reference.nameContainer.languageValue,}} elementId={acronymId}>\n            <TextComponent key={`${entityLimit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, entityLimit,)\n}\n\nfunction createSingleNameComponent(id: Id, entityLimit: EntityLimits,) {\n    return <NameComponent key={`${entityLimit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={entityLimit.reference}/>\n}","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport LimitComponent from 'core/entityLimit/Limit.component'\n\nexport default function PlayLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    return <LimitComponent id={`play-${reference.englishNameInHtml}`} limits={reference.reference.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/entityLimit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM1And3DSEditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const editorLimit = reference.reference.editorLimit_smm1And3ds\n\n    return editorLimit == null\n        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} content={NOT_APPLICABLE}/>\n        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {SimpleLimitComponentProperties} from 'core/entityLimit/Limit.component.types'\n\nimport TextComponent    from 'app/tools/text/TextComponent'\nimport LimitComponent   from 'core/entityLimit/Limit.component'\nimport {NOT_APPLICABLE} from 'util/commonVariables'\n\nexport default function SMM2EditorLimitComponent({reference,}: SimpleLimitComponentProperties,) {\n    const entity = reference.reference,\n        editorLimit = entity.editorLimit_smm2\n\n    return editorLimit == null || editorLimit === NOT_APPLICABLE\n        ? <TextComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} content={editorLimit} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n        : <LimitComponent id={`editor-SuperMarioMaker2-${reference.englishNameInHtml}`} limits={editorLimit} displayAcronymIfApplicable/>\n}\n","import type {ThemeProperty} from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport {ThemeComponent}          from 'core/theme/Theme.component'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class CourseThemeComponent\n    extends ThemeComponent<ThemeProperty> {\n\n\n    protected override get _map() {\n        return this.reference.toCourseThemeMap()\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInGroundTheme\n            && this.reference.isInUndergroundTheme\n            && this.reference.isInUnderwaterTheme\n            && (this.reference.isInDesertTheme ?? false)\n            && (this.reference.isInSnowTheme ?? false)\n            && (this.reference.isInSkyTheme ?? false)\n            && (this.reference.isInForestTheme ?? false)\n            && this.reference.isInGhostHouseTheme\n            && this.reference.isInAirshipTheme\n            && this.reference.isInCastleTheme\n    }\n\n    protected override _renderSingleComponent(theme: Themes,) {\n        return CourseThemeComponent.renderSingleComponent(theme, true, this.name.english,)\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage:<Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme => this._renderSingleComponent(courseTheme))}</div>\n    }\n\n}\n","import type {BasicCompanionEnumDeclaration, CollectionHolder, PossibleEnumerableValueBy, Singleton} from '@joookiwi/enumerable/dist/types'\nimport {BasicCompanionEnum, Enum}                                                                   from '@joookiwi/enumerable'\nimport {Fragment}                                                                                   from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Entities}                                         from 'core/entity/Entities'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\nimport type {EmptyArray}                                       from 'util/types/variables'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                             from 'app/options/component/EmptyAppOption'\nimport Image                                        from 'app/tools/images/Image'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport InstrumentPropertyComponent                  from 'core/entity/properties/instrument/InstrumentProperty.component'\nimport {EntityCategories}                           from 'core/entityCategory/EntityCategories'\nimport PlayLimitComponent                           from 'core/entityLimit/PlayLimit.component'\nimport SMM1And3DSEditorLimitComponent               from 'core/entityLimit/SMM1And3DSEditorLimit.component'\nimport SMM2EditorLimitComponent                     from 'core/entityLimit/SMM2EditorLimit.component'\nimport {Games}                                      from 'core/game/Games'\nimport GameComponent                                from 'core/game/Game.component'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport GameStyleComponent                           from 'core/gameStyle/GameStyle.component'\nimport CourseThemeComponent                         from 'core/theme/CourseTheme.component'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\nimport TimeComponent                                from 'core/time/Time.component'\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image className={`entity-image ${englishNameInHtml}-image`} file={image}/>)\n                }</Fragment>)\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            }\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n                </div>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText={false}/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: gameContentTranslation('time.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imageFile,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return [\n                    <SMM1And3DSEditorLimitComponent reference={enumeration}/>,\n                    <SMM2EditorLimitComponent reference={enumeration}/>,\n                    <PlayLimitComponent reference={enumeration}/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.getLimitHeader(\n                CommonOptions.get.getPlayLimitHeader(\n                    {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n                    {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n                ),\n                CommonOptions.get.editorLimitHeader,\n            )\n        }\n\n    }()\n    public static readonly LIMIT_IN_SMM1_AND_3DS = new class EntityLimitOption_LimitInSMM1And3DS extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return [\n                    <SMM1And3DSEditorLimitComponent reference={enumeration}/>,\n                    <PlayLimitComponent reference={enumeration}/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.limitWithSubHeaders\n        }\n\n    }()\n    public static readonly LIMIT_IN_SMM2 = new class EntityLimitOption_LimitInSMM2 extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return [\n                    <SMM2EditorLimitComponent reference={enumeration}/>,\n                    <PlayLimitComponent reference={enumeration}/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.limitWithSubHeaders\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: Singleton<BasicCompanionEnumDeclaration<EntityAppOption, typeof EntityAppOption>> = class CompanionEnum_EntityAppOption\n        extends BasicCompanionEnum<EntityAppOption, typeof EntityAppOption>{\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityAppOption\n\n        private constructor() {\n            super(EntityAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    public static getValue(value: PossibleEnumerableValueBy<EntityAppOption>,): EntityAppOption {\n        return EntityAppOption.CompanionEnum.get.getValue(value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return EntityAppOption.CompanionEnum.get.values\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<EntityAppOption> {\n        yield* EntityAppOption.CompanionEnum.get\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = NullOr<() => PossibleRenderReactElement>\ntype PossibleOptionWithTable = NullOr<SingleHeaderContent>\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {EntityProperties}                                     from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {OtherWordInTheGames}     from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {unfinishedText}          from 'app/tools/text/UnfinishedText'\nimport {newIterableIterator}     from 'util/utilitiesMethods'\n\n//region -------------------- Deconstruction imports --------------------\n\nconst {ENTITY,} = OtherWordInTheGames\n\n//endregion -------------------- Deconstruction imports --------------------\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, EntityProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase()\n        return gameContentTranslation('entity.all', {Entity: singularEntityName, entity: singularEntityLowerCaseName,},)\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        const $this = this\n\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable() {\n                return newIterableIterator($this.props.games, Entities[Symbol.iterator](),)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                const games = $this.props.games,\n                    hasSMM1Or3DSGames = games.hasSMM1Or3DS,\n                    hasSMM2Games = games.hasSMM2\n\n                return [\n                    EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    hasSMM1Or3DSGames && hasSMM2Games ? EntityAppOption.LIMIT\n                        : hasSMM1Or3DSGames ? EntityAppOption.LIMIT_IN_SMM1_AND_3DS\n                            : EntityAppOption.LIMIT_IN_SMM2,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                const singularEntityName = ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(ENTITY.singularEnglishName), singularEntityLowerCaseName = ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase()\n                return {\n                    caption: gameContentTranslation('entity.all', {Entity: singularEntityName, entity: singularEntityLowerCaseName,},),\n                }\n            }\n\n            public createTableContent(option: EntityAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["InstrumentPropertyComponent","_ref","_ref$value","value","englishNameInHtml","_ref$value$reference","reference","canMakeASoundOutOfAMusicBlock","comment","canMakeASoundOutOfAMusicBlockComment","id","concat","_jsx","className","Tooltip","option","title","gameContentTranslation","elementId","children","LimitComponent","limits","displayAcronymIfApplicable","EntityLimits","createSingleComponent","selectedLimits","_toConsumableArray","filter","_ref2","_slicedToArray","map","_ref4","length","_Fragment","limit","index","_jsxs","Fragment","createReturnOfLine","englishName","ProjectLanguages","current","comma","entityLimit","acronym","createSingleNameComponent","acronymId","StringContainer","getInHtml","nameContainer","languageValue","TextComponent","content","NameComponent","name","PlayLimitComponent","toLimitWhilePlayingMap","SMM1And3DSEditorLimitComponent","editorLimit","editorLimit_smm1And3ds","NOT_APPLICABLE","SMM2EditorLimitComponent","entity","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","CourseThemeComponent","_ThemeComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","toCourseThemeMap","_this$reference$isInD","_this$reference$isInS","_this$reference$isInS2","_this$reference$isInF","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","theme","renderSingleComponent","english","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","_this","Themes","courseThemes","courseTheme","_renderSingleComponent","ThemeComponent","_gameStyles","_classPrivateFieldLooseKey","_gameStyles_unusedImages","_times","_themes","_appOptionWithContent","_appOptionWithTable","_Symbol$iterator","Symbol","iterator","EntityAppOption","call","Object","defineProperty","_assertThisInitialized","writable","_classPrivateFieldLooseBase","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","_classPrivateFieldLoo","_classPrivateFieldLoo2","GameStyles","values","toArray","_classPrivateFieldLoo3","_classPrivateFieldLoo4","SUPER_MARIO_BROS","_classPrivateFieldLoo5","_classPrivateFieldLoo6","Times","_classPrivateFieldLoo7","_classPrivateFieldLoo8","CompanionEnum","getValue","_regeneratorRuntime","mark","wrap","_context","prev","next","delegateYield","stop","Enum","IMAGES","_EntityAppOption","EntityAppOption_Images","_super2","enumeration","CALLBACK_TO_GET_ENUMERATION","uniqueImage","gameStyle","image","element","contentTranslation","subHeaders","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","_EntityAppOption2","EntityAppOption_Name","_super3","CommonOptions","getNameContent","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","nameHeader","GAME","_EntityAppOption3","EntityAppOption_Game","_super4","GameComponent","displayAllAsText","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","_EntityAppOption4","EntityAppOption_GameStyle","_super5","GameStyleComponent","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","_EntityAppOption5","EntityAppOption_CourseTheme","_super6","WHEN_ALL_SELECTED_COURSE_THEME","TIME","_EntityAppOption6","EntityAppOption_Time","_super7","TimeComponent","WHEN_ALL_SELECTED_TIME","CATEGORY","_EntityAppOption7","EntityAppOption_Category","_super8","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValueByName","imageFile","categoryHeader","CATEGORY_AS_TEXT","LIMIT","_EntityAppOption8","EntityAppOption_Limit","_super9","getLimitHeader","getPlayLimitHeader","alt","Games","SUPER_MARIO_MAKER_1","fallbackName","path","fullName","SUPER_MARIO_MAKER_2","editorLimitHeader","LIMIT_IN_SMM1_AND_3DS","_EntityAppOption9","EntityLimitOption_LimitInSMM1And3DS","_super10","limitWithSubHeaders","LIMIT_IN_SMM2","_EntityAppOption10","EntityLimitOption_LimitInSMM2","_super11","_instance","_class","_BasicCompanionEnum","CompanionEnum_EntityAppOption","_super12","_classPrivateFieldLoo9","_classPrivateFieldLoo10","BasicCompanionEnum","ENTITY","OtherWordInTheGames","EntityApp","_AbstractTableApp","_ENTITY$singularNameO","_ENTITY$singularLower","singularEntityName","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","singularEntityLowerCaseName","singularLowerCaseNameOnReferenceOrNull","toLowerCase","Entity","$this","newIterableIterator","props","games","Entities","small","medium","large","extraLarge","category","categoryEnglish","set","hasSMM1Or3DSGames","hasSMM1Or3DS","hasSMM2Games","hasSMM2","_ENTITY$singularNameO2","_ENTITY$singularLower2","caption","AbstractTableApp","EMPTY_ARRAY","regularFile","regularSoundFile","europeanFile","europeanSoundFile","SimpleSoundComponent"],"sourceRoot":""}