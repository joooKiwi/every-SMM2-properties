{"version":3,"file":"static/js/760.7e2edafa.chunk.js","mappings":"sQAWqBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,OAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MAKjB,WACI,MAAO,aACV,2CAED,WACI,MAAO,yBACV,yCAED,WACI,MAAO,yBACV,oCAGD,WACI,OAAOC,EAAAA,EAAAA,IAAuB,mBACjC,4CAED,WACI,OAAO,iFAEH,WACI,OAAOC,EAAAA,EAAaC,OAAOC,WAC9B,GAJE,iCAQH,WACI,OAAO,IACV,GAVE,qCAeH,WACI,OAAO,IACV,GAjBE,mCAmBH,YAA+F,IAApDC,EAAmD,EAAhEC,YAAmBC,EAA6C,EAA7CA,2BAC7C,OAAO,gBAAKC,UAAU,yBAAf,UACH,SAAC,IAAD,CAA2BC,iBAAkBF,EAA4BF,KAAMA,KAEtF,KAvBE,KA4BV,K,EAnDgBL,CACTU,EAAAA,E,yNCGLC,EAAcC,EAAAA,EAAAA,U,uBAICF,EAAtB,yTAWI,WACI,MAAM,GAAN,4FAEI,CAACC,EAAWE,KAAKC,kBAExB,GAhBL,2BAkBI,WAAwD,IAAD,IACnD,4BAAOD,KAAP,2BAA2BA,KAAKE,0BACnC,GApBL,yCAwBI,SAAsCC,GAClC,OAAOA,EAAWV,WACrB,GA1BL,4BAmCI,WACI,IADkC,EAC5BW,EAAoBJ,KAAKK,sBAC3BC,EAAMN,KAAKO,KACXC,EAAoBJ,EAAkBK,0BACtCC,EAAa,IAAIC,EAAAA,EAA2C,SAAtBH,EAA+BJ,EAAkBQ,sBAAwBJ,GAAmBK,mBAEhIC,EAAU,GANkB,UAOTV,EAAkBW,UAPT,IAOlC,2BAAqD,CAAC,IAA3CZ,EAA0C,QAC3Ca,EAAoBhB,KAAKiB,4BAA4Bd,GACrDX,EAAOW,EAAWe,UAAUC,cAC5BC,EAAE,UAAMd,EAAN,YAAaH,EAAWkB,kBAAxB,cAGRP,EAAQQ,MACJ,gBAA6DF,GAAIA,EAAIzB,UAAS,UAAKW,EAAL,4CAA4CI,GAA1H,UACI,iBAAiEf,UAAU,yCAA3E,WACI,SAAC,UAAD,CAA6DyB,GAAG,OAAO5B,KAAMA,EAAM+B,mBAAmB,QAAtG,UAAuBP,EAAvB,uBACA,gBAAKrB,UAAU,iCAAf,SAAiDS,EAAkBoB,sBAAsBrB,OAF7F,UAAaa,EAAb,qCADJ,UAAaA,EAAb,gCAOP,CArBiC,+BAsBlC,OAAO,8BAAGF,GACb,KA1DL,GAEYW,EAAAA,E,8ECAG,SAASC,EAAT,GAAqG,IAAjE9B,EAAgE,EAAhEA,iBAAkBJ,EAA8C,EAA9CA,KACjE,GAAwB,MAApBI,EACA,OAAO,KAEX,IAAyB+B,EAAiD/B,EAAnEgC,iBAAkDC,EAAiBjC,EAApCkC,kBACtC,OAAsB,MAAfH,EACD,KACgB,MAAhBE,GACI,gBAA6DlC,UAAU,oCAAvE,UACE,SAAC,UAAD,CAAsBoC,KAAMJ,EAAaK,MAAOxC,KADlD,iDAAoDA,EAApD,OAGA,iBAA6DG,UAAU,8CAAvE,WACE,gBAA+DA,UAAU,oCAAzE,UACI,SAAC,UAAD,CAAsBoC,KAAMJ,EAAaK,MAAOxC,KADpD,oDAAuDA,KAGvD,gBAAgEG,UAAU,oCAA1E,UACI,SAAC,UAAD,CAAsBoC,KAAMF,EAAcG,MAAOxC,KADrD,oDAAuDA,EAAvD,QAJF,iDAAoDA,EAApD,KASb,C","sources":["app/EditorVoiceApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import {AbstractCardListApp} from 'app/withInterpreter/AbstractCardListApp'\n\nimport type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\n\nimport {EditorVoices}            from 'core/editorVoice/EditorVoices'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport default class EditorVoiceApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<EditorVoices>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'editorVoice'\n    }\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEditorVoice (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEditorVoice (card)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('editor voice.all')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<EditorVoices> {\n        return new class implements AppInterpreterWithCardList<EditorVoices> {\n\n            public get iterable() {\n                return EditorVoices[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return null\n            }\n\n            public createCardListContent({englishName: name, editorVoiceSoundFileHolder,}: EditorVoices,) {\n                return <div className=\"editorVoices-container\">\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'routes/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {CARD_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["EditorVoiceApp","gameContentTranslation","EditorVoices","Symbol","iterator","name","englishName","editorVoiceSoundFileHolder","className","editorVoiceSound","AbstractCardListApp","CARD_LIST","ViewDisplays","this","__cardRouteName","_createCardListRouteName","enumerable","optionInterpreter","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","reference","nameContainer","id","englishNameInHtml","push","popoverOrientation","createCardListContent","AbstractSimpleListApp","EditorVoiceSoundComponent","regularFile","regularSoundFile","europeanFile","europeanSoundFile","file","title"],"sourceRoot":""}