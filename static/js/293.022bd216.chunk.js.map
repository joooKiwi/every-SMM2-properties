{"version":3,"file":"static/js/293.022bd216.chunk.js","mappings":"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","sources":["app/CourseTagApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/tools/button/LinkButton.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './CourseTagApp.scss'\n\nimport type {CourseTagAppProperties}     from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {CourseTagTypes}             from 'app/property/CourseTagTypes'\nimport type {ViewAndRouteName}           from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ClassWithType}              from 'core/ClassWithType'\nimport type {CourseTags}                 from 'core/courseTag/CourseTags'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {assert}                                     from 'util/utilitiesMethods'\n\nclass CourseTagAppInterpreter\n    implements AppInterpreterWithCardList<CourseTags>,\n        ClassWithType<CourseTagTypes> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #type\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(type: CourseTagTypes,) {\n        this.#type = type\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get type(): CourseTagTypes {\n        return this.#type\n    }\n\n    public get content() {\n        return this.type.content\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 4,\n            large: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n        return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n        //TODO add Maker Central name\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst titleContent = gameContentTranslation('course tag.all', {\n    course: OtherWordInTheGames.COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.singularEnglishName).toLowerCase(),\n    courses: OtherWordInTheGames.COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.pluralEnglishName).toLowerCase(),\n    tag: OtherWordInTheGames.TAG.singularLowerCaseNameOnReference,\n    tags: OtherWordInTheGames.TAG.pluralLowerCaseNameOnReference,\n},)\n\n/** @reactComponent */\nexport default function CourseTagApp({viewDisplay, type,}: CourseTagAppProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The CourseTagApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n    const appInterpreter = new CourseTagAppInterpreter(type,)\n    const viewDisplayAndRouteName = [\n        [ViewDisplays.SIMPLE_LIST, `${type.routeName} (list)`,],\n        [ViewDisplays.CARD_LIST, `${type.routeName} (card)`,],\n    ] as const satisfies readonly ViewAndRouteName[]\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"courseTag\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<CourseTagAsideContent type={type} viewDisplay={viewDisplay}/>}>\n            <SimpleList reactKey=\"courseTag\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"courseTag\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             asideContent={<CourseTagAsideContent type={type} viewDisplay={viewDisplay}/>}>\n        <CardList reactKey=\"courseTag\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n\ninterface CourseTagAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: CourseTagTypes\n\n}\n\n/** @reactComponent */\nfunction CourseTagAsideContent({viewDisplay, type,}: CourseTagAsideContentProperties,) {\n    return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"everyCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n        <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"officialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.officialRouteName)} color={type.officialColor}>{contentTranslation('Official.Yes')}</LinkButton>\n            <LinkButton partialId=\"unofficialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.unofficialRouteName)} color={type.unofficialColor}>{contentTranslation('Official.No')}</LinkButton>\n        </div>\n        <LinkButton partialId=\"makerCentralCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.makerCentralRouteName)} color={type.makerCentralColor}>Maker Central</LinkButton>\n    </div>\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <p className=\"description-container\">{description}</p>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: Nullable<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_type","_classPrivateFieldLooseKey","CourseTagAppInterpreter","constructor","type","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","content","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","_ref","reference","courseTag","englishName","name","firstAppearance","_jsx","children","simpleName","concat","titleContent","gameContentTranslation","course","_OtherWordInTheGames$","OtherWordInTheGames","COURSE","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","courses","_OtherWordInTheGames$2","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","tag","TAG","singularLowerCaseNameOnReference","tags","pluralLowerCaseNameOnReference","CourseTagApp","_ref2","viewDisplay","assert","ViewDisplays","TABLE","appInterpreter","viewDisplayAndRouteName","SIMPLE_LIST","routeName","CARD_LIST","SubMainContainer","reactKey","asideContent","CourseTagAsideContent","SimpleList","interpreter","CardList","_ref3","_jsxs","id","className","LinkButton","partialId","getRoutePathAsListOnly","allRouteName","color","allColor","contentTranslation","officialRouteName","officialColor","unofficialRouteName","unofficialColor","makerCentralRouteName","makerCentralColor","DisplayButtonGroup","key","views","currentView","map","view","DisplayButton","pathname","currentPath","useLocation","path","routeFromName","htmlType","disabled","Link","to","onClick","CompanionEnum","get","current","alert","description","UnfinishedText","isHidden","_keyRetriever","keyRetriever","enumerable","dimensions","df","sm","md","lg","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","index","uniqueKey","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","super","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}