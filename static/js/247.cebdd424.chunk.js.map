{"version":3,"file":"static/js/247.cebdd424.chunk.js","mappings":"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","sources":["app/options/EntityCategoryAppOption.tsx","app/EntityCategoryApp.tsx","core/entityCategory/component/EntityCategoryIcon.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/EntityCategoryAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {EntityCategories}    from 'core/entityCategory/EntityCategories'\n\nimport {CommonOptions}    from 'app/options/CommonOptions'\nimport EntityCategoryIcon from 'core/entityCategory/component/EntityCategoryIcon'\n\nexport abstract class EntityCategoryAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<EntityCategories> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON = new class EntityCategoryAppOption_Icon extends EntityCategoryAppOption {\n\n        protected override _createContentOption(enumeration: EntityCategories,) {\n            return <EntityCategoryIcon reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.iconHeader\n        }\n\n    }('icon',)\n    public static readonly NAME = new class EntityCategoryAppOption_Name extends EntityCategoryAppOption {\n\n        protected override _createContentOption(enumeration: EntityCategories,) {\n            return CommonOptions.get.getNameContent(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<EntityCategoryAppOption, typeof EntityCategoryAppOption> = class CompanionEnum_EntityCategoryAppOption\n        extends CompanionEnum<EntityCategoryAppOption, typeof EntityCategoryAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EntityCategoryAppOption\n\n        private constructor() {\n            super(EntityCategoryAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: EntityCategories,): ReactElement\n\n    public renderContent(enumeration: EntityCategories,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './EntityCategoryApp.scss'\n\nimport type {Array}              from '@joookiwi/type'\nimport type {CollectionHolder}   from '@joookiwi/collection'\nimport {GenericCollectionHolder} from '@joookiwi/collection'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}      from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ReactProperties}              from 'util/react/ReactProperties'\n\nimport SubMainContainer          from 'app/_SubMainContainer'\nimport {EntityCategoryAppOption} from 'app/options/EntityCategoryAppOption'\nimport Table                     from 'app/tools/table/Table'\nimport {unfinishedText}          from 'app/tools/text/UnfinishedText'\nimport List                      from 'app/util/List'\nimport CardList                  from 'app/withInterpreter/CardList'\nimport {ViewDisplays}            from 'app/withInterpreter/ViewDisplays'\nimport {EntityCategories}        from 'core/entityCategory/EntityCategories'\nimport EntityCategoryIcon        from 'core/entityCategory/component/EntityCategoryIcon'\nimport {OtherWordInTheGames}     from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport NameComponent             from 'lang/name/component/Name.component'\n\nimport ALL = EntityCategories.ALL\n\nclass EntityCategoryAppInterpreter\n    implements AppInterpreterWithTable<EntityCategories, EntityCategoryAppOption> {\n\n    public get content() {\n        return new GenericCollectionHolder(ALL,)\n    }\n\n    //region -------------------- Card --------------------\n\n    public createCardListDimension() {\n        return {\n            default: 1,\n            small: 2,\n            large: 4,\n        } as const satisfies DimensionOnList\n    }\n\n    public createCardListContent(enumerable: EntityCategories,) {\n        return <EntityCategoryIcon reference={enumerable} asWhiteImage/>\n    }\n\n    //endregion -------------------- Card --------------------\n    //region -------------------- Table --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n\n    public get tableCaption() {\n        const entity = OtherWordInTheGames.ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName,)\n        const entityAsLowerCase = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? entity.toLowerCase()\n\n        return gameContentTranslation('entity category.all', {Entity: entity, entity: entityAsLowerCase,},) satisfies ReactElementOrString\n    }\n\n    public get tableOptions(): Array<EntityCategoryAppOption> {\n        return [EntityCategoryAppOption.NAME, EntityCategoryAppOption.ICON,]\n    }\n\n\n    public getAdditionalClass(option: EntityCategoryAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: EntityCategories, option: EntityCategoryAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: EntityCategoryAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEntityCategory (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEntityCategory (card)',],\n    [ViewDisplays.TABLE, 'everyEntityCategory (table)',],\n] as const satisfies Array<ViewAndRouteName>\nconst appInterpreter = new EntityCategoryAppInterpreter()\n\n/** @reactComponent */\nexport default function EntityCategoryApp({viewDisplay,}: AppWithInterpreterProperties,) {\n    const entity = OtherWordInTheGames.ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName,)\n    const entityAsLowerCase = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? entity.toLowerCase()\n\n    const titleContent = gameContentTranslation('entity category.all', {Entity: entity, entity: entityAsLowerCase,},)\n\n    return <SubMainContainer reactKey=\"entityCategory\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <SubContent viewDisplay={viewDisplay}/>\n    </SubMainContainer>\n}\n\n/** @reactComponent */\nfunction SubContent({viewDisplay,}: AppWithInterpreterProperties,) {\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <EntityCategoryList items={appInterpreter.content}/>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <CardList reactKey=\"entityCategory\" interpreter={appInterpreter}/>\n    return <Table id=\"entityCategory-table\" interpreter={appInterpreter}/>\n}\n\n//region -------------------- List --------------------\n\ninterface EntityCategory_ListProperties\n    extends ReactProperties {\n\n    readonly items: CollectionHolder<EntityCategories>\n\n}\n\n/** @reactComponent */\nfunction EntityCategoryList({items,}:EntityCategory_ListProperties,) {\n    return <List partialId=\"entityCategory\" items={items} withSeparator>{it =>\n        <div className=\"d-flex justify-content-between\">\n            <NameComponent id=\"entityCategory-name\" name={it.reference} popoverOrientation=\"top\"/>\n            <EntityCategoryIcon reference={it}/>\n        </div>\n    }</List>\n}\n\n//endregion -------------------- List --------------------\n","import './EntityCategoryIcon.scss'\n\nimport type {ReactProperties}  from 'util/react/ReactProperties'\nimport type {EntityCategories} from 'core/entityCategory/EntityCategories'\n\nimport Image                   from 'app/tools/images/Image'\nimport {Nullable}              from '@joookiwi/type'\n\ninterface EntityCategoryIconProperties\n    extends ReactProperties {\n\n    readonly reference: Nullable<EntityCategories>\n\n    readonly asWhiteImage?: boolean\n\n}\n\n/** @reactComponent */\nexport default function EntityCategoryIcon({reference, asWhiteImage = false,}: EntityCategoryIconProperties,) {\n    if (reference == null)\n        return null\n    if (asWhiteImage)\n        return <Image file={reference.imageFile} className={`entityCategory-icon white-entityCategory-icon entityCategory-icon-${reference.englishNameInHtml}`}/>\n    return <Image file={reference.imageFile} className={`entityCategory-icon colored-entityCategory-icon entityCategory-icon-${reference.englishNameInHtml}`}/>\n}\n"],"names":["_associatedClass","_classPrivateFieldLooseKey","_additionalClasses","EntityCategoryAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","additionalClasses","renderContent","enumeration","_createContentOption","renderTableHeader","_createTableHeaderOption","_EntityCategoryAppOption","ICON","_jsx","EntityCategoryIcon","reference","CommonOptions","get","iconHeader","NAME","getNameContent","nameHeader","CompanionEnum","_instance","_CompanionEnum_EntityCategoryAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","ALL","EntityCategories","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","appInterpreter","tableHeadersColor","content","GenericCollectionHolder","createCardListDimension","default","small","large","createCardListContent","enumerable","asWhiteImage","tableCaption","_OtherWordInTheGames$","_OtherWordInTheGames$2","entity","OtherWordInTheGames","ENTITY","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","entityAsLowerCase","singularLowerCaseNameOnReferenceOrNull","toLowerCase","gameContentTranslation","Entity","tableOptions","getAdditionalClass","option","createTableContent","createTableHeader","EntityCategoryApp","_ref","_OtherWordInTheGames$3","_OtherWordInTheGames$4","viewDisplay","titleContent","SubMainContainer","reactKey","children","SubContent","_ref2","EntityCategoryList","items","CardList","interpreter","Table","id","_ref3","List","partialId","withSeparator","it","_jsxs","className","NameComponent","name","popoverOrientation","Image","file","imageFile","concat","englishNameInHtml"],"sourceRoot":""}