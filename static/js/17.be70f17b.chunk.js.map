{"version":3,"sources":["app/withInterpreter/AbstractTableApp.tsx","app/options/component/EmptyAppOption.ts","app/options/MiiCostumeAppOption.tsx","app/EveryMiiCostumeApp.tsx"],"names":["AbstractTableApp","optionInterpreter","content","index","iterable","enumerable","callbackToGetEnumerable","push","englishName","tableOptions","map","tableHeader","createTableContent","flat","this","_appOptionInterpreter","tableProperties","id","_key","__tableContent","headers","key","element","createTableHeader","filter","header","AbstractCardListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","EmptyAppOption","renderContent","EMPTY_ARRAY","renderTableHeader","Image","lazy","Symbol","iterator","MiiCostumeAppOption","defaultValue","_createContentOption","get","AppOptionWithContentComponent","__appOptionWithContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","value","typeDisplayed","display","section","image","IMAGE","_lastValueRetrieved","name","NAME","conditionToUnlockIt","OFFICIAL_NOTIFICATION","category","CATEGORY","asText","CATEGORY_AS_TEXT","Enum","getValueOn","getValuesOn","values","AbstractAppOption","state","nextState","enumeration","CALLBACK_TO_GET_ENUMERATION","source","imagePath","fallbackName","ContentTranslationComponent","translationKey","CommonOptions","getNameContent","nameHeader","miiCostume","reference","officialNotification","EMPTY_REACT_ELEMENT","createSimpleTranslationComponent","english","officialNotificationAmount","categoryName","categoryContainer","nameContainer","getCategoryContent","MiiCostumeCategories","getValue","categoryHeader","EveryMiiCostumeApp","props","REFERENCE","createDefaultState","GameContentTranslationComponent","translation","TranslationUtility","replaceAndInterpretTranslation","pluralName","className","MiiCostumes","categoryEnglish","caption","option"],"mappings":"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","file":"static/js/17.be70f17b.chunk.js","sourcesContent":["import type {AppInterpreterWithTable}      from '../interpreter/AppInterpreterWithTable';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}          from '../tools/table/SimpleHeader';\nimport type {SingleTableContent}           from '../tools/table/Table.types';\n\nimport {AbstractCardListApp} from './AbstractCardListApp';\nimport Table                 from '../tools/table/Table';\nimport {ViewDisplays}        from './ViewDisplays';\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Attributes --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST, ViewDisplays.TABLE,];\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractTableApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    private __tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[];\n        let index = 1;\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable;\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    optionInterpreter.tableOptions.map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        return <Table key={`${this._key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${this._key}-table`}\n                      content={this.__tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: <>#</>,},\n                          ...(optionInterpreter.tableOptions\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader))\n                              .filter(header => header != null) as SingleHeaderContent[])\n                      ]}/>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppOptionWithTable}   from './AppOptionWithTable';\nimport type {AppOptionWithContent} from './AppOptionWithContent';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY;\n    public readonly renderTableHeader = null;\n\n}\n","import {lazy} from 'react';\n\nimport type {AppOptionStatic}                                                                                                                                                       from './AppOption';\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './MiiCostumeAppOption.types';\nimport type {MiiCostumeAppStates}                                                                                                                                                   from '../AppStates.types';\nimport type {MiiCostumes}                                                                                                                                                           from '../../core/miiCostume/MiiCostumes';\nimport type {ReactComponentWithState}                                                                                                                                               from '../../util/react/ReactComponent';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AbstractAppOption}             from './AbstractAppOption';\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_ARRAY}                   from '../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyAppOption}                from './component/EmptyAppOption';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {MiiCostumeCategories}          from '../../core/miiCostumeCategory/MiiCostumeCategories';\nimport {ViewDisplays}                  from '../withInterpreter/ViewDisplays';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class MiiCostumeAppOption\n    extends AbstractAppOption<boolean, MiiCostumeAppStates, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static/* readonly*/ IMAGE;\n    public static/* readonly*/ NAME;\n    public static/* readonly*/ OFFICIAL_NOTIFICATION;\n\n    public static/* readonly*/ CATEGORY;\n    /**\n     * Tell whenever a {@link MiiCostumeAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static/* readonly*/ CATEGORY_AS_TEXT;\n\n    static {\n        this.IMAGE =                  new class MiiCostumeAppOption_Image extends MiiCostumeAppOption {\n\n            protected override _get(state: MiiCostumeAppStates,): boolean {\n                return state.display.section.image;\n            }\n\n            protected override _set(nextState: MiiCostumeAppStates, value: boolean,): void {\n                nextState.display.section.image = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                    return <Image source={enumeration.imagePath} fallbackName={`${enumeration.englishName} - image`}/>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,};\n            }\n\n        }(true,);\n        this.NAME =                   new class MiiCostumeAppOption_Name extends MiiCostumeAppOption {\n\n            protected override _get(state: MiiCostumeAppStates,): boolean {\n                return state.display.section.name;\n            }\n\n            protected override _set(nextState: MiiCostumeAppStates, value: boolean,): void {\n                nextState.display.section.name = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => CommonOptions.get.getNameContent(MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION());\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return CommonOptions.get.nameHeader;\n            }\n\n        }(true,);\n        this.OFFICIAL_NOTIFICATION =  new class MiiCostumeAppOption_ConditionToUnlockIt extends MiiCostumeAppOption {\n\n            protected override _get(state: MiiCostumeAppStates,): boolean {\n                return state.display.section.conditionToUnlockIt;\n            }\n\n            protected override _set(nextState: MiiCostumeAppStates, value: boolean,): void {\n                nextState.display.section.conditionToUnlockIt = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION();\n                    const miiCostume = enumeration.reference;\n\n                    const {officialNotification} = miiCostume;\n\n                    return officialNotification == null\n                        ? EMPTY_REACT_ELEMENT\n                        : officialNotification.createSimpleTranslationComponent(miiCostume.english, miiCostume.officialNotificationAmount,);\n\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                //TODO add new translation to the header value.\n                return {key: 'officialNotification', element: <>--Official notification--</>,};\n            }\n\n        }(true,);\n\n        this.CATEGORY =               new class MiiCostumeAppOption_Category extends MiiCostumeAppOption {\n\n            protected override _get(state: MiiCostumeAppStates,): boolean {\n                return state.display.section.category;\n            }\n\n            protected override _set(nextState: MiiCostumeAppStates, value: boolean,) {\n                nextState.display.section.category = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                        categoryName = enumeration.reference.categoryContainer.nameContainer;\n\n                    return CommonOptions.get.getCategoryContent(enumeration,\n                        () => MiiCostumeAppOption.CATEGORY_AS_TEXT.get\n                            ? categoryName\n                            : MiiCostumeCategories.getValue(categoryName.english)!.imagePath,);\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return CommonOptions.get.categoryHeader;\n            }\n\n        }(true,);\n        this.CATEGORY_AS_TEXT =       new class MiiCostumeAppOption_CategoryAsText extends MiiCostumeAppOption {\n\n            protected override _get(state: MiiCostumeAppStates,): boolean {\n                return state.display.asText.category;\n            }\n\n            protected override _set(nextState: MiiCostumeAppStates, value: boolean,) {\n                nextState.display.asText.category = value;\n            }\n\n        }(false,);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: MiiCostumeAppOption;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    static #REFERENCE: ReactComponentWithState<MiiCostumeAppStates>;\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EveryEntitiesApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => MiiCostumes;\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(defaultValue: boolean,) {\n        super(defaultValue,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE(): ReactComponentWithState<MiiCostumeAppStates> {\n        return this.#REFERENCE;\n    }\n\n    public static set REFERENCE(value: ReactComponentWithState<MiiCostumeAppStates>,) {\n        this.#REFERENCE = value;\n    }\n\n    public static get createDefaultState(): MiiCostumeAppStates {\n        return {\n            typeDisplayed: ViewDisplays.TABLE,\n            display: {\n                section: {\n                    image: MiiCostumeAppOption.IMAGE._lastValueRetrieved,\n                    name: MiiCostumeAppOption.NAME._lastValueRetrieved,\n                    conditionToUnlockIt: MiiCostumeAppOption.OFFICIAL_NOTIFICATION._lastValueRetrieved,\n                    category: MiiCostumeAppOption.CATEGORY._lastValueRetrieved,\n                },\n                asText: {\n                    category: MiiCostumeAppOption.CATEGORY_AS_TEXT._lastValueRetrieved,\n                },\n            },\n        };\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected get _createContentOption(): PossibleOptionWithContent {\n        return null;\n    }\n\n    protected get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption;\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,);\n        }\n        return this.#appOptionWithContent;\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.get\n            ? this.__appOptionWithContent.renderContent\n            : EMPTY_ARRAY;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected get _createTableHeaderOption(): PossibleOptionWithTable {\n        return null;\n    }\n\n    protected get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption;\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,);\n        }\n        return this.#appOptionWithTable;\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.get\n            ? this.__appOptionWithTable.renderTableHeader\n            : null;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<MiiCostumeAppOption> & AppOptionStatic<MiiCostumeAppStates> {\n        return MiiCostumeAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends MiiCostumeAppOption = MiiCostumeAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): MiiCostumeAppOption\n    public static getValue(value: PossibleValue,): | MiiCostumeAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}\n\ntype PossibleOptionWithContent = | (() => PossibleRenderReactElement) | null;\ntype PossibleOptionWithTable = | SingleHeaderContent | null;\n","import './EveryMiiCostumeApp.scss';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {MiiCostumeAppStates}                                from './AppStates.types';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\n\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {MiiCostumes}                   from '../core/miiCostume/MiiCostumes';\nimport {TranslationUtility}            from '../lang/components/TranslationUtility';\nimport {MiiCostumeAppOption}           from './options/MiiCostumeAppOption';\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport Image                           from './tools/images/Image';\n\nexport default class EveryMiiCostumeApp\n    extends AbstractTableApp<AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption>, {}, MiiCostumeAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        MiiCostumeAppOption.REFERENCE = this;\n        this.state = MiiCostumeAppOption.createDefaultState;\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'miiCostume';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => TranslationUtility.replaceAndInterpretTranslation(translation, 'Every Mii costumes', {\n            pluralName: <span key=\"miiCostume-pluralName\" className=\"text-decoration-underline\">--Mii costumes--</span>,//TODO add Mii costumes, but the plural name\n        })}</GameContentTranslationComponent>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption> {\n        return new class implements AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption> {\n\n            public get iterable(): IterableIterator<MiiCostumes> {\n                return MiiCostumes[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({reference, englishName, imagePath,}: MiiCostumes,): ReactElement {\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`;//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <Image source={imagePath} fallbackName={englishName}/>\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => MiiCostumes,) {\n                MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): MiiCostumeAppOption[] {\n                return [\n                    MiiCostumeAppOption.IMAGE,\n                    MiiCostumeAppOption.NAME,\n                    MiiCostumeAppOption.OFFICIAL_NOTIFICATION,\n                    MiiCostumeAppOption.CATEGORY,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent>{translation => TranslationUtility.replaceAndInterpretTranslation(translation, 'Every Mii costumes', {\n                        pluralName: <span key=\"miiCostume-pluralName\" className=\"text-decoration-underline\">--Mii costumes--</span>,//TODO add Mii costumes, but the plural name\n                    })}</GameContentTranslationComponent>,\n                };\n            }\n\n\n            public createTableContent(option: MiiCostumeAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: MiiCostumeAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}