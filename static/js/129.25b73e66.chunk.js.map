{"version":3,"file":"static/js/129.25b73e66.chunk.js","mappings":"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","sources":["app/InstrumentApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport SubMainContainer         from 'app/_SubMainContainer'\nimport CardList                 from 'app/withInterpreter/CardList'\nimport SimpleList               from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {Instruments}            from 'core/instrument/Instruments'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport SimpleSoundComponent     from 'util/file/sound/component/SimpleSound.component'\nimport {assert}                 from 'util/utilitiesMethods'\n\nclass InstrumentAppInterpreter\n    implements AppInterpreterWithCardList<Instruments> {\n\n    public get content() {\n        return Instruments.CompanionEnum.get.values.toArray()\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 5,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: Instruments,) {\n        const name = enumerable.name\n        const englishName = enumerable.englishName\n\n        return <div className=\"instrument-sounds\">{enumerable.sounds.map((sound, index,) =>\n            <SimpleSoundComponent key={`instrument sounds #${index} (${englishName})`} file={sound} title={`${name} (instrument #${index})`}/>\n        )}</div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyInstrument (list)',],\n    [ViewDisplays.CARD_LIST, 'everyInstrument (card)',],\n] as const satisfies readonly ViewAndRouteName[]\nconst titleContent = gameContentTranslation('instrument.all',)\nconst appInterpreter = new InstrumentAppInterpreter()\n\n/** @reactComponent */\nexport default function InstrumentApp({viewDisplay,}: AppWithInterpreterProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The InstrumentApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"instrument\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <SimpleList reactKey=\"instrument\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"instrument\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <CardList reactKey=\"instrument\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <p className=\"description-container\">{description}</p>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","titleContent","gameContentTranslation","appInterpreter","content","Instruments","CompanionEnum","get","values","toArray","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","this","createCardListContent","enumerable","name","englishName","_jsx","className","children","sounds","map","sound","index","SimpleSoundComponent","file","title","concat","InstrumentApp","_ref","viewDisplay","assert","TABLE","SubMainContainer","reactKey","SimpleList","interpreter","CardList","DisplayButtonGroup","key","views","currentView","id","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","asideContent","description","_jsxs","UnfinishedText","isHidden","_keyRetriever","keyRetriever","dimensions","df","sm","md","lg","xl","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","uniqueKey","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","_classPrivateFieldLooseKey","NamePopoverComponent","Component","constructor","props","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}