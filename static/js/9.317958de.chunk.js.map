{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/component/EmptyAppOption.ts","app/options/EntityAppOption.tsx","app/EntityApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","EmptyAppOption","renderContent","EMPTY_ARRAY","renderTableHeader","CourseThemeComponent","EditorVoiceSoundComponent","InstrumentPropertyComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","content","_createContentOption","AppOptionWithContentComponent","__appOptionWithContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","GameStyles","values","SUPER_MARIO_BROS","Times","Themes","courseThemes","value","Enum","getValueOn","getValuesOn","IMAGES","CALLBACK_TO_GET_ENUMERATION","uniqueImage","_gameStyles","map","gameStyle","image","acronym","ContentTranslationComponent","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","getNameContent","editorVoiceSound","nameHeader","GAME","entity","displayAllAsText","gameHeader","WHEN_ALL_SELECTED_GAME","GAME_STYLE","GameContentTranslationComponent","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","getCategoryContent","EntityCategories","getValue","categoryHeader","CATEGORY_AS_TEXT","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","limits","displayAcronymIfApplicable","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","EntityLimitTypes","EDITOR","englishCommonText","tooltip","namespace","WHILE_PLAYING","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","SimpleSound","EntityApp","props","state","typeDisplayed","ViewDisplays","TABLE","Entities","small","medium","large","extraLarge","htmlName","editorVoice1","fileName","editorVoice2","europeanFileName","category","categoryEnglish","title","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/9.317958de.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame';\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}                        from '../../core/ClassWithReference';\nimport type {Enum}                                      from '../../util/enum/Enum';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {NameTrait}                                 from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory';\nimport type {ReactElement}                              from '../../util/react/ReactProperties';\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader';\nimport type {Themes}                                    from '../../core/theme/Themes';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {BASE_PATH}                     from '../../variables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n    #gameHeader?: SingleHeaderContent;\n    #gameHeaderWithAllGames?: SingleHeaderContent;\n    #gameHeaderWithMainGames?: SingleHeaderContent;\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,];\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        };\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames);\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ];\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference;\n        const isInSMM1 = reference.isInSuperMarioMaker1;\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS;\n        const isInSMM2 = reference.isInSuperMarioMaker2;\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference;\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>;\n","import type {AppOptionWithTable}   from './AppOptionWithTable';\nimport type {AppOptionWithContent} from './AppOptionWithContent';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY;\n    public readonly renderTableHeader = null;\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {Entities}                                                                                                                                                              from '../../core/entity/Entities';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityAppOption.types';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperties';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {EntityCategories}              from '../../core/entityCategory/EntityCategories';\nimport {EntityLimitTypes}              from '../../core/entityLimit/EntityLimitTypes';\nimport {EmptyAppOption}                from './component/EmptyAppOption';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\nimport {GameStyles}                    from '../../core/gameStyle/GameStyles';\nimport {Themes}                        from '../../core/theme/Themes';\nimport {Times}                         from '../../core/time/Times';\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =        lazy(() => import('../../core/theme/CourseTheme.component'));\nconst EditorVoiceSoundComponent =   lazy(() => import('../../core/editorVoice/EditorVoiceSound.component'));\nconst Image =                       lazy(() => import( '../tools/images/Image'));\nconst InstrumentPropertyComponent = lazy(() => import( '../../core/entity/properties/instrument/InstrumentProperty.component'));\nconst GameComponent =               lazy(() => import('../../core/game/Game.component'));\nconst GameStyleComponent =          lazy(() => import('../../core/gameStyle/GameStyle.component'));\nconst LimitComponent =              lazy(() => import('../../core/entityLimit/Limit.component'));\nconst TimeComponent =               lazy(() => import('../../core/time/Time.component'));\nconst TextComponent =               lazy(() => import( '../tools/text/TextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport abstract class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration;\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image id={`${englishNameInHtml}-image`} className=\"entity-image\" source={image}  fallbackName={`${englishName} (${gameStyle.acronym})`}/>)\n                }</Fragment>);\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            };\n        }\n\n    }();\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new class EntityAppOption_ImagesOnEditor extends EntityAppOption {}();\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new class EntityAppOption_ImagesOnClearCondition extends EntityAppOption {}();\n    public static readonly IMAGES_ON_WHILE_PLAYING = new class EntityAppOption_ImagesOnWhilePlaying extends EntityAppOption {}();\n    public static readonly IMAGES_ON_UNUSED = new class EntityAppOption_ImagesOnUnused extends EntityAppOption {}();\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSound} name={enumeration.englishName}/>\n                </div>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }();\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.gameHeader;\n        }\n\n    }();\n    public static readonly WHEN_ALL_SELECTED_GAME = new class EntityAppOption_WhenAllSelectedGame extends EntityAppOption {}();\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: <GameContentTranslationComponent translationKey=\"Game style\"/>,};\n        }\n\n    }();\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new class EntityAppOption_WhenAllSelectedGameStyle extends EntityAppOption {}();\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: <GameContentTranslationComponent translationKey=\"Course theme\"/>,};\n        }\n\n    }();\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new class EntityAppOption_WhenAllSelectedCourseTheme extends EntityAppOption {}();\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: <GameContentTranslationComponent translationKey=\"Time\"/>,};\n        }\n\n    }();\n    public static readonly WHEN_ALL_SELECTED_TIME = new class EntityAppOption_WhenAllSelectedTime extends EntityAppOption {}();\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer;\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValue(categoryName.english)!.imagePath,);\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.categoryHeader;\n        }\n\n    }();\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new class EntityAppOption_CategoryAsText extends EntityAppOption {}();\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const entity = enumeration.reference;\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds;\n                const editorLimit_SMM2 = entity.editorLimit_smm2;\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS} displayAcronymIfApplicable/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2} displayAcronymIfApplicable/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>,\n                ];\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: <GameContentTranslationComponent translationKey=\"Limit\"/>,\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.EDITOR.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit in the editor',},\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.WHILE_PLAYING.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit while playing',},\n                    },\n                ],\n            };\n        }\n\n    }();\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new class EntityAppOption_IfApplicableAcronymOnLimitAsText extends EntityAppOption {}();\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities;\n\n    static #gameStyles?: readonly GameStyles[];\n    static #gameStyles_unusedImages?: readonly [GameStyles,] | readonly [];\n    static #times?: readonly Times[];\n    static #themes?: readonly Themes[];\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super();\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles() {\n        return this.#gameStyles ??= GameStyles.values;\n    }\n\n    protected static get _gameStyles_unusedImages() {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,];\n    }\n\n    protected static get times() {\n        return this.#times ??= Times.values;\n    }\n\n    protected static get themes() {\n        return this.#themes ??= Themes.courseThemes;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null;\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption();\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,);\n        }\n        return this.#appOptionWithContent;\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null;\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption();\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,);\n        }\n        return this.#appOptionWithTable;\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityAppOption> {\n        return EntityAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityAppOption = EntityAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityAppOption\n    public static getValue(value: PossibleValue,): | EntityAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = | (() => PossibleRenderReactElement) | null;\ntype PossibleOptionWithTable = | SingleHeaderContent | null;\n","import './EntityApp.scss';\nimport './options/EntityAppOption.scss';\n\nimport {lazy} from 'react';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from './interpreter/AppInterpreterWithTable';\nimport type {AppProperties}                                        from './AppProperties.types';\nimport type {EntityAppStates}                                      from './AppStates.types';\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList';\nimport type {SingleHeaderContent}                                  from './tools/table/SimpleHeader';\nimport type {ReactElement, ReactElementOrString}                   from '../util/react/ReactProperties';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {Entities}                      from '../core/entity/Entities';\nimport {EntityAppOption}               from './options/EntityAppOption';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\nconst SimpleSound = lazy(() => import('./tools/sounds/SimpleSound'));\n\n/**\n * @reactComponent\n */\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, AppProperties, EntityAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'entity';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every entities\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable(): IterableIterator<Entities> {\n                return Entities[Symbol.iterator]();\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                };\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list';\n            }\n\n            public createCardListContent({englishNameInHtml: htmlName, reference, editorVoiceSound: {fileName: editorVoice1, europeanFileName: editorVoice2,},}: Entities,): ReactElement {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`;//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    {editorVoice1 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice1} title={`${htmlName} - editor voice`}/>}\n                    {editorVoice2 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice2} title={`${htmlName} - editor voice (european)`}/>}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every entities\"/>,\n                };\n            }\n\n            public createTableContent(option: EntityAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: EntityAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}