{"version":3,"file":"static/js/473.061a0d26.chunk.js","mappings":"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","sources":["core/entity/properties/instrument/InstrumentProperty.component.tsx","core/entityLimit/Limit.component.tsx","core/theme/CourseTheme.component.tsx","app/options/EntityAppOption.tsx","app/EntityApp.tsx","app/options/component/EmptyAppOption.ts","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import './InstrumentProperty.scss'\n\nimport type {Entities}        from 'core/entity/Entities'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface InstrumentPropertyProperties\n    extends ReactProperties {\n\n    value: Entities\n\n}\n\n/**\n * @todo add on click event to play the music block sound (randomly if more than one)\n * @reactComponent\n */\nexport default function InstrumentPropertyComponent({value: {englishNameInHtml, reference: {canMakeASoundOutOfAMusicBlock: value, canMakeASoundOutOfAMusicBlockComment: comment,},},}: InstrumentPropertyProperties,) {\n    if (value !== true)\n        return null\n    const id = `${englishNameInHtml}-instrumentProperty`\n\n    if (comment == null)\n        return <i id={id} className=\"music-block\"/>\n    return <Tooltip option={{title: gameContentTranslation(`instrument.${comment}`),}} elementId={id}>\n        <i id={id} className=\"music-block-with-comment\"/>\n    </Tooltip>\n}\n","import {Fragment} from 'react'\n\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {EntityLimits}     from 'core/entityLimit/EntityLimits'\nimport NameComponent      from 'lang/name/component/Name.component'\nimport {ProjectLanguages} from 'lang/ProjectLanguages'\nimport TextComponent      from 'app/tools/text/TextComponent'\nimport Tooltip            from 'bootstrap/tooltip/Tooltip'\nimport {StringContainer}  from 'util/StringContainer'\n\ntype Id = `${| 'editor' | 'whilePlaying'}-${string}`\n\ninterface EditorLimitProperties\n    extends ReactProperties {\n\n    id: Id\n\n    limits: | EntityLimits | ReadonlyMap<EntityLimits, boolean>\n\n    displayAcronymIfApplicable: boolean\n\n}\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function LimitComponent({id, limits, displayAcronymIfApplicable,}: EditorLimitProperties,) {\n    if (limits instanceof EntityLimits)\n        return createSingleComponent(id, limits, displayAcronymIfApplicable,)\n\n    const selectedLimits = [...limits].filter(([, hasLimit]) => hasLimit).map(([limit,]) => limit)\n    return selectedLimits.length === 0\n        ? <></>\n        : <>{selectedLimits.map((limit, index,) =>\n            <Fragment key={`${limit.englishName} #${index + 1} → ${id}`}>{createSingleComponent(id, limit, displayAcronymIfApplicable,)}{createReturnOfLine(selectedLimits, index,)}</Fragment>\n        )}</>\n}\n\nfunction createReturnOfLine(selectedLimits: readonly EntityLimits[], index: number,) {\n    return index === selectedLimits.length - 1 ? <></> : <>{ProjectLanguages.currentLanguage.comma}<br/></>\n}\n\nfunction createSingleComponent(id: Id, entityLimit: EntityLimits, displayAcronymIfApplicable: boolean,) {\n    if (displayAcronymIfApplicable) {\n        const acronym = entityLimit.acronym\n        if (acronym == null)\n            return createSingleNameComponent(id, entityLimit,)\n        const acronymId = `limit-acronym-${id}-${StringContainer.getInHtml(entityLimit.acronym!)}`\n        //TODO Transform the tooltip to a popover to display every names instead\n        return <Tooltip option={{title: entityLimit.reference.nameContainer.languageValue,}} elementId={acronymId}>\n            <TextComponent key={`${entityLimit.englishName} (acronym) → ${id}`} id={acronymId} content={acronym}/>\n        </Tooltip>\n    }\n    return createSingleNameComponent(id, entityLimit,)\n}\n\nfunction createSingleNameComponent(id: Id, entityLimit: EntityLimits,) {\n    return <NameComponent key={`${entityLimit.englishName} (name) → ${id}`} id={`limit-name-${id}`} name={entityLimit.reference}/>\n}","import type {ThemeProperty} from 'core/entity/properties/theme/ThemeProperty'\n\nimport {COURSE_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                     from 'app/tools/images/Image'\nimport TextComponent             from 'app/tools/text/TextComponent'\nimport {ThemeComponent}          from 'core/theme/Theme.component'\nimport {Themes}                  from 'core/theme/Themes'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class CourseThemeComponent\n    extends ThemeComponent<ThemeProperty> {\n\n\n    protected override get _map() {\n        return this.reference.toCourseThemeMap()\n    }\n\n    protected override get _isInAll() {\n        return this.reference.isInGroundTheme\n            && this.reference.isInUndergroundTheme\n            && this.reference.isInUnderwaterTheme\n            && (this.reference.isInDesertTheme ?? false)\n            && (this.reference.isInSnowTheme ?? false)\n            && (this.reference.isInSkyTheme ?? false)\n            && (this.reference.isInForestTheme ?? false)\n            && this.reference.isInGhostHouseTheme\n            && this.reference.isInAirshipTheme\n            && this.reference.isInCastleTheme\n    }\n\n    protected override _renderSingleComponent(theme: Themes,) {\n        return CourseThemeComponent.renderSingleComponent(theme, true, this.name.english,)\n    }\n\n    protected override _renderComponentForAllAsText() {\n        return <TextComponent content={gameContentTranslation('theme.course.all', {courseThemeImage:<Image file={COURSE_THEME_IMAGE_FILE}/>,},)}/>\n    }\n\n    protected override _renderComponentForAllAsImages() {\n        return <div key={`${this.name.english} (every course themes)`}>{Themes.courseThemes.map(courseTheme => this._renderSingleComponent(courseTheme))}</div>\n    }\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Fragment}                                                                from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Entities}                                         from 'core/entity/Entities'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\nimport type {EmptyArray}                                       from 'util/types/variables'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                             from 'app/options/component/EmptyAppOption'\nimport Image                                        from 'app/tools/images/Image'\nimport TextComponent                                from 'app/tools/text/TextComponent'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport InstrumentPropertyComponent                  from 'core/entity/properties/instrument/InstrumentProperty.component'\nimport {EntityCategories}                           from 'core/entityCategory/EntityCategories'\nimport LimitComponent                               from 'core/entityLimit/Limit.component'\nimport {Games}                                      from 'core/game/Games'\nimport GameComponent                                from 'core/game/Game.component'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport GameStyleComponent                           from 'core/gameStyle/GameStyle.component'\nimport CourseThemeComponent                         from 'core/theme/CourseTheme.component'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\nimport TimeComponent                                from 'core/time/Time.component'\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image className={`entity-image ${englishNameInHtml}-image`} file={image}/>)\n                }</Fragment>)\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            }\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n                </div>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: gameContentTranslation('time.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imageFile,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n                const entity = enumeration.reference\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds\n                const editorLimit_SMM2 = entity.editorLimit_smm2\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS} displayAcronymIfApplicable/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2} displayAcronymIfApplicable/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: gameContentTranslation('limit.singular'),\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: gameContentTranslation('limit.editor.value'),\n                        tooltip: gameContentTranslation('limit.editor.limit'),\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: gameContentTranslation('limit.play.value'),\n                        tooltip: gameContentTranslation('limit.play.limit'),\n                    },\n                ],\n            }\n        }\n\n    }()\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new EntityAppOption()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityAppOption>,): EntityAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<EntityAppOption> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = NullOr<() => PossibleRenderReactElement>\ntype PossibleOptionWithTable = NullOr<SingleHeaderContent>\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('entity.all')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable() {\n                return Entities[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [\n                    EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('entity.all'),\n                }\n            }\n\n            public createTableContent(option: EntityAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["InstrumentPropertyComponent","value","englishNameInHtml","reference","canMakeASoundOutOfAMusicBlock","comment","canMakeASoundOutOfAMusicBlockComment","id","className","Tooltip","option","title","gameContentTranslation","elementId","LimitComponent","limits","displayAcronymIfApplicable","EntityLimits","createSingleComponent","selectedLimits","filter","map","length","limit","index","Fragment","createReturnOfLine","englishName","ProjectLanguages","entityLimit","acronym","createSingleNameComponent","acronymId","StringContainer","nameContainer","languageValue","TextComponent","content","name","CourseThemeComponent","this","toCourseThemeMap","isInGroundTheme","isInUndergroundTheme","isInUnderwaterTheme","isInDesertTheme","isInSnowTheme","isInSkyTheme","isInForestTheme","isInGhostHouseTheme","isInAirshipTheme","isInCastleTheme","theme","renderSingleComponent","english","courseThemeImage","Image","file","COURSE_THEME_IMAGE_FILE","Themes","courseTheme","_renderSingleComponent","ThemeComponent","Symbol","iterator","EntityAppOption","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","GameStyles","Times","Enum","values","IMAGES","enumeration","CALLBACK_TO_GET_ENUMERATION","uniqueImage","_gameStyles","gameStyle","get","image","key","element","contentTranslation","subHeaders","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","CommonOptions","editorVoiceSound","editorVoiceSoundFileHolder","GAME","entity","displayAllAsText","WHEN_ALL_SELECTED_GAME","GAME_STYLE","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","categoryNameContainer","EntityCategories","imageFile","CATEGORY_AS_TEXT","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","tooltip","alt","Games","path","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","EntityApp","Entities","small","medium","large","extraLarge","category","categoryEnglish","caption","AbstractTableApp","EMPTY_ARRAY","EditorVoiceSoundComponent","regularFile","regularSoundFile","europeanFile","europeanSoundFile"],"sourceRoot":""}