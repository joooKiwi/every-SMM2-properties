{"version":3,"file":"static/js/694.88a4f011.chunk.js","mappings":"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","sources":["app/property/CourseTagTypes.tsx","app/CourseTagApp.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Link}                                                                    from 'react-router-dom'\n\nimport type {Names, Ordinals, PossibleCourseTagType} from 'app/property/CourseTagType.types'\nimport type {BootstrapColor}                         from 'bootstrap/Bootstrap.types'\nimport type {EveryPossibleRouteNames}                from 'routes/everyRoutes.types'\nimport type {ReactElement, ReactElementOrString}     from 'util/react/ReactProperties'\nimport type {Nullable}                               from 'util/types/nullable'\n\nimport {contentTranslation} from 'lang/components/translationMethods'\nimport {CourseTags}         from 'core/courseTag/CourseTags'\nimport {route}              from 'routes/route'\n\nexport abstract class CourseTagTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL =              new class CourseTagTypes_All extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'success',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'success',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'success',]\n        }\n\n    }('all',)\n    public static readonly OFFICIAL =         new class CourseTagTypes_Official extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.officialCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'danger',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'warning',]\n        }\n\n    }('official',)\n    public static readonly UNOFFICIAL =       new class CourseTagTypes_Unofficial extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.unofficialCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'danger',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'warning',]\n        }\n\n    }('unofficial',)\n    public static readonly MAKER_CENTRAL =    new class CourseTagTypes_MakerCentral extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.makerCentralCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'warning',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'warning',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n    }('makerCentral',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: CourseTagTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static readonly #ROUTE_ALL: PossibleRouteName = 'everyCourseTags'\n    static readonly #ROUTE_OFFICIAL: PossibleRouteName = 'officialCourseTags'\n    static readonly #ROUTE_UNOFFICIAL: PossibleRouteName = 'unofficialCourseTags'\n    static readonly #ROUTE_MAKER_CENTRAL: PossibleRouteName = 'makerCentralCourseTags'\n\n    static readonly #FINAL_PATH: LinkProperties = [null, 'success',]\n\n    readonly #type\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: PossibleCourseTagType,) {\n        super()\n        this.#type = type\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): PossibleCourseTagType {\n        return this.#type\n    }\n\n    public abstract get iterator(): IterableIterator<CourseTags>\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- Link button methods --------------------\n\n    protected abstract _createAllLinkButtonProperties(): LinkProperties\n\n    public createAllLinkButton(): ReactElement {\n        return this.#createLinkButton('all', this._createAllLinkButtonProperties(), contentTranslation('All'),)\n    }\n\n\n    protected abstract _createOfficialLinkButtonProperties(): LinkProperties\n\n    public createOfficialLinkButton(): ReactElement {\n        return this.#createLinkButton('official', this._createOfficialLinkButtonProperties(), contentTranslation('Official.Yes'),)\n    }\n\n\n    protected abstract _createUnofficialLinkButtonProperties(): LinkProperties\n\n    public createUnofficialLinkButton(): ReactElement {\n        return this.#createLinkButton('unofficial', this._createUnofficialLinkButtonProperties(), contentTranslation('Official.No'),)\n    }\n\n\n    protected abstract _createMakerCentralLinkButtonProperties(): LinkProperties\n\n    public createMakerCentralLinkButton(): ReactElement {\n        return this.#createLinkButton('makerCentral', this._createMakerCentralLinkButtonProperties(), 'Maker Central',)\n    }\n\n\n    #createLinkButton(partialId: PossibleCourseTagType, [routeName, color,]: LinkProperties, value: ReactElementOrString,): ReactElement {\n        const id = `${partialId}CourseTag-button`,\n            className = `btn btn-${color}`\n\n        return routeName == null\n            ? <button type=\"button\" id={id} className={className} disabled>{value}</button>\n            : <Link type=\"button\" id={id} className={className} to={route(routeName)}>{value}</Link>\n    }\n\n    //endregion -------------------- Link button methods --------------------\n\n    // public static getValueByType<T,>(value: T,): CourseTagTypesByType<T>\n    public static getValueByType(value: Nullable<| CourseTagTypes | string>,): CourseTagTypes {\n        if (value == null)\n            throw new TypeError(`No \"${this.name}\" could be found by a null value.`)\n        if (value instanceof this)\n            return value\n        const valueFound = this.values.find(it => it.type === value)\n        if (valueFound == null)\n            throw new ReferenceError(`No \"${this.name}\" could be found by this value \"${value}\".`)\n        return valueFound\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return CourseTagTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<CourseTagTypes>,): CourseTagTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<CourseTagTypes> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleRouteName = Extract<EveryPossibleRouteNames, `${| 'every' | Exclude<PossibleCourseTagType, 'every'> | `${'official' | 'unofficial'}${| 'And' | 'Excluding'}MakerCentral`}CourseTags`>\ntype LinkProperties = readonly [\n    routeName: Nullable<PossibleRouteName>,\n    color: Extract<BootstrapColor, | 'success' | 'warning' | 'danger'>,\n]\n","import './CourseTagApp.scss'\n\nimport {Fragment} from 'react'\n\nimport type {CourseTagAppProperties}                               from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList,}                          from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {NullOr}                                               from 'util/types/nullable'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {CourseTagTypes}         from 'app/property/CourseTagTypes'\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {CourseTags}             from 'core/courseTag/CourseTags'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class CourseTagApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CourseTags>, CourseTagAppProperties> {\n\n    //region -------------------- Fields --------------------\n\n    #type?: CourseTagTypes\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: CourseTagAppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): CourseTagTypes {\n        return this.#type ??= CourseTagTypes.getValueByType(this.props.type)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'courseTag'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every course tags', {\n            course: <Fragment key=\"every course tag (lowercase course)\">--course--</Fragment>,//TODO add course reference\n            tags: <Fragment key=\"every course tag (plural lowercase tag)\">--tags--</Fragment>,//TODO add tag reference\n        },)\n    }\n\n    protected override _createAsideContent(): NullOr<ReactElementOrString> {\n        const type = this.type\n\n        return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n            {type.createAllLinkButton()}\n            <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n                {type.createOfficialLinkButton()}\n                {type.createUnofficialLinkButton()}\n            </div>\n            {type.createMakerCentralLinkButton()}\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<CourseTags> {\n        const $this = this\n\n        return new class implements AppInterpreterWithCardList<CourseTags> {\n\n            public get iterable() {\n                return $this.type.iterator\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n                return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n                //TODO add Maker Central name\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppProperties}                from 'app/AppProperties.types'\nimport type {AppWithVariableDisplayStates} from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["Symbol","iterator","CourseTagTypes","type","this","_createAllLinkButtonProperties","contentTranslation","_createOfficialLinkButtonProperties","_createUnofficialLinkButtonProperties","_createMakerCentralLinkButtonProperties","value","TypeError","name","valueFound","values","find","it","ReferenceError","Enum","partialId","routeName","color","id","className","disabled","to","route","ALL","CourseTags","OFFICIAL","UNOFFICIAL","MAKER_CENTRAL","CourseTagApp","props","state","typeDisplayed","ViewDisplays","getValueByType","gameContentTranslation","course","Fragment","tags","createAllLinkButton","createOfficialLinkButton","createUnofficialLinkButton","createMakerCentralLinkButton","$this","courseTag","reference","englishName","firstAppearance","simpleName","AbstractCardListApp","enumerable","optionInterpreter","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","nameContainer","englishNameInHtml","push","popoverOrientation","createCardListContent","AbstractSimpleListApp"],"sourceRoot":""}