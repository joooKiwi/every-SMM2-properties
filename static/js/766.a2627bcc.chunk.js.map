{"version":3,"file":"static/js/766.a2627bcc.chunk.js","mappings":"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","sources":["app/options/MiiCostumeAppOption.tsx","app/MiiCostumeApp.tsx","app/options/CommonOptions.tsx","app/options/component/EmptyAppOption.ts"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {lazy}                                                                    from 'react'\n\nimport type {MiiCostumeAppStates}                              from 'app/AppStates.types'\nimport type {Names, Ordinals}                                  from 'app/options/MiiCostumeAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {MiiCostumes}                                      from 'core/miiCostume/MiiCostumes'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\n\nimport {AbstractAppOption}             from 'app/options/AbstractAppOption'\nimport {CommonOptions}                 from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent} from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}   from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                from 'app/options/component/EmptyAppOption'\nimport {MiiCostumeCategories}          from 'core/miiCostumeCategory/MiiCostumeCategories'\nimport {contentTranslation}            from 'lang/components/translationMethods'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image = lazy(() => import('app/tools/images/Image'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo Change CATEGORY to use {IMAGE, TEXT or NO} instead of 2 different options.\n */\nexport abstract class MiiCostumeAppOption\n    extends AbstractAppOption<boolean, MiiCostumeAppStates, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =                 new class MiiCostumeAppOption_Image extends MiiCostumeAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <Image source={enumeration.imagePath} fallbackName={`${enumeration.englishName} - image`}/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n            return {key: 'image', element: contentTranslation('Image'),}\n        }\n\n    }(true,)\n    public static readonly NAME =                  new class MiiCostumeAppOption_Name extends MiiCostumeAppOption {\n\n        protected override _createContentOption() {\n            return () => CommonOptions.get.getNameContent(MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION())\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }(true,)\n    public static readonly OFFICIAL_NOTIFICATION = new class MiiCostumeAppOption_ConditionToUnlockIt extends MiiCostumeAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION()\n                const miiCostume = enumeration.reference\n\n                return miiCostume.officialNotification?.createSimpleTranslationComponent(miiCostume.english, miiCostume.officialNotificationAmount,)\n            }\n        }\n\n        protected override _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n            //TODO add new translation to the header value.\n            return {key: 'officialNotification', element: '--Official notification--',}\n        }\n\n    }(true,)\n\n    public static readonly CATEGORY =              new class MiiCostumeAppOption_Category extends MiiCostumeAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryContainer.nameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration,\n                    () => MiiCostumeAppOption.CATEGORY_AS_TEXT.get\n                        ? categoryName\n                        : MiiCostumeCategories.getValueByName(categoryName.english).imagePath,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }(true,)\n    /**\n     * Tell whenever a {@link MiiCostumeAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT =      new class MiiCostumeAppOption_CategoryAsText extends MiiCostumeAppOption {}(false,)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MiiCostumeAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link MiiCostumeApp} and get by {@link MiiCostumeAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => MiiCostumes\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(defaultValue: boolean,) {\n        super(defaultValue,)\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): NullOr<() => PossibleRenderReactElement> {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): NullOr<SingleHeaderContent> {\n        return null\n    }\n\n    protected get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return MiiCostumeAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<MiiCostumeAppOption>,): MiiCostumeAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<MiiCostumeAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}\n","import './MiiCostumeApp.scss'\n\nimport type {AppProperties}                                        from 'app/AppProperties.types'\nimport type {MiiCostumeAppStates}                                  from 'app/AppStates.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {MiiCostumeAppOption}    from 'app/options/MiiCostumeAppOption'\nimport Image                    from 'app/tools/images/Image'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {MiiCostumes}            from 'core/miiCostume/MiiCostumes'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class MiiCostumeApp\n    extends AbstractTableApp<AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption>, AppProperties, MiiCostumeAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'miiCostume'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every Mii costumes', {\n            pluralName: <span key=\"miiCostume-pluralName\" className=\"text-decoration-underline\">--Mii costumes--</span>,//TODO add Mii costumes, but the plural name\n        },)\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption> {\n        return new class implements AppInterpreterWithTable<MiiCostumes, MiiCostumeAppOption> {\n\n            public get iterable() {\n                return MiiCostumes[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraExtraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({reference, englishName, imagePath,}: MiiCostumes,) {\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <Image source={imagePath} fallbackName={englishName}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => MiiCostumes,) {\n                MiiCostumeAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly MiiCostumeAppOption[] {\n                return [\n                    MiiCostumeAppOption.IMAGE,\n                    MiiCostumeAppOption.NAME,\n                    MiiCostumeAppOption.OFFICIAL_NOTIFICATION,\n                    MiiCostumeAppOption.CATEGORY,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every Mii costumes', {\n                        pluralName: <span key=\"miiCostume-pluralName\" className=\"text-decoration-underline\">--Mii costumes--</span>,//TODO add Mii costumes, but the plural name\n                    },),\n                }\n            }\n\n\n            public createTableContent(option: MiiCostumeAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: MiiCostumeAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {Enum} from '@joookiwi/enumerable/dist/types'\nimport {lazy}      from 'react'\n\nimport type {SingleHeaderContent, SingleHeadersContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                    from 'core/theme/Themes'\nimport type {Name}                                      from 'lang/name/Name'\nimport type {NameTrait}                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from 'lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from 'util/react/ReactProperties'\n\nimport {BASE_PATH}                                  from 'variables'\nimport {Games}                                      from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {EmptyStringName}                            from 'lang/name/EmptyStringName'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('app/tools/images/Image'))\nconst NameComponent = lazy(() => import('lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('Game'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: gameContentTranslation('Game'),\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : null}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : null}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : null}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : null}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n"],"names":["Image","lazy","Symbol","iterator","MiiCostumeAppOption","defaultValue","this","content","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","value","Enum","values","AbstractAppOption","IMAGE","enumeration","CALLBACK_TO_GET_ENUMERATION","source","imagePath","fallbackName","englishName","key","element","contentTranslation","NAME","CommonOptions","OFFICIAL_NOTIFICATION","miiCostume","reference","officialNotification","createSimpleTranslationComponent","english","officialNotificationAmount","CATEGORY","categoryName","categoryContainer","nameContainer","CATEGORY_AS_TEXT","get","MiiCostumeCategories","MiiCostumeApp","props","state","typeDisplayed","ViewDisplays","gameContentTranslation","pluralName","className","MiiCostumes","small","medium","large","extraExtraLarge","category","categoryEnglish","caption","option","AbstractTableApp","NameComponent","id","name","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","startingKey","englishNameInHtml","subHeaders","getGameHeader","alt","Games","path","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","isInCourseTheme","BASE_PATH","isInWorldTheme","EMPTY_ARRAY"],"sourceRoot":""}