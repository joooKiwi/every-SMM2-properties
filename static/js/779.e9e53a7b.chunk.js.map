{"version":3,"file":"static/js/779.e9e53a7b.chunk.js","mappings":"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","sources":["app/EditorVoiceApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {AbstractCardListApp} from 'app/withInterpreter/AbstractCardListApp'\n\nimport type {EditorVoiceProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport {EditorVoices}            from 'core/editorVoice/EditorVoices'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\nimport {filterGame}              from 'util/utilitiesMethods'\n\nexport default class EditorVoiceApp\n    extends AbstractCardListApp<EditorVoices, AppInterpreterWithCardList<EditorVoices>, EditorVoiceProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'editorVoice'\n    }\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyEditorVoice (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyEditorVoice (card)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('editor voice.all')\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class EditorVoiceAppInterpreter implements AppInterpreterWithCardList<EditorVoices> {\n\n            public get content() {\n                return filterGame(EditorVoices.CompanionEnum.get.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 1,\n                    small: 3,\n                    medium: 4,\n                    large: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent({englishName: name, editorVoiceSoundFileHolder,}: EditorVoices,) {\n                return <div className=\"editorVoices-container\">\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSound>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["EditorVoiceApp","AbstractCardListApp","_createKey","_createSimpleListRouteName","_createCardListRouteName","_createTitleContent","gameContentTranslation","_createAppOptionInterpreter","$this","this","content","filterGame","EditorVoices","CompanionEnum","get","values","props","games","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","_ref","englishName","name","editorVoiceSoundFileHolder","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","_routeName","_classPrivateFieldLooseKey","AbstractSimpleListApp","constructor","arguments","Object","defineProperty","writable","value","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createUniqueNameOnCardList","enumerable","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","lg","extraLarge","xl","extraExtraLarge","xxl","dimensions","concat","size","length","contentToDisplay","Array","index","uniqueEnglishName","id","englishNameInHtml","_jsxs","NameComponent","reference","nameContainer","popoverOrientation","DisplayButtonGroup","reactKey","views","currentView","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","viewDisplay","__possibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","createList","regularSound","regularFile","europeanSound","europeanFile","SimpleSoundComponent","file","title","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}