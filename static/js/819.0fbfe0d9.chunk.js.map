{"version":3,"file":"static/js/819.0fbfe0d9.chunk.js","mappings":"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","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","export class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction} from 'variables'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #map?: Map<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            const map = AbstractSoundPlayer.map\n            if (map.has(key))\n                throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n            map.set(key, this,)\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public static get map(): Map<string, SoundPlayer> {\n        return this.#map ??= new Map()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import type {CollectionHolder, CollectionIterator}              from '@joookiwi/collection'\nimport type {CompanionEnumSingleton, PossibleEnumerableValueBy} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}                                    from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<SoundStates, typeof SoundStates> = class CompanionEnum_SoundStates\n        extends CompanionEnum<SoundStates, typeof SoundStates> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundStates\n\n        private constructor() {\n            super(SoundStates,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundStates()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n\n    public static getValueByName(value: Nullable<| SoundStates | string>,): SoundStates {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    public static getValue(value: PossibleEnumerableValueBy<SoundStates>,): SoundStates {\n        return SoundStates.CompanionEnum.get.getValue(value,)\n    }\n\n    public static get values(): CollectionHolder<SoundStates> {\n        return SoundStates.CompanionEnum.get.values\n    }\n\n    public static [Symbol.iterator](): CollectionIterator<SoundStates> {\n        return SoundStates.CompanionEnum.get[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}","import {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false, true,),)\n                this.onPlayingEvent?.(this, event,)\n            }\n            audio.onpause = event => {\n                this.setState(new HistoryState(PAUSED, false, true,),)\n                this.onPauseEvent?.(this, event,)\n            }\n            audio.onplay = event => {\n                this.setState(new HistoryState(PLAYING, true, true,),)\n                this.onPlayEvent?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false, true,),)\n                this.onEndEvent?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import type {CollectionHolder, CollectionIterator}              from '@joookiwi/collection'\nimport type {CompanionEnumSingleton, PossibleEnumerableValueBy} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}                                    from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<Validators, typeof Validators> = class CompanionEnum_Validators\n        extends CompanionEnum<Validators, typeof Validators> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Validators\n\n        private constructor() {\n            super(Validators,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Validators()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n        protected override readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n\n    public static getValueByName(value: Nullable<| Validators | string>,): Validators {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    public static get defaultValue(): Validators {\n        return Validators.CompanionEnum.get.defaultValue\n    }\n\n    public static set defaultValue(value: PossibleEnumerableValueBy<Validators>,) {\n        Validators.CompanionEnum.get.defaultValue = value\n    }\n\n    public static setDefaultValue(value: PossibleEnumerableValueBy<Validators>,): typeof Validators {\n        Validators.CompanionEnum.get.setDefaultValue(value,)\n        return Validators\n    }\n\n    public static getValue(value: PossibleEnumerableValueBy<Validators>,): Validators {\n        return Validators.CompanionEnum.get.getValue(value,)\n    }\n\n    public static get values(): CollectionHolder<Validators> {\n        return Validators.CompanionEnum.get.values\n    }\n\n    public static [Symbol.iterator](): CollectionIterator<Validators> {\n        return Validators.CompanionEnum.get[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.defaultValue\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.delete(audio.source.key)\n    }\n\n    public override render(): ReactJSXElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","state","isLoading","isFromEventDirectly","_classCallCheck","Object","defineProperty","_state","writable","value","_isLoading","_isFromEventDirectly","_classPrivateFieldLooseBase","this","_createClass","key","get","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","_playElement","_pauseElement","_stopElement","_loadingElement","_exceptionElement","_map","_classPrivateFieldLooseKey","AbstractSoundPlayer","isInProduction","map","has","ReferenceError","concat","set","_classPrivateFieldLoo","_classPrivateFieldLoo2","Map","DEFAULT_DOES_LOOP","_englishName","_Symbol$iterator","Symbol","iterator","SoundStates","_ref","_inherits","_super","_createSuper","englishName","_this","call","_assertThisInitialized","getValueByEnglishName","CompanionEnum","getValue","values","Enum","STANDBY","_SoundStates","SoundStates_Standby","_super2","apply","arguments","_ref2","PAUSED","_SoundStates2","SoundStates_Paused","_super3","_ref3","PLAYING","_SoundStates3","SoundStates_Playing","_super4","_ref4","LOADING","_SoundStates4","SoundStates_Loading","_super5","_ref5","EXCEPTION","_SoundStates5","SoundStates_Exception","_super6","_ref6","_instance","_class","_CompanionEnum","CompanionEnum_SoundStates","_super7","_history","_last","_current","SoundStateHistory","currentState","current","setLast","push","TypeError","last","_source","_title","_doesLoop","_audio","_isDurationValid","_onBeforePlay","_onAfterPlay","_onBeforePause","_onAfterPause","_onBeforeStop","_onAfterStop","_onBeforeStateChanged","_onAfterStateChanged","_onPlayEvent","_onPlayingEvent","_onPauseEvent","_onEndEvent","SimpleSoundPlayer","_AbstractSoundPlayer","source","title","doesLoop","length","undefined","setState","_this2","audio","Audio","fullName","onplaying","event","_this2$onPlayingEvent","history","stop","pause","onPlayingEvent","onpause","_this2$onPauseEvent","onPauseEvent","onplay","_this2$onPlayEvent","onPlayEvent","onended","_this2$onEndEvent","onEndEvent","loop","paused","isAudioExistant","Number","isFinite","duration","_classPrivateFieldLoo3","onBeforePlay","_classPrivateFieldLoo4","onAfterPlay","_classPrivateFieldLoo5","onBeforePause","_classPrivateFieldLoo6","onAfterPause","_classPrivateFieldLoo7","onBeforeStop","_classPrivateFieldLoo8","onAfterStop","_classPrivateFieldLoo9","onBeforeStateChanged","_classPrivateFieldLoo10","onAfterStateChanged","_classPrivateFieldLoo11","_classPrivateFieldLoo12","_classPrivateFieldLoo13","_classPrivateFieldLoo14","_this$onBeforePlay","_this$onAfterPlay","_this3","play","then","isDurationValid","catch","_this$onBeforePause","_this$onAfterPause","isPaused","_this$onBeforeStop","_this$onAfterStop","isStandby","currentTime","_this$onBeforeStateCh","_this$onAfterStateCha","equals","SoundPlayerFactory","Validators","callback","defaultValue","setDefaultValue","ALL_YES","_Validators","SoundFounds_AllYes","ALL_NO","_Validators2","SoundFounds_AllNo","ON_PLAY_ONLY","_Validators3","SoundFounds_OnPlayOnly","ON_CREATE_ONLY","_Validators4","SoundFounds_OnCreateOnly","CompanionEnum_Validators","_DEFAULT","_PLAY_CLASSES","_PAUSE_CLASSES","_STOP_CLASSES","_LOADING_CLASSES","_EXCEPTION_CLASSES","_isSourceFoundCallback","SimpleSoundComponent","props","isSourceRetrieved","file","_this$props$validator","validator","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","delete","elementsHolder","_jsx","className","onClick","role","componentState","_jsxs","children","getElementsFrom","Component"],"sourceRoot":""}