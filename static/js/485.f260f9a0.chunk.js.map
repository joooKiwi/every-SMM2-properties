{"version":3,"file":"static/js/485.f260f9a0.chunk.js","mappings":"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","sources":["app/options/MysteryMushroomAppOption.tsx","app/MysteryMushroomApp.tsx","app/options/CommonOptions.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Fragment, lazy}                                                          from 'react'\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}       from './component/AppOptionWithContent'\nimport type {AppOptionWithTable}                                     from './component/AppOptionWithTable'\nimport type {MysteryMushroom}                                        from '../../core/mysteryMushroom/MysteryMushroom'\nimport type {MysteryMushroomSoundFile}                               from '../../core/mysteryMushroom/file/MysteryMushroomSoundFile'\nimport type {Names, Ordinals, PossibleMysteryMushroomType}           from './MysteryMushroomAppOption.types'\nimport type {NullOr}                                                 from '../../util/types'\nimport type {NotApplicable}                                          from '../../core/_properties/Property'\nimport type {PossibleImageSourceForFile, PossibleSoundSourceForFile} from '../../core/mysteryMushroom/MysteryMushrooms.types'\nimport type {ReactElement}                                           from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent}                                    from '../tools/table/SimpleHeader'\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component'\nimport {CommonOptions}                 from './CommonOptions'\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables'\nimport {MysteryMushrooms}              from '../../core/mysteryMushroom/MysteryMushrooms'\nimport TextComponent                   from '../tools/text/TextComponent'\nimport {ProjectLanguages}              from '../../lang/ProjectLanguages'\n\n//region -------------------- dynamic imports --------------------\n\nconst NameComponent =        lazy(() => import('../../lang/name/component/Name.component'))\nconst Image =                lazy(() => import('../tools/images/Image'))\nconst SimpleSoundComponent = lazy(() => import('../../util/sound/component/SimpleSound.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class MysteryMushroomAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly CONDITION_TO_UNLOCK_IT = new class MysteryMushroomAppOption_ConditionToUnlockIt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption({reference,}: MysteryMushrooms,): PossibleRenderReactElement {\n            return <>--{reference.conditionToUnlockIt}--</>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'conditionToUnlockIt', element: '--Condition to unlock it--',}//TODO add condition to unlock it\n        }\n\n    }(null,)\n    public static readonly GAME = new class MysteryMushroomAppOption_Game extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,) {\n            const {uniqueEnglishName, englishNameInHtml, reference,} = enumeration\n\n            return <div key={`games - ${uniqueEnglishName}`} id={`games-${englishNameInHtml}`}>{\n                reference.games.map((game, index, games,) => <Fragment key={`game (${index + 1}) - ${uniqueEnglishName}`}>\n                    <NameComponent id={`game_${index + 1}_${englishNameInHtml}`} name={game.reference} popoverOrientation=\"right\"/>\n                    {index === games.length - 1 ? EMPTY_REACT_ELEMENT : <>{ProjectLanguages.currentLanguage.comma}<br/></>}\n                </Fragment>)\n            }</div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }(null,)\n    public static readonly NAME = new class MysteryMushroomAppOption_Name extends MysteryMushroomAppOption {\n\n        protected override _createContentOption(enumeration: MysteryMushrooms,) {\n            return CommonOptions.get.getNameContent(enumeration)/*<YesOrNoResultTextComponent boolean={reference.canBeUnlockedByAnAmiibo}/>*/\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }(null,)\n\n\n    public static readonly IMAGES_AND_SOUNDS = new class MysteryMushroomAppOption_ImagesAndSounds extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderContent).flat()\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'imagesAndSounds', element: '--Images & sounds--',//TODO add images & sound\n                subHeaders: MysteryMushroomAppOption._imagesAndSounds.map(enumerable => enumerable.renderTableHeader!)\n            }\n        }\n\n    }(null,)\n    public static readonly POWER_UP_COLLECTED = new class MysteryMushroomAppOption_PowerUpCollectedSound extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderSoundContent()\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.powerUpCollectedSound, reference => reference.haveASoundEffectWhenCollected, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'powerUpCollectedSound', element: '--Power-up collected (sound)--',}//TODO add power-up collected & sound\n        }\n\n    }('power-up collected',)\n    public static readonly WAITING = new class MysteryMushroomAppOption_WaitingImages extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        public override _createImageContent(renderDiv: boolean,) {\n            return this._createImage(enumeration => enumeration.waitingImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'waitingImage', element: '--Waiting (image)--',}//TODO add waiting & image\n        }\n\n    }('waiting',)\n    public static readonly TAUNT = new class MysteryMushroomAppOption_Taunt extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createImage(enumeration => enumeration.tauntImage, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.tauntSound, reference => reference.haveASoundEffectOnTaunt, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'tauntImageAndSound', element: '--Taunt (image & sound)--',}//TODO add taunt, image & sound\n        }\n\n    }('taunt',)\n    public static readonly PRESSING_DOWN = new class MysteryMushroomAppOption_PressingDown extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createImage(enumeration => enumeration.pressingDownImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'pressingDownImage', element: <>--Pressing ↓ (image)--</>,}\n        }\n\n    }('pressing ↓',)\n    public static readonly WALK = new class MysteryMushroomAppOption_Walk extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createAnimatedImages(enumeration => enumeration.walkImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'walkImages', element: '--Walk (image)--',}//TODO add walk & image\n        }\n\n    }('walk',)\n    public static readonly RUNNING = new class MysteryMushroomAppOption_Running extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createAnimatedImages(enumeration => enumeration.runningImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'runningImages', element: '--Running (images)--',}//TODO add running & image\n        }\n\n    }('running',)\n    public static readonly SWIMMING = new class MysteryMushroomAppOption_Swimming extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createAnimatedImages(enumeration => enumeration.swimmingImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'swimmingImages', element: '--Swimming (images)--',}//TODO add swimming & image\n        }\n\n    }('swimming',)\n    public static readonly JUMP = new class MysteryMushroomAppOption_Jump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            const enumeration = MysteryMushroomAppOption_Jump.CALLBACK_TO_GET_ENUMERATION()\n            return (enumeration.jumpImages[0]?.length ?? 0) > 1\n                ? this._createAnimatedImages(() => enumeration.jumpImages, renderDiv,)\n                : this._createImage(() => enumeration.jumpImages.map(images => images[0]!) as unknown as PossibleImageSourceForFile<string>, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSounds(enumeration => enumeration.jumpSounds, reference => reference.haveASoundEffectOnJump, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'jumpingImagesAndSounds', element: '--Jumping (images & sounds)--',}//TODO add jumping, image & sound\n        }\n\n    }('jump',)\n    public static readonly FALLING_AFTER_JUMP = new class MysteryMushroomAppOption_FallingAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createImage(enumeration => enumeration.fallingAfterJumpImage, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'fallingAfterJumpImage', element: '--Falling after jump (images)--',}//TODO add falling after jump & image\n        }\n\n    }('falling after jump',)\n    public static readonly ON_GROUND_AFTER_JUMP = new class MysteryMushroomAppOption_OnGroundAfterJump extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderSoundContent()\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.onGroundAfterJumpSound, reference => reference.haveASoundEffectOnGroundAfterJump, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'groundAfterJumpImage', element: '--Ground after jump (sound)--',}//TODO add ground after jump & sound\n        }\n\n    }('ground after jump',)\n    public static readonly TURNING = new class MysteryMushroomAppOption_Turning extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createImage(enumeration => enumeration.turningImage, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.turningSound, reference => reference.haveASoundEffectOnTurnAfterRun, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'turningImageAndSound', element: '--Turning (image & sound)--',}//TODO add turning, image & sound\n        }\n\n    }('turning',)\n    public static readonly CLIMBING = new class MysteryMushroomAppOption_Climbing extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createAnimatedImages(enumeration => enumeration.climbingImages, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'climbingImages', element: '--Climbing (images)--',}//TODO add climbing & image\n        }\n\n    }('climbing',)\n    public static readonly GOAL_POLE = new class MysteryMushroomAppOption_GoalPole extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._createSingleImageAndSoundContainer(() => <>\n                {this._renderImageContent(false,)}\n                {this._renderSoundContent(false,)}\n            </>)\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createAnimatedImages(enumeration => enumeration.goalPoleImages, renderDiv,)\n        }\n\n        public override _createSoundContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.goalPoleSound, reference => reference.haveASoundEffectOnGoalPole, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'goalPoleImagesAndSound', element: <>--Goal pole (images & sound)--</>,}\n        }\n\n    }('goal pole',)\n    public static readonly LOST_A_LIFE = new class MysteryMushroomAppOption_LostALife extends MysteryMushroomAppOption {\n\n        protected override _createContentOption() {\n            return this._renderImageContent()\n        }\n\n        protected override _createImageContent(renderDiv: boolean,) {\n            return this._createSound(enumeration => enumeration.lostALifeSound, reference => reference.haveASoundEffectOnDeath, renderDiv,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'lostALifeSound', element: '--Lost a life (sound)--',}//TODO add lost a life & sound\n        }\n\n    }('lost a life',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: MysteryMushroomAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static #imagesAndSounds?: readonly MysteryMushroomAppOption[]\n    public static CALLBACK_TO_GET_ENUMERATION: () => MysteryMushrooms\n\n    static readonly #NOT_APPLICABLE_COMPONENT = <TextComponent content=\"N/A\"/>\n\n    readonly #type\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: PossibleMysteryMushroomType,) {\n        super()\n        this.#type = type\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _mysteryMushroomType(): PossibleMysteryMushroomType {\n        return this.#type\n    }\n\n    protected static get _imagesAndSounds(): readonly MysteryMushroomAppOption[] {\n        return this.#imagesAndSounds ??= [\n            MysteryMushroomAppOption.POWER_UP_COLLECTED,\n            MysteryMushroomAppOption.WAITING,\n            MysteryMushroomAppOption.TAUNT,\n            MysteryMushroomAppOption.PRESSING_DOWN,\n            MysteryMushroomAppOption.WALK,\n            MysteryMushroomAppOption.RUNNING,\n            MysteryMushroomAppOption.SWIMMING,\n            MysteryMushroomAppOption.JUMP,\n            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n            MysteryMushroomAppOption.ON_GROUND_AFTER_JUMP,\n            MysteryMushroomAppOption.TURNING,\n            MysteryMushroomAppOption.CLIMBING,\n            MysteryMushroomAppOption.GOAL_POLE,\n            MysteryMushroomAppOption.LOST_A_LIFE,\n        ]\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    #createSingleImageAndSoundContainer(renderDiv: boolean, callback: (enumeration: MysteryMushrooms,) => ReactElement,) {\n        const enumeration = MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n        return enumeration === MysteryMushrooms.MYSTERY_MUSHROOM\n            ? MysteryMushroomAppOption.#NOT_APPLICABLE_COMPONENT\n            : renderDiv\n                ? <div key={`${enumeration.uniqueEnglishName} - ${this._mysteryMushroomType}`}>{callback(enumeration)}</div>\n                : callback(enumeration)\n    }\n\n    protected _createSingleImageAndSoundContainer(callback: (enumeration: MysteryMushrooms,) => ReactElement, renderDiv: boolean = true,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, callback,)\n    }\n\n    protected _createSound(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<MysteryMushroomSoundFile>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const value = callback(enumeration)\n            if (value == null)\n                return EMPTY_REACT_ELEMENT\n\n            const englishName = enumeration.englishName\n            const type = this._mysteryMushroomType\n            return <SimpleSoundComponent file={value} title={`${englishName} - ${type}`}/>\n        },)\n    }\n\n    protected _createSounds(callback: (enumeration: MysteryMushrooms,) => PossibleSoundSourceForFile<readonly MysteryMushroomSoundFile[]>, callbackToRender: ReferenceCallback, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const englishName = enumeration.englishName\n            const type = this._mysteryMushroomType\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <SimpleSoundComponent file={value} title={`${englishName} - ${type} #${index + 1}`}/>\n            )}</>\n        },)\n    }\n\n    protected _createImage(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<string>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const uniqueEnglishName = enumeration.uniqueEnglishName\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${uniqueEnglishName} #${index + 1}`} source={value} fallbackName={`${fallbackName} #${index + 1}`}/>\n            )}</>\n        },)\n    }\n\n    protected _createAnimatedImages(callback: (enumeration: MysteryMushrooms,) => PossibleImageSourceForFile<readonly string[]>, renderDiv: boolean,): ReactElement {\n        return this.#createSingleImageAndSoundContainer(renderDiv, enumeration => {\n            const uniqueEnglishName = enumeration.uniqueEnglishName\n            const englishNameInHtml = enumeration.englishNameInHtml\n            const fallbackName = `${enumeration.englishName} (${this._mysteryMushroomType})`\n\n            return <>{callback(enumeration).map((value, index,) =>\n                <Image key={`${uniqueEnglishName} #${index + 1}`} partialId={`${englishNameInHtml}-${index + 1}`}\n                       images={value.map((image, index,) =>\n                           ({source: image, fallbackName: `${fallbackName} #${index + 1}`,}))}/>\n            )}</>\n        },)\n    }\n\n    protected abstract _createContentOption(enumeration: MysteryMushrooms,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n\n    protected _createImageContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT\n    }\n\n    public renderImageContent(enumeration: MysteryMushrooms, renderDiv: boolean = false,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration\n        return this._createImageContent(renderDiv,)\n    }\n\n    protected _renderImageContent(renderDiv: boolean = true,): ReactElement {\n        return this._createImageContent(renderDiv,)\n    }\n\n    public _createSoundContent(renderDiv: boolean,): ReactElement {\n        return EMPTY_REACT_ELEMENT\n    }\n\n    public renderSoundContent(enumeration: MysteryMushrooms,): ReactElement {\n        MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = () => enumeration\n        return this._createSoundContent(false)\n    }\n\n    protected _renderSoundContent(renderDiv: boolean = true,): ReactElement {\n        return this._createSoundContent(renderDiv,)\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return MysteryMushroomAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<MysteryMushroomAppOption>,): MysteryMushroomAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<MysteryMushroomAppOption> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype ReferenceCallback = (reference: MysteryMushroom,) => | boolean | NotApplicable\n","import './MysteryMushroomApp.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from './interpreter/AppInterpreterWithTable'\nimport type {AppProperties}                                        from './AppProperties.types'\nimport type {MysteryMushroomAppStates}                             from './AppStates.types'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from '../util/react/ReactProperties'\n\nimport {AbstractTableApp}         from './withInterpreter/AbstractTableApp'\nimport {EMPTY_REACT_ELEMENT}      from '../util/emptyReactVariables'\nimport {gameContentTranslation}   from '../lang/components/translationMethods'\nimport {MysteryMushroomAppOption} from './options/MysteryMushroomAppOption'\nimport {MysteryMushrooms}         from '../core/mysteryMushroom/MysteryMushrooms'\nimport {ViewDisplays}             from './withInterpreter/ViewDisplays'\n\n/**\n * @reactComponent\n */\nexport default class MysteryMushroomApp\n    extends AbstractTableApp<AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption>, AppProperties, MysteryMushroomAppStates> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'mysteryMushroom'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every Mystery Mushrooms', {pluralName: '--Mystery Mushrooms--'},)//TODO add Mystery Mushroom (plural)\n    }\n\n    protected override _createUniqueNameOnSimpleList(enumerable: MysteryMushrooms,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createUniqueNameOnCardList(enumerable: MysteryMushrooms,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n        return new class implements AppInterpreterWithTable<MysteryMushrooms, MysteryMushroomAppOption> {\n\n            public get iterable() {\n                return MysteryMushrooms[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: 4,\n                    extraLarge: 3,\n                    extraExtraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: MysteryMushrooms,) {\n                const amountOfImages = enumerable.fileName.imageFileNames.length\n                const contains2Images = amountOfImages === 2\n\n                return amountOfImages === 0\n                    ? EMPTY_REACT_ELEMENT\n                    : <div className={`image-content-container ${contains2Images ? 'dual' : 'single'}-image-content-container`}>\n                        {[\n                            MysteryMushroomAppOption.WAITING,\n                            MysteryMushroomAppOption.TAUNT,\n                            MysteryMushroomAppOption.PRESSING_DOWN,\n                            MysteryMushroomAppOption.WALK,\n                            MysteryMushroomAppOption.RUNNING,\n                            MysteryMushroomAppOption.SWIMMING,\n                            MysteryMushroomAppOption.JUMP,\n                            MysteryMushroomAppOption.FALLING_AFTER_JUMP,\n                            MysteryMushroomAppOption.TURNING,\n                            MysteryMushroomAppOption.CLIMBING,\n                            MysteryMushroomAppOption.GOAL_POLE,\n                        ].map(appOption => appOption.renderImageContent(enumerable, contains2Images,))}\n                    </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => MysteryMushrooms,) {\n                MysteryMushroomAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly MysteryMushroomAppOption[] {\n                return [\n                    MysteryMushroomAppOption.CONDITION_TO_UNLOCK_IT,\n                    MysteryMushroomAppOption.GAME,\n                    MysteryMushroomAppOption.NAME,\n                    MysteryMushroomAppOption.IMAGES_AND_SOUNDS,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('Every Mystery Mushrooms', {pluralName: '--Mystery Mushrooms--'},),//TODO add Mystery Mushroom (plural)\n                }\n            }\n\n\n            public createTableContent(option: MysteryMushroomAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: MysteryMushroomAppOption) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {Enum} from '@joookiwi/enumerable/dist/types'\nimport {lazy}      from 'react'\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame'\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName'\nimport type {ClassWithReference}                        from '../../core/ClassWithReference'\nimport type {Name}                                      from '../../lang/name/Name'\nimport type {NameTrait}                                 from '../../lang/name/NameTrait'\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory'\nimport type {ReactElement}                              from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader'\nimport type {Themes}                                    from '../../core/theme/Themes'\n\nimport {BASE_PATH}                                  from '../../variables'\nimport {contentTranslation, gameContentTranslation} from '../../lang/components/translationMethods'\nimport {EMPTY_REACT_ELEMENT}                        from '../../util/emptyReactVariables'\nimport {EmptyStringName}                            from '../../lang/name/EmptyStringName'\nimport {Games}                                      from '../../core/game/Games'\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'))\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent\n    #gameHeader?: SingleHeaderContent\n    #gameHeaderWithAllGames?: SingleHeaderContent\n    #gameHeaderWithMainGames?: SingleHeaderContent\n    #mainGames?: readonly [SingleHeaderContent, SingleHeaderContent,]\n    #categoryHeader?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('Game'),}\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: gameContentTranslation('Game'),\n            subHeaders: subHeaders,\n        }\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        )\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(...this.mainGames)\n    }\n\n    public get mainGames(): readonly [SingleHeaderContent, SingleHeaderContent,] {\n        return this.#mainGames ??= [\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        ]\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n"],"names":["NameComponent","lazy","Image","SimpleSoundComponent","Symbol","iterator","MysteryMushroomAppOption","type","this","callback","renderDiv","callbackToRender","enumeration","value","EMPTY_REACT_ELEMENT","englishName","_mysteryMushroomType","file","title","map","index","uniqueEnglishName","fallbackName","source","englishNameInHtml","partialId","images","image","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","_createImageContent","_createSoundContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","POWER_UP_COLLECTED","WAITING","TAUNT","PRESSING_DOWN","WALK","RUNNING","SWIMMING","JUMP","FALLING_AFTER_JUMP","ON_GROUND_AFTER_JUMP","TURNING","CLIMBING","GOAL_POLE","LOST_A_LIFE","Enum","values","MysteryMushrooms","CONDITION_TO_UNLOCK_IT","reference","conditionToUnlockIt","key","element","GAME","id","games","game","Fragment","name","popoverOrientation","length","ProjectLanguages","CommonOptions","NAME","IMAGES_AND_SOUNDS","_imagesAndSounds","enumerable","flat","subHeaders","_renderSoundContent","_createSound","powerUpCollectedSound","haveASoundEffectWhenCollected","_renderImageContent","_createImage","waitingImage","_createSingleImageAndSoundContainer","tauntImage","tauntSound","haveASoundEffectOnTaunt","pressingDownImage","_createAnimatedImages","walkImages","runningImages","swimmingImages","MysteryMushroomAppOption_Jump","jumpImages","_createSounds","jumpSounds","haveASoundEffectOnJump","fallingAfterJumpImage","onGroundAfterJumpSound","haveASoundEffectOnGroundAfterJump","turningImage","turningSound","haveASoundEffectOnTurnAfterRun","climbingImages","goalPoleImages","goalPoleSound","haveASoundEffectOnGoalPole","lostALifeSound","haveASoundEffectOnDeath","TextComponent","content","MysteryMushroomApp","props","state","typeDisplayed","ViewDisplays","gameContentTranslation","pluralName","small","medium","large","extraLarge","extraExtraLarge","amountOfImages","fileName","imageFileNames","contains2Images","className","appOption","renderImageContent","caption","option","AbstractTableApp","contentTranslation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","english","startingKey","getGameHeader","alt","Games","path","mainGames","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","isInCourseTheme","BASE_PATH","isInWorldTheme"],"sourceRoot":""}