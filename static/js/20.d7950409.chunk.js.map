{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/ThemeAppOption.tsx","app/EveryThemesApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","NightEffectComponent","Symbol","iterator","ThemeAppOption","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","getValueOn","getValuesOn","values","IMAGE","endlessMarioImagePath","ContentTranslationComponent","NAME","getGameContent","getNameContent","getThemeContent","nameHeader","NIGHT_EFFECT","courseTheme","theme","Times","NIGHT","tooltip","namespace","replace","night","EveryThemesApp","props","state","typeDisplayed","ViewDisplays","CARD_LIST","GameContentTranslationComponent","Themes","enumerable","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/20.d7950409.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame';\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}                        from '../../core/ClassWithReference';\nimport type {Enum}                                      from '../../util/enum/Enum';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {NameTrait}                                 from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory';\nimport type {ReactElement}                              from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader';\nimport type {Themes}                                    from '../../core/theme/Themes';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {BASE_PATH}                     from '../../variables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n    #gameHeader?: SingleHeaderContent;\n    #gameHeaderWithAllGames?: SingleHeaderContent;\n    #gameHeaderWithMainGames?: SingleHeaderContent;\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        };\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference;\n        const isInSMM1 = reference.isInSuperMarioMaker1;\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS;\n        const isInSMM2 = reference.isInSuperMarioMaker2;\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference;\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>;\n","import {lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './ThemeAppOption.types';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\nimport type {Themes}                                                                                                                                                                from '../../core/theme/Themes';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {Times}                         from '../../core/time/Times';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =                lazy(() => import('../tools/images/Image'));\nconst NightEffectComponent = lazy(() => import('../../core/nightEffect/NightEffect.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,): PossibleRenderReactElement {\n            return [\n                enumeration.renderSingleComponent(false),\n                enumeration.endlessMarioImagePath != null ? <Image source={enumeration.endlessMarioImagePath} fallbackName={`Endless Mario Image (${enumeration.englishName})`}/> : EMPTY_REACT_ELEMENT,\n            ];\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                subHeaders: [\n                    {key: 'image-empty', element: EMPTY_REACT_ELEMENT,},\n                    {key: 'image-endless-mario', element: <>--Endless Mario--</>},\n                ],\n            };\n        }\n\n    }();\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,): PossibleRenderReactElement {\n            return <div className=\"nameWithContent-container\">\n                    <div className=\"col-10\">\n                        {CommonOptions.get.getGameContent(enumeration)}\n                        {CommonOptions.get.getNameContent(enumeration)}\n                    </div>\n                    <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n                </div>;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }();\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,): PossibleRenderReactElement {\n            return <NightEffectComponent theme={courseTheme}/>;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <Image source={Times.NIGHT.imagePath} fallbackName={`effect - ${Times.NIGHT.englishName}`}/>,\n                tooltip: {\n                    namespace: 'gameContent', translationKey: 'Effect (night)',\n                    replace: {night: '--night effect name--',},//TODO add translation for the night effect name\n                    // replace: {night: translation(Times.NIGHT.englishName).toLowerCase(),},\n                },\n            };\n        }\n\n    }();\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ThemeAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link ThemeAppOption} and get by {@link EveryThemesApp}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Themes;\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super();\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): PossibleRenderReactElement;\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(ThemeAppOption.CALLBACK_TO_GET_ENUMERATION()),);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent;\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),);\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ThemeAppOption> {\n        return ThemeAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends ThemeAppOption = ThemeAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): ThemeAppOption\n    public static getValue(value: PossibleValue,): | ThemeAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './EveryThemesApp.scss';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ThemeAppStates}                                     from './AppStates.types';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport Image                           from './tools/images/Image';\nimport {ThemeAppOption}                from './options/ThemeAppOption';\nimport {Themes}                        from '../core/theme/Themes';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\nimport {CommonOptions}                 from './options/CommonOptions';\n\n/**\n * @reactComponent\n */\nexport default class EveryThemesApp\n    extends AbstractTableApp<AppInterpreterWithTable<Themes, ThemeAppOption>, {}, ThemeAppStates> {\n\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'theme';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every themes\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Themes, ThemeAppOption> {\n        return new class implements AppInterpreterWithTable<Themes, ThemeAppOption> {\n\n            public get iterable(): IterableIterator<Themes> {\n                return Themes[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent(enumerable: Themes,): ReactElement {\n                const {englishName, englishNameInHtml, endlessMarioImagePath,} = enumerable;\n\n                return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n                    <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable)}</div>\n                    <div className=\"images-container col-7\">\n                        {enumerable.renderSingleComponent(true)}\n                        {endlessMarioImagePath != null ? <Image source={endlessMarioImagePath} fallbackName={`${englishName} (Endless mario)`}/> : EMPTY_REACT_ELEMENT}\n                    </div>\n                    <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable)}</div>\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Themes,) {\n                ThemeAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): ThemeAppOption[] {\n                return [\n                    ThemeAppOption.IMAGE,\n                    ThemeAppOption.NAME,\n                    ThemeAppOption.NIGHT_EFFECT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every themes\"/>,\n                };\n            }\n\n\n            public createTableContent(option: ThemeAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: ThemeAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}