{"version":3,"file":"static/js/51.9bf3e1f0.chunk.js","mappings":"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","sources":["core/medal/component/MedalIcon.tsx","app/options/MedalAppOption.tsx","core/medal/Medal.container.ts","core/medal/Medal.loader.ts","core/medal/Medals.ts","core/medal/file/fileCreator.ts","app/MedalApp.tsx"],"sourcesContent":["import type {Medals}          from 'core/medal/Medals'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Image from 'app/tools/images/Image'\n\ninterface MedalIconProperties\n    extends ReactProperties {\n\n    readonly reference: Medals\n\n}\n\n/** @reactComponent */\nexport default function MedalIcon({reference,}: MedalIconProperties,) {\n    return <Image file={reference.imageFile} className=\"medal-icon\"/>\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {Medals}              from 'core/medal/Medals'\nimport type {Names, Ordinals}     from 'app/options/MedalAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {AppOption}           from 'app/options/AppOption'\n\nimport {CommonOptions} from 'app/options/CommonOptions'\nimport MedalIcon       from 'core/medal/component/MedalIcon'\n\nexport abstract class MedalAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Medals> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON = new class MedalAppOption_Icon extends MedalAppOption {\n\n        protected override _createContentOption(enumeration: Medals,) {\n            return <MedalIcon reference={enumeration}/>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.iconHeader\n        }\n\n    }('icon',)\n    public static readonly NAME = new class MedalAppOption_Name extends MedalAppOption {\n\n        protected override _createContentOption(enumeration: Medals,) {\n            return CommonOptions.get.getNameContent(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n    //TODO add the 2 other properties of a Medal (max # of level to upload / # of star to unlock it)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<MedalAppOption, typeof MedalAppOption> = class CompanionEnum_MedalAppOption\n        extends CompanionEnum<MedalAppOption, typeof MedalAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_MedalAppOption\n\n        private constructor() {\n            super(MedalAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Medals,): ReactElement\n\n    public renderContent(enumeration: Medals,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Entity}                                                                             from 'core/entity/Entity'\nimport type {CharacterName}                                                                      from 'core/characterName/CharacterName'\n\nimport {ClassContainingAName} from 'lang/name/ClassContainingAName'\n\nexport class MedalContainer\n    extends ClassContainingAName<string>\n    implements Medal {\n\n    //region -------------------- Fields --------------------\n\n    readonly #imageName\n    readonly #maximumAmountAllowedToUploadALevel\n    readonly #amountOfStarReceivedToUnlockIt\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(associatedReference: | Entity | CharacterName,\n                       imageName: PossibleEnglishName,\n                       maximumAmountAllowedToUploadALevel: PossibleMaximumAmountAllowedToUploadALevel,\n                       amountOfStarReceivedToUnlockIt: PossibleAmountOfStarReceivedToUnlockIt,) {\n        super(associatedReference,)\n        this.#imageName = imageName\n        this.#maximumAmountAllowedToUploadALevel = maximumAmountAllowedToUploadALevel\n        this.#amountOfStarReceivedToUnlockIt = amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get imageName(): PossibleEnglishName {\n        return this.#imageName\n    }\n\n    public get maximumAmountAllowedToUploadALevel(): PossibleMaximumAmountAllowedToUploadALevel {\n        return this.#maximumAmountAllowedToUploadALevel\n    }\n\n    public get amountOfStarReceivedToUnlockIt(): PossibleAmountOfStarReceivedToUnlockIt {\n        return this.#amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import file from 'resources/compiled/Medals (SMM).json'\n\nimport type {Array}     from '@joookiwi/type'\nimport {forEachByArray} from '@joookiwi/collection'\n\nimport type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Loader}                                                                             from 'util/loader/Loader'\n\nimport {isInProduction}      from 'variables'\nimport {MedalContainer}      from 'core/medal/Medal.container'\nimport {Medals}              from 'core/medal/Medals'\n\n/**\n * @dependsOn<{@link Medals}>\n * @indirectlyDependsOn<{@link CharacterNameLoader}>\n * @indirectlyDependsOn<{@link CharacterNames}>\n * @indirectlyDependsOn<{@link Entities}>\n * @indirectlyDependsOn<{@link EntityLoader}>\n * @recursiveReference<{@link Medals}>\n * @singleton\n */\nexport class MedalLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, Medal>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MedalLoader\n\n    private constructor() {}\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, Medal>\n\n    public load(): ReadonlyMap<PossibleEnglishName, Medal> {\n        if (this.#map != null)\n            return this.#map\n\n        const references = new Map<PossibleEnglishName, Medal>()\n        forEachByArray(file as Array<Content>, content =>\n            references.set(content.image, createReference(content,),),)\n\n        if (!isInProduction)\n            console.info(\n                '-------------------- \"medal\" has been loaded --------------------\\n',\n                references,\n                '\\n-------------------- \"medal\" has been loaded --------------------',\n            )\n\n        return this.#map = references\n\n    }\n\n}\n\ninterface Content {\n\n    readonly amountOfAllowedLevelToUpload: PossibleMaximumAmountAllowedToUploadALevel\n    readonly amountOfStarReceived: PossibleAmountOfStarReceivedToUnlockIt\n    readonly image: PossibleEnglishName\n\n}\n\nfunction createReference(content: Content,): Medal {\n    const imageName = content.image\n\n    return new MedalContainer(\n        Medals.Companion.getValueByName(imageName,).associatedReference.reference,\n        imageName,\n        content.amountOfAllowedLevelToUpload,\n        content.amountOfStarReceived,\n    )\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                                         from 'core/ClassWithEnglishName'\nimport type {Medal}                                                                        from 'core/medal/Medal'\nimport type {Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                                                               from 'core/medal/file/MedalImageFile'\nimport type {CompanionEnumByNameSingleton}                                                 from 'util/enumerable/Singleton.types'\nimport type {ClassWithImageFile}                                                           from 'util/file/image/ClassWithImageFile'\n\nimport {MedalLoader}                    from 'core/medal/Medal.loader'\nimport * as FileCreator                 from 'core/medal/file/fileCreator'\nimport {StringContainer}                from 'util/StringContainer'\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\nimport {Entities}                       from 'core/entity/Entities'\nimport {CharacterNames}                 from 'core/characterName/CharacterNames'\n\n/**\n * @todo Change the \"associated reference\" used from the \"Green Koopa Troopa\" to \"Koopa Troopa\"\n * @recursiveReference<{@link MedalLoader}>\n */\nexport class Medals\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImageFile<MedalImageFile> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GOOMBA =         new Medals('Goomba', 0, Entities.GOOMBA,)\n    public static readonly KOOPA_TROOPA =   new Medals('Koopa Troopa', 1, Entities.GREEN_KOOPA_TROOPA,)\n    public static readonly PIRANHA_PLANT =  new Medals('Piranha Plant', 2, Entities.PIRANHA_PLANT,)\n    public static readonly SPINY =          new Medals('Spiny', 3, Entities.SPINY,)\n    public static readonly CHEEP_CHEEP =    new Medals('Cheep Cheep', 4, Entities.CHEEP_CHEEP,)\n    public static readonly BLOOPER =        new Medals('Blooper', 5, Entities.BLOOPER,)\n    public static readonly LAKITU =         new Medals('Lakitu', 6, Entities.LAKITU,)\n    public static readonly BOWSER =         new Medals('Bowser', 7, Entities.BOWSER,)\n    public static readonly TOAD =           new Medals('Toad', 8, CharacterNames.TOAD, )\n    public static readonly PRINCESS_PEACH = new Medals('Princess Peach', 9, CharacterNames.PRINCESS_PEACH,)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static CompanionEnum: CompanionEnumByNameSingleton<Medals, typeof Medals> = class CompanionEnum_Medals\n        extends CompanionEnumByEnglishNameOnly<Medals, typeof Medals> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Medals\n\n        private constructor() {\n            super(Medals,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Medals()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, Medal>\n\n    #reference?: Medal\n    readonly #associatedReference: | Entities | CharacterNames\n\n    readonly #englishName\n    readonly #imageName: PossibleImageName\n    #imageFile?: MedalImageFile\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber, associatedReference: | Entities | CharacterNames,) {\n        super()\n        this.#englishName = new StringContainer(englishName,)\n        this.#imageName = `Honor_Medal_0${imageNumber}^l.bflim`\n        this.#associatedReference = associatedReference\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, Medal> {\n        return this.#REFERENCE_MAP ??= MedalLoader.get.load()\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): Medal {\n        return this.#reference ??= Medals.REFERENCE_MAP.get(this.englishName,)!\n    }\n\n    public get associatedReference(): | Entities | CharacterNames {\n        return this.#associatedReference\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml\n    }\n\n    public get imageFile(): MedalImageFile {\n        return this.#imageFile ??= FileCreator.medalImage(this.#imageName, this.englishName,)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n\n}\n\nexport namespace Medals {\n\n    /** The companion instance of a {@link Medals} */\n    export const Companion = Medals.CompanionEnum.get\n\n    export const ALL = Companion.values.toArray()\n\n}\n\n// @ts-ignore: TODO remove this test variable when the application will be complete\n(window.test ??= {}).Medals = Medals\n","import type {PossibleEnglishName, PossibleImageName} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                         from 'core/medal/file/MedalImageFile'\n\nimport {SimpleImageFile} from 'util/file/image/SimpleImageFile'\n\n/**\n * Create a {@link MedalImageFile} from a {@link name} provided\n *\n * @param name The file name\n * @param commonName The fallback name\n */\nexport function medalImage(name: PossibleImageName, commonName: PossibleEnglishName,): MedalImageFile {\n    return new SimpleImageFile('medal', name, 'tiff', commonName,)\n}\n","import './MedalApp.scss'\n\nimport type {Array}              from '@joookiwi/type'\nimport type {CollectionHolder}   from '@joookiwi/collection'\nimport {GenericCollectionHolder} from '@joookiwi/collection'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}      from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ReactProperties}              from 'util/react/ReactProperties'\n\nimport SubMainContainer         from 'app/_SubMainContainer'\nimport {MedalAppOption}         from 'app/options/MedalAppOption'\nimport Table                    from 'app/tools/table/Table'\nimport List                     from 'app/util/List'\nimport CardList                 from 'app/withInterpreter/CardList'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {Medals}                 from 'core/medal/Medals'\nimport MedalIcon                from 'core/medal/component/MedalIcon'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\nimport ALL = Medals.ALL\n\nclass MedalAppInterpreter\n    implements AppInterpreterWithTable<Medals, MedalAppOption> {\n\n    public get content() {\n        return new GenericCollectionHolder(ALL,)\n    }\n\n    //region -------------------- Card --------------------\n\n    public createCardListDimension() {\n        return {\n            default: 2,\n            small: 4,\n            medium: 5,\n        } as const satisfies DimensionOnList\n    }\n\n    public createCardListContent(enumerable: Medals,) {\n        return <MedalIcon reference={enumerable}/>\n    }\n\n    //endregion -------------------- Card --------------------\n    //region -------------------- Table --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('medal.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): Array<MedalAppOption> {\n        return [MedalAppOption.ICON, MedalAppOption.NAME,]\n    }\n\n\n    public getAdditionalClass(option: MedalAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: Medals, option: MedalAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: MedalAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyMedal (list)',],\n    [ViewDisplays.CARD_LIST, 'everyMedal (card)',],\n    [ViewDisplays.TABLE, 'everyMedal (table)',],\n] as const satisfies Array<ViewAndRouteName>\nconst appInterpreter = new MedalAppInterpreter()\n\n/** @reactComponent */\nexport default function MedalApp({viewDisplay,}: AppWithInterpreterProperties,) {\n    return <SubMainContainer reactKey=\"medal\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay}\n                             titleContent={gameContentTranslation('medal.all',)}>\n        <SubContent viewDisplay={viewDisplay}/>\n    </SubMainContainer>\n}\n\n/** @reactComponent */\nfunction SubContent({viewDisplay,}: AppWithInterpreterProperties,) {\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <MedalList items={appInterpreter.content}/>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <CardList reactKey=\"medal\" interpreter={appInterpreter}/>\n    return <Table id=\"medal-table\" interpreter={appInterpreter}/>\n}\n\n//region -------------------- List --------------------\n\ninterface Medal_ListProperties\n    extends ReactProperties {\n\n    readonly items: CollectionHolder<Medals>\n\n}\n\n/** @reactComponent */\nfunction MedalList({items,}: Medal_ListProperties,) {\n    return <List partialId=\"medal\" items={items} withSeparator>{it =>\n        <div className=\"d-flex align-items-center\">\n            <MedalIcon reference={it}/>\n            <NameComponent id=\"medal-name\" name={it.reference} popoverOrientation=\"top\"/>\n        </div>\n    }</List>\n}\n\n//endregion -------------------- List --------------------\n"],"names":["MedalIcon","_ref","reference","_jsx","Image","file","imageFile","className","_associatedClass","_classPrivateFieldLooseKey","_additionalClasses","MedalAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","additionalClasses","renderContent","enumeration","_createContentOption","renderTableHeader","_createTableHeaderOption","_MedalAppOption","ICON","CommonOptions","get","iconHeader","NAME","getNameContent","nameHeader","CompanionEnum","_instance","_CompanionEnum_MedalAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_imageName","_maximumAmountAllowedToUploadALevel","_amountOfStarReceivedToUnlockIt","MedalContainer","ClassContainingAName","associatedReference","imageName","maximumAmountAllowedToUploadALevel","amountOfStarReceivedToUnlockIt","_map","MedalLoader","load","references","Map","forEachByArray","content","set","image","Medals","Companion","getValueByName","amountOfAllowedLevelToUpload","amountOfStarReceived","createReference","isInProduction","console","info","_REFERENCE_MAP","_reference","_associatedReference","_englishName","_imageFile","englishName","imageNumber","StringContainer","concat","REFERENCE_MAP","_classPrivateFieldLoo3","_classPrivateFieldLoo4","englishNameInHtml","getInHtml","_classPrivateFieldLoo5","_classPrivateFieldLoo6","name","commonName","SimpleImageFile","_Medals","GOOMBA","Entities","KOOPA_TROOPA","GREEN_KOOPA_TROOPA","PIRANHA_PLANT","SPINY","CHEEP_CHEEP","BLOOPER","LAKITU","BOWSER","TOAD","CharacterNames","PRINCESS_PEACH","_CompanionEnum_Medals","CompanionEnum_Medals","CompanionEnumByEnglishNameOnly","_classPrivateFieldLoo7","_classPrivateFieldLoo8","_Medals2","ALL","values","toArray","_window$test","_window","window","test","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","appInterpreter","tableHeadersColor","tableCaption","gameContentTranslation","GenericCollectionHolder","createCardListDimension","default","small","medium","createCardListContent","enumerable","tableOptions","getAdditionalClass","option","createTableContent","createTableHeader","MedalApp","viewDisplay","SubMainContainer","reactKey","titleContent","children","SubContent","_ref2","MedalList","items","CardList","interpreter","Table","id","_ref3","List","partialId","withSeparator","it","_jsxs","NameComponent","popoverOrientation"],"sourceRoot":""}