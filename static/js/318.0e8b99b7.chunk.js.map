{"version":3,"file":"static/js/318.0e8b99b7.chunk.js","mappings":"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","sources":["app/options/component/AbstractAppOptionWithSomething.ts","app/options/component/AppOptionWithContent.component.ts","app/options/component/AppOptionWithTable.component.ts","app/withInterpreter/AbstractCardListApp.tsx","app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/withInterpreter/AbstractTableApp.tsx"],"sourcesContent":["export abstract class AbstractAppOptionWithSomething<T, > {\n\n    //region -------------------- Fields --------------------\n\n    readonly #callbackToRender\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(callbackToRender: () => T,) {\n        this.#callbackToRender = callbackToRender\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _callbackToRender() {\n        return this.#callbackToRender\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {AppOptionWithContent, PossibleRenderReactElement} from './AppOptionWithContent'\nimport type {ReactElement}                                     from '../../../util/react/ReactProperties'\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething'\n\nexport class AppOptionWithContentComponent\n    extends AbstractAppOptionWithSomething<PossibleRenderReactElement>\n    implements AppOptionWithContent {\n\n    public constructor(callbackToRender: () => PossibleRenderReactElement,) {\n        super(callbackToRender,)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        const value = this._callbackToRender()\n        return value instanceof Array ? value : [value]\n    }\n\n}\n","import type {AppOptionWithTable}  from './AppOptionWithTable'\nimport type {SingleHeaderContent} from '../../tools/table/SimpleHeader'\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething'\n\nexport class AppOptionWithTableComponent\n    extends AbstractAppOptionWithSomething<SingleHeaderContent>\n    implements AppOptionWithTable {\n\n    public constructor(callbackToRender: () => SingleHeaderContent,) {\n        super(callbackToRender,)\n    }\n\n    public get renderTableHeader(): SingleHeaderContent {\n        return this._callbackToRender()\n    }\n\n}\n","import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList'\nimport type {AppProperties}                from '../AppProperties.types'\nimport type {AppWithVariableDisplayStates} from '../AppStates.types'\nimport type {ReactElement}                 from '../../util/react/ReactProperties'\nimport type {ValueByApp}                   from '../interpreter/AppInterpreter'\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp'\nimport {ListDimensionCreator}  from './ListDimension.creator'\nimport NameComponent           from '../../lang/name/component/Name.component'\nimport {ViewDisplays}          from './ViewDisplays'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleName, PossiblePlacement} from './HeaderTypes.types'\nimport type {Nullable}                                         from '../../../../util/types'\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][],) {\n            return layout\n        }\n\n    }('head', 'top',)\n    public static readonly FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][],) {\n            return [...layout].reverse()\n        }\n\n    }('foot', 'bottom',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: HeaderTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name\n    readonly #placement\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super()\n        this.#name = name\n        this.#placement = placement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][]\n\n\n    public static getValueByName(value: Nullable<| HeaderTypes | string>,): HeaderTypes {\n        if (value == null)\n            throw new TypeError(`No \"${this.name}\" could be found by a null value.`)\n        if (value instanceof this)\n            return value\n        const valueFound = this.values.find(it => it.simpleName === value)\n        if (valueFound == null)\n            throw new ReferenceError(`No \"${this.name}\" could be found by this value \"${value}\".`)\n        return valueFound\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return HeaderTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<HeaderTypes>,): HeaderTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<HeaderTypes> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder'\nimport type {Nullable, NullOr}    from '../../../../util/types'\nimport type {ReactElement}        from '../../../../util/react/ReactProperties'\nimport type {SingleHeaderContent} from '../SimpleHeader'\n\nimport {assert}              from '../../../../util/utilitiesMethods'\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables'\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>()\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>()\n    static readonly #EMPTY_ARRAY = []\n\n    readonly #tableIdentifier: string\n    readonly #header\n    #parent: NullOr<HeaderHolder>\n    #subHeaders?: readonly HeaderHolder[]\n    #subLevel?: number\n    #width?: number\n    #height?: number\n    #wasRendered\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier\n        this.#parent = null\n        this.#header = header\n        this.#wasRendered = false\n        this.#callbackToRenderHead = callbackToRenderHead\n        this.#callbackToRenderFoot = callbackToRenderFoot\n\n        HeaderHolderContainer.#addInstance(this)\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    static #addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES\n        const tableIdentifier = instance.#tableIdentifier\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!\n\n        array.push(instance)\n    }\n\n    static #getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!\n    }\n\n    static #getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!\n\n        let maximumSubLevel = this.#getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): NullOr<HeaderHolder> {\n        return this.#parent\n    }\n\n    public set parent(value: Nullable<HeaderHolder>,) {\n        this.setParent(value)\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: Nullable<HeaderHolder>,): | this | never\n    public setParent(value: Nullable<HeaderHolder>,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',)\n        this.#parent = value\n        return this\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value)\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value\n        return this\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0\n            let parent: this['parent'] = this.parent\n            while (parent != null) {\n                currentSubLevel++\n                parent = parent.parent\n            }\n            this.#subLevel = currentSubLevel\n        }\n        return this.#subLevel\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.#getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel\n            this.#height = currentHeight\n        }\n        return this.#height\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,)\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1\n        }\n        return this.#width\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value\n        return this\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false)\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot()\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT\n        this.setRendered(true)\n        return this.#callbackToRenderHead(this)\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT\n        this.setRendered(true)\n        return this.#callbackToRenderFoot(this)\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types'\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map((content, i,) => {\n        const firstContent = content[0]\n        return <tr key={`${firstContent} (header #${i + 1})`}>\n            {content.map((innerContent, j,) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${firstContent} (${i + 1}-${j + 1})`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>\n    })}</>\n}\n","import {PureComponent} from 'react'\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types'\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent'\nimport type {ReactElement}                                       from '../../../util/react/ReactProperties'\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader'\n\nimport {EMPTY_ARRAY}         from '../../../util/emptyVariables'\nimport {EMPTY_REACT_ELEMENT} from '../../../util/emptyReactVariables'\nimport {HeaderTypes}         from './header/HeaderTypes'\nimport Image                 from '../images/Image'\nimport Tooltip               from '../../../bootstrap/tooltip/Tooltip'\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders\n    #layout?: Layout\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get type(): HeaderTypes {\n        return this.props.type\n    }\n\n    public get headers(): SingleHeadersContent {\n        return this.props.headers\n    }\n\n    public get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder()\n    }\n\n    public get layout(): Layout {\n        return this.#layout ??= this.props.layout()\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT\n\n        const tooltip = header.tooltip\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT\n\n        return <Tooltip option={({title: tooltip, placement: type.placement,})} elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header)\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered())\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react'\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types'\nimport type {HeaderHolder}               from './header/HeaderHolder'\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types'\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder'\nimport type {ReactComponent}             from '../../../util/react/ReactComponent'\nimport type {ReactElement}               from '../../../util/react/ReactProperties'\nimport type {SingleHeaderContent}        from './SimpleHeader'\nimport type {TableProperties}            from './Table.types'\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container'\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables'\nimport {HeaderTypes}                  from './header/HeaderTypes'\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container'\nimport TableContent                   from './TableContent'\nimport TableHeaders                   from './TableHeaders'\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary'\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info'\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id() {\n        return this.props.id\n    }\n\n    public get caption() {\n        return this.props.caption\n    }\n\n    public get headers() {\n        return this.props.headers\n    }\n\n    public get content() {\n        return this.props.content\n    }\n\n    public get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR\n    }\n\n    public get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR\n    }\n\n\n    #getEveryHeaders(): EveryHeaders\n    #getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    #getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][]\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header)\n            array.push([TableHeaders.getHeaderKey(header), header,])\n            if (subHeaders.length !== 0)\n                array.push(...this.#getEveryHeaders(subHeaders,))\n        }\n        return array\n    }\n\n    #getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]))\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))))\n\n        return everyHeaderHolders\n    }\n\n    #getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = []\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel\n            const height = headerContainer.height\n            const width = headerContainer.width\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key)\n        })\n        return layout\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption\n        const headers = this.headers\n        const isHeaderNull = headers == null\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.#getEveryHeaderHolders(this.#getEveryHeaders()))\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.#getLayout(everyHeadersHolder.get))\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][]\n","import type {AppInterpreterWithTable}      from '../interpreter/AppInterpreterWithTable'\nimport type {AppProperties}                from '../AppProperties.types'\nimport type {AppWithVariableDisplayStates} from '../AppStates.types'\nimport type {ReactElement}                 from '../../util/react/ReactProperties'\nimport type {SingleHeaderContent}          from '../tools/table/SimpleHeader'\nimport type {SingleTableContent}           from '../tools/table/Table.types'\n\nimport {AbstractCardListApp} from './AbstractCardListApp'\nimport Table                 from '../tools/table/Table'\nimport {ViewDisplays}        from './ViewDisplays'\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST, ViewDisplays.TABLE,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractTableApp.#APP_OPTION_INTERPRETER\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[]\n        let index = 1\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    optionInterpreter.tableOptions.map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ])\n            index++\n        }\n        return content\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n\n        return <Table key={`${key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${key}-table`}\n                      content={this.#tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: '#',},\n                          ...(optionInterpreter.tableOptions\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader))\n                              .filter(header => header != null) as SingleHeaderContent[])\n                      ]}/>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["AbstractAppOptionWithSomething","callbackToRender","this","AppOptionWithContentComponent","value","_callbackToRender","Array","AppOptionWithTableComponent","AbstractCardListApp","enumerable","englishName","optionInterpreter","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","Symbol","iterator","HeaderTypes","placement","TypeError","valueFound","values","find","it","simpleName","ReferenceError","Enum","HEAD","layout","FOOT","reverse","HeaderHolderContainer","tableIdentifier","header","callbackToRenderHead","callbackToRenderFoot","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","EMPTY_REACT_ELEMENT","map","has","get","maximumSubLevel","previousHeader","set","instance","Map","TableContent","i","firstContent","innerContent","j","filter","TableHeaders","props","type","headers","everyHeadersHolder","headerAsTh","createSingleHeaderContent","everyHeaderHolders","forEach","headerHolder","resetRendered","getLayout","layoutAsTr","index","layoutAsTh","render","EMPTY_ARRAY","element","Image","source","path","fallbackName","alt","tooltip","Tooltip","option","title","elementId","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","isHeaderNull","DelayedObjectHolderContainer","layoutHolder","tableColor","headersColor","array","getSubHeaders","everyHeaders","subHeader","headerContainer","AbstractTableApp","tableProperties","tableOptions","tableHeader","createTableHeader","callbackToGetEnumerable","createTableContent","flat"],"sourceRoot":""}