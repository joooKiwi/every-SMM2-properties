{"version":3,"file":"static/js/531.ba38050b.chunk.js","mappings":"mVAgBsBA,EAAkB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GA0EpC,SAAAA,IAAsB,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,KAAA,KAEtB,CA0BA,OAnBAC,EAAAA,EAAAA,GAAAP,EAAA,EAAAQ,IAAA,gBAAAC,MAIA,SAAqBC,GACjB,MAAO,CAACC,KAAKC,qBAAqBF,GACtC,GAGA,CAAAF,IAAA,oBAAAC,MAIA,WACI,OAAOE,KAAKE,0BAChB,KAIAb,CAAA,CAtGoC,CAC5Bc,EAAAA,MADUd,EAMKe,KAAmB,aAAAC,IAAAd,EAAAA,EAAAA,GAAAe,EAAAD,GAAA,IAAAE,GAAAd,EAAAA,EAAAA,GAAAa,GAAA,SAAAA,IAAA,OAAAZ,EAAAA,EAAAA,GAAA,KAAAY,GAAAC,EAAAC,MAAA,KAAAC,UAAA,CAQrC,OARqCb,EAAAA,EAAAA,GAAAU,EAAA,EAAAT,IAAA,uBAAAC,MAEtC,SAAwCC,GACpC,OAAOA,EAAYW,qBACvB,GAAC,CAAAb,IAAA,2BAAAC,MAED,WACI,MAAO,CAACD,IAAK,OAAQc,SAASC,EAAAA,EAAAA,GAAe,QACjD,KAACN,CAAA,CARwC,CAAyCjB,IANpEA,EAiBKwB,KAAoB,aAAAC,IAAAvB,EAAAA,EAAAA,GAAAwB,EAAAD,GAAA,IAAAE,GAAAvB,EAAAA,EAAAA,GAAAsB,GAAA,SAAAA,IAAA,OAAArB,EAAAA,EAAAA,GAAA,KAAAqB,GAAAC,EAAAR,MAAA,KAAAC,UAAA,CAQtC,OARsCb,EAAAA,EAAAA,GAAAmB,EAAA,EAAAlB,IAAA,uBAAAC,MAEvC,SAAwCC,GACpC,OAAOkB,EAAAA,EAAcC,IAAIC,eAAepB,EAC5C,GAAC,CAAAF,IAAA,2BAAAC,MAED,WACI,OAAOmB,EAAAA,EAAcC,IAAIE,UAC7B,KAACL,CAAA,CARyC,CAAuC1B,IAjBnEA,EA4BKgC,kBAAoB,aAAAC,IAAA/B,EAAAA,EAAAA,GAAAgC,EAAAD,GAAA,IAAAE,GAAA/B,EAAAA,EAAAA,GAAA8B,GAAA,SAAAA,IAAA,OAAA7B,EAAAA,EAAAA,GAAA,KAAA6B,GAAAC,EAAAhB,MAAA,KAAAC,UAAA,CAetC,OAfsCb,EAAAA,EAAAA,GAAA2B,EAAA,EAAA1B,IAAA,uBAAAC,MAEvC,SAAA2B,GAAoE,IAA3BC,EAASD,EAATC,UACrC,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CAACC,UAAWH,GAC5C,GAAC,CAAA7B,IAAA,2BAAAC,MAED,WACI,MAAO,CACHD,IAAK,kBACLc,SAASmB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,CAAEC,EAAAA,EAAOC,OAAOxB,uBAAsB,GAAQyB,EAAAA,EAAMC,MAAM1B,yBACtH2B,SAASC,EAAAA,EAAAA,IAAuB,6BAA8B,CAC1DC,OAAO3B,EAAAA,EAAAA,GAAe,SACtB4B,OAAQC,EAAAA,EAAiBC,QAAQxB,IAAIe,EAAAA,EAAOC,OAAOR,WAAYiB,gBAG3E,KAACpB,CAAA,CAfyC,CAAkDlC,IA5B9EA,EAkDKuD,eAAaC,GAAAC,EAAAA,EAAAA,GAAA,YAAAC,EAAA,SAAAC,IAAAzD,EAAAA,EAAAA,GAAA0D,EAAAD,GAAA,IAAAE,GAAAzD,EAAAA,EAAAA,GAAAwD,GAOhC,SAAAA,IAAsB,OAAAvD,EAAAA,EAAAA,GAAA,KAAAuD,GAAAC,EAAAvD,KAAA,KACZN,EACV,CAMA,OANCO,EAAAA,EAAAA,GAAAqD,EAAA,OAAApD,IAAA,MAAAqB,IAED,WAAyB,IAADiC,EAAAC,EACpB,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAOrD,KAAI6C,IAAAA,UAAA,IAAAO,EAAAA,EAAAD,EAAAN,GAAe,IAAII,CAClC,KAEAA,CAAA,CAfgC,CACxBL,EAAAA,eAAaU,OAAAC,eAAAR,EAAAF,EAAA,CAAAW,UAAA,EAAA1D,WAAA,IAAAiD,G,qCCtDRU,EAAY,SAAAC,IAAAnE,EAAAA,EAAAA,GAAAkE,EAAAC,GAAA,IAAAlE,GAAAC,EAAAA,EAAAA,GAAAgE,GAAA,SAAAA,IAAA,OAAA/D,EAAAA,EAAAA,GAAA,KAAA+D,GAAAjE,EAAAgB,MAAA,KAAAC,UAAA,CAuF7B,OAvF6Bb,EAAAA,EAAAA,GAAA6D,EAAA,EAAA5D,IAAA,aAAAC,MAK7B,WACI,MAAO,WACX,GAAC,CAAAD,IAAA,6BAAAC,MAGD,WACI,MAAO,uBACX,GAAC,CAAAD,IAAA,2BAAAC,MAED,WACI,MAAO,uBACX,GAAC,CAAAD,IAAA,wBAAAC,MAED,WACI,MAAO,wBACX,GAAC,CAAAD,IAAA,sBAAAC,MAGD,WACI,OAAOwC,EAAAA,EAAAA,IAAuB,iBAClC,GAAC,CAAAzC,IAAA,8BAAAC,MAED,WACI,IAAM6D,EAAQ3D,KAEd,OAAO,wBAAA4D,KAAAlE,EAAAA,EAAAA,GAAA,KAAAkE,GA8BH,KAEgBC,kBAAoB,OAAM,KAC1BC,WAAa,UAAS,KACtBC,cAAezB,EAAAA,EAAAA,IAAuB,iBAAiB,CAkBvE,OAlBuE1C,EAAAA,EAAAA,GAAAgE,EAAA,EAAA/D,IAAA,UAAAqB,IAhCvE,WACI,OAAO8C,EAAAA,EAAAA,IAAWC,EAAAA,EAAWrB,cAAc1B,IAAIgD,OAAQP,EAAMQ,MAAMC,MACvE,GAEA,CAAAvE,IAAA,sBAAAC,MAEA,WACI,MAAO,CACHuE,MAAO,EACPC,OAAQ,EACRC,MAAO,KAEf,GAGA,CAAA1E,IAAA,0BAAAC,MAEA,WACI,MAAO,MACX,GAAC,CAAAD,IAAA,wBAAAC,MAED,SAA6B0E,GACzB,OAAO7C,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAY0C,GAAE,aAAAC,OAAeF,EAAWG,mBAAoB3C,SAC7EwC,EAAW9D,uBAEpB,GAAC,CAAAb,IAAA,eAAAqB,IASD,WACI,MAAO,CACH7B,EAAmBe,KACnBf,EAAmBwB,KACnBxB,EAAmBgC,kBAE3B,GAAC,CAAAxB,IAAA,wBAAAC,MAED,SAA6B8E,EAAqBC,GAC9C,OAAOA,EAAOC,cAAcF,EAChC,GAAC,CAAA/E,IAAA,oBAAAC,MAED,SAAyB+E,GACrB,OAAOA,EAAOE,mBAClB,KAEAnB,CAAA,CApDG,GAuDX,KAEAH,CAAA,CAvF6B,CACrBuB,EAAAA,E,4FCUG,SAASpD,EAAqBqD,GACzC,MAAO,cAAeA,GAChBtD,EAAAA,EAAAA,KAACuD,GAAsBC,EAAAA,EAAAA,GAAA,GAAKF,KAC5BtD,EAAAA,EAAAA,KAACyD,GAAkBD,EAAAA,EAAAA,GAAA,GAAKF,GAClC,CAEA,SAASC,EAAsB5F,GAA6G,IAAhE+F,EAAc/F,EAAzDuC,UAAYyD,8BACzC,OAAyB,MAAlBD,EAAyB,MAAO1D,EAAAA,EAAAA,KAAA4D,EAAAA,SAAA,CAAAvD,UAAGM,EAAAA,EAAAA,IAAuB,qCAADoC,OAAsCW,KAC1G,CAEA,SAASD,EAAkB3D,GAA8D,IAAD+D,EAAnDC,EAAMhE,EAAdiE,MAAQD,OACjC,OAAiC,QAAjCD,EAAa,OAANC,QAAM,IAANA,OAAM,EAANA,EAAQE,0BAAkB,IAAAH,EAAAA,EAAI,IACzC,C","sources":["app/options/GameStyleAppOption.tsx","app/GameStyleApp.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/GameStyleAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {GameStyles}          from 'core/gameStyle/GameStyles'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport {Themes}                 from 'core/theme/Themes'\nimport {Times}                  from 'core/time/Times'\nimport {ProjectLanguages}       from 'lang/ProjectLanguages'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport abstract class GameStyleAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<GameStyles> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =             new class GameStyleAppOption_Images extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return enumeration.renderSingleComponent\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly NAME =              new class GameStyleAppOption_Name extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_DESERT_WIND = new class GameStyleAppOption_NightDesertWind extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,) {\n            return <NightEffectComponent gameStyle={reference}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'nightDesertWind',\n                element: <div className=\"night-desert-wind-effect-container\">{Themes.DESERT.renderSingleComponent(false)}{Times.NIGHT.renderSingleComponent}</div>,\n                tooltip: gameContentTranslation('Wind effect (night desert)', {\n                    night: unfinishedText('night'),//TODO add night reference\n                    desert: ProjectLanguages.current.get(Themes.DESERT.reference)!.toLowerCase(),\n                },),\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<GameStyleAppOption, typeof GameStyleAppOption> = class CompanionEnum_GameStyleAppOption\n        extends CompanionEnum<GameStyleAppOption, typeof GameStyleAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_GameStyleAppOption\n\n        private constructor() {\n            super(GameStyleAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_GameStyleAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: GameStyles,): ReactElement\n\n    public renderContent(enumeration: GameStyles,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './GameStyleApp.scss'\n\nimport type {GameStyleProperties}                                  from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}                              from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}                                    from 'route/EveryRoutes.types'\n\nimport {GameStyleAppOption}     from 'app/options/GameStyleAppOption'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame}             from 'util/utilitiesMethods'\n\nexport default class GameStyleApp\n    extends AbstractTableApp<AppInterpreterWithTable<GameStyles, GameStyleAppOption>, GameStyleProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'gameStyle'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyGameStyle (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyGameStyle (card)'\n    }\n\n    protected override _createTableRouteName(): PossibleRouteName {\n        return 'everyGameStyle (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('game style.all')\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class GameStyleAppInterpreter implements AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n\n            public get content() {\n                return filterGame(GameStyles.CompanionEnum.get.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: null,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: GameStyles,) {\n                return <div className=\"card-body\" id={`gameStyle-${enumerable.englishNameInHtml}`}>\n                    {enumerable.renderSingleComponent}\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n            public readonly tableColor = 'primary' satisfies BootstrapThemeColor\n            public readonly tableCaption = gameContentTranslation('game style.all') satisfies ReactElementOrString\n\n            public get tableOptions(): readonly GameStyleAppOption[] {\n                return [\n                    GameStyleAppOption.ICON,\n                    GameStyleAppOption.NAME,\n                    GameStyleAppOption.NIGHT_DESERT_WIND,\n                ]\n            }\n\n            public createNewTableContent(content: GameStyles, option: GameStyleAppOption,) {\n                return option.renderContent(content,)\n            }\n\n            public createTableHeader(option: GameStyleAppOption,) {\n                return option.renderTableHeader()\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["GameStyleAppOption","_ref","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","enumeration","this","_createContentOption","_createTableHeaderOption","Enum","ICON","_GameStyleAppOption","GameStyleAppOption_Images","_super2","apply","arguments","renderSingleComponent","element","unfinishedText","NAME","_GameStyleAppOption2","GameStyleAppOption_Name","_super3","CommonOptions","get","getNameContent","nameHeader","NIGHT_DESERT_WIND","_GameStyleAppOption3","GameStyleAppOption_NightDesertWind","_super4","_ref2","reference","_jsx","NightEffectComponent","gameStyle","_jsxs","className","children","Themes","DESERT","Times","NIGHT","tooltip","gameContentTranslation","night","desert","ProjectLanguages","current","toLowerCase","CompanionEnum","_instance","_classPrivateFieldLooseKey","_class","_CompanionEnum","CompanionEnum_GameStyleAppOption","_super5","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","GameStyleApp","_AbstractTableApp","$this","GameStyleAppInterpreter","tableHeadersColor","tableColor","tableCaption","filterGame","GameStyles","values","props","games","small","medium","large","enumerable","id","concat","englishNameInHtml","content","option","renderContent","renderTableHeader","AbstractTableApp","properties","NightEffectByGameStyle","_objectSpread","NightEffectByTheme","translationKey","nightDesertWindTranslationKey","_Fragment","_effect$createNewComp","effect","theme","createNewComponent"],"sourceRoot":""}