{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/GameStyleAppOption.tsx","app/EveryGameStylesApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","subHeaders","getGameHeader","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","className","renderSingleComponent","isInCourseTheme","BASE_PATH","isInWorldTheme","NightEffectComponent","YesOrNoResultTextComponent","Symbol","iterator","GameStyleAppOption","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","getValueOn","getValuesOn","values","IMAGE","ContentTranslationComponent","NAME","getNameContent","nameHeader","GAME","boolean","gameHeaderWithAllGames","NIGHT_DESERT_WIND","gameStyle","Themes","DESERT","Times","NIGHT","tooltip","namespace","replace","night","desert","ProjectLanguages","currentLanguage","toLowerCase","EveryGameStylesApp","props","state","typeDisplayed","ViewDisplays","TABLE","GameContentTranslationComponent","GameStyles","enumerable","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/17.36d587ff.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nimport type {ClassInAnySuperMarioMakerGame}             from '../../core/game/ClassInAnySuperMarioMakerGame';\nimport type {ClassWithEnglishName}                      from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}                        from '../../core/ClassWithReference';\nimport type {Enum}                                      from '../../util/enum/Enum';\nimport type {Name}                                      from '../../lang/name/Name';\nimport type {NameTrait}                                 from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory}                    from '../../lang/name/NameTraitFromACategory';\nimport type {ReactElement}                              from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent} from '../tools/table/SimpleHeader';\nimport type {Themes}                                    from '../../core/theme/Themes';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {BASE_PATH}                     from '../../variables';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n    #gameHeader?: SingleHeaderContent;\n    #gameHeaderWithAllGames?: SingleHeaderContent;\n    #gameHeaderWithMainGames?: SingleHeaderContent;\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get gameHeader(): SingleHeaderContent {\n        return this.#gameHeader ??= {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n    }\n\n    public getGameHeader(...subHeaders: SingleHeadersContent): SingleHeaderContent {\n        return {\n            key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n            subHeaders: subHeaders,\n        };\n    }\n\n    /**@deprecated Relocate the games in the name content */\n    public get gameHeaderWithAllGames(): SingleHeaderContent {\n        return this.#gameHeaderWithAllGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n            {key: 'isInSuperMarioMakerFor3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    public get gameHeaderWithMainGames(): SingleHeaderContent {\n        return this.#gameHeaderWithMainGames ??= this.getGameHeader(\n            {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},//TODO create a animated image for both games (SMM1 & SMM3DS)\n            {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n        );\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enumerable} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference;\n        const isInSMM1 = reference.isInSuperMarioMaker1;\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS;\n        const isInSMM2 = reference.isInSuperMarioMaker2;\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : EMPTY_REACT_ELEMENT}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference;\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/> : EMPTY_REACT_ELEMENT}\n            {reference.isInWorldTheme ? <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/> : EMPTY_REACT_ELEMENT}\n        </div>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\ntype EnumerationWithInSuperMarioMakerGameReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>;\n","import {lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './GameStyleAppOption.types';\nimport type {GameStyles}                                                                                                                                                            from '../../core/gameStyle/GameStyles';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {ProjectLanguages}              from '../../lang/ProjectLanguages';\nimport {Themes}                        from '../../core/theme/Themes';\nimport {Times}                         from '../../core/time/Times';\n\n//region -------------------- dynamic imports --------------------\n\nconst NightEffectComponent =       lazy(() => import( '../../core/nightEffect/NightEffect.component'));\nconst YesOrNoResultTextComponent = lazy(() => import( '../tools/text/YesOrNoResultTextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class GameStyleAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =             new class GameStyleAppOption_Images extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,): PossibleRenderReactElement {\n            return enumeration.renderSingleComponent;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,};\n        }\n\n    }();\n    public static readonly NAME =              new class GameStyleAppOption_Name extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,): PossibleRenderReactElement {\n            return CommonOptions.get.getNameContent(enumeration);\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }();\n    public static readonly GAME =              new class GameStyleAppOption_Game extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,): PossibleRenderReactElement {\n            return [\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker1}/>,\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMakerFor3DS}/>,\n                <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker2}/>,\n            ];\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.gameHeaderWithAllGames;\n        }\n\n    }();\n    public static readonly NIGHT_DESERT_WIND = new class GameStyleAppOption_NightDesertWind extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,): PossibleRenderReactElement {\n                return <NightEffectComponent gameStyle={reference}/>;\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'nightDesertWind',\n                element: <div className=\"night-desert-wind-effect-container\">{Themes.DESERT.renderSingleComponent(false)}{Times.NIGHT.renderSingleComponent}</div>,\n                tooltip: {\n                    namespace: 'gameContent', translationKey: 'Wind effect (night desert)',\n                    replace: {\n                        night: '--night--',//TODO add night reference\n                        desert: ProjectLanguages.currentLanguage.get(Themes.DESERT.reference)!.toLowerCase(),\n                    },\n                },\n            };\n        }\n\n    }();\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: GameStyleAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EveryEntitiesApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => GameStyles;\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super();\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: GameStyles,): PossibleRenderReactElement;\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(GameStyleAppOption.CALLBACK_TO_GET_ENUMERATION()),);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent;\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),);\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<GameStyleAppOption> {\n        return GameStyleAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends GameStyleAppOption = GameStyleAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): GameStyleAppOption\n    public static getValue(value: PossibleValue,): | GameStyleAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './EveryGameStylesApp.scss';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {GameStyleAppStates}                                 from './AppStates.types';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {GameStyleAppOption}            from './options/GameStyleAppOption';\nimport {GameStyles}                    from '../core/gameStyle/GameStyles';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\n/**\n * @reactComponent\n */\nexport default class EveryGameStylesApp\n    extends AbstractTableApp<AppInterpreterWithTable<GameStyles, GameStyleAppOption>, {}, GameStyleAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'gameStyle';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every game styles\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n        return new class implements AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n\n            public get iterable(): IterableIterator<GameStyles> {\n                return GameStyles[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent(enumerable: GameStyles,): ReactElement {\n                return <div className=\"card-body\" id={`gameStyle-${enumerable.englishNameInHtml}`}>\n                    {enumerable.renderSingleComponent}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => GameStyles,) {\n                GameStyleAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): readonly GameStyleAppOption[] {\n                return [\n                    GameStyleAppOption.IMAGE,\n                    GameStyleAppOption.NAME,\n                    GameStyleAppOption.GAME,\n                    GameStyleAppOption.NIGHT_DESERT_WIND,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every game styles\"/>,\n                };\n            }\n\n\n            public createTableContent(option: GameStyleAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: GameStyleAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}