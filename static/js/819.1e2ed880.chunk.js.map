{"version":3,"file":"static/js/819.1e2ed880.chunk.js","mappings":"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","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","export class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction} from 'variables'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #map?: Map<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            const map = AbstractSoundPlayer.map\n            if (map.has(key))\n                throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n            map.set(key, this,)\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public static get map(): Map<string, SoundPlayer> {\n        return this.#map ??= new Map()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\nimport type {CompanionEnumByNameSingleton} from 'util/enumerable/Singleton.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<SoundStates, typeof SoundStates> = class CompanionEnum_SoundStates\n        extends CompanionEnumByEnglishNameOnly<SoundStates, typeof SoundStates> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundStates\n\n        private constructor() {\n            super(SoundStates,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundStates()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n    //endregion -------------------- Methods --------------------\n\n}","import {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false, true,),)\n                this.onPlayingEvent?.(this, event,)\n            }\n            audio.onpause = event => {\n                this.setState(new HistoryState(PAUSED, false, true,),)\n                this.onPauseEvent?.(this, event,)\n            }\n            audio.onplay = event => {\n                this.setState(new HistoryState(PLAYING, true, true,),)\n                this.onPlayEvent?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false, true,),)\n                this.onEndEvent?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {CompanionEnumByNameSingleton}                        from 'util/enumerable/Singleton.types'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<Validators, typeof Validators> = class CompanionEnum_Validators\n        extends CompanionEnumByEnglishNameOnly<Validators, typeof Validators> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Validators\n\n        private constructor() {\n            super(Validators,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Validators()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n        protected override readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {}\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.CompanionEnum.get.defaultValue\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.delete(audio.source.key)\n    }\n\n    public override render(): ReactJSXElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","state","isLoading","isFromEventDirectly","_classCallCheck","Object","defineProperty","_state","writable","value","_isLoading","_isFromEventDirectly","_classPrivateFieldLooseBase","this","_createClass","key","get","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","_playElement","_pauseElement","_stopElement","_loadingElement","_exceptionElement","_map","_classPrivateFieldLooseKey","AbstractSoundPlayer","isInProduction","map","has","ReferenceError","concat","set","_classPrivateFieldLoo","_classPrivateFieldLoo2","Map","DEFAULT_DOES_LOOP","_englishName","SoundStates","_ref","_inherits","_super","_createSuper","englishName","_this","call","_assertThisInitialized","Enum","STANDBY","_SoundStates","SoundStates_Standby","_super2","apply","arguments","_ref2","PAUSED","_SoundStates2","SoundStates_Paused","_super3","_ref3","PLAYING","_SoundStates3","SoundStates_Playing","_super4","_ref4","LOADING","_SoundStates4","SoundStates_Loading","_super5","_ref5","EXCEPTION","_SoundStates5","SoundStates_Exception","_super6","_ref6","CompanionEnum","_instance","_class","_CompanionEnumByEngli","CompanionEnum_SoundStates","_super7","CompanionEnumByEnglishNameOnly","_history","_last","_current","SoundStateHistory","currentState","current","setLast","push","TypeError","last","_source","_title","_doesLoop","_audio","_isDurationValid","_onBeforePlay","_onAfterPlay","_onBeforePause","_onAfterPause","_onBeforeStop","_onAfterStop","_onBeforeStateChanged","_onAfterStateChanged","_onPlayEvent","_onPlayingEvent","_onPauseEvent","_onEndEvent","SimpleSoundPlayer","_AbstractSoundPlayer","source","title","doesLoop","length","undefined","setState","_this2","audio","Audio","fullName","onplaying","event","_this2$onPlayingEvent","history","stop","pause","onPlayingEvent","onpause","_this2$onPauseEvent","onPauseEvent","onplay","_this2$onPlayEvent","onPlayEvent","onended","_this2$onEndEvent","onEndEvent","loop","paused","isAudioExistant","Number","isFinite","duration","_classPrivateFieldLoo3","onBeforePlay","_classPrivateFieldLoo4","onAfterPlay","_classPrivateFieldLoo5","onBeforePause","_classPrivateFieldLoo6","onAfterPause","_classPrivateFieldLoo7","onBeforeStop","_classPrivateFieldLoo8","onAfterStop","_classPrivateFieldLoo9","onBeforeStateChanged","_classPrivateFieldLoo10","onAfterStateChanged","_classPrivateFieldLoo11","_classPrivateFieldLoo12","_classPrivateFieldLoo13","_classPrivateFieldLoo14","_this$onBeforePlay","_this$onAfterPlay","_this3","play","then","isDurationValid","catch","_this$onBeforePause","_this$onAfterPause","isPaused","_this$onBeforeStop","_this$onAfterStop","isStandby","currentTime","_this$onBeforeStateCh","_this$onAfterStateCha","equals","SoundPlayerFactory","Validators","callback","ALL_YES","_Validators","SoundFounds_AllYes","ALL_NO","_Validators2","SoundFounds_AllNo","ON_PLAY_ONLY","_Validators3","SoundFounds_OnPlayOnly","ON_CREATE_ONLY","_Validators4","SoundFounds_OnCreateOnly","CompanionEnum_Validators","_DEFAULT","_PLAY_CLASSES","_PAUSE_CLASSES","_STOP_CLASSES","_LOADING_CLASSES","_EXCEPTION_CLASSES","_isSourceFoundCallback","SimpleSoundComponent","props","isSourceRetrieved","file","_this$props$validator","validator","defaultValue","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","delete","elementsHolder","_jsx","className","onClick","role","componentState","_jsxs","children","getElementsFrom","Component"],"sourceRoot":""}