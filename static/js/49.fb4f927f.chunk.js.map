{"version":3,"file":"static/js/49.fb4f927f.chunk.js","mappings":"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","sources":["app/GameReferenceApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './GameReferenceApp.scss'\n\nimport {Fragment} from 'react'\n\nimport type {PossibleEnglishName_Games} from 'core/soundEffect/SoundEffects.types'\nimport type {GameContentTranslationKey} from 'lang/components/TranslationProperty'\n\nimport AbstractApp              from 'app/AbstractApp'\nimport {Games}                  from 'core/game/Games'\nimport {GameReferences}         from 'core/gameReference/GameReferences'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\n/** @reactComponent */\nexport default class GameReferenceApp\n    extends AbstractApp {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * Every {@link GameReferences} that will do a return of line after its rendering.\n     */\n    public static RETURN_OF_LINES = [GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n        GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n        GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n        GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n        GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n        GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n        GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n        GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n        GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n        GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n        GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n        GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n        GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n        GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n        GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n    ] as const\n\n    static #otherGameReferences?: readonly GameReferences[]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & initialisation methods --------------------\n\n    private static get __otherGameReferences(): readonly GameReferences[] {\n        if (this.#otherGameReferences == null) {\n            const alreadyIncludedNames = [\n                ...Games.CompanionEnum.get.values.map(game => game.englishName,),\n                ...GameStyles.CompanionEnum.get.values.map(game => game.englishName,),\n                ...SoundEffects.soundEffect_games.map(game => game.englishName,) as PossibleEnglishName_Games[],\n            ]\n            this.#otherGameReferences = GameReferences.CompanionEnum.get.values.filter(it => !alreadyIncludedNames.includes(it.englishName as never,),).toArray()\n        }\n        return this.#otherGameReferences\n    }\n\n    //endregion -------------------- Getter & initialisation methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly (| Games | GameStyles | SoundEffects)[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly GameReferences[], returnOfLine: readonly GameReferences[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly PossibleGameReference[], returnOfLine?: readonly GameReferences[],) {\n        return <div key={`names container - ${groupId}`} id={`${groupId}-names-container`} className=\"names-container\">\n            <h2 key={`names title - ${groupId}`} id={`${groupId}-names-title`} className=\"col-12 names-title\">{gameContentTranslation(title)}</h2>\n            <div key={`name (container) - ${groupId}`} id={`${groupId}-name-container`} className=\"container-fluid name-container\">{\n                enumReferences.map(gameReference => [gameReference, GameReferences.CompanionEnum.get.getValueByName(gameReference.englishName,),] as const).map(([enumReference, gameReference,]) =>\n                    <Fragment key={`single name container - ${gameReference.englishName}`}>\n                        <div id={`${gameReference.englishNameInHtml}-name-container`} className={`${enumReferences.length > 5 ? 'col-3' : 'col'} single-name-container`}>\n                            <div className=\"single-name-sub-container\">\n                                {enumReference.renderSingleComponent}\n                                <NameComponent id={`${groupId}-name`} name={gameReference.reference}/>\n                            </div>\n                        </div>\n                        {returnOfLine?.includes(gameReference) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : null}\n                    </Fragment>)\n            }</div>\n        </div>\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    protected override _mainContent() {\n        return <div id=\"gameReference-container\" className=\"container-fluid main-container\">\n            <h2 id=\"main-names-title\" className=\"col-12 names-title\">{gameContentTranslation('game reference.plural')}</h2>\n            {this._getContainer('game', 'game.plural', Games.CompanionEnum.get.values.toArray(),)}\n            {this._getContainer('gameStyle', 'game style.plural', GameStyles.CompanionEnum.get.values.toArray(),)}\n            {this._getContainer('soundEffect', 'sound effect.plural', SoundEffects.soundEffect_games,)}\n            {this._getContainer('otherGameReferences', 'game reference.others', GameReferenceApp.__otherGameReferences, GameReferenceApp.RETURN_OF_LINES,)}\n        </div>\n    }\n\n}\n\ntype PossibleGameReference = (Games | GameStyles | SoundEffects | GameReferences) & { renderSingleComponent?: ReactElement }\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_otherGameReferences","_classPrivateFieldLooseKey","GameReferenceApp","_AbstractApp","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","groupId","title","enumReferences","returnOfLine","_jsxs","id","concat","className","children","_jsx","gameContentTranslation","map","gameReference","GameReferences","CompanionEnum","get","getValueByName","englishName","_ref","_ref2","_slicedToArray","enumReference","Fragment","englishNameInHtml","length","renderSingleComponent","NameComponent","name","reference","includes","this","_getContainer","Games","values","toArray","GameStyles","SoundEffects","soundEffect_games","__otherGameReferences","RETURN_OF_LINES","_classPrivateFieldLooseBase","alreadyIncludedNames","_toConsumableArray","game","filter","it","AbstractApp","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG_COUNTRY","KIRBY_ADVENTURE","KID_ICARIUS_UPRISING","MEGA_MAN","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_AWAKENING","POKEMON_Y","PIKMIN_3","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","MONSTER_MANOR","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","SHAUN_THE_SHEEP","Object","defineProperty","writable","Popover","option","triggers","on","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","_objectWithoutProperties","_excluded","_objectSpread","TextComponent","content","_currentLanguageTextContent","NamePopoverComponent","props","_this","call","_assertThisInitialized","ProjectLanguages","current","state","element","listId","setDoesDisplayPopover","popoverOrientation","setState","createOption","contentTranslation","show","hide","Component","document","getElementById","html","trigger","placement","NameListComponent","_step","doesDisplayPopover","languagesToDisplay","originalLanguages","isCurrent","nameMap","toNameMap","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","language","push","languageTranslation","space","unionTrait","err","e","f","hidden","_useState","useState","_useState2","english","StringContainer","getInHtml"],"sourceRoot":""}