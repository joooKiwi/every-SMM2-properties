{"version":3,"file":"static/js/460.44c24ba0.chunk.js","mappings":"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","sources":["app/GameReferenceApp.tsx","core/soundEffect/SoundEffectImage.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './GameReferenceApp.scss'\n\nimport type {Array}             from '@joookiwi/type'\nimport {hasByArray, mapByArray} from '@joookiwi/collection'\nimport {Fragment}               from 'react'\n\nimport type {PossibleEnglishName_Games} from 'core/soundEffect/SoundEffects.types'\n\nimport {Games}                  from 'core/game/Games'\nimport GameImage                from 'core/game/component/GameImage'\nimport {GameReferences}         from 'core/gameReference/GameReferences'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport GameStyleImage           from 'core/gameStyle/component/GameStyleImage'\nimport SoundEffectImage         from 'core/soundEffect/SoundEffectImage'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\nimport Companion =         GameReferences.Companion\nimport ALL_GAMES =         Games.ALL\nimport ALL_GAME_STYLES =   GameStyles.ALL\nimport soundEffect_games = SoundEffects.soundEffect_games\n\n/** Every {@link GameReferences} that will do a return of line after its rendering */\nconst RETURN_OF_LINES = [\n    GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n    GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n    GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n    GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n    GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n    GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n    GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n    GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n    GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n    GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n    GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n    GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n    GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n    GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n    GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n] as const\n\nconst otherGameReferences = (() => {\n    const alreadyIncludedNames = [\n        ...ALL_GAMES.map(it => it.englishName,),\n        ...ALL_GAME_STYLES.map(it => it.englishName,),\n        ...soundEffect_games.map(it => it.englishName,) as Array<PossibleEnglishName_Games>,\n    ]\n    return Companion.values.filter(it => !hasByArray(alreadyIncludedNames, it.englishName as never,),)\n})()\n\n/** @reactComponent */\nexport default function GameReferenceApp() {\n    return <div id=\"gameReference-container\" className=\"container-fluid main-container\">\n        <h2 id=\"main-names-title\" className=\"names-title\">{gameContentTranslation('game reference.plural',)}</h2>\n        <div id=\"game-names-container\" className=\"names-container\">\n            <h3 id=\"game-names-title\" className=\"names-title\">{gameContentTranslation('game.plural',)}</h3>\n            <div id=\"game-name-container\" className=\"container-fluid name-container\">\n                {mapByArray(ALL_GAMES, it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <GameImage reference={it}/>\n                            <NameComponent id=\"game-name\" name={Companion.getValue(it.name,).reference}/>\n                        </div>\n                    </div>,)}\n            </div>\n        </div>\n        <div id=\"gameStyle-names-container\" className=\"names-container\">\n            <h3 id=\"gameStyle-names-title\" className=\"names-title\">{gameContentTranslation('game style.plural',)}</h3>\n            <div id=\"gameStyle-name-container\" className=\"container-fluid name-container\">\n                {mapByArray(ALL_GAME_STYLES, it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <GameStyleImage reference={it}/>\n                            <NameComponent id=\"gameStyle-name\" name={Companion.getValue(it.name,).reference}/>\n                        </div>\n                    </div>,)}\n            </div>\n        </div>\n        <div id=\"soundEffect-names-container\" className=\"names-container\">\n            <h3 id=\"soundEffect-names-title\" className=\"col-12 names-title\">{gameContentTranslation('sound effect.plural',)}</h3>\n            <div id=\"soundEffect-name-container\" className=\"container-fluid name-container\">{\n                mapByArray(soundEffect_games, it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <SoundEffectImage reference={it}/>\n                            <NameComponent id=\"soundEffect-name\" name={Companion.getValueByName(it.englishName,).reference}/>\n                        </div>\n                    </div>,)\n            }</div>\n        </div>\n        <div id=\"otherGameReferences-names-container\" className=\"names-container\">\n            <h3 id=\"otherGameReferences-name-title\" className=\"names-title\">{gameContentTranslation('game reference.others',)}</h3>\n            <div id=\"otherGameReferences-name-container\" className=\"container-fluid name-container\">\n                {otherGameReferences.map(it =>\n                    <Fragment key={`single name container - ${it.englishName}`}>\n                        <div id={`${it.englishNameInHtml}-name-container`} className=\"col-3 single-name-container\">\n                            <div className=\"single-name-sub-container\">\n                                <NameComponent id=\"otherGameReferences-name\" name={it.reference}/>\n                            </div>\n                        </div>\n                        {hasByArray(RETURN_OF_LINES, it,) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : null}\n                    </Fragment>,)}\n            </div>\n        </div>\n    </div>\n}\n","import type {SoundEffects}         from 'core/soundEffect/SoundEffects'\nimport type {SoundEffectImageFile} from 'core/soundEffect/file/SoundEffectImageFile'\nimport type {ReactProperties}      from 'util/react/ReactProperties'\n\nimport Image from 'app/tools/images/Image'\n\ninterface SoundEffectImageProperties\n    extends ReactProperties {\n\n    readonly reference: SoundEffects\n\n    /** The file associated or {@link SoundEffects.SMM2ImageFile} by default */\n    readonly file?: SoundEffectImageFile\n\n}\n\nexport default function SoundEffectImage({reference, file,}: SoundEffectImageProperties,) {\n    return <Image file={file ?? reference.SMM2ImageFile} className={`soundEffect-image ${reference.englishNameInHtml}-image`}/>\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {NullableString, UndefinedOr} from '@joookiwi/type'\nimport type {Dispatch, SetStateAction}    from 'react'\nimport Popover                            from 'bootstrap/js/dist/popover'\nimport {Component}                        from 'react'\n\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\nimport Companion = ProjectLanguages.Companion\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = Companion.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): UndefinedOr<PossiblePopoverOrientation> {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PossiblePopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {MutableArray} from '@joookiwi/type'\nimport {filterNotByArray}  from '@joookiwi/collection'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\nimport {forEach}             from 'util/utilitiesMethods'\n\nimport Companion = ProjectLanguages.Companion\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = filterNotByArray(name.originalLanguages, it => it.isCurrent,)\n    const content: MutableArray<NonNullReactElement> = []\n    const currentLanguage = Companion.current\n    forEach(name.toNameMap(), (language, value,) => {\n        if (languagesToDisplay.has(language,))\n            content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n                <TextComponent\n                    content={`${languageTranslation(language.englishName)}${currentLanguage.space}${currentLanguage.unionTrait}${currentLanguage.space}`}\n                    className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n                <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n            </div>,)\n    },)\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\nimport getInHtml = StringContainer.getInHtml\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see CompanionEnum_ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const elementId = `${id}-${getInHtml(name.english,)}`\n    const listId = `${elementId}-list`\n\n    return <div id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["Companion","GameReferences","ALL_GAMES","Games","ALL","ALL_GAME_STYLES","GameStyles","soundEffect_games","SoundEffects","RETURN_OF_LINES","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG_COUNTRY","KIRBY_ADVENTURE","KID_ICARIUS_UPRISING","MEGA_MAN","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_AWAKENING","POKEMON_Y","PIKMIN_3","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","MONSTER_MANOR","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","SHAUN_THE_SHEEP","otherGameReferences","alreadyIncludedNames","map","it","englishName","values","filter","hasByArray","GameReferenceApp","_jsxs","id","className","children","_jsx","gameContentTranslation","mapByArray","concat","englishNameInHtml","GameImage","reference","NameComponent","name","getValue","GameStyleImage","SoundEffectImage","getValueByName","Fragment","_ref","file","Image","SMM2ImageFile","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","get","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","content","ProjectLanguages","_currentLanguageTextContent","_classPrivateFieldLooseKey","NamePopoverComponent","Component","constructor","props","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","current","state","element","listId","setDoesDisplayPopover","popoverOrientation","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","filterNotByArray","originalLanguages","isCurrent","currentLanguage","forEach","toNameMap","language","has","push","languageTranslation","space","unionTrait","hidden","getInHtml","StringContainer","useState","english"],"sourceRoot":""}