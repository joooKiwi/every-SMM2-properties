{"version":3,"file":"static/js/80.3c9b334e.chunk.js","mappings":"6VAsBA,oEAqIoBA,OAAOC,SApIpB,IAAeC,EAAtB,0CAkFI,aAAuB,IAAD,wBAClB,eADkB,+HAErB,CApFL,mDA8FI,WAA4D,IAAD,WACvD,4BAAOC,KAAP,2BAAsC,IAAIC,EAAAA,GAA8B,kBAAM,EAAKC,qBAAqBH,EAAeI,8BAA/C,GAC3E,GAhGL,yBAkGI,WACI,OAAOH,KAAKI,uBAAuBC,aACtC,GApGL,gCA2GI,WAAwD,IAAD,WACnD,4BAAOL,KAAP,2BAAoC,IAAIM,EAAAA,GAA4B,kBAAM,EAAKC,0BAAX,GACvE,GA7GL,6BA+GI,WACI,OAAOP,KAAKQ,qBAAqBC,iBACpC,GAjHL,mBAwHI,WACI,OAAOV,CACV,IA1HL,uBA4HI,SAAuBW,GACnB,OAAOC,EAAAA,GAAAA,WAAgBX,KAAMU,EAChC,GA9HL,kBAgII,WACI,OAAOC,EAAAA,GAAAA,YAAiBX,KAC3B,GAlIL,6BAoII,mFACI,uBAAOA,KAAKY,OAAZ,QADJ,kDApIJ,GACYD,EAAAA,IADUZ,EAKKc,MAAyB,4JAE5C,SAAwCC,GACpC,IAAOC,EAA0BD,EAA1BC,sBAEP,MAAO,CACHD,EAAYE,uBAAsB,IAClC,SAACC,EAAA,QAAD,CAAOC,KAAMH,IAEpB,GAT2C,sCAW5C,WACI,MAAO,CACHI,IAAK,QAASC,SAASC,EAAAA,EAAAA,IAAmB,SAC1CC,WAAY,CACR,CAACH,IAAK,cAAeC,QAAS,MAC9B,CAACD,IAAK,sBAAuBC,QAAS,sBAGjD,KAnB2C,EAAG,CAAoCrB,IALrEA,EA2BKwB,KAAyB,4JAE5C,SAAwCT,GACpC,OAAO,iBAAKU,UAAU,4BAAf,WACH,iBAAKA,UAAU,SAAf,UACKC,EAAAA,EAAAA,IAAAA,eAAiCX,GACjCW,EAAAA,EAAAA,IAAAA,eAAiCX,OAEtC,gBAAKU,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,gBAAkCX,OAEjE,GAV2C,sCAY5C,WACI,OAAOW,EAAAA,EAAAA,IAAAA,UACV,KAd2C,EAAG,CAAkC1B,IA3BnEA,EA4CK2B,aAAyB,4JAE5C,YAAgF,IAA3BC,EAA0B,EAAtCC,UAAYD,YACjD,OAAO,SAAC,IAAD,CAAsBE,MAAOF,GACvC,GAJ2C,sCAM5C,WACI,MAAO,CACHR,IAAK,SAAUC,SAAS,iBAAKI,UAAU,+DAAf,UACnBM,EAAAA,EAAAA,OAAAA,uBAAoC,GACpCC,EAAAA,EAAAA,MAAAA,yBAELC,SAASC,EAAAA,EAAAA,IAAuB,iBAAkB,CAACC,MAAO,0BAEjE,KAd2C,EAAG,CAA0CnC,IA5C3EA,EA2EJI,iCAAAA,E,+ECqEEN,OAAOC,SA5JpB,IAAeqC,EAAtB,0CAyEI,WAAoBC,EAAoBC,GAAgC,IAAD,wBACnE,eADmE,+HAEnE,wBAAaD,GACb,wBAAkBC,EAHiD,CAItE,CA7EL,iCAkFI,WACI,OAAO,OAAArC,KAAP,KACH,GApFL,qBAsFI,WACI,OAAO,OAAAA,KAAP,KACH,GAxFL,wBA+FI,WACI,MAAO,YACV,GAjGL,oBAmGI,WACI,MAAO,SACV,GArGL,2BA8GI,WACI,MAAO,aACV,GAhHL,uBAkHI,WACI,MAAO,SACV,GApHL,0BA4HI,WACI,MAAO,YACV,GA9HL,sBAgII,WACI,MAAO,SACV,GAlIL,mBAgJI,WACI,OAAOmC,CACV,IAlJL,6BAyII,SAA6BzB,GACzB,OAAO4B,EAAAA,EAAAA,IAAe5B,EAAOV,KAChC,GA3IL,sBAoJI,SAAuBU,GACnB,OAAOC,EAAAA,GAAAA,WAAgBX,KAAMU,EAChC,GAtJL,kBAwJI,WACI,OAAOC,EAAAA,GAAAA,YAAiBX,KAC3B,GA1JL,6BA4JI,mFACI,uBAAOA,KAAKY,OAAZ,QADJ,kDA5JJ,GACYD,EAAAA,IADUwB,EAMKI,IAAS,8IAE5B,WACI,OAAOT,EAAAA,EAAOjC,OAAOC,WACxB,GAJ2B,wBAO5B,WACI,OAAO,IACV,KAT2B,EAAG,CAA8BqC,GAAjC,CAW9B,MAAO,cAjBSA,EAkBKK,OAAS,8IAE5B,WACI,OAAOV,EAAAA,EAAAA,aAAoBjC,OAAOC,WACrC,GAJ2B,oBAO5B,WACI,MAAO,SACV,GAT2B,2BAW5B,WACI,OAAO,IACV,GAb2B,sBAe5B,WACI,MAAO,QACV,KAjB2B,EAAG,CAAiCqC,GAApC,CAmB9B,SAAU,eArCMA,EAsCKM,MAAS,8IAE5B,WACI,OAAOX,EAAAA,EAAAA,YAAmBjC,OAAOC,WACpC,GAJ2B,oBAO5B,WACI,MAAO,SACV,GAT2B,uBAW5B,WACI,MAAO,QACV,GAb2B,0BAe5B,WACI,OAAO,IACV,KAjB2B,EAAG,CAAiCqC,GAApC,CAmB9B,QAAS,c,cChDf,kBACqBO,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,IAAAA,OAAAA,gBAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,UAAAA,EAAAA,WAAAA,IAAAA,CAAAA,C,OAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,OAAAA,IAWjB,WAA+B,IAAD,IAC1B,4BAAO1C,KAAP,2BAAsBmC,EAAWG,eAAetC,KAAK2C,MAAMP,KAC9D,G,wBAKD,WACI,MAAO,OACV,2CAGD,WACI,MAAM,GAAN,OAAUpC,KAAKoC,KAAKC,UAApB,UACH,yCAED,WACI,MAAM,GAAN,OAAUrC,KAAKoC,KAAKC,UAApB,UACH,sCAED,WACI,MAAM,GAAN,OAAUrC,KAAKoC,KAAKC,UAApB,WACH,oCAGD,WACI,OAAOJ,EAAAA,EAAAA,IAAuB,gBACjC,oCAED,WACI,IAAOG,EAAwBpC,KAAxBoC,KAAMQ,EAAkB5C,KAAlB4C,cAEb,OAAO,iBAAKC,GAAG,6BAA6BrB,UAAU,4CAA/C,WACH,SAACsB,EAAA,EAAD,CAAYC,UAAU,WAAWV,UAAWO,EAAcI,aAAaZ,EAAKa,cAAeC,MAAOd,EAAKe,SAAvG,UAAkH9B,EAAAA,EAAAA,IAAmB,UACrI,iBAAKwB,GAAG,4CAA4CrB,UAAU,yBAA9D,WACI,SAACsB,EAAA,EAAD,CAAYC,UAAU,cAAcV,UAAWO,EAAcI,aAAaZ,EAAKgB,iBAAkBF,MAAOd,EAAKiB,YAA7G,UACI,SAACpC,EAAA,QAAD,CAAO4B,GAAG,2BAA2B3B,KAAMoC,EAAAA,EAAyB9B,UAAU,0BAElF,SAACsB,EAAA,EAAD,CAAYC,UAAU,aAAaV,UAAWO,EAAcI,aAAaZ,EAAKmB,gBAAiBL,MAAOd,EAAKoB,WAA3G,UACI,SAACvC,EAAA,QAAD,CAAO4B,GAAG,0BAA0B3B,KAAMuC,EAAAA,EAAwBjC,UAAU,8BAI3F,4CAED,WACI,IAAMkC,EAAQ1D,KAEd,OAAO,iFAEH,WACI,OAAO0D,EAAMtB,KAAKtC,QACrB,GAJE,iCAQH,WACI,MAAO,CACH6D,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,WAAY,EAEnB,GAfE,qCAoBH,WACI,MAAO,MACV,GAtBE,mCAwBH,SAA6BC,GACzB,IAAOC,EAA6CD,EAA7CC,kBAAmBjD,EAA0BgD,EAA1BhD,sBAE1B,OAAO,iBAAKS,UAAU,YAAYqB,GAAE,gBAAWmB,GAAxC,WACH,gBAAKxC,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,eAAiCsC,MACzD,iBAAKvC,UAAU,yBAAf,UACKuC,EAAW/C,uBAAsB,IAClC,SAACC,EAAA,QAAD,CAAOC,KAAMH,QAEjB,gBAAKS,UAAU,QAAf,SAAwBC,EAAAA,EAAAA,IAAAA,gBAAkCsC,OAEjE,GAnCE,mCAwCH,SAAmCrD,GAC/BX,EAAeI,4BAA8BO,CAChD,GA1CE,wBA4CH,WACI,MAAO,CACHX,EAAec,MACfd,EAAewB,KACfxB,EAAe2B,aAEtB,GAlDE,2BAoDH,WACI,MAAO,CACHuC,SAAShC,EAAAA,EAAAA,IAAuB,iBAEvC,GAxDE,gCA2DH,SAA0BiC,GACtB,OAAOA,EAAO7D,aACjB,GA7DE,+BA+DH,SAAyB6D,GACrB,OAAOA,EAAOzD,iBACjB,KAjEE,KAsEV,K,EAjIgBiC,CACTyB,EAAAA,E,wFCCG,SAASrB,EAAT,GAA0I,IAArHC,EAAoH,EAApHA,UAAWV,EAAyG,EAAzGA,UAAWa,EAA8F,EAA9FA,MAAOkB,EAAuF,EAAvFA,SACvDvB,EAAE,UAAME,EAAN,WACJvB,EAAS,kBAAc0B,EAAd,gBAEb,OAAoB,MAAbb,GACD,mBAAQD,KAAK,SAASS,GAAIA,EAAIrB,UAAWA,EAAW6C,UAAQ,EAA5D,SAA8DD,KAC9D,SAAC,KAAD,CAAMhC,KAAK,SAASS,GAAIA,EAAIrB,UAAWA,EAAW8C,IAAIC,EAAAA,EAAAA,GAAMlC,GAA5D,SAAyE+B,GAClF,C,wFCNc,SAASI,EAAqBC,GACzC,MAAO,cAAeA,GAChB,SAACC,GAAD,UAA4BD,KAC5B,SAACE,GAAD,UAAwBF,GACjC,CAED,SAASC,EAAT,GAA4I,IAAhEE,EAA+D,EAA1GC,UAAYC,8BACzC,OAAyB,MAAlBF,EAAyB,MAAO,+BAAG3C,EAAAA,EAAAA,IAAuB,qCAAD,OAAsC2C,KACzG,CAED,SAASD,EAAT,GAAyF,IAAD,EAAnDI,EAAmD,EAA3DlD,MAAQkD,OACjC,wBAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAQC,0BAAf,QAAqC,IACxC,C","sources":["app/options/ThemeAppOption.tsx","app/property/ThemeTypes.ts","app/ThemeApp.tsx","app/tools/button/LinkButton.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals}                                  from 'app/options/ThemeAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\n\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport Image                                        from 'app/tools/images/Image'\nimport NightEffectComponent                         from 'core/nightEffect/NightEffect.component'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            const {endlessMarioImageFile,} = enumeration\n\n            return [\n                enumeration.renderSingleComponent(false),\n                <Image file={endlessMarioImageFile}/>,\n            ]\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: [\n                    {key: 'image-empty', element: null,},\n                    {key: 'image-endless-mario', element: '--Endless Mario--',},//TODO add Endless Mario\n                ],\n            }\n        }\n\n    }()\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <div className=\"nameWithContent-container\">\n                <div className=\"col-10\">\n                    {CommonOptions.get.getGameContent(enumeration)}\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,) {\n            return <NightEffectComponent theme={courseTheme}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <div className=\"nightDesert-header-image-container position-relative mx-auto\">\n                    {Themes.DESERT.renderSingleComponent(false)}\n                    {Times.NIGHT.renderSingleComponent}\n                </div>,\n                tooltip: gameContentTranslation('Effect (night)', {night: '--night effect name--',},)//TODO add translation for the night effect name\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ThemeAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link ThemeAppOption} and get by {@link ThemeApp}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Themes\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): PossibleRenderReactElement\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(() => this._createContentOption(ThemeAppOption.CALLBACK_TO_GET_ENUMERATION()),)\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),)\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return ThemeAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<ThemeAppOption>,): ThemeAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<ThemeAppOption> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<ThemeAppOption> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName, PossibleType} from 'app/property/ThemeTypes.types'\nimport type {BootstrapColor}                                   from 'bootstrap/Bootstrap.types'\nimport type {ClassWithType}                                    from 'core/ClassWithType'\nimport type {Nullable, NullOr}                                 from 'util/types/nullable'\n\nimport {Themes}         from 'core/theme/Themes'\nimport {getValueByType} from 'util/utilitiesMethods'\n\nexport abstract class ThemeTypes\n    extends Enum<Ordinals, Names>\n    implements ClassWithType<PossibleType> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL =    new class ThemeTypes_All extends ThemeTypes {\n\n        public override get iterator(): IterableIterator<Themes> {\n            return Themes[Symbol.iterator]()\n        }\n\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }('all', 'everyTheme',)\n    public static readonly COURSE = new class ThemeTypes_Course extends ThemeTypes {\n\n        public override get iterator(): IterableIterator<Themes> {\n            return Themes.courseThemes[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get courseRouteName() {\n            return null\n        }\n\n        public override get worldColor(): PossibleColor {\n            return 'danger'\n        }\n\n    }('course', 'courseTheme',)\n    public static readonly WORLD =  new class ThemesTypes_World extends ThemeTypes {\n\n        public override get iterator(): IterableIterator<Themes> {\n            return Themes.worldThemes[Symbol.iterator]()\n        }\n\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get courseColor(): PossibleColor {\n            return 'danger'\n        }\n\n        public override get worldRouteName() {\n            return null\n        }\n\n    }('world', 'worldTheme',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ThemeTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #routeName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(type: PossibleType, routeName: PossibleRouteName,) {\n        super()\n        this.#type = type\n        this.#routeName = routeName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get type(): PossibleType {\n        return this.#type\n    }\n\n    public get routeName(): PossibleRouteName {\n        return this.#routeName\n    }\n\n    public abstract get iterator(): IterableIterator<Themes>\n\n    //region -------------------- Link button methods --------------------\n\n    /** The route name for the path with every {@link Themes} */\n    public get allRouteName(): NullOr<Extract<PossibleRouteName, 'everyTheme'>> {\n        return 'everyTheme'\n    }\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    /**\n     * The route name for the path with only the course {@link Themes}\n     *\n     * @see Themes.courseThemes\n     * @see Themes.courseThemes_smm1\n     */\n    public get courseRouteName(): NullOr<Extract<PossibleRouteName, 'courseTheme'>> {\n        return 'courseTheme'\n    }\n\n    public get courseColor(): PossibleColor {\n        return 'success'\n    }\n\n\n    /**\n     * The route name for the path with only the world {@link Themes}\n     *\n     * @see Themes.worldThemes\n     */\n    public get worldRouteName(): NullOr<Extract<PossibleRouteName, 'worldTheme'>> {\n        return 'worldTheme'\n    }\n\n    public get worldColor(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Link button methods --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public static getValueByType(value: Nullable<| ThemeTypes | string>,): ThemeTypes {\n        return getValueByType(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return ThemeTypes\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<ThemeTypes>,): ThemeTypes {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<ThemeTypes> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<ThemeTypes> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning' | 'danger'>\n","import './ThemeApp.scss'\n\nimport type {ThemeAppProperties}                                   from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {Themes}                                               from 'core/theme/Themes'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {CommonOptions}                                   from 'app/options/CommonOptions'\nimport {ThemeAppOption}                                  from 'app/options/ThemeAppOption'\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport LinkButton                                        from 'app/tools/button/LinkButton'\nimport Image                                             from 'app/tools/images/Image'\nimport {ThemeTypes}                                      from 'app/property/ThemeTypes'\nimport {AbstractTableApp}                                from 'app/withInterpreter/AbstractTableApp'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class ThemeApp\n    extends AbstractTableApp<AppInterpreterWithTable<Themes, ThemeAppOption>, ThemeAppProperties> {\n\n    //region -------------------- Fields --------------------\n\n    #type?: ThemeTypes\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n\n    public get type(): ThemeTypes {\n        return this.#type ??= ThemeTypes.getValueByType(this.props.type)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'theme'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return `${this.type.routeName} (list)`\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return `${this.type.routeName} (card)`\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return `${this.type.routeName} (table)`\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('theme.all.all')\n    }\n\n    protected override _createAsideContent(): ReactElementOrString {\n        const {type, typeDisplayed,} = this\n\n        return <div id=\"theme-linkButton-container\" className=\"btn-group btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"allTheme\" routeName={typeDisplayed.getRoutePath(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"theme-linkButton-courseAndWorld-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"courseTheme\" routeName={typeDisplayed.getRoutePath(type.courseRouteName)} color={type.courseColor}>\n                    <Image id=\"courseTheme-button-image\" file={COURSE_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n                </LinkButton>\n                <LinkButton partialId=\"worldTheme\" routeName={typeDisplayed.getRoutePath(type.worldRouteName)} color={type.worldColor}>\n                    <Image id=\"worldTheme-button-image\" file={WORLD_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n                </LinkButton>\n            </div>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Themes, ThemeAppOption> {\n        const $this = this\n\n        return new class implements AppInterpreterWithTable<Themes, ThemeAppOption> {\n\n            public get iterable() {\n                return $this.type.iterator\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: Themes,) {\n                const {englishNameInHtml, endlessMarioImageFile,} = enumerable\n\n                return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n                    <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable)}</div>\n                    <div className=\"images-container col-7\">\n                        {enumerable.renderSingleComponent(true)}\n                        <Image file={endlessMarioImageFile}/>\n                    </div>\n                    <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable)}</div>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Themes,) {\n                ThemeAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): ThemeAppOption[] {\n                return [\n                    ThemeAppOption.IMAGE,\n                    ThemeAppOption.NAME,\n                    ThemeAppOption.NIGHT_EFFECT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('theme.all.all')\n                }\n            }\n\n\n            public createTableContent(option: ThemeAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: ThemeAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {BootstrapColor}                                                     from 'bootstrap/Bootstrap.types'\nimport type {EveryPossibleRouteNames}                                            from 'routes/everyRoutes.types'\nimport type {ReactElementOrString, ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\nimport type {Nullable}                                                           from 'util/types/nullable'\n\nimport {route} from 'routes/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<EveryPossibleRouteNames>\n\n    color: BootstrapColor\n\n}\n\n/**\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`,\n        className = `btn btn-${color} link-button`\n\n    return routeName == null\n        ? <button type=\"button\" id={id} className={className} disabled>{children}</button>\n        : <Link type=\"button\" id={id} className={className} to={route(routeName)}>{children}</Link>\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the route name is <b>null</b>)\n *\n * @param partialId The partial ID (with \"-button\") added after-end\n * @param routeName The route name\n * @param color The Bootstrap color\n * @param value The value to display\n */\nexport function createLinkButton(partialId: string, [routeName, color,]: readonly [Nullable<EveryPossibleRouteNames>, BootstrapColor,], value: ReactElementOrString,) {\n    return <LinkButton partialId={partialId} routeName={routeName} color={color}>{value}</LinkButton>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["Symbol","iterator","ThemeAppOption","this","AppOptionWithContentComponent","_createContentOption","CALLBACK_TO_GET_ENUMERATION","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","values","IMAGE","enumeration","endlessMarioImageFile","renderSingleComponent","Image","file","key","element","contentTranslation","subHeaders","NAME","className","CommonOptions","NIGHT_EFFECT","courseTheme","reference","theme","Themes","Times","tooltip","gameContentTranslation","night","ThemeTypes","type","routeName","getValueByType","ALL","COURSE","WORLD","ThemeApp","props","typeDisplayed","id","LinkButton","partialId","getRoutePath","allRouteName","color","allColor","courseRouteName","courseColor","COURSE_THEME_IMAGE_FILE","worldRouteName","worldColor","WORLD_THEME_IMAGE_FILE","$this","small","medium","large","extraLarge","enumerable","englishNameInHtml","caption","option","AbstractTableApp","children","disabled","to","route","NightEffectComponent","properties","NightEffectByGameStyle","NightEffectByTheme","translationKey","gameStyle","nightDesertWindTranslationKey","effect","createNewComponent"],"sourceRoot":""}