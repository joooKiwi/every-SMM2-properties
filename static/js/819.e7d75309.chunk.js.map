{"version":3,"file":"static/js/819.e7d75309.chunk.js","mappings":"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","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: unknown,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","export class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction} from 'variables'\n\nexport abstract class AbstractSoundPlayer<const out KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #map?: Map<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            const map = AbstractSoundPlayer.map\n            if (map.has(key))\n                throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n            map.set(key, this,)\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public static get map(): Map<string, SoundPlayer> {\n        return this.#map ??= new Map()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\nimport type {CompanionEnumByNameSingleton} from 'util/enumerable/Singleton.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<SoundStates, typeof SoundStates> = class CompanionEnum_SoundStates\n        extends CompanionEnumByEnglishNameOnly<SoundStates, typeof SoundStates> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundStates\n\n        private constructor() {\n            super(SoundStates,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundStates()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n    //endregion -------------------- Methods --------------------\n\n}","import {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.last = this.current\n        this._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<const SOURCE extends SoundFile = SoundFile, const TITLE extends string = string, const DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio != null)\n            return this.#audio\n\n        const audio = new Audio(this.source.fullName,)\n        audio.onplaying = event => {\n            switch (this.history.current.state) {\n                case STANDBY:\n                    return this.stop()\n                case PAUSED:\n                    return this.pause()\n            }\n            this.setState(new HistoryState(PLAYING, false, true,),)\n            this.onPlayingEvent?.(this, event,)\n        }\n        audio.onpause = event => {\n            if (this.history.current.state !== STANDBY)\n                this.setState(new HistoryState(PAUSED, false, true,),)\n            this.onPauseEvent?.(this, event,)\n        }\n        audio.onplay = event => {\n            this.setState(new HistoryState(PLAYING, true, true,),)\n            this.onPlayEvent?.(this, event,)\n        }\n        audio.onended = event => {\n            this.setState(new HistoryState(STANDBY, false, true,),)\n            this.onEndEvent?.(this, event,)\n        }\n        audio.title = this.title\n        audio.loop = this.doesLoop\n        return this.#audio = audio\n    }\n\n    /** The audio element has been initialized (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements have not been initialized, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitializedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid != null)\n            return this.#isDurationValid\n\n        if (!this.isAudioExistant)\n            return false\n        return this.#isDurationValid = Number.isFinite(this.audio.duration)\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current\n        const isLoading = currentState.isLoading\n        const isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current\n        const isLoading = currentState.isLoading\n        const isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history\n        const currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<const SOURCE extends SoundFile = SoundFile, const TITLE extends string = string, const DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {CompanionEnumByNameSingleton}                        from 'util/enumerable/Singleton.types'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<Validators, typeof Validators> = class CompanionEnum_Validators\n        extends CompanionEnumByEnglishNameOnly<Validators, typeof Validators> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Validators\n\n        private constructor() {\n            super(Validators,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Validators()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n        protected override readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {}\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<const FILE extends SoundFile = SoundFile, const TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio\n            const isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.CompanionEnum.get.defaultValue\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initializing it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio != null)\n            return this.#audio\n\n        const source = this.file\n        return this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n            .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n            .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.delete(audio.source.key)\n    }\n\n    public override render(): ReactJSXElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","constructor","state","isLoading","isFromEventDirectly","Object","defineProperty","_state","writable","value","_isLoading","_isFromEventDirectly","_classPrivateFieldLooseBase","this","equals","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","_playElement","_pauseElement","_stopElement","_loadingElement","_exceptionElement","_map","_classPrivateFieldLooseKey","AbstractSoundPlayer","key","isInProduction","map","has","ReferenceError","concat","set","_classPrivateFieldLoo","_classPrivateFieldLoo2","Map","DEFAULT_DOES_LOOP","_englishName","SoundStates","Enum","englishName","super","englishNameInHtml","STANDBY","getElementsFrom","_ref","PAUSED","_ref2","PLAYING","_ref3","LOADING","_ref4","EXCEPTION","_ref5","CompanionEnum","_instance","_class","CompanionEnum_SoundStates","CompanionEnumByEnglishNameOnly","get","_history","_last","_current","SoundStateHistory","currentState","current","history","last","push","setCurrent","TypeError","setLast","_source","_title","_doesLoop","_audio","_isDurationValid","_onBeforePlay","_onAfterPlay","_onBeforePause","_onAfterPause","_onBeforeStop","_onAfterStop","_onBeforeStateChanged","_onAfterStateChanged","_onPlayEvent","_onPlayingEvent","_onPauseEvent","_onEndEvent","SimpleSoundPlayer","source","title","doesLoop","arguments","length","undefined","setState","audio","Audio","fullName","onplaying","event","_this$onPlayingEvent","stop","pause","onPlayingEvent","call","onpause","_this$onPauseEvent","onPauseEvent","onplay","_this$onPlayEvent","onPlayEvent","onended","_this$onEndEvent","onEndEvent","loop","isAudioExistant","isPaused","paused","isDurationValid","Number","isFinite","duration","onBeforePlay","_classPrivateFieldLoo3","setOnBeforePlay","onAfterPlay","_classPrivateFieldLoo4","setOnAfterPlay","onBeforePause","_classPrivateFieldLoo5","setOnBeforePause","onAfterPause","_classPrivateFieldLoo6","setOnAfterPause","onBeforeStop","_classPrivateFieldLoo7","setOnBeforeStop","onAfterStop","_classPrivateFieldLoo8","setOnAfterStop","onBeforeStateChanged","_classPrivateFieldLoo9","setOnBeforeStateChanged","onAfterStateChanged","_classPrivateFieldLoo10","setOnAfterStateChanged","_classPrivateFieldLoo11","setOnPlayingEvent","_classPrivateFieldLoo12","setOnPlayEvent","_classPrivateFieldLoo13","setOnPauseEvent","_classPrivateFieldLoo14","setOnEndEvent","play","_this$onBeforePlay","_this$onAfterPlay","then","catch","_this$onBeforePause","_this$onAfterPause","_this$onBeforeStop","_this$onAfterStop","isStandby","currentTime","_this$onBeforeStateCh","_this$onAfterStateCha","SoundPlayerFactory","Validators","onCreate","callback","onPlay","ALL_YES","ALL_NO","ON_PLAY_ONLY","ON_CREATE_ONLY","CompanionEnum_Validators","_DEFAULT","_PLAY_CLASSES","_PAUSE_CLASSES","_STOP_CLASSES","_LOADING_CLASSES","_EXCEPTION_CLASSES","_isSourceFoundCallback","SimpleSoundComponent","Component","props","isSourceRetrieved","file","validator","_this$props$validator","defaultValue","componentState","createSimple","soundPlayer","componentDidMount","componentWillUnmount","delete","render","elementsHolder","_jsx","className","onClick","role","_jsxs","children"],"sourceRoot":""}