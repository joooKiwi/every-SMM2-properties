{"version":3,"file":"static/js/85.7d594a20.chunk.js","mappings":"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","sources":["app/options/CommonOptions.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/tools/table/Table.tsx","app/withInterpreter/AbstractTableApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {Enumerable} from '@joookiwi/enumerable/dist/types'\n\nimport type {SimpleImageHeader, SimpleReactHeader, SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {ClassWithEnglishName}                                      from 'core/ClassWithEnglishName'\nimport type {ClassWithReference}                                        from 'core/ClassWithReference'\nimport type {ClassInAnySuperMarioMakerGame}                             from 'core/game/ClassInAnySuperMarioMakerGame'\nimport type {Themes}                                                    from 'core/theme/Themes'\nimport type {Name}                                                      from 'lang/name/Name'\nimport type {NameTrait}                                                 from 'lang/name/NameTrait'\nimport type {NameTraitFromACategory}                                    from 'lang/name/NameTraitFromACategory'\nimport type {ImageFile}                                                 from 'util/file/image/ImageFile'\n\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport Image                                             from 'app/tools/images/Image'\nimport {Games}                                           from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {EmptyStringName}                                 from 'lang/name/EmptyStringName'\nimport NameComponent                                     from 'lang/name/component/Name.component'\n\n/** @singleton */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions\n\n    private constructor() {}\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SimpleReactHeader\n    #smm1And3DSGameHeader?: SimpleImageHeader\n    #smm2GameHeader?: SimpleImageHeader\n    #gameHeader?: SimpleReactHeader\n    #categoryHeader?: SimpleReactHeader\n\n    #limitHeader?: SimpleReactHeader\n    #completePlayLimitHeader?: SimpleReactHeader\n    #completeEditorLimitHeader?: SimpleReactHeader\n    #completeEditorLimitInSmm1And3dsHeader?: SingleHeaderContent\n    #completeEditorLimitInSmm2Header?: SingleHeaderContent\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SimpleReactHeader {\n        return this.#nameHeader ??= {key: 'name', element: contentTranslation('Name'),}\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>\n    }\n\n\n    public get categoryHeader(): SimpleReactHeader {\n        return this.#categoryHeader ??= {key: 'category', element: gameContentTranslation('Category'),}\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | ImageFile | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer\n        if (name === EmptyStringName.get)\n            return null\n\n        const imagePath_or_name = imagePath_or_nameCallback()\n        const englishName = name.english\n        const startingKey = `category name (${englishName})`\n        if ('toNameMap' in imagePath_or_name)\n            return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>\n        return <Image key={`${startingKey} image`} file={imagePath_or_name}/>\n    }\n\n\n    public get gameHeader(): SimpleReactHeader {\n        return this.#gameHeader ??= {key: 'game', element: gameContentTranslation('game.singular'),}\n    }\n\n    public get smm1And3dsGameHeader(): SimpleImageHeader {\n        return this.#smm1And3DSGameHeader ??= {key: 'isInSuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,}//TODO create a animated image for both games (SMM1 & SMM3DS)\n    }\n    public get smm2GameHeader(): SimpleImageHeader {\n        return this.#smm2GameHeader ??= {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,}\n    }\n\n    /**\n     * Get a {@link HTMLDivElement} containing each images (if true)\n     * of the {@link Games} contained in the {@link Enum} {@link ClassWithReference reference}.\n     *\n     * @param enumeration The enumerable to retrieve the {@link Games} properties & {@link ClassWithEnglishName english name}.\n     */\n    public getGameContent(enumeration: EnumerationWithInSuperMarioMakerGameReference,): ReactElement {\n        const reference = enumeration.reference\n        const isInSMM1 = reference.isInSuperMarioMaker1\n        const isInSMM3DS = reference.isInSuperMarioMakerFor3DS\n        const isInSMM2 = reference.isInSuperMarioMaker2\n\n        return <div key={`${enumeration.englishName} (game content images)`} id={`${enumeration.englishNameInHtml}-gameContentImages-container`} className=\"gameContentImages-container\">\n            {isInSMM1 ? Games.SUPER_MARIO_MAKER_1.renderSingleComponent : null}\n            {isInSMM3DS ? Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.renderSingleComponent : null}\n            {isInSMM2 ? Games.SUPER_MARIO_MAKER_2.renderSingleComponent : null}\n        </div>\n    }\n\n\n    public getThemeContent(enumeration: Themes,): ReactElement {\n        const reference = enumeration.reference\n\n        return <div key={`${enumeration.englishName} (theme content images)`} id={`${enumeration.englishNameInHtml}-themeContentImages-container`} className=\"themeContentImages-container\">\n            {reference.isInCourseTheme ? <Image file={COURSE_THEME_IMAGE_FILE}/> : null}\n            {reference.isInWorldTheme ? <Image file={WORLD_THEME_IMAGE_FILE}/> : null}\n        </div>\n    }\n\n\n    public get limitHeader(): SimpleReactHeader {\n        return this.#limitHeader ??= {key: 'limit', element: gameContentTranslation('limit.singular'),}\n    }\n\n    public get completePlayLimitHeader(): SimpleReactHeader {\n        return this.#completePlayLimitHeader ??= {key: 'limit-play', element: gameContentTranslation('limit.play.complete'),}\n    }\n    public get completeEditorLimitHeader(): SimpleReactHeader {\n        return this.#completeEditorLimitHeader ??= {key: 'limit-editor', element: gameContentTranslation('limit.editor.complete'),}\n    }\n\n    public get completeEditorLimitInSmm1And3dsHeader(): SingleHeaderContent {\n        return this.#completeEditorLimitInSmm1And3dsHeader ??= {\n            key: 'limit-editor-smm1-and-smm3ds', element: gameContentTranslation('limit.editor.complete in SMM1&3DS', {\n                Name1: Games.SUPER_MARIO_MAKER_1.acronym,\n                Name3ds: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.acronym,\n            }),\n        }\n    }\n\n    public get completeEditorLimitInSmm2Header(): SingleHeaderContent {\n        return this.#completeEditorLimitInSmm2Header ??= {\n            key: 'limit-editor-smm2', element: gameContentTranslation('limit.editor.complete in SMM2', {\n                Name: Games.SUPER_MARIO_MAKER_2.acronym,\n            }),\n        }\n    }\n\n}\n\ntype EnumerationWithReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>\ntype EnumerationWithCategoryReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>\ntype EnumerationWithInSuperMarioMakerGameReference = Enumerable<any, any> & ClassWithEnglishName<string> & ClassWithReference<ClassInAnySuperMarioMakerGame>\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './Table.scss'\n\nimport type {Enumerable} from '@joookiwi/enumerable'\n\nimport type {AppInterpreterWithTable}                                                         from 'app/interpreter/AppInterpreterWithTable'\nimport type {SingleHeaderContent}                                                             from 'app/tools/table/SimpleHeader'\nimport type {SingleTableContent}                                                              from 'app/tools/table/Table.types'\nimport type {ReactProperties, ReactPropertiesWithChildren, SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Image             from 'app/tools/images/Image'\nimport Tooltip           from 'bootstrap/tooltip/Tooltip'\nimport {EMPTY_STRING}    from 'util/emptyVariables'\nimport {StringContainer} from 'util/StringContainer'\nimport {assert, nonNull} from 'util/utilitiesMethods'\n\ninterface TableProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly interpreter: AppInterpreterWithTable\n\n}\n\n/**\n * Create a {@link HTMLTableElement table}-like element with a multiple parts:\n *  - header\n *  - content\n *  - footer\n *  - caption\n *\n * @param id The element id\n * @param interpreter The interpreter to retrieve its content\n * @reactComponent\n */\nexport default function Table({id, interpreter,}: TableProperties,) {\n    const options = nonNull(interpreter.tableOptions,)\n    const color = interpreter.tableColor\n    const headersColor = interpreter.tableHeadersColor\n    const caption = interpreter.tableCaption\n    const additionalClasses = retrieveAdditionalClasses(interpreter, options,)\n    const contents = retrieveContent(interpreter, options,)\n    const headers = retrieveHeader(interpreter, options,)\n\n    return <div id={id} className={`ttable ${color == null ? '' : `table-${color}`} ${headersColor == null ? '' : `headers-${headersColor}`} w-100`}>\n        <TableHeader>{additionalClasses}{headers}</TableHeader>\n        <TableContent>{additionalClasses}{contents}</TableContent>\n        <TableFooter>{additionalClasses}{headers}</TableFooter>\n        <TableCaption>{caption}</TableCaption>\n    </div>\n}\n\nfunction TableHeader({children: [additionalClasses, headers,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleHeaderContent[],]>,) {\n    const size = headers.length\n    const columns = new Array<ReactJSXElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const it = headers[index]\n        const elementId = `${getHeaderKey(it,)}-header`\n        columns[index] = <div id={elementId} key={`table header (${getHeaderKey(it,)})`} className={`tcell${additionalClasses[index]}`}>\n            <HeaderTooltip elementId={elementId}>{it}</HeaderTooltip>\n            <HeaderOrFooterContent>{it}</HeaderOrFooterContent>\n        </div>\n    }\n    return <div className=\"theader\">{columns}</div>\n}\n\nfunction TableContent({children: [additionalClasses, contents,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleTableContent[]]>,) {\n    const size1 = contents.length\n    const tableContent = new Array<ReactJSXElement>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const content = contents[index1]\n        const rowContentKey = content[0]\n        const size2 = content.length\n        const rowContent = new Array<ReactJSXElement>(size2 - 1,)\n        let index2 = size2\n        while (index2-- > 1) {\n            const rowColumnContent = content[index2] as ReactElement//FIXME: Make the cast not present\n            if (rowColumnContent == null)\n                rowContent[index2] = <div key={`table content (empty ${rowContentKey} ${index1 + 1}-${index2 + 1})`} className=\"tcell empty-table-rowColumn-content-container\"/>\n            else\n                rowContent[index2] = <div key={`table content (${rowContentKey} ${index1 + 1}-${index2 + 1})`} className={`tcell${additionalClasses[index2 - 1]}`}>{rowColumnContent}</div>\n        }\n\n        tableContent[index1] =\n            <div key={`table row content (${rowContentKey} ${index1 + 1})`} className={`trow table-row-${StringContainer.getInHtml(rowContentKey,)}`}>{rowContent}</div>\n    }\n    return <div className=\"tcontent\">{tableContent}</div>\n}\n\nfunction TableFooter({children: [additionalClasses, headers,],}: SimpleReactPropertiesWithChildren<readonly [readonly string[], readonly SingleHeaderContent[],]>,) {\n    const size = headers.length\n    const columns = new Array<ReactJSXElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const it = headers[index]\n        const elementId = `${getHeaderKey(it,)}-footer`\n        columns[index] = <div id={elementId} key={`table footer (${getHeaderKey(it,)})`} className={`tcell${additionalClasses[index]}`}>\n            <FooterTooltip elementId={elementId}>{it}</FooterTooltip>\n            <HeaderOrFooterContent>{it}</HeaderOrFooterContent>\n        </div>\n    }\n\n    return <div className=\"tfooter mb-2\">{columns}</div>\n}\n\nfunction HeaderTooltip({children, elementId,}: ReactPropertiesWithChildren<{ readonly elementId: string, }, SingleHeaderContent>,) {\n    assert(typeof children != 'string', 'No tooltip can be displayed on a header that is a string.',)\n\n    const tooltip = children.tooltip\n    if (tooltip == null)\n        return null\n    return <Tooltip elementId={elementId} option={{title: tooltip, placement: 'bottom',}}/>\n}\n\nfunction FooterTooltip({children, elementId,}: ReactPropertiesWithChildren<{ readonly elementId: string, }, SingleHeaderContent>,) {\n    assert(typeof children != 'string', 'No tooltip can be displayed on a footer that is a string.',)\n\n    const tooltip = children.tooltip\n    if (tooltip == null)\n        return null\n    return <Tooltip elementId={elementId} option={{title: tooltip, placement: 'top',}}/>\n}\n\nfunction HeaderOrFooterContent({children,}: SimpleReactPropertiesWithChildren<SingleHeaderContent>,) {\n    if (typeof children == 'string')\n        return <>{children}</>\n    if ('element' in children)\n        return children.element\n    return <Image source={children.path} fallbackName={children.alt}/>\n}\n\nfunction TableCaption({children,}: SimpleReactPropertiesWithChildren<ReactElementOrString>,) {\n    if (children == null)\n        return null\n    return <small className=\"tcaption alert alert-info flex-grow-1 py-2\" role=\"alert\">{children}</small>\n}\n\n\n/**\n * Get the header key from either a {@link String} or a {@link SimpleHeader}\n *\n * @param header The header to retrieve its key\n */\nfunction getHeaderKey(header: SingleHeaderContent,): string {\n    return typeof header == 'string' ? header : header.key\n}\n\n/**\n * Get the classes with a space before and between the values\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its possible classes\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveAdditionalClasses(interpreter: AppInterpreterWithTable, options: readonly Enumerable[],): readonly string[] {\n    if (interpreter.getAdditionalClass == null)\n        return Array.from({length: options.length,}, () => EMPTY_STRING,)\n\n    const size1 = options.length\n    const additionalClasses = new Array<string>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const additionalClass = interpreter.getAdditionalClass(options[index1],)\n        if (additionalClass.length === 0) {\n            additionalClasses[index1] = EMPTY_STRING\n            continue\n        }\n\n        let classesJoined = ''\n        const size2 = additionalClass.length\n        let index2 = -1\n        while (++index2 < size2)\n            classesJoined += ` ${additionalClass[index2]}`\n        additionalClasses[index1] = classesJoined\n    }\n    return additionalClasses\n}\n\n/**\n * Retrieve the {@link SingleTableContent content} of the {@link interpreter} and put it in an {@link ReadonlyArray array}\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its content\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveContent(interpreter: AppInterpreterWithTable, options: readonly Enumerable[],): readonly SingleTableContent[] {\n    const size2 = options.length\n    const content = interpreter.content\n    const size1 = content.length\n    const tableContents = new Array<SingleTableContent>(size1,)\n    let index1 = size1\n    while (index1-- > 0) {\n        const contentValue = content[index1]\n\n        const tableContent: SingleTableContent = [contentValue.englishName,]\n        let index2 = -1\n        while (++index2 < size2) {\n            const tableContentCreated = interpreter.createTableContent(contentValue, options[index2],)\n            const size3 = tableContentCreated.length\n            let index3 = -1\n            while (++index3 < size3)\n                tableContent.push(tableContentCreated[index3],)\n        }\n        tableContents[index1] = tableContent\n    }\n    return tableContents\n}\n\n/**\n * Retrieve the {@link SingleHeaderContent header} of the {@link interpreter} and put it in an {@link ReadonlyArray array}\n *\n *\n * @param interpreter The {@link AppInterpreterWithTable} to retrieve its content\n * @param options The displayed options in the table\n * @private\n */\nfunction retrieveHeader(interpreter: AppInterpreterWithTable, options: readonly Enumerable[],): readonly SingleHeaderContent[] {\n    const headerContent = [] as SingleHeaderContent[]\n    const size = options.length\n    let index = -1\n    while (++index < size) {\n        const tableHeader = interpreter.createTableHeader(options[index],)\n        if (tableHeader == null)\n            continue\n        headerContent.push(tableHeader,)\n    }\n    return headerContent\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreterWithTable}      from 'app/interpreter/AppInterpreterWithTable'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport Table                 from 'app/tools/table/Table'\nimport {AbstractCardListApp} from 'app/withInterpreter/AbstractCardListApp'\nimport {ViewDisplays}        from 'app/withInterpreter/ViewDisplays'\nimport {Content}             from 'app/interpreter/AppInterpreter'\n\nexport abstract class AbstractTableApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithTable<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractCardListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.TABLE, this.__tableRouteName,],\n        ]\n    }\n\n    private get __tableRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createTableRouteName()\n    }\n\n    protected abstract _createTableRouteName(): PossibleRouteName\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        return <Table id={`${this._key}-table`} interpreter={this._appOptionInterpreter}/>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_instance","_classPrivateFieldLooseKey","_nameHeader","_smm1And3DSGameHeader","_smm2GameHeader","_gameHeader","_categoryHeader","_limitHeader","_completePlayLimitHeader","_completeEditorLimitHeader","_completeEditorLimitInSmm1And3dsHeader","_completeEditorLimitInSmm2Header","CommonOptions","constructor","Object","defineProperty","writable","value","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","this","nameHeader","_classPrivateFieldLoo3","_classPrivateFieldLoo4","key","element","contentTranslation","getNameContent","enumeration","_jsx","NameComponent","id","name","reference","popoverOrientation","categoryHeader","_classPrivateFieldLoo5","_classPrivateFieldLoo6","gameContentTranslation","getCategoryContent","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","imagePath_or_name","englishName","english","startingKey","concat","englishNameInHtml","Image","file","gameHeader","_classPrivateFieldLoo7","_classPrivateFieldLoo8","smm1And3dsGameHeader","_classPrivateFieldLoo9","_classPrivateFieldLoo10","alt","Games","SUPER_MARIO_MAKER_1","imageFile","fallbackName","path","fullName","smm2GameHeader","_classPrivateFieldLoo11","_classPrivateFieldLoo12","SUPER_MARIO_MAKER_2","getGameContent","isInSMM1","isInSuperMarioMaker1","isInSMM3DS","isInSuperMarioMakerFor3DS","isInSMM2","isInSuperMarioMaker2","_jsxs","className","children","renderSingleComponent","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","getThemeContent","isInCourseTheme","COURSE_THEME_IMAGE_FILE","isInWorldTheme","WORLD_THEME_IMAGE_FILE","limitHeader","_classPrivateFieldLoo13","_classPrivateFieldLoo14","completePlayLimitHeader","_classPrivateFieldLoo15","_classPrivateFieldLoo16","completeEditorLimitHeader","_classPrivateFieldLoo17","_classPrivateFieldLoo18","completeEditorLimitInSmm1And3dsHeader","_classPrivateFieldLoo19","_classPrivateFieldLoo20","Name1","acronym","Name3ds","completeEditorLimitInSmm2Header","_classPrivateFieldLoo21","_classPrivateFieldLoo22","Name","_routeName","AbstractCardListApp","AbstractSimpleListApp","arguments","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_createCardListRouteName","_createUniqueNameOnCardList","enumerable","createCardList","optionInterpreter","_appOptionInterpreter","_key","default","df","small","sm","medium","md","large","lg","extraLarge","xl","extraExtraLarge","xxl","createCardListDimension","dimensions","content","size","length","contentToDisplay","Array","index","uniqueEnglishName","nameContainer","createCardListContent","DisplayButtonGroup","_ref","reactKey","views","currentView","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","routeFromName","htmlType","type","disabled","Link","to","onClick","CompanionEnum","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","props","viewDisplay","__possibleViewDisplay","_createKey","_createAppOptionInterpreter","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","_createTitleContent","createComponent","SIMPLE_LIST","__listRouteName","_createSimpleListRouteName","_createUniqueNameOnSimpleList","createList","createListDimension","Table","interpreter","options","nonNull","tableOptions","color","tableColor","headersColor","tableHeadersColor","caption","tableCaption","additionalClasses","getAdditionalClass","from","EMPTY_STRING","size1","index1","additionalClass","classesJoined","size2","index2","retrieveAdditionalClasses","contents","tableContents","contentValue","tableContent","tableContentCreated","createTableContent","size3","index3","push","retrieveContent","headers","headerContent","tableHeader","createTableHeader","retrieveHeader","TableHeader","TableContent","TableFooter","TableCaption","columns","it","elementId","getHeaderKey","HeaderTooltip","HeaderOrFooterContent","rowContentKey","rowContent","rowColumnContent","StringContainer","getInHtml","_ref4","FooterTooltip","_ref5","assert","tooltip","Tooltip","option","title","placement","_ref6","_ref7","_Fragment","source","_ref8","role","header","AbstractTableApp","TABLE","__tableRouteName","_createTableRouteName","createTable","Popover","on","triggers","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","document","getElementById","html","trigger","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","isCurrent","nameMap","toNameMap","language","includes","languageTranslation","space","unionTrait","hidden","useState"],"sourceRoot":""}