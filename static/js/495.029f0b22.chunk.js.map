{"version":3,"file":"static/js/495.029f0b22.chunk.js","mappings":"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","sources":["app/options/LimitWithPossibleTooltipOnNote.tsx","app/options/LimitAppOption.tsx","app/property/LimitGames.ts","app/LimitApp.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx"],"sourcesContent":["import 'app/tools/text/TextWithInformativeTooltip.scss'\n\nimport {useRef} from 'react'\n\nimport type {Limits}                            from 'core/limit/Limits'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Tooltip                  from 'bootstrap/tooltip/Tooltip'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface LimitAmountNoteProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrStringOrNumberOrArray> {\n\n    readonly value: Limits\n\n}\n\n/** @reactComponent */\nexport default function LimitWithPossibleTooltipOnNote({value, children,}: LimitAmountNoteProperties,) {\n    const htmlElement = useRef<HTMLDivElement>(null,)\n    const note = value.reference.amountComment\n\n    if (note == null)\n        return children\n    return <Tooltip option={{title: gameContentTranslation(`limit.note.${note}`, value.noteForTranslation,),}} reference={htmlElement}>\n        <div ref={htmlElement} className=\"limitWithPossibleTooltipOnNote-container text-withInformativeTooltip-container d-inline\">\n            {children}\n        </div>\n    </Tooltip>\n}\n","import './LimitAppOption.scss'\n\nimport type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/LimitAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {Limit}               from 'core/limit/Limit'\nimport type {Limits}              from 'core/limit/Limits'\n\nimport {CommonOptions}                from 'app/options/CommonOptions'\nimport LimitWithPossibleTooltipOnNote from 'app/options/LimitWithPossibleTooltipOnNote'\nimport {COURSE_THEME_IMAGE_FILE}      from 'app/options/file/themeImageFiles'\nimport TextComponent                  from 'app/tools/text/TextComponent'\nimport Image                          from 'app/tools/images/Image'\nimport {EmptyLimit}                   from 'core/limit/EmptyLimit'\nimport {ProjectLanguages}             from 'lang/ProjectLanguages'\nimport {contentTranslation}           from 'lang/components/translationMethods'\nimport NameComponent                  from 'lang/name/component/Name.component'\n\nexport abstract class LimitAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<Limits> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ACRONYM = new class LimitAppOption_Acronym extends LimitAppOption {\n\n        protected override _createContentOption({reference: {acronym, alternativeAcronym,},}: Limits,) {\n            if (alternativeAcronym == null) {\n                if (acronym == null)\n                    return null\n                return <TextComponent content={acronym}/>\n            }\n            return <div className=\"acronyms-container d-flex flex-column flex-md-row\">\n                <TextComponent content={acronym}/>\n                <div className=\"vertical-separator vr mx-2 d-none d-md-inline-block\"/>\n                <hr className=\"horizontal-separator my-1 d-block d-md-none\"/>\n                <TextComponent content={alternativeAcronym}/>\n            </div>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'acronym', element: contentTranslation('Acronym(s)',),}\n        }\n\n    }()\n    public static readonly NAME = new class LimitAppOption_Name extends LimitAppOption {\n\n        protected override _createContentOption({reference, isEditorLimit,}: Limits,) {\n            const alternativeContainer = reference.alternativeContainer\n            if (alternativeContainer instanceof EmptyLimit)\n                return this.#createNameComponent(reference, isEditorLimit,)\n            return <div className=\"names-container d-flex flex-column flex-md-row\">\n                {this.#createNameComponent(reference, isEditorLimit,)}\n                <div className=\"vertical-separator vr mx-3 d-none d-md-inline-block\"/>\n                <hr className=\"horizontal-separator my-1 d-block d-md-none\"/>\n                <NameComponent id=\"alternativeName\" name={alternativeContainer} popoverOrientation=\"bottom\"/>\n            </div>\n        }\n\n        #createNameComponent(reference: Limit, isEditorLimit: boolean,): ReactElement {\n            if (isEditorLimit)\n                return <div className=\"nameWithImage-container d-flex position-relative\">\n                    <Image file={COURSE_THEME_IMAGE_FILE} className=\"course-theme-image badge bg-transparent position-absolute top-0 start-0\"/>\n                    <NameComponent id=\"name\" name={reference} popoverOrientation=\"bottom\"/>\n                </div>\n            return <NameComponent id=\"name\" name={reference} popoverOrientation=\"bottom\"/>\n        }\n\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly AMOUNT_IN_ALL_GAMES = new class LimitAppOption_Amount extends LimitAppOption {\n\n        protected override _createContentOption(enumeration: Limits,) {\n            const reference = enumeration.reference\n            const amountInSMM2 = reference.limitAmountInSMM2\n            const {englishName,} = enumeration\n            if (reference.limitAmountInSMM1AndSMM3DS === amountInSMM2)\n                return <LimitWithPossibleTooltipOnNote value={enumeration} key={`${englishName} - limit amount in all games, but displayed as the same value`}>\n                    <TextComponent content={amountInSMM2} isUnknown={reference.isUnknownLimitInSMM2}/>\n                </LimitWithPossibleTooltipOnNote>\n            return <LimitWithPossibleTooltipOnNote value={enumeration} key={`${englishName} - limit amount in all games`}>\n                <TextComponent content={reference.limitAmountInSMM1AndSMM3DS} isUnknown={reference.isUnknownLimitInSMM1AndSMM3DS}/>\n                <span className=\"space-pre\">{ProjectLanguages.current.space}{ProjectLanguages.current.slash}{ProjectLanguages.current.space}</span>\n                <TextComponent content={reference.limitAmountInSMM2} isUnknown={reference.isUnknownLimitInSMM2}/>\n            </LimitWithPossibleTooltipOnNote>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.limitHeader\n        }\n    }()\n    public static readonly AMOUNT_IN_SMM1_AND_SMM3DS = new class LimitAppOption_AmountInSMM1AndSMM3DS extends LimitAppOption {\n\n        protected override _createContentOption(enumeration: Limits,) {\n            const reference = enumeration.reference\n            return <LimitWithPossibleTooltipOnNote value={enumeration} key={`${enumeration.englishName} - limit amount in only SMM1 & SMM3DS`}>\n                <TextComponent content={reference.limitAmountInSMM1AndSMM3DS} isUnknown={reference.isUnknownLimitInSMM1AndSMM3DS}/>\n            </LimitWithPossibleTooltipOnNote>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.limitHeader\n        }\n\n    }()\n    public static readonly AMOUNT_IN_SMM2 = new class LimitAppOption_AmountInSMM2 extends LimitAppOption {\n\n        protected override _createContentOption(enumeration: Limits,) {\n            const reference = enumeration.reference\n            return <LimitWithPossibleTooltipOnNote value={enumeration} key={`${enumeration.englishName} - limit amount in only SMM2`}>\n                <TextComponent content={reference.limitAmountInSMM2} isUnknown={reference.isUnknownLimitInSMM2}/>\n            </LimitWithPossibleTooltipOnNote>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return CommonOptions.get.limitHeader\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<LimitAppOption, typeof LimitAppOption> = class CompanionEnum_LimitAppOption\n        extends CompanionEnum<LimitAppOption, typeof LimitAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_LimitAppOption\n\n        private constructor() {\n            super(LimitAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_LimitAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Limits,): ReactElement\n\n    public renderContent(enumeration: Limits,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/LimitGames.types'\nimport type {LimitTypes}                         from 'app/property/LimitTypes'\nimport type {ViewDisplays}                       from 'app/withInterpreter/ViewDisplays'\n\nexport class LimitGames\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAMES = new class LimitGames_AllGames extends LimitGames {\n\n        public override getAllRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class LimitGames_SuperMarioMakerOrSuperMarioMakerForNintendo3DS extends LimitGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1Or3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class LimitGames_SuperMarioMaker2 extends LimitGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Or3dsColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<LimitGames, typeof LimitGames> = class CompanionEnum_LimitGames\n        extends CompanionEnum<LimitGames, typeof LimitGames> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_LimitGames\n\n        private constructor() {\n            super(LimitGames,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_LimitGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm1Or3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getAllRouteName(type: LimitTypes, viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `${type.routeName} (${viewDisplay.urlValue} Game=all)`\n    }\n\n    public getSmm1Or3dsRouteName(type: LimitTypes, viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `${type.routeName} (${viewDisplay.urlValue} Game=1)`\n    }\n\n    public getSmm2RouteName(type: LimitTypes, viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `${type.routeName} (${viewDisplay.urlValue} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './LimitApp.scss'\n\nimport type {LimitAppProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {LimitTypes}              from 'app/property/LimitTypes'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ClassWithType}           from 'core/ClassWithType'\nimport type {Limits}                  from 'core/limit/Limits'\nimport type {PossibleRouteName}       from 'route/EveryRoutes.types'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {LimitAppOption}                             from 'app/options/LimitAppOption'\nimport {COURSE_THEME_IMAGE_FILE}                    from 'app/options/file/themeImageFiles'\nimport {LimitGames}                                 from 'app/property/LimitGames'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport Image                                        from 'app/tools/images/Image'\nimport Table                                        from 'app/tools/table/Table'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame, intersect}                      from 'util/utilitiesMethods'\n\nclass LimitAppInterpreter\n    implements AppInterpreterWithTable<Limits, LimitAppOption>,\n        ClassWithType<LimitTypes> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(type: LimitTypes, games: GameCollection,) {\n        this.#type = type\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get type(): LimitTypes {\n        return this.#type\n    }\n\n    public get content() {\n        return filterGame(this.type.content, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 4,\n            large: 5,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumeration: Limits,) {\n        const games = this.#games\n        const option = games.hasAllGames\n            ? LimitAppOption.AMOUNT_IN_ALL_GAMES\n            : games.hasSMM1Or3DS\n                ? LimitAppOption.AMOUNT_IN_SMM1_AND_SMM3DS\n                : games.hasSMM2\n                    ? LimitAppOption.AMOUNT_IN_SMM2\n                    : null\n\n        if (enumeration.isEditorLimit)\n            return <div className=\"card-bodyWithEditor-container\">\n                <Image file={COURSE_THEME_IMAGE_FILE} className=\"course-theme-image position-absolute start-0 bottom-0\"/>\n                <div className=\"card-body\" id={`limit-${enumeration.englishNameInHtml}`}>\n                    {option?.renderContent(enumeration,)}\n                </div>\n            </div>\n        return <div className=\"card-body\" id={`limit-${enumeration.englishNameInHtml}`}>\n            {option?.renderContent(enumeration,)}\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n\n    public get tableCaption() {\n        return gameContentTranslation(`limit.${this.type.type}.all`,) satisfies ReactElementOrString\n    }\n\n    public get tableOptions(): readonly LimitAppOption[] {\n        const games = this.#games\n\n        const options: LimitAppOption[] = [\n            LimitAppOption.ACRONYM,\n            LimitAppOption.NAME,\n        ]\n        if (games.hasAllGames)\n            options.push(LimitAppOption.AMOUNT_IN_ALL_GAMES,)\n        else {\n            if (games.hasSMM1Or3DS)\n                options.push(LimitAppOption.AMOUNT_IN_SMM1_AND_SMM3DS,)\n            if (games.hasSMM2)\n                options.push(LimitAppOption.AMOUNT_IN_SMM2,)\n        }\n        return options\n    }\n\n\n    public createTableContent(content: Limits, option: LimitAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: LimitAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst GamePossibilities = Games.Possibilities.get\nconst allGames = GamePossibilities.ALL_GAMES\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nexport default function LimitApp({viewDisplay, type, games,}: LimitAppProperties,) {\n    const routeName = type.routeName\n    const viewDisplayAndRouteName = [\n        [ViewDisplays.SIMPLE_LIST, `${routeName} (list)`,],\n        [ViewDisplays.CARD_LIST, `${routeName} (card)`,],\n        [ViewDisplays.TABLE, `${routeName} (table)`,],\n    ] as const satisfies readonly ViewAndRouteName[]\n    const titleContent = gameContentTranslation(`limit.${type.type}.all`,)\n    const appInterpreter = new LimitAppInterpreter(type, games,)\n\n    const game = intersect(allGames, games,).length === 3\n        ? LimitGames.ALL_GAMES\n        : games.hasSMM2\n            ? LimitGames.SUPER_MARIO_MAKER_2\n            : LimitGames.SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"limit\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<LimitDescription viewDisplay={viewDisplay} type={type} game={game}/>}\n                                 asideContent={<LimitAsideContent viewDisplay={viewDisplay} type={type} game={game}/>}>\n            <SimpleList reactKey=\"limit\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"limit\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<LimitDescription viewDisplay={viewDisplay} type={type} game={game}/>}\n                                 asideContent={<LimitAsideContent viewDisplay={viewDisplay} type={type} game={game}/>}>\n            <CardList reactKey=\"limit\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"limit\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             description={<LimitDescription viewDisplay={viewDisplay} type={type} game={game}/>}\n                             asideContent={<LimitAsideContent viewDisplay={viewDisplay} type={type} game={game}/>}>\n        <Table id=\"limit-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Description content --------------------\n\ninterface LimitDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: LimitTypes\n\n    readonly game: LimitGames\n\n}\n\nfunction LimitDescription({viewDisplay, type, game,}: LimitDescriptionProperties,) {\n    const smm1Or3dsLink = game.getSmm1Or3dsRouteName(type, viewDisplay,)\n    const smm2Link = game.getSmm2RouteName(type, viewDisplay,)\n\n    const playLink = viewDisplay.getRoutePath(type.playRouteName,)\n    const editorLink = viewDisplay.getRoutePath(type.editorRouteName,)\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyLimit (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyLimit (card)' satisfies PossibleRouteName\n    const tableLink = viewDisplay === ViewDisplays.TABLE ? null : 'everyLimit (table)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation(`limit.description.intro page (${type.type})`, {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1Or3dsLink}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm1Or3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('limit.description.intro game changes', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-gameChanges-description\" routeName={smm1Or3dsLink}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-gameChanges-description\" routeName={smm1Or3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-gameChanges-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('limit.description.intro other entities',)}\n            {gameContentTranslation('limit.description.intro references', {\n                playLink: <LinkText key=\"playLink\" partialId=\"playLink\" routeName={playLink} color=\"primary\">{gameContentTranslation('limit.play.simplified',).toLowerCase()}</LinkText>,\n                editorLink: <LinkText key=\"editorLink\" partialId=\"editorLink\" routeName={editorLink} color=\"primary\">{gameContentTranslation('limit.editor.simplified',).toLowerCase()}</LinkText>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('limit.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n            tableLink: <LinkText key=\"tableLink\" partialId=\"tableLink\" routeName={tableLink} color=\"primary\">{contentTranslation('view type.table.singular',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface LimitAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: LimitTypes\n\n    readonly game: LimitGames\n\n}\n\n/** @reactComponent */\nfunction LimitAsideContent({viewDisplay, type, game,}: LimitAsideContentProperties,) {\n    return <div id=\"limit-asideContent-container\">\n        <TypeAsideContent viewDisplay={viewDisplay} type={type}/>\n        <div className=\"d-inline mx-1\"/>\n        <GameAsideContent viewDisplay={viewDisplay} type={type} game={game}/>\n    </div>\n}\n\ninterface LimitTypeAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: LimitTypes\n\n}\n\n/** @reactComponent */\nfunction TypeAsideContent({viewDisplay, type,}: LimitTypeAsideContentProperties,) {\n    return <div id=\"limit-linkButton-container\" className=\"btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allLimit\" routeName={viewDisplay.getRoutePath(type.allRouteName,)} color={type.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"limit-linkButton-playAndEditor-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"playLimit\" routeName={viewDisplay.getRoutePath(type.playRouteName,)} color={type.playColor}>{gameContentTranslation('limit.play.simple',)}</LinkButton>\n            <LinkButton partialId=\"editorLimit\" routeName={viewDisplay.getRoutePath(type.editorRouteName,)} color={type.editorColor}>{gameContentTranslation('limit.editor.simple',)}</LinkButton>\n        </div>\n    </div>\n}\n\n/** @reactComponent */\nfunction GameAsideContent({viewDisplay, type, game,}: LimitAsideContentProperties,) {\n    return <div id=\"limit-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameLimit\" routeName={game.getAllRouteName(type, viewDisplay,)} color={game.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"limit-gamesButton-singularGame-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smm1Or3dsGame\" routeName={game.getSmm1Or3dsRouteName(type, viewDisplay,)} color={game.smm1Or3dsColor}>\n                <GameImage reference={smm1}/>\n                <GameImage reference={smm3ds}/>\n            </LinkButton>\n            <LinkButton partialId=\"smm2Game\" routeName={game.getSmm2RouteName(type, viewDisplay,)} color={game.smm2Color}>\n                <GameImage reference={smm2}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or a simple underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n"],"names":["LimitWithPossibleTooltipOnNote","_ref","value","children","htmlElement","useRef","note","reference","amountComment","_jsx","Tooltip","option","title","gameContentTranslation","concat","noteForTranslation","ref","className","LimitAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","_createNameComponent2","isEditorLimit","_jsxs","Image","file","COURSE_THEME_IMAGE_FILE","NameComponent","id","name","popoverOrientation","_LimitAppOption","ACRONYM","acronym","alternativeAcronym","TextComponent","content","key","element","contentTranslation","NAME","_createNameComponent","_classPrivateFieldLooseKey","arguments","Object","defineProperty","_ref2","alternativeContainer","EmptyLimit","_classPrivateFieldLooseBase","CommonOptions","get","nameHeader","AMOUNT_IN_ALL_GAMES","amountInSMM2","limitAmountInSMM2","englishName","limitAmountInSMM1AndSMM3DS","isUnknown","isUnknownLimitInSMM2","isUnknownLimitInSMM1AndSMM3DS","ProjectLanguages","current","space","slash","limitHeader","AMOUNT_IN_SMM1_AND_SMM3DS","AMOUNT_IN_SMM2","CompanionEnum","_instance","_CompanionEnum_LimitAppOption","CompanionEnum_LimitAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","writable","LimitGames","allColor","smm1Or3dsColor","smm2Color","getAllRouteName","type","viewDisplay","routeName","urlValue","getSmm1Or3dsRouteName","getSmm2RouteName","_LimitGames","ALL_GAMES","SUPER_MARIO_MAKER_OR_SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_LimitGames","CompanionEnum_LimitGames","_type","_games","LimitAppInterpreter","games","tableHeadersColor","filterGame","createListDimension","default","small","medium","large","extraLarge","createCardListDimension","createCardListContent","hasAllGames","hasSMM1Or3DS","hasSMM2","englishNameInHtml","tableCaption","tableOptions","options","push","createTableContent","createTableHeader","allGames","Games","Possibilities","smm1","SUPER_MARIO_MAKER_1","smm3ds","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","smm2","LimitApp","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","titleContent","appInterpreter","game","intersect","length","SubMainContainer","reactKey","description","LimitDescription","asideContent","LimitAsideContent","SimpleList","interpreter","CardList","Table","smm1Or3dsLink","smm2Link","playLink","getRoutePath","playRouteName","editorLink","editorRouteName","listLink","cardLink","tableLink","_Fragment","smm1Link","TextOrLink","GameImage","smm3dsLink","LinkText","partialId","color","toLowerCase","cardsLink","_ref3","TypeAsideContent","GameAsideContent","_ref4","LinkButton","allRouteName","playColor","editorColor","_ref5","disabled","Link","to","routeFromName"],"sourceRoot":""}