{"version":3,"file":"static/js/49.077dd866.chunk.js","mappings":"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","sources":["app/GameReferenceApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './GameReferenceApp.scss'\n\nimport {Component, Fragment} from 'react'\n\nimport type {PossibleEnglishName_Games} from 'core/soundEffect/SoundEffects.types'\nimport type {GameContentTranslationKey} from 'lang/components/TranslationProperty'\n\nimport {Games}                  from 'core/game/Games'\nimport {GameReferences}         from 'core/gameReference/GameReferences'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\n/**\n * @reactComponent\n * @todo Replace to a functional-based component\n */\nexport default class GameReferenceApp\n    extends Component {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * Every {@link GameReferences} that will do a return of line after its rendering.\n     */\n    public static RETURN_OF_LINES = [GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n        GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n        GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n        GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n        GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n        GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n        GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n        GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n        GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n        GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n        GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n        GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n        GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n        GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n        GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n    ] as const\n\n    static #otherGameReferences?: readonly GameReferences[]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & initialisation methods --------------------\n\n    private static get __otherGameReferences(): readonly GameReferences[] {\n        if (this.#otherGameReferences != null)\n            return this.#otherGameReferences\n\n        const alreadyIncludedNames = [\n            ...Games.CompanionEnum.get.values.map(game => game.englishName,),\n            ...GameStyles.CompanionEnum.get.values.map(game => game.englishName,),\n            ...SoundEffects.soundEffect_games.map(game => game.englishName,) as PossibleEnglishName_Games[],\n        ]\n        return this.#otherGameReferences = GameReferences.CompanionEnum.get.values.filter(it => !alreadyIncludedNames.includes(it.englishName as never,),).toArray()\n    }\n\n    //endregion -------------------- Getter & initialisation methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly (| Games | GameStyles | SoundEffects)[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly GameReferences[], returnOfLine: readonly GameReferences[],): ReactElement\n    protected _getContainer(groupId: string, title: GameContentTranslationKey, enumReferences: readonly PossibleGameReference[], returnOfLine?: readonly GameReferences[],) {\n        return <div key={`names container - ${groupId}`} id={`${groupId}-names-container`} className=\"names-container\">\n            <h2 key={`names title - ${groupId}`} id={`${groupId}-names-title`} className=\"col-12 names-title\">{gameContentTranslation(title)}</h2>\n            <div key={`name (container) - ${groupId}`} id={`${groupId}-name-container`} className=\"container-fluid name-container\">{\n                enumReferences.map(gameReference => [gameReference, GameReferences.CompanionEnum.get.getValueByName(gameReference.englishName,),] as const).map(([enumReference, gameReference,]) =>\n                    <Fragment key={`single name container - ${gameReference.englishName}`}>\n                        <div id={`${gameReference.englishNameInHtml}-name-container`} className={`${enumReferences.length > 5 ? 'col-3' : 'col'} single-name-container`}>\n                            <div className=\"single-name-sub-container\">\n                                {enumReference.renderSingleComponent}\n                                <NameComponent id={`${groupId}-name`} name={gameReference.reference}/>\n                            </div>\n                        </div>\n                        {returnOfLine?.includes(gameReference) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : null}\n                    </Fragment>)\n            }</div>\n        </div>\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    public override render() {\n        return <div id=\"gameReference-container\" className=\"container-fluid main-container\">\n            <h2 id=\"main-names-title\" className=\"col-12 names-title\">{gameContentTranslation('game reference.plural')}</h2>\n            {this._getContainer('game', 'game.plural', Games.CompanionEnum.get.values.toArray(),)}\n            {this._getContainer('gameStyle', 'game style.plural', GameStyles.CompanionEnum.get.values.toArray(),)}\n            {this._getContainer('soundEffect', 'sound effect.plural', SoundEffects.soundEffect_games,)}\n            {this._getContainer('otherGameReferences', 'game reference.others', GameReferenceApp.__otherGameReferences, GameReferenceApp.RETURN_OF_LINES,)}\n        </div>\n    }\n\n}\n\ntype PossibleGameReference = (Games | GameStyles | SoundEffects | GameReferences) & { renderSingleComponent?: ReactElement }\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_otherGameReferences","_classPrivateFieldLooseKey","GameReferenceApp","Component","__otherGameReferences","_classPrivateFieldLooseBase","this","alreadyIncludedNames","Games","CompanionEnum","get","values","map","game","englishName","GameStyles","SoundEffects","soundEffect_games","GameReferences","filter","it","includes","toArray","_getContainer","groupId","title","enumReferences","returnOfLine","_jsxs","id","concat","className","children","_jsx","gameContentTranslation","gameReference","getValueByName","_ref","enumReference","Fragment","englishNameInHtml","length","renderSingleComponent","NameComponent","name","reference","render","RETURN_OF_LINES","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG_COUNTRY","KIRBY_ADVENTURE","KID_ICARIUS_UPRISING","MEGA_MAN","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_AWAKENING","POKEMON_Y","PIKMIN_3","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","MONSTER_MANOR","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","SHAUN_THE_SHEEP","Object","defineProperty","writable","value","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","content","_currentLanguageTextContent","NamePopoverComponent","constructor","props","super","ProjectLanguages","current","state","element","listId","setDoesDisplayPopover","popoverOrientation","componentDidMount","setState","createOption","contentTranslation","show","hide","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","isCurrent","nameMap","toNameMap","language","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}