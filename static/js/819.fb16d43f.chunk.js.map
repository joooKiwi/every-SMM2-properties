{"version":3,"file":"static/js/819.fb16d43f.chunk.js","mappings":"wTAEaA,EAAY,WAUrB,SAAAA,EAAmBC,EAAqCC,EAAqCC,IAAgDC,EAAAA,EAAAA,GAAA,KAAAJ,GAR7IK,OAAAC,eAAA,KAAAC,EAAA,CAAAC,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAI,EAAA,CAAAF,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAK,EAAA,CAAAH,UAAA,EAAAC,WAAA,KASIG,EAAAA,EAAAA,GAAAC,KAAIN,GAAAA,GAAUN,aAAiBD,EAAeC,EAAMA,MAAQA,GAC5DW,EAAAA,EAAAA,GAAAC,KAAIH,GAAAA,GAAcR,aAAqBF,EAAeE,EAAUA,UAAYA,GAC5EU,EAAAA,EAAAA,GAAAC,KAAIF,GAAAA,GAAwBR,aAA+BH,EAAeG,EAAoBA,oBAAsBA,CACxH,CA8BA,OA5BAW,EAAAA,EAAAA,GAAAd,EAAA,EAAAe,IAAA,QAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIN,GAAAA,EACf,GAAC,CAAAQ,IAAA,YAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIH,GAAAA,EACf,GAAC,CAAAK,IAAA,sBAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIF,GAAAA,EACf,GAGA,CAAAI,IAAA,SAAAN,MAEA,SAAcQ,GACV,OAAa,MAATA,IAEEA,aAAiBjB,IAGhBa,KAAKZ,QAAUgB,EAAMhB,OACrBY,KAAKX,YAAce,EAAMf,WACzBW,KAAKV,sBAAwBc,EAAMd,qBAC9C,KAEAH,CAAA,CA5CqB,G,sICAZkB,EAAsB,WAY/B,SAAAA,EAAmBC,EAA4BC,EAA6BC,EAA4BC,EAA+BC,IAAkCnB,EAAAA,EAAAA,GAAA,KAAAc,GAVzKb,OAAAC,eAAA,KAAAkB,EAAA,CAAAhB,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAmB,EAAA,CAAAjB,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAoB,EAAA,CAAAlB,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAqB,EAAA,CAAAnB,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAAsB,EAAA,CAAApB,UAAA,EAAAC,WAAA,KAWIG,EAAAA,EAAAA,GAAAC,KAAIW,GAAAA,GAAgBL,GACpBP,EAAAA,EAAAA,GAAAC,KAAIY,GAAAA,GAAiBL,GACrBR,EAAAA,EAAAA,GAAAC,KAAIa,GAAAA,GAAgBL,GACpBT,EAAAA,EAAAA,GAAAC,KAAIc,GAAAA,GAAmBL,GACvBV,EAAAA,EAAAA,GAAAC,KAAIe,GAAAA,GAAqBL,CAC7B,CAwBA,OAtBAT,EAAAA,EAAAA,GAAAI,EAAA,EAAAH,IAAA,cAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIW,GAAAA,EACf,GAAC,CAAAT,IAAA,eAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIY,GAAAA,EACf,GAAC,CAAAV,IAAA,cAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIa,GAAAA,EACf,GAAC,CAAAX,IAAA,iBAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIc,GAAAA,EACf,GAAC,CAAAZ,IAAA,mBAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIe,GAAAA,EACf,KAEAV,CAAA,CA1C+B,G,oBCEqCW,GAAAC,EAAAA,EAAAA,GAAA,OAElDC,EAAmB,WAWrC,SAAAA,EAAsBhB,IAAWX,EAAAA,EAAAA,GAAA,KAAA2B,GACxBC,EAAAA,GACAD,EAAoBE,IAChBC,IAAG,SAAAD,GAAG,OAAIA,EAAIE,SAASpB,EAAI,IAC3BqB,OAAM,WACH,MAAM,IAAIC,eAAe,yDAADC,OAA0DvB,EAAG,MACzF,IACCwB,IAAIxB,EAAKF,KAEtB,CAIC,OAJAC,EAAAA,EAAAA,GAAAiB,EAAA,OAAAhB,IAAA,MAAAC,IAED,WAA2D,IAADwB,EAAAC,EACtD,OAAW,QAAXA,GAAAD,GAAA5B,EAAAA,EAAAA,GAAOC,KAAIgB,IAAAA,UAAA,IAAAY,EAAAA,EAAAD,EAAAX,GAAU,IAAIa,EAAAA,CAC7B,KAACX,CAAA,CAxBoC,GAAnBA,EAKKY,mBAAoB,EAAKtC,OAAAC,eAL9ByB,EAAmBF,EAAA,CAAArB,UAAA,EAAAC,WAAA,I,oCCGkBmC,GAAAd,EAAAA,EAAAA,GAAA,eAAAe,EAgGvCC,OAAOC,SA9FpB,IAAeC,EAAW,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAsD7B,SAAAA,EAAoBK,GAA4B,IAADC,EAEZ,OAFYlD,EAAAA,EAAAA,GAAA,KAAA4C,GAC3CM,EAAAH,EAAAI,KAAA,MAPJlD,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAV,EAAA,CAAApC,UAAA,EAAAC,WAAA,KAQIG,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAV,GAAAA,GAAoBS,EAAWC,CACnC,CAyCA,OAvCAxC,EAAAA,EAAAA,GAAAkC,EAAA,EAAAjC,IAAA,cAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAI+B,GAAAA,EACf,GAAC,CAAA7B,IAAA,oBAAAC,IAED,WACI,OAAOH,KAAKwC,WAChB,GAGA,CAAAtC,IAAA,UAAAC,IAYA,WACI,OAAOgC,CACX,IAAC,EAAAjC,IAAA,iBAAAN,MATD,SAA6BA,GACzB,OAAOgD,EAAAA,EAAAA,IAAsBhD,EAAOI,KACxC,GAAC,CAAAE,IAAA,WAAAN,MASD,SAAuBA,GACnB,OAAOiD,EAAAA,GAAKC,WAAW9C,KAAMJ,EACjC,GAAC,CAAAM,IAAA,SAAAC,IAED,WACI,OAAO0C,EAAAA,GAAKE,YAAY/C,KAC5B,GAAC,CAAAE,IAAA8B,EAAApC,OAAAoD,EAAAA,EAAAA,KAAAC,MAED,SAAArD,IAAA,OAAAoD,EAAAA,EAAAA,KAAAE,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACI,OAAAF,EAAAG,cAAOtD,KAAKuD,OAAM,gCAAAJ,EAAAK,OAAA,GAAA5D,EAAA,YAGtBuC,CAAA,CAlG6B,CACrBU,EAAAA,IADUV,EAMKsB,QAAY,aAAAC,IAAArB,EAAAA,EAAAA,GAAAsB,EAAAD,GAAA,IAAAE,GAAArB,EAAAA,EAAAA,GAAAoB,GAAA,SAAAA,IAAA,OAAApE,EAAAA,EAAAA,GAAA,KAAAoE,GAAAC,EAAAC,MAAA,KAAAC,UAAA,CAI9B,OAJ8B7D,EAAAA,EAAAA,GAAA0D,EAAA,EAAAzD,IAAA,kBAAAN,MAE/B,SAAAmE,GACI,MAAO,EAACzD,EADgCyD,EAAXzD,eAEjC,KAACqD,CAAA,CAJiC,CAAmCxB,GAAtC,CAMjC,WAZgBA,EAaK6B,OAAY,aAAAC,IAAA5B,EAAAA,EAAAA,GAAA6B,EAAAD,GAAA,IAAAE,GAAA5B,EAAAA,EAAAA,GAAA2B,GAAA,SAAAA,IAAA,OAAA3E,EAAAA,EAAAA,GAAA,KAAA2E,GAAAC,EAAAN,MAAA,KAAAC,UAAA,CAI9B,OAJ8B7D,EAAAA,EAAAA,GAAAiE,EAAA,EAAAhE,IAAA,kBAAAN,MAE/B,SAAAwE,GAAuF,IAAtD9D,EAAW8D,EAAX9D,YAAaE,EAAW4D,EAAX5D,YAC1C,MAAO,CAACF,IAAeE,IAC3B,KAAC0D,CAAA,CAJiC,CAAkC/B,GAArC,CAMjC,UAnBgBA,EAoBKkC,QAAY,aAAAC,IAAAjC,EAAAA,EAAAA,GAAAkC,EAAAD,GAAA,IAAAE,GAAAjC,EAAAA,EAAAA,GAAAgC,GAAA,SAAAA,IAAA,OAAAhF,EAAAA,EAAAA,GAAA,KAAAgF,GAAAC,EAAAX,MAAA,KAAAC,UAAA,CAI9B,OAJ8B7D,EAAAA,EAAAA,GAAAsE,EAAA,EAAArE,IAAA,kBAAAN,MAE/B,SAAA6E,GAAwF,IAAvDlE,EAAYkE,EAAZlE,aAAcC,EAAWiE,EAAXjE,YAC3C,MAAO,CAACD,IAAgBC,IAC5B,KAAC+D,CAAA,CAJiC,CAAmCpC,GAAtC,CAMjC,WA1BgBA,EA2BKuC,QAAY,aAAAC,IAAAtC,EAAAA,EAAAA,GAAAuC,EAAAD,GAAA,IAAAE,GAAAtC,EAAAA,EAAAA,GAAAqC,GAAA,SAAAA,IAAA,OAAArF,EAAAA,EAAAA,GAAA,KAAAqF,GAAAC,EAAAhB,MAAA,KAAAC,UAAA,CAI9B,OAJ8B7D,EAAAA,EAAAA,GAAA2E,EAAA,EAAA1E,IAAA,kBAAAN,MAE/B,SAAAkF,GACI,MAAO,EAACrE,EADmCqE,EAAdrE,kBAEjC,KAACmE,CAAA,CAJiC,CAAmCzC,GAAtC,CAMjC,WAjCgBA,EAkCK4C,UAAY,aAAAC,IAAA3C,EAAAA,EAAAA,GAAA4C,EAAAD,GAAA,IAAAE,GAAA3C,EAAAA,EAAAA,GAAA0C,GAAA,SAAAA,IAAA,OAAA1F,EAAAA,EAAAA,GAAA,KAAA0F,GAAAC,EAAArB,MAAA,KAAAC,UAAA,CAI9B,OAJ8B7D,EAAAA,EAAAA,GAAAgF,EAAA,EAAA/E,IAAA,kBAAAN,MAE/B,SAAAuF,GACI,MAAO,EAACzE,EADqCyE,EAAhBzE,oBAEjC,KAACuE,CAAA,CAJiC,CAAqC9C,GAAxC,CAMjC,aChDyD,I,EAAAiD,GAAAnE,EAAAA,EAAAA,GAAA,WAAAoE,GAAApE,EAAAA,EAAAA,GAAA,QAAAqE,GAAArE,EAAAA,EAAAA,GAAA,WAElDsE,EAAiB,WAU1B,SAAAA,EAAmBC,GACf,IAD2CjG,EAAAA,EAAAA,GAAA,KAAAgG,GAR/C/F,OAAAC,eAAA,KAAA2F,EAAA,CAAAzF,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAA4F,EAAA,CAAA1F,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,eAAA,KAAA6F,EAAA,CAAA3F,UAAA,EAAAC,WAAA,IASQ4F,IAAiBrD,EAAYuC,QAC7B,MAAM,IAAIlD,eAAe,gEAC7BzB,EAAAA,EAAAA,GAAAC,KAAIsF,GAAAA,GAAY,IAAInG,EAAaqG,GAAc,GAAO,IACtDzF,EAAAA,EAAAA,GAAAC,KAAIoF,GAAAA,GAAY,CAACpF,KAAKyF,QAC1B,CA+CA,OA7CAxF,EAAAA,EAAAA,GAAAsF,EAAA,EAAArF,IAAA,UAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIoF,GAAAA,EACf,GAAC,CAAAlF,IAAA,WAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIoF,GAAAA,EACf,GAAC,CAAAlF,IAAA,UAAAC,IAGD,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIsF,GAAAA,EACf,EAAC5D,IAED,SAAmB9B,GACF,MAATA,GAEJI,KAAK0F,QAAQ1F,KAAKyF,SACbL,SAASO,MAAK5F,EAAAA,EAAAA,GAAAC,KAAIsF,GAAAA,GAAY1F,EACvC,GAAC,CAAAM,IAAA,aAAAN,MAED,SAAkBA,GAEd,OADAI,KAAKyF,QAAU7F,EACRI,IACX,GAAC,CAAAE,IAAA,OAAAC,IAGD,WACI,GAAkB,OAAdJ,EAAAA,EAAAA,GAAAC,KAAIqF,GAAAA,GACJ,MAAM,IAAI7D,eAAe,kCAC7B,OAAAzB,EAAAA,EAAAA,GAAOC,KAAIqF,GAAAA,EACf,EAAC3D,IAED,SAAmB9B,GACf,GAAa,MAATA,EACA,MAAM,IAAIgG,UAAU,qDACxB7F,EAAAA,EAAAA,GAAAC,KAAIqF,GAAAA,GAASzF,CACjB,GAAC,CAAAM,IAAA,UAAAN,MAED,SAAkBA,GAEd,OADAI,KAAK6F,KAAOjG,EACLI,IACX,KAEAuF,CAAA,CA9D0B,GCMvB9B,EAAwCtB,EAAxCsB,QAASO,EAA+B7B,EAA/B6B,OAAQK,EAAuBlC,EAAvBkC,QAASU,EAAc5C,EAAd4C,UAIjCe,GAAA7E,EAAAA,EAAAA,GAAA,UAAA8E,GAAA9E,EAAAA,EAAAA,GAAA,SAAA+E,GAAA/E,EAAAA,EAAAA,GAAA,YAAAmE,GAAAnE,EAAAA,EAAAA,GAAA,WAAAgF,GAAAhF,EAAAA,EAAAA,GAAA,SAAAiF,GAAAjF,EAAAA,EAAAA,GAAA,mBAAAkF,GAAAlF,EAAAA,EAAAA,GAAA,gBAAAmF,GAAAnF,EAAAA,EAAAA,GAAA,eAAAoF,GAAApF,EAAAA,EAAAA,GAAA,iBAAAqF,GAAArF,EAAAA,EAAAA,GAAA,gBAAAsF,GAAAtF,EAAAA,EAAAA,GAAA,gBAAAuF,GAAAvF,EAAAA,EAAAA,GAAA,eAAAwF,GAAAxF,EAAAA,EAAAA,GAAA,wBAAAyF,GAAAzF,EAAAA,EAAAA,GAAA,uBAAA0F,IAAA1F,EAAAA,EAAAA,GAAA,eAAA2F,IAAA3F,EAAAA,EAAAA,GAAA,kBAAA4F,IAAA5F,EAAAA,EAAAA,GAAA,gBAAA6F,IAAA7F,EAAAA,EAAAA,GAAA,cAIa8F,GAAiB,SAAAC,IAAA3E,EAAAA,EAAAA,GAAA0E,EAAAC,GAAA,IAAA1E,GAAAC,EAAAA,EAAAA,GAAAwE,GA4B1B,SAAAA,EAAmBE,EAAgBC,GAA0F,IAADzE,EAA3E0E,EAAmBrD,UAAAsD,OAAA,QAAAC,IAAAvD,UAAA,GAAAA,UAAA,GAAG5C,EAAoBY,kBAKd,OAL+BvC,EAAAA,EAAAA,GAAA,KAAAwH,GACxGtE,EAAAH,EAAAI,KAAA,KAAMuE,EAAO/G,KA1BjBV,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAqD,EAAA,CAAAnG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAsD,EAAA,CAAApG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAuD,EAAA,CAAArG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA2C,EAAA,CAAAzF,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAwD,EAAA,CAAAtG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAyD,EAAA,CAAAvG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA0D,EAAA,CAAAxG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA2D,EAAA,CAAAzG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA4D,EAAA,CAAA1G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA6D,EAAA,CAAA3G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA8D,EAAA,CAAA5G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAA+D,EAAA,CAAA7G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAgE,EAAA,CAAA9G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAiE,EAAA,CAAA/G,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAkE,GAAA,CAAAhH,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAmE,GAAA,CAAAjH,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAoE,GAAA,CAAAlH,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAqE,GAAA,CAAAnH,UAAA,EAAAC,WAAA,KA2BIG,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAqD,GAAAA,GAAemB,GACflH,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAsD,GAAAA,GAAcmB,GACdnH,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAuD,GAAAA,GAAiBmB,EACjB1E,EAAK6E,WAAUvH,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAA2C,GAAAA,GAAgB,IAAIG,EAAkB9B,IAAWgC,SAAShD,CAC7E,CAoWC,OAlWDxC,EAAAA,EAAAA,GAAA8G,EAAA,EAAA7G,IAAA,SAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAI8F,GAAAA,EACf,GAAC,CAAA5F,IAAA,QAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAI+F,GAAAA,EACf,GAAC,CAAA7F,IAAA,WAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIgG,GAAAA,EACf,GAAC,CAAA9F,IAAA,UAAAC,IAED,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAIoF,GAAAA,EACf,GAEA,CAAAlF,IAAA,QAAAC,IAEA,WAAsC,IAADoH,EAAA,KACjC,GAAmB,OAAfxH,EAAAA,EAAAA,GAAAC,KAAIiG,GAAAA,GAAiB,CACrB,IAAMuB,GAAQzH,EAAAA,EAAAA,GAAAC,KAAIiG,GAAAA,GAAU,IAAIwB,MAAMzH,KAAKiH,OAAOS,UAClDF,EAAMG,UAAY,SAAAC,GAAU,IAADC,EACvB,OAAQN,EAAKO,QAAQrC,QAAQrG,OACzB,KAAKqE,EACD,OAAO8D,EAAK/D,OAChB,KAAKQ,EACD,OAAOuD,EAAKQ,QAEpBR,EAAKD,SAAS,IAAInI,EAAakF,GAAS,GAAO,IAC5B,QAAnBwD,EAAAN,EAAKS,sBAAc,IAAAH,GAAnBA,EAAAnF,KAAA6E,EAAsBA,EAAMK,EAChC,EACAJ,EAAMS,QAAU,SAAAL,GAAU,IAADM,EACrBX,EAAKD,SAAS,IAAInI,EAAa6E,GAAQ,GAAO,IAC7B,QAAjBkE,EAAAX,EAAKY,oBAAY,IAAAD,GAAjBA,EAAAxF,KAAA6E,EAAoBA,EAAMK,EAC9B,EACAJ,EAAMY,OAAS,SAAAR,GAAU,IAADS,EACpBd,EAAKD,SAAS,IAAInI,EAAakF,GAAS,GAAM,IAC9B,QAAhBgE,EAAAd,EAAKe,mBAAW,IAAAD,GAAhBA,EAAA3F,KAAA6E,EAAmBA,EAAMK,EAC7B,EACAJ,EAAMe,QAAU,SAAAX,GAAU,IAADY,EACrBjB,EAAKD,SAAS,IAAInI,EAAasE,GAAS,GAAO,IAChC,QAAf+E,EAAAjB,EAAKkB,kBAAU,IAAAD,GAAfA,EAAA9F,KAAA6E,EAAkBA,EAAMK,EAC5B,EACAJ,EAAMN,MAAQlH,KAAKkH,MACnBM,EAAMkB,KAAO1I,KAAKmH,QACtB,CACA,OAAApH,EAAAA,EAAAA,GAAOC,KAAIiG,GAAAA,EACf,GAEA,CAAA/F,IAAA,kBAAAC,IACA,WACI,OAAsB,OAAfJ,EAAAA,EAAAA,GAAAC,KAAIiG,GAAAA,EACf,GAEA,CAAA/F,IAAA,WAAAC,IAIA,WAAgC,IAADwB,EAAAC,EAC3B,OAA0B,QAA1BD,EAAW,QAAXC,GAAA7B,EAAAA,EAAAA,GAAOC,KAAIiG,GAAAA,UAAA,IAAArE,OAAA,EAAJA,EAAa+G,cAAM,IAAAhH,GAAAA,CAC9B,GAEA,CAAAzB,IAAA,kBAAAC,IAMA,WACI,GAA6B,OAAzBJ,EAAAA,EAAAA,GAAAC,KAAIkG,GAAAA,GAA2B,CAC/B,IAAKlG,KAAK4I,gBACN,OAAO,GACX7I,EAAAA,EAAAA,GAAAC,KAAIkG,GAAAA,GAAoB2C,OAAOC,SAAS9I,KAAKwH,MAAMuB,SACvD,CACA,OAAAhJ,EAAAA,EAAAA,GAAOC,KAAIkG,GAAAA,EACf,GAEA,CAAAhG,IAAA,eAAAC,IAEA,WAA0E,IAAD6I,EACrE,OAAW,QAAXA,GAAAjJ,EAAAA,EAAAA,GAAOC,KAAImG,GAAAA,UAAA,IAAA6C,EAAAA,EAAkB,IACjC,EAACtH,IAED,SAAwB9B,IACpBG,EAAAA,EAAAA,GAAAC,KAAImG,GAAAA,GAAsB,OAALvG,QAAK,IAALA,EAAAA,EAAS,IAClC,GAAC,CAAAM,IAAA,kBAAAN,MAED,SAAuBA,GAEnB,OADAI,KAAKiJ,aAAerJ,EACbI,IACX,GAAC,CAAAE,IAAA,cAAAC,IAGD,WAAwE,IAAD+I,EACnE,OAAW,QAAXA,GAAAnJ,EAAAA,EAAAA,GAAOC,KAAIoG,GAAAA,UAAA,IAAA8C,EAAAA,EAAiB,IAChC,EAACxH,IAED,SAAuB9B,IACnBG,EAAAA,EAAAA,GAAAC,KAAIoG,GAAAA,GAAqB,OAALxG,QAAK,IAALA,EAAAA,EAAS,IACjC,GAAC,CAAAM,IAAA,iBAAAN,MAED,SAAsBA,GAElB,OADAI,KAAKmJ,YAAcvJ,EACZI,IACX,GAAC,CAAAE,IAAA,gBAAAC,IAGD,WAA4E,IAADiJ,EACvE,OAAW,QAAXA,GAAArJ,EAAAA,EAAAA,GAAOC,KAAIqG,GAAAA,UAAA,IAAA+C,EAAAA,EAAmB,IAClC,EAAC1H,IAED,SAAyB9B,IACrBG,EAAAA,EAAAA,GAAAC,KAAIqG,GAAAA,GAAuB,OAALzG,QAAK,IAALA,EAAAA,EAAS,IACnC,GAAC,CAAAM,IAAA,mBAAAN,MAED,SAAwBA,GAEpB,OADAI,KAAKqJ,cAAgBzJ,EACdI,IACX,GAAC,CAAAE,IAAA,eAAAC,IAGD,WAA0E,IAADmJ,EACrE,OAAW,QAAXA,GAAAvJ,EAAAA,EAAAA,GAAOC,KAAIsG,GAAAA,UAAA,IAAAgD,EAAAA,EAAkB,IACjC,EAAC5H,IAED,SAAwB9B,IACpBG,EAAAA,EAAAA,GAAAC,KAAIsG,GAAAA,GAAsB,OAAL1G,QAAK,IAALA,EAAAA,EAAS,IAClC,GAAC,CAAAM,IAAA,kBAAAN,MAED,SAAuBA,GAEnB,OADAI,KAAKuJ,aAAe3J,EACbI,IACX,GAAC,CAAAE,IAAA,eAAAC,IAGD,WAA0E,IAADqJ,EACrE,OAAW,QAAXA,GAAAzJ,EAAAA,EAAAA,GAAOC,KAAIuG,GAAAA,UAAA,IAAAiD,EAAAA,EAAkB,IACjC,EAAC9H,IAED,SAAwB9B,IACpBG,EAAAA,EAAAA,GAAAC,KAAIuG,GAAAA,GAAsB,OAAL3G,QAAK,IAALA,EAAAA,EAAS,IAClC,GAAC,CAAAM,IAAA,kBAAAN,MAED,SAAuBA,GAEnB,OADAI,KAAKyJ,aAAe7J,EACbI,IACX,GAAC,CAAAE,IAAA,cAAAC,IAGD,WAAwE,IAADuJ,EACnE,OAAW,QAAXA,GAAA3J,EAAAA,EAAAA,GAAOC,KAAIwG,GAAAA,UAAA,IAAAkD,EAAAA,EAAiB,IAChC,EAAChI,IAED,SAAuB9B,IACnBG,EAAAA,EAAAA,GAAAC,KAAIwG,GAAAA,GAAqB,OAAL5G,QAAK,IAALA,EAAAA,EAAS,IACjC,GAAC,CAAAM,IAAA,iBAAAN,MAED,SAAsBA,GAElB,OADAI,KAAK2J,YAAc/J,EACZI,IACX,GAAC,CAAAE,IAAA,uBAAAC,IAGD,WAA0F,IAADyJ,EACrF,OAAW,QAAXA,GAAA7J,EAAAA,EAAAA,GAAOC,KAAIyG,GAAAA,UAAA,IAAAmD,EAAAA,EAA0B,IACzC,EAAClI,IAED,SAAgC9B,IAC5BG,EAAAA,EAAAA,GAAAC,KAAIyG,GAAAA,GAA8B,OAAL7G,QAAK,IAALA,EAAAA,EAAS,IAC1C,GAAC,CAAAM,IAAA,0BAAAN,MAED,SAA+BA,GAE3B,OADAI,KAAK6J,qBAAuBjK,EACrBI,IACX,GAAC,CAAAE,IAAA,sBAAAC,IAGD,WAAwF,IAAD2J,EACnF,OAAW,QAAXA,GAAA/J,EAAAA,EAAAA,GAAOC,KAAI0G,GAAAA,UAAA,IAAAoD,EAAAA,EAAyB,IACxC,EAACpI,IAED,SAA+B9B,IAC3BG,EAAAA,EAAAA,GAAAC,KAAI0G,GAAAA,GAA6B,OAAL9G,QAAK,IAALA,EAAAA,EAAS,IACzC,GAAC,CAAAM,IAAA,yBAAAN,MAED,SAA8BA,GAE1B,OADAI,KAAK+J,oBAAsBnK,EACpBI,IACX,GAGA,CAAAE,IAAA,iBAAAC,IAEA,WAA8E,IAAD6J,EACzE,OAAW,QAAXA,GAAAjK,EAAAA,EAAAA,GAAOC,KAAI4G,IAAAA,WAAA,IAAAoD,EAAAA,EAAoB,IACnC,EAACtI,IAED,SAA0B9B,IACtBG,EAAAA,EAAAA,GAAAC,KAAI4G,IAAAA,IAAwB,OAALhH,QAAK,IAALA,EAAAA,EAAS,IACpC,GAAC,CAAAM,IAAA,oBAAAN,MAED,SAAyBA,GAErB,OADAI,KAAKgI,eAAiBpI,EACfI,IACX,GAAC,CAAAE,IAAA,cAAAC,IAGD,WAAwE,IAAD8J,EACnE,OAAW,QAAXA,GAAAlK,EAAAA,EAAAA,GAAOC,KAAI2G,IAAAA,WAAA,IAAAsD,EAAAA,EAAiB,IAChC,EAACvI,IAED,SAAuB9B,IACnBG,EAAAA,EAAAA,GAAAC,KAAI2G,IAAAA,IAAqB,OAAL/G,QAAK,IAALA,EAAAA,EAAS,IACjC,GAAC,CAAAM,IAAA,iBAAAN,MAED,SAAsBA,GAElB,OADAI,KAAKsI,YAAc1I,EACZI,IACX,GAAC,CAAAE,IAAA,eAAAC,IAGD,WAA0E,IAAD+J,EACrE,OAAW,QAAXA,GAAAnK,EAAAA,EAAAA,GAAOC,KAAI6G,IAAAA,WAAA,IAAAqD,EAAAA,EAAkB,IACjC,EAACxI,IAED,SAAwB9B,IACpBG,EAAAA,EAAAA,GAAAC,KAAI6G,IAAAA,IAAsB,OAALjH,QAAK,IAALA,EAAAA,EAAS,IAClC,GAAC,CAAAM,IAAA,kBAAAN,MAED,SAAuBA,GAEnB,OADAI,KAAKmI,aAAevI,EACbI,IACX,GAAC,CAAAE,IAAA,aAAAC,IAGD,WAAiE,IAADgK,EAC5D,OAAW,QAAXA,GAAApK,EAAAA,EAAAA,GAAOC,KAAI8G,IAAAA,WAAA,IAAAqD,EAAAA,EAAgB,IAC/B,EAACzI,IAED,SAAsB9B,IAClBG,EAAAA,EAAAA,GAAAC,KAAI8G,IAAAA,IAAoB,OAALlH,QAAK,IAALA,EAAAA,EAAS,IAChC,GAAC,CAAAM,IAAA,gBAAAN,MAED,SAAqBA,GAEjB,OADAI,KAAKyI,WAAa7I,EACXI,IACX,GAQA,CAAAE,IAAA,OAAAN,MAiBA,WAA8B,IAADwK,EAAAC,EAAAC,EAAA,KACnB9E,EAAexF,KAAK8H,QAAQrC,QAElC,OAAID,EAAanG,UACNW,KAAKsH,SAAS,IAAInI,EAAakF,GAAS,GAAM,KACrDmB,EAAapG,QAAUiF,IAGV,QAAjB+F,EAAApK,KAAKiJ,oBAAY,IAAAmB,GAAjBA,EAAA1H,KAAA1C,KAAoBA,MAENA,KAAKwH,MACb+C,OACDC,MAAK,kBAAMF,EAAKG,gBAAkBH,EAAOA,EAAKhD,SAAS,IAAInI,EAAa4F,GAAW,GAAO,GAAS,IACnG2F,OAAM,kBAAMJ,EAAKhD,SAAS,IAAInI,EAAa4F,GAAW,GAAO,GAAS,IAC3E/E,KAAKsH,SAAS,IAAInI,EAAakF,GAAS,GAAM,IAC9B,QAAhBgG,EAAArK,KAAKmJ,mBAAW,IAAAkB,GAAhBA,EAAA3H,KAAA1C,KAAmBA,OATRA,KAWf,GAEA,CAAAE,IAAA,QAAAN,MAMA,WAA+B,IAAD+K,EAAAC,EACpBpF,EAAexF,KAAK8H,QAAQrC,QAC9BpG,EAAYmG,EAAanG,UACzBwL,EAAWrF,EAAapG,QAAU4E,EAEtC,IAAK3E,IAAcwL,EAAU,CACzB,GAAIxL,EACA,OAAOW,KAAKsH,SAAS,IAAInI,EAAa6E,GAAQ,GAAM,IACxD,GAAI6G,EACA,OAAO7K,IACf,CAMA,OAJkB,QAAlB2K,EAAA3K,KAAKqJ,qBAAa,IAAAsB,GAAlBA,EAAAjI,KAAA1C,KAAqBA,MACrBA,KAAKwH,MAAMO,QACX/H,KAAKsH,SAAS,IAAInI,EAAa6E,GAAQ,GAAO,IAC7B,QAAjB4G,EAAA5K,KAAKuJ,oBAAY,IAAAqB,GAAjBA,EAAAlI,KAAA1C,KAAoBA,MACbA,IACX,GAEA,CAAAE,IAAA,OAAAN,MAOA,WAA8B,IAADkL,EAAAC,EACnBvF,EAAexF,KAAK8H,QAAQrC,QAC9BpG,EAAYmG,EAAanG,UACzB2L,EAAYxF,EAAapG,QAAUqE,EAEvC,IAAKpE,IAAc2L,EAAW,CAC1B,GAAI3L,EACA,OAAOW,KAAKsH,SAAS,IAAInI,EAAasE,GAAS,GAAM,IACzD,GAAIuH,EACA,OAAOhL,IACf,CAEiB,QAAjB8K,EAAA9K,KAAKyJ,oBAAY,IAAAqB,GAAjBA,EAAApI,KAAA1C,KAAoBA,MACpB,IAAMwH,EAAQxH,KAAKwH,MAKnB,OAJAA,EAAMO,QACNP,EAAMyD,YAAc,EACpBjL,KAAKsH,SAAS,IAAInI,EAAasE,GAAS,GAAO,IAC/B,QAAhBsH,EAAA/K,KAAK2J,mBAAW,IAAAoB,GAAhBA,EAAArI,KAAA1C,KAAmBA,MACZA,IACX,GAAC,CAAAE,IAAA,WAAAN,MAED,SAAgBA,GAA6B,IAADsL,EAAAC,EAClCrD,EAAU9H,KAAK8H,QACjBtC,EAAesC,EAAQrC,QAC3B,OAAID,EAAa4F,OAAOxL,KAEC,QAAzBsL,EAAAlL,KAAK6J,4BAAoB,IAAAqB,GAAzBA,EAAAxI,KAAA1C,KAA4BA,KAAMJ,EAAO4F,GACzCsC,EAAQrC,QAAU7F,EACM,QAAxBuL,EAAAnL,KAAK+J,2BAAmB,IAAAoB,GAAxBA,EAAAzI,KAAA1C,KAA2BA,KAAMJ,EAAO4F,IAH7BxF,IAKf,KAAC+G,CAAA,CAtYyB,CAClB7F,GCdCmK,GAAkB,oBAAAA,KAAA9L,EAAAA,EAAAA,GAAA,KAAA8L,EAAA,CAW1B,OAX0BpL,EAAAA,EAAAA,GAAAoL,EAAA,OAAAnL,IAAA,eAAAN,MAS3B,SAAqIqH,EAAgBC,EAAcC,GAC/J,OAAO,IAAIJ,GAAkBE,EAAQC,EAAe,OAARC,QAAQ,IAARA,EAAAA,EAAYjG,EAAoBY,kBAChF,KAACuJ,CAAA,CAX0B,GCC4BtJ,IAAAd,EAAAA,EAAAA,GAAA,eAAAe,EAyJvCC,OAAOC,SAvJpB,IAAeoJ,GAAU,SAAAlJ,IAAAC,EAAAA,EAAAA,GAAAiJ,EAAAlJ,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA+I,GAoF5B,SAAAA,EAAoB9I,GAA4B,IAADC,EAEZ,OAFYlD,EAAAA,EAAAA,GAAA,KAAA+L,GAC3C7I,EAAAH,EAAAI,KAAA,MAPJlD,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAV,GAAA,CAAApC,UAAA,EAAAC,WAAA,KAQIG,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAV,IAAAA,IAAoBS,EAAWC,CACnC,CAoEA,OAlEAxC,EAAAA,EAAAA,GAAAqL,EAAA,EAAApL,IAAA,cAAAC,IAEA,WACI,OAAAJ,EAAAA,EAAAA,GAAOC,KAAI+B,IAAAA,GACf,GAAC,CAAA7B,IAAA,oBAAAC,IAED,WACI,OAAOH,KAAKwC,WAChB,GAKA,CAAAtC,IAAA,WAAAN,MAKA,SAAgB2L,GAChB,GAEA,CAAArL,IAAA,SAAAN,MAKA,SAAc2L,GACV,OAAO,IACX,GAAC,CAAArL,IAAA,UAAAC,IAUD,WACI,OAAOmL,CACX,IAAC,EAAApL,IAAA,iBAAAN,MATD,SAA6BA,GACzB,OAAOgD,EAAAA,EAAAA,IAAsBhD,EAAOI,KACxC,GAAC,CAAAE,IAAA,UAAAC,IASD,WACI,OAAO0C,EAAAA,GAAK2I,aAAaxL,KAC7B,EAAC0B,IAED,SAA0B9B,GACtBI,KAAKyL,WAAW7L,EACpB,GAAC,CAAAM,IAAA,aAAAN,MAED,SAAyBA,GACrB,OAAOiD,EAAAA,GAAK6I,aAAa1L,KAAMJ,EACnC,GAAC,CAAAM,IAAA,WAAAN,MAED,SAAuBA,GACnB,OAAOiD,EAAAA,GAAKC,WAAW9C,KAAMJ,EACjC,GAAC,CAAAM,IAAA,SAAAC,IAED,WACI,OAAO0C,EAAAA,GAAKE,YAAY/C,KAC5B,GAAC,CAAAE,IAAA8B,EAAApC,OAAAoD,EAAAA,EAAAA,KAAAC,MAED,SAAArD,IAAA,OAAAoD,EAAAA,EAAAA,KAAAE,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACI,OAAAF,EAAAG,cAAOtD,KAAKuD,OAAM,gCAAAJ,EAAAK,OAAA,GAAA5D,EAAA,YAGtB0L,CAAA,CA3J4B,CACpBzI,EAAAA,IADUyI,GAYKK,QAAiB,aAAAC,IAAAvJ,EAAAA,EAAAA,GAAAwJ,EAAAD,GAAA,IAAAhI,GAAArB,EAAAA,EAAAA,GAAAsJ,GAAA,SAAAA,IAAA,OAAAtM,EAAAA,EAAAA,GAAA,KAAAsM,GAAAjI,EAAAC,MAAA,KAAAC,UAAA,CASnC,OATmC7D,EAAAA,EAAAA,GAAA4L,EAAA,EAAA3L,IAAA,WAAAN,MAEpC,SAAyB2L,GACrBA,GAAS,EACb,GAAC,CAAArL,IAAA,SAAAN,MAED,SAAuB2L,GAEnB,OADAA,GAAS,IACF,CACX,KAACM,CAAA,CATsC,CAAkCP,IAArC,CAWtC,WAvBgBA,GA8BKQ,OAAiB,aAAAC,IAAA1J,EAAAA,EAAAA,GAAA2J,EAAAD,GAAA,IAAA5H,GAAA5B,EAAAA,EAAAA,GAAAyJ,GAAA,SAAAA,IAAA,OAAAzM,EAAAA,EAAAA,GAAA,KAAAyM,GAAA7H,EAAAN,MAAA,KAAAC,UAAA,CASnC,OATmC7D,EAAAA,EAAAA,GAAA+L,EAAA,EAAA9L,IAAA,WAAAN,MAEpC,SAAyB2L,GACrBA,GAAS,EACb,GAAC,CAAArL,IAAA,SAAAN,MAED,SAAuB2L,GAEnB,OADAA,GAAS,IACF,CACX,KAACS,CAAA,CATsC,CAAiCV,IAApC,CAWtC,UAzCgBA,GAiDKW,aAAiB,aAAAC,IAAA7J,EAAAA,EAAAA,GAAA8J,EAAAD,GAAA,IAAA1H,GAAAjC,EAAAA,EAAAA,GAAA4J,GAAA,SAAAA,IAAA,OAAA5M,EAAAA,EAAAA,GAAA,KAAA4M,GAAA3H,EAAAX,MAAA,KAAAC,UAAA,CAKnC,OALmC7D,EAAAA,EAAAA,GAAAkM,EAAA,EAAAjM,IAAA,SAAAN,MAEpC,SAAuB2L,GAEnB,OADAA,IACO,IACX,KAACY,CAAA,CALsC,CAAsCb,IAAzC,CAOtC,gBAxDgBA,GA+DKc,eAAiB,aAAAC,IAAAhK,EAAAA,EAAAA,GAAAiK,EAAAD,GAAA,IAAAxH,GAAAtC,EAAAA,EAAAA,GAAA+J,GAAA,SAAAA,IAAA,OAAA/M,EAAAA,EAAAA,GAAA,KAAA+M,GAAAzH,EAAAhB,MAAA,KAAAC,UAAA,CAInC,OAJmC7D,EAAAA,EAAAA,GAAAqM,EAAA,EAAApM,IAAA,WAAAN,MAEpC,SAAyB2L,GACrBA,GACJ,KAACe,CAAA,CAJsC,CAAwChB,IAA3C,CAMtC,kBArEgBA,GA2EQiB,SAAWjB,GAAWW,a,cChE7CxI,GAAqBtB,EAArBsB,QAASiB,GAAYvC,EAAZuC,QAEhB8H,IAAAvL,EAAAA,EAAAA,GAAA,gBAAAwL,IAAAxL,EAAAA,EAAAA,GAAA,iBAAAyL,IAAAzL,EAAAA,EAAAA,GAAA,gBAAA0L,IAAA1L,EAAAA,EAAAA,GAAA,mBAAA2L,IAAA3L,EAAAA,EAAAA,GAAA,qBAAAgF,IAAAhF,EAAAA,EAAAA,GAAA,SAAA4L,IAAA5L,EAAAA,EAAAA,GAAA,yBAEqB6L,GAAoB,SAAA1K,IAAAC,EAAAA,EAAAA,GAAAyK,EAAA1K,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuK,GAiBrC,SAAAA,EAAmBC,GAA6C,IAADtK,EAY1D,OAZ0DlD,EAAAA,EAAAA,GAAA,KAAAuN,GAC3DrK,EAAAH,EAAAI,KAAA,KAAMqK,GAAOvN,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAwD,GAAA,CAAAtG,UAAA,EAAAC,WAAA,IAAAJ,OAAAC,gBAAAkD,EAAAA,EAAAA,GAAAF,GAAAoK,GAAA,CAAAlN,UAAA,EAAAC,WAAA,IACb6C,EAAKrD,MAAQ,CACTA,MAAO,IAAID,EAAasE,IAAS,GAAO,GACxCuJ,mBAAmB,IAEvBjN,EAAAA,EAAAA,IAAA4C,EAAAA,EAAAA,GAAAF,GAAAoK,IAAAA,IAA8B,SAAAjN,GACZ6C,EAAKwD,OACSwE,gBAEtBhI,EAAK6E,SAAS,CAAC0F,mBAAmB,GAE5C,EAACvK,CACL,CA8EA,OAzEAxC,EAAAA,EAAAA,GAAA6M,EAAA,EAAA5M,IAAA,OAAAC,IACA,WACI,OAAOH,KAAK+M,MAAME,IACtB,GAEA,CAAA/M,IAAA,QAAAC,IACA,WACI,OAAOH,KAAK+M,MAAM7F,KACtB,GAEA,CAAAhH,IAAA,YAAAC,IACA,WAAoC,IAAD+M,EAC/B,OAA2B,QAA3BA,EAAOlN,KAAK+M,MAAMI,iBAAS,IAAAD,EAAAA,EAAI5B,GAAW8B,OAC9C,GAGA,CAAAlN,IAAA,iBAAAC,IACA,WACI,OAAOH,KAAKZ,MAAMA,KACtB,GAEA,CAAAc,IAAA,oBAAAC,IACA,WACI,OAAOH,KAAKZ,MAAM4N,iBACtB,GAGA,CAAA9M,IAAA,SAAAC,IAIA,WAAwD,IAADoH,EAAA,KACnD,GAAmB,OAAfxH,EAAAA,EAAAA,GAAAC,KAAIiG,IAAAA,IAAiB,CACrB,IAAMgB,EAASjH,KAAKiN,MACpBlN,EAAAA,EAAAA,GAAAC,KAAIiG,IAAAA,IAAUoF,GAAmBgC,aAAapG,EAAQjH,KAAKkH,OACtDoG,iBAAgB,kBAAM/F,EAAK4F,UAAUI,QAAMxN,EAAAA,EAAAA,GAACwH,EAAIsF,IAAAA,IAAwB,IACxEW,wBAAuB,SAAAC,GAAW,OAAIlG,EAAKD,SAAS,CAAClI,MAAOqO,EAAY3F,QAAQrC,SAAU,GACnG,CACA,OAAA1F,EAAAA,EAAAA,GAAOC,KAAIiG,IAAAA,GACf,GAGA,CAAA/F,IAAA,oBAAAN,MAEA,WACSI,KAAKgN,mBACNhN,KAAKmN,UAAUO,UAAQ3N,EAAAA,EAAAA,GAACC,KAAI6M,IAAAA,IACpC,GAAC,CAAA3M,IAAA,uBAAAN,MAED,WACI,IAAM4H,GAAKzH,EAAAA,EAAAA,GAAGC,KAAIiG,IAAAA,IACL,MAATuB,IAEJA,EAAMF,SAAS,IAAInI,EAAasE,IAAS,GAAO,IAChDvC,EAAoBE,IAAIuM,OAAOnG,EAAMP,OAAO/G,KAChD,GAAC,CAAAA,IAAA,SAAAN,MAED,WAAuC,IAAD0K,EAAA,KAC5BsD,EAAiB,IAAIvN,GACnB,kBAAMwN,EAAAA,GAAAA,KAAA,OAAkCC,WAAS/N,EAAAA,EAAAA,GAAE+M,EAAoBN,IAAAA,IAAgBuB,QAAS,kBAAMzD,EAAKrE,OAAOsE,MAAM,GAAC,GAAA9I,OAAtG6I,EAAKpD,MAAK,WAA8F,IAC3H,kBAAM2G,EAAAA,GAAAA,KAAA,OAAmCC,WAAS/N,EAAAA,EAAAA,GAAE+M,EAAoBL,IAAAA,IAAiBsB,QAAS,kBAAMzD,EAAKrE,OAAO8B,OAAO,GAAC,GAAAtG,OAAzG6I,EAAKpD,MAAK,YAAiG,IAC9H,kBAAM2G,EAAAA,GAAAA,KAAA,OAAkCC,WAAS/N,EAAAA,EAAAA,GAAE+M,EAAoBJ,IAAAA,IAAgBqB,QAAS,kBAAMzD,EAAKrE,OAAOzC,MAAM,GAAC,GAAA/B,OAAtG6I,EAAKpD,MAAK,WAA8F,IAC3H,kBAAM2G,EAAAA,GAAAA,KAAA,OAAqCC,WAAS/N,EAAAA,EAAAA,GAAE+M,EAAoBH,IAAAA,IAAmBqB,KAAK,UAAQ,GAAAvM,OAAvF6I,EAAKpD,MAAK,cAA+E,IAC5G,kBAAM2G,EAAAA,GAAAA,KAAA,OAAuCC,WAAS/N,EAAAA,EAAAA,GAAE+M,EAAoBF,IAAAA,KAAoB,GAAAnL,OAA7E6I,EAAKpD,MAAK,gBAAqE,IAEtG+G,EAAiBjO,KAAKiO,eAE1B,OAAOC,EAAAA,GAAAA,MAAA,OAAuCJ,UAAU,kCAAiCK,SAAA,CACpFF,EAAe5O,UAAYqF,GAAQ0J,gBAAgBR,GAAkB,KACrEK,EAAe7O,MAAMgP,gBAAgBR,KAAe,GAAAnM,OAFrCzB,KAAKkH,MAAK,gBAIlC,KAEA4F,CAAA,CA5GqC,CAC7BuB,EAAAA,WAGR7O,OAAAC,eAJiBqN,GAAoBN,GAAA,CAAA7M,UAAA,EAAAC,MAML,6DAA0DJ,OAAAC,eANzEqN,GAAoBL,GAAA,CAAA9M,UAAA,EAAAC,MAOJ,+DAA4DJ,OAAAC,eAP5EqN,GAAoBJ,GAAA,CAAA/M,UAAA,EAAAC,MAQL,6DAA0DJ,OAAAC,eARzEqN,GAAoBH,GAAA,CAAAhN,UAAA,EAAAC,MASF,mDAAgDJ,OAAAC,eATlEqN,GAAoBF,GAAA,CAAAjN,UAAA,EAAAC,MAUA,gE","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","import type {ReactElement} from 'util/react/ReactProperties'\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {ExtendedMap} from 'util/extended/ExtendedMap'\nimport type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction}       from 'variables'\nimport {ExtendedMapContainer} from 'util/extended/ExtendedMap.container'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #MAP?: ExtendedMap<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            (AbstractSoundPlayer.map)\n                .if(map => map.includes(key))\n                .isMet(() => {\n                    throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n                })\n                .set(key, this)\n        }\n    }\n\n    public static get map(): ExtendedMap<string, SoundPlayer> {\n        return this.#MAP ??= new ExtendedMapContainer()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\nimport type {Nullable}                     from 'util/types/nullable'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n\n    public static getValueByName(value: Nullable<| SoundStates | string>,): SoundStates {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): EnumerableConstructor<Ordinals, Names> {\n        return SoundStates\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<SoundStates>,): SoundStates {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<SoundStates> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<SoundStates> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {Nullable} from 'util/types/nullable'\n\nimport {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\nimport type {Nullable, NullOr}                                                                                                                                                                                                                                                                                                                                                                                                   from 'util/types/nullable'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false, true,),)\n                this.onPlayingEvent?.(this, event,)\n            }\n            audio.onpause = event => {\n                this.setState(new HistoryState(PAUSED, false, true,),)\n                this.onPauseEvent?.(this, event,)\n            }\n            audio.onplay = event => {\n                this.setState(new HistoryState(PLAYING, true, true,),)\n                this.onPlayEvent?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false, true,),)\n                this.onEndEvent?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\nimport type {Nullable}  from 'util/types/nullable'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import type {CollectionHolder, EnumerableConstructorWithDefault, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                               from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\nimport type {Nullable, NullOrBoolean}                             from 'util/types/nullable'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Validators\n    protected static readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n\n    public static getValueByName(value: Nullable<| Validators | string>,): Validators {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructorWithDefault<Ordinals, Names> {\n        return Validators\n    }\n\n    public static get default(): Validators {\n        return Enum.getDefaultOn(this,)\n    }\n\n    public static set default(value: PossibleValueByEnumerable<Validators>,) {\n        this.setDefault(value,)\n    }\n\n    public static setDefault(value: PossibleValueByEnumerable<Validators>,): typeof Validators {\n        return Enum.setDefaultOn(this, value,)\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<Validators>,): Validators {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<Validators> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<Validators> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.default\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.remove(audio.source.key)\n    }\n\n    public override render(): JSX.Element {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","state","isLoading","isFromEventDirectly","_classCallCheck","Object","defineProperty","_state","writable","value","_isLoading","_isFromEventDirectly","_classPrivateFieldLooseBase","this","_createClass","key","get","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","_playElement","_pauseElement","_stopElement","_loadingElement","_exceptionElement","_MAP","_classPrivateFieldLooseKey","AbstractSoundPlayer","isInProduction","map","if","includes","isMet","ReferenceError","concat","set","_classPrivateFieldLoo","_classPrivateFieldLoo2","ExtendedMapContainer","DEFAULT_DOES_LOOP","_englishName","_Symbol$iterator","Symbol","iterator","SoundStates","_ref","_inherits","_super","_createSuper","englishName","_this","call","_assertThisInitialized","getValueByEnglishName","Enum","getValueOn","getValuesOn","_regeneratorRuntime","mark","wrap","_context","prev","next","delegateYield","values","stop","STANDBY","_SoundStates","SoundStates_Standby","_super2","apply","arguments","_ref2","PAUSED","_SoundStates2","SoundStates_Paused","_super3","_ref3","PLAYING","_SoundStates3","SoundStates_Playing","_super4","_ref4","LOADING","_SoundStates4","SoundStates_Loading","_super5","_ref5","EXCEPTION","_SoundStates5","SoundStates_Exception","_super6","_ref6","_history","_last","_current","SoundStateHistory","currentState","current","setLast","push","TypeError","last","_source","_title","_doesLoop","_audio","_isDurationValid","_onBeforePlay","_onAfterPlay","_onBeforePause","_onAfterPause","_onBeforeStop","_onAfterStop","_onBeforeStateChanged","_onAfterStateChanged","_onPlayEvent","_onPlayingEvent","_onPauseEvent","_onEndEvent","SimpleSoundPlayer","_AbstractSoundPlayer","source","title","doesLoop","length","undefined","setState","_this2","audio","Audio","fullName","onplaying","event","_this2$onPlayingEvent","history","pause","onPlayingEvent","onpause","_this2$onPauseEvent","onPauseEvent","onplay","_this2$onPlayEvent","onPlayEvent","onended","_this2$onEndEvent","onEndEvent","loop","paused","isAudioExistant","Number","isFinite","duration","_classPrivateFieldLoo3","onBeforePlay","_classPrivateFieldLoo4","onAfterPlay","_classPrivateFieldLoo5","onBeforePause","_classPrivateFieldLoo6","onAfterPause","_classPrivateFieldLoo7","onBeforeStop","_classPrivateFieldLoo8","onAfterStop","_classPrivateFieldLoo9","onBeforeStateChanged","_classPrivateFieldLoo10","onAfterStateChanged","_classPrivateFieldLoo11","_classPrivateFieldLoo12","_classPrivateFieldLoo13","_classPrivateFieldLoo14","_this$onBeforePlay","_this$onAfterPlay","_this3","play","then","isDurationValid","catch","_this$onBeforePause","_this$onAfterPause","isPaused","_this$onBeforeStop","_this$onAfterStop","isStandby","currentTime","_this$onBeforeStateCh","_this$onAfterStateCha","equals","SoundPlayerFactory","Validators","callback","getDefaultOn","setDefault","setDefaultOn","ALL_YES","_Validators","SoundFounds_AllYes","ALL_NO","_Validators2","SoundFounds_AllNo","ON_PLAY_ONLY","_Validators3","SoundFounds_OnPlayOnly","ON_CREATE_ONLY","_Validators4","SoundFounds_OnCreateOnly","_DEFAULT","_PLAY_CLASSES","_PAUSE_CLASSES","_STOP_CLASSES","_LOADING_CLASSES","_EXCEPTION_CLASSES","_isSourceFoundCallback","SimpleSoundComponent","props","isSourceRetrieved","file","_this$props$validator","validator","default","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","remove","elementsHolder","_jsx","className","onClick","role","componentState","_jsxs","children","getElementsFrom","Component"],"sourceRoot":""}