{"version":3,"file":"static/js/573.f5a9e027.chunk.js","mappings":"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","sources":["app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/withInterpreter/ListDimension.creator.ts","bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays} from 'app/withInterpreter/ViewDisplays'\nimport {route}        from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation(),\n        path = route(routeName)\n\n    return currentPath === path || view === currentView\n        ? <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n        : <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties}       from 'app/AppProperties.types'\nimport type {AppStates}                          from 'app/AppStates.types'\nimport type {AppInterpreter}                     from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}                   from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ReactElement, ReactElementOrString} from 'util/react/ReactProperties'\nimport type {NullOr}                             from 'util/types/nullable'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}.\n     * It is also used for the {@link Table} id.\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport {ListDimensionCreator}       from 'app/withInterpreter/ListDimension.creator'\nimport NameComponent                from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {SIMPLE_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnSimpleList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            dimensions = optionInterpreter.createListDimension()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main list container`} id={id}\n                     className={`${key}-container listElement-container ${new ListDimensionCreator(dimensions).createDimensions()}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {DimensionOnList}                                                                                                                                                                                           from 'app/interpreter/DimensionOnList'\nimport type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from 'app/withInterpreter/ListDimension.creator.types'\nimport type {ObjectHolder}                                                                                                                                                                                              from 'util/holder/ObjectHolder'\nimport type {NullOr}                                                                                                                                                                                                    from 'util/types/nullable'\n\nimport {ObjectHolderContainer} from 'util/holder/ObjectHolder.container'\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    }\n\n    readonly #dimension\n    #smallHolder: ObjectHolder<| SMALL | DefaultSmallDimension>\n    #mediumHolder: ObjectHolder<| MEDIUM | DefaultMediumDimension>\n    #largeHolder: ObjectHolder<| LARGE | DefaultLargeDimension>\n    #extraLargeHolder: ObjectHolder<| EXTRA_LARGE | DefaultExtraLargeDimension>\n    #extraExtraLargeHolder: ObjectHolder<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>,) {\n        this.#dimension = dimension\n        this.#smallHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.small\n            return value === undefined ? this.defaultSmall : value\n        })\n        this.#mediumHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.medium\n            return value === undefined ? ListDimensionCreator.defaultMedium : value\n        })\n        this.#largeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.large\n            return value === undefined ? this.defaultLarge : value\n        })\n        this.#extraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraLarge\n            return value === undefined ? this.defaultExtraLarge : value\n        })\n        this.#extraExtraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge\n            return value === undefined ? this.defaultExtraExtraLarge : value\n        })\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>>> {\n        return this.#dimension\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>)\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.get\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.get\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.get\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.get\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.get\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {Popover} from 'bootstrap'\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from 'bootstrap/popover/Popover.types'\n\nimport {BootstrapInstance}                from 'bootstrap/BootstapInstance'\nimport {BootstrapWithBasicEventsInstance} from 'bootstrap/BootstrapWithBasicEventsInstance'\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {}\n    /** @see Popover.Events.show */\n    public static readonly SHOW_EVENT = `show${Popover.EVENT_KEY}` as Popover.Events.show\n    /** @see Popover.Events.shown */\n    public static readonly SHOWN_EVENT = `shown${Popover.EVENT_KEY}` as Popover.Events.shown\n    /** @see Popover.Events.hide */\n    public static readonly HIDE_EVENT = `hide${Popover.EVENT_KEY}` as Popover.Events.hide\n    /** @see Popover.Events.hidden */\n    public static readonly HIDDEN_EVENT = `hidden${Popover.EVENT_KEY}` as Popover.Events.hidden\n    /** @see Popover.Events.inserted */\n    public static readonly INSERTED_EVENT = `inserted${Popover.EVENT_KEY}` as Popover.Events.inserted\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,)\n        this.on(callbacks)\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,)\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,))\n        return this\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted)\n        return this\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,)\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element)\n    }\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                              from 'bootstrap/popover/Popover.types'\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {PopoverInstance} from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)))\n    return children ?? null\n}\n","import type {SpanPopoverConfiguration}                          from 'bootstrap/popover/Popover.types'\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import {Popover}                                       from 'bootstrap'\nimport {Component, type Dispatch, type SetStateAction} from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/Popover.types'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\nimport type {ReactElement}                                             from 'util/react/ReactProperties'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.otherProperties.name)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    return <div key={`${id} - list container`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap()].filter(([language,]) => languagesToDisplay.includes(language)).map(([language, value,]) =>\n            <div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n                <TextComponent\n                    content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                    className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n                <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n            </div>\n        )}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["DisplayButtonGroup","_ref","key","reactKey","views","currentView","_jsx","id","className","children","map","_ref2","_ref3","_slicedToArray","view","name","DisplayButton","routeName","concat","_ref4","currentPath","useLocation","pathname","path","route","htmlType","type","disabled","Link","to","onClick","ViewDisplays","current","_possibleViewDisplay","_classPrivateFieldLooseKey","_key","_appInterpreter","AbstractAppWithInterpreter","_AbstractApp","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","writable","value","_createClass","get","this","viewDisplay","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createPossibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_createKey","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAppOptionInterpreter","UnfinishedText","isHidden","_jsxs","_createTitleContent","__possibleViewDisplay","_createAsideContent","_createDescription","createComponent","AbstractApp","SIMPLE_LIST","_routeName","AbstractSimpleListApp","_AbstractAppWithInter","_len","arguments","length","args","Array","apply","__listRouteName","_createSimpleListRouteName","enumerable","englishName","_step","optionInterpreter","_appOptionInterpreter","dimensions","createListDimension","content","_iterator","_createForOfIteratorHelper","iterable","s","n","done","uniqueEnglishName","_createUniqueNameOnSimpleList","reference","nameContainer","englishNameInHtml","push","ListDimensionCreator","createDimensions","NameComponent","popoverOrientation","err","e","f","_Fragment","_dimension","_smallHolder","_mediumHolder","_largeHolder","_extraLargeHolder","_extraExtraLargeHolder","dimension","ObjectHolderContainer","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","_this$dimension","DEFAULT_DIMENSION","_this$dimension$defau","_this$dimension2","default","defaultDefault","sm","md","lg","xl","xxl","_addEventListener","PopoverInstance","_BootstrapWithBasicEv","element","options","DEFAULT_OPTIONS","callbacks","_addEventListener2","on","Popover","getOrCreateInstance","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","_this2","addEventListener","event","option","triggers","elementId","useEffect","flat","forEach","EVENT_KEY","TextPopover","otherProperties","_objectWithoutProperties","_excluded","_objectSpread","TextComponent","_currentLanguageTextContent","NamePopoverComponent","ProjectLanguages","state","listId","setDoesDisplayPopover","setState","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","_toConsumableArray","toNameMap","language","includes","_ref5","languageTranslation","space","unionTrait","_useState","useState","_useState2","english","StringContainer","getInHtml"],"sourceRoot":""}