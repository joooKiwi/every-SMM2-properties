{"version":3,"file":"static/js/686.81d5ebad.chunk.js","mappings":"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","sources":["app/options/ThemeAppOption.tsx","app/ThemeApp.tsx","app/tools/button/LinkButton.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/ThemeAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport Image                    from 'app/tools/images/Image'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport {Themes}                 from 'core/theme/Themes'\nimport {Times}                  from 'core/time/Times'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names>\nimplements AppOption<Themes>{\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return enumeration.renderSingleComponent(false,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly ENDLESS_MARIO_ICON =    new class ThemeAppOption_EndlessMarioImage extends ThemeAppOption {\n\n        protected override _createContentOption({endlessMarioImageFile,}: Themes,) {\n            return <Image file={endlessMarioImageFile}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'endless-mario-icon', element: unfinishedText('Endless Mario'),}//TODO add Endless Mario\n        }\n\n    }()\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <div className=\"nameWithContent-container\">\n                <div className=\"col-10\">\n                    {CommonOptions.get.getGameContent(enumeration)}\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,) {\n            return <NightEffectComponent theme={courseTheme}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <div className=\"nightDesert-header-image-container position-relative mx-auto\">\n                    {Themes.DESERT.renderSingleComponent(false)}\n                    {Times.NIGHT.renderSingleComponent}\n                </div>,\n                tooltip: gameContentTranslation('Effect (night)', {night: unfinishedText('night effect name'),},)//TODO add translation for the night effect name\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<ThemeAppOption, typeof ThemeAppOption> = class CompanionEnum_ThemeAppOption\n        extends CompanionEnum<ThemeAppOption, typeof ThemeAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_ThemeAppOption\n\n        private constructor() {\n            super(ThemeAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_ThemeAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): ReactElement\n\n    public renderContent(enumeration: Themes,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './ThemeApp.scss'\n\nimport type {ThemeAppProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {Themes}                  from 'core/theme/Themes'\nimport type {PossibleRouteName}       from 'route/EveryRoutes.types'\n\nimport {CommonOptions}                                   from 'app/options/CommonOptions'\nimport {ThemeAppOption}                                  from 'app/options/ThemeAppOption'\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport {ThemeTypes}                                      from 'app/property/ThemeTypes'\nimport LinkButton                                        from 'app/tools/button/LinkButton'\nimport Image                                             from 'app/tools/images/Image'\nimport {AbstractTableApp}                                from 'app/withInterpreter/AbstractTableApp'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {filterGame}                                      from 'util/utilitiesMethods'\n\n/** @reactComponent */\nexport default class ThemeApp\n    extends AbstractTableApp<Themes, AppInterpreterWithTable<Themes, ThemeAppOption>, ThemeAppProperties> {\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): ThemeTypes {\n        return this.props.type\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'theme'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (list)`\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (card)`\n    }\n\n    protected override _createTableRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (table)`\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('theme.all.all')\n    }\n\n    protected override _createAsideContent(): ReactElementOrString {\n        const {type, viewDisplay,} = this\n\n        return <div id=\"theme-linkButton-container\" className=\"btn-group btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"allTheme\" routeName={viewDisplay.getRoutePath(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"theme-linkButton-courseAndWorld-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"courseTheme\" routeName={viewDisplay.getRoutePath(type.courseRouteName)} color={type.courseColor}>\n                    <Image id=\"courseTheme-button-image\" file={COURSE_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n                </LinkButton>\n                <LinkButton partialId=\"worldTheme\" routeName={viewDisplay.getRoutePath(type.worldRouteName)} color={type.worldColor}>\n                    <Image id=\"worldTheme-button-image\" file={WORLD_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n                </LinkButton>\n            </div>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class ThemeAppInterpreter implements AppInterpreterWithTable<Themes, ThemeAppOption> {\n\n            public get content() {\n                return filterGame($this.type.content, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                if ($this.type === ThemeTypes.COURSE)\n                    return {\n                        default: 1,\n                        small: 2,\n                        medium: 5,\n                    }\n                if ($this.type === ThemeTypes.WORLD)\n                    return {\n                        default: 1,\n                        small: 2,\n                        medium: 4,\n                    }\n                return {\n                    default: 1,\n                    small: 2,\n                    medium: 3,\n                    large: 4,\n                    extraLarge: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent(enumerable: Themes,) {\n                const {englishNameInHtml, endlessMarioImageFile,} = enumerable\n\n                return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n                    <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable)}</div>\n                    <div className=\"images-container col-7\">\n                        {enumerable.renderSingleComponent(true)}\n                        <Image file={endlessMarioImageFile}/>\n                    </div>\n                    <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable)}</div>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n            public readonly tableColor = 'primary' satisfies BootstrapThemeColor\n            public readonly tableCaption = gameContentTranslation('theme.all.all') satisfies ReactElementOrString\n\n            public get tableOptions(): readonly ThemeAppOption[] {\n                return [\n                    ThemeAppOption.ICON,\n                    ThemeAppOption.ENDLESS_MARIO_ICON,\n                    ThemeAppOption.NAME,\n                    ThemeAppOption.NIGHT_EFFECT,\n                ]\n            }\n\n\n            public createTableContent(content: Themes, option: ThemeAppOption,) {\n                return option.renderContent(content,)\n            }\n\n            public createTableHeader(option: ThemeAppOption,) {\n                return option.renderTableHeader()\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<PossibleRouteName>\n\n    color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["ThemeAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","ICON","renderSingleComponent","key","element","unfinishedText","ENDLESS_MARIO_ICON","_ref","endlessMarioImageFile","_jsx","Image","file","NAME","_jsxs","className","children","CommonOptions","get","getGameContent","getNameContent","getThemeContent","nameHeader","NIGHT_EFFECT","_ref2","reference","courseTheme","NightEffectComponent","theme","Themes","DESERT","Times","NIGHT","tooltip","gameContentTranslation","night","CompanionEnum","_instance","_classPrivateFieldLooseKey","_class","CompanionEnum_ThemeAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","value","ThemeApp","AbstractTableApp","type","props","_createKey","_createSimpleListRouteName","concat","routeName","_createCardListRouteName","_createTableRouteName","_createTitleContent","_createAsideContent","viewDisplay","id","LinkButton","partialId","getRoutePath","allRouteName","color","allColor","contentTranslation","courseRouteName","courseColor","COURSE_THEME_IMAGE_FILE","worldRouteName","worldColor","WORLD_THEME_IMAGE_FILE","_createAppOptionInterpreter","$this","tableHeadersColor","tableColor","tableCaption","content","filterGame","games","createListDimension","ThemeTypes","COURSE","default","small","medium","WORLD","large","extraLarge","createCardListDimension","createCardListContent","enumerable","englishNameInHtml","tableOptions","createTableContent","option","createTableHeader","disabled","Link","to","routeFromName","properties","NightEffectByGameStyle","NightEffectByTheme","gameStyle","nightDesertWindTranslationKey","translationKey","_Fragment","_effect$createNewComp","effect","createNewComponent"],"sourceRoot":""}