{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/AbstractTableApp.tsx","app/options/component/AppOptionWithContent.component.ts","app/options/component/AppOptionWithTable.component.ts","app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/options/component/AbstractAppOptionWithSomething.ts"],"names":["AbstractCardListApp","optionInterpreter","this","_appOptionInterpreter","key","_key","content","iterable","enumerable","englishName","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","AbstractTableApp","tableProperties","headers","element","tableOptions","map","tableHeader","createTableHeader","filter","header","index","callbackToGetEnumerable","createTableContent","flat","TABLE","AppOptionWithContentComponent","callbackToRender","value","_callbackToRender","Array","AbstractAppOptionWithSomething","AppOptionWithTableComponent","Symbol","iterator","HeaderTypes","placement","values","find","simpleName","Enum","getValueOn","getValuesOn","HEAD","layout","FOOT","reverse","HeaderHolderContainer","tableIdentifier","callbackToRenderHead","callbackToRenderFoot","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","EMPTY_REACT_ELEMENT","has","get","maximumSubLevel","previousHeader","set","instance","Map","TableContent","innerContent","TableHeaders","props","type","everyHeadersHolder","headerAsTh","createSingleHeaderContent","everyHeaderHolders","forEach","headerHolder","resetRendered","getLayout","layoutAsTr","layoutAsTh","render","EMPTY_ARRAY","Image","source","path","fallbackName","alt","tooltip","AnyTranslationComponent","namespace","translation","Tooltip","option","title","translationKey","replace","elementId","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","isHeaderNull","DelayedObjectHolderContainer","layoutHolder","tableColor","headersColor","array","getSubHeaders","everyHeaders","subHeader","headerContainer","j","i"],"mappings":"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","file":"static/js/1.09a83708.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp';\nimport NameComponent           from '../../lang/name/component/Name.component';\nimport {ViewDisplays}          from './ViewDisplays';\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const englishName = enumerable.englishName;\n            const name = enumerable.reference.nameContainer;\n            const id = `${key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${englishName} - main card list container`} id={id}\n                     className={`${key}-container listElement-container col-12 col-sm-4 col-md-3 col-lg-2`}>\n                    <div key={`${name} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${englishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppInterpreterWithTable}      from '../interpreter/AppInterpreterWithTable';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}          from '../tools/table/SimpleHeader';\nimport type {SingleTableContent}           from '../tools/table/Table.types';\n\nimport {AbstractCardListApp} from './AbstractCardListApp';\nimport Table                 from '../tools/table/Table';\nimport {ViewDisplays}        from './ViewDisplays';\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST, ViewDisplays.TABLE,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractTableApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[];\n        let index = 1;\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable;\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    optionInterpreter.tableOptions.map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        return <Table key={`${key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${key}-table`}\n                      content={this.#tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: <>#</>,},\n                          ...(optionInterpreter.tableOptions\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader))\n                              .filter(header => header != null) as SingleHeaderContent[])\n                      ]}/>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppOptionWithContent, PossibleRenderReactElement} from './AppOptionWithContent';\nimport type {ReactElement}                                     from '../../../util/react/ReactProperty';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithContentComponent\n    extends AbstractAppOptionWithSomething<PossibleRenderReactElement>\n    implements AppOptionWithContent {\n\n    public constructor(callbackToRender: () => PossibleRenderReactElement,) {\n        super(callbackToRender,);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        const value = this._callbackToRender();\n        return value instanceof Array ? value : [value];\n    }\n\n}\n","import type {AppOptionWithTable}  from './AppOptionWithTable';\nimport type {SingleHeaderContent} from '../../tools/table/SimpleHeader';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithTableComponent\n    extends AbstractAppOptionWithSomething<SingleHeaderContent>\n    implements AppOptionWithTable {\n\n    public constructor(callbackToRender: () => SingleHeaderContent,) {\n        super(callbackToRender,);\n    }\n\n    public get renderTableHeader(): SingleHeaderContent {\n        return this._callbackToRender();\n    }\n\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleNonNullableValue, PossiblePlacement, PossibleStringValue, PossibleValue} from './HeaderTypes.types';\nimport type {StaticReference}                                                                                                                                                                                        from '../../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../../util/enum/Enum';\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return layout;\n        }\n\n    }('head', 'top',);\n    public static readonly FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return [...layout].reverse();\n        }\n\n    }('foot', 'bottom',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: HeaderTypes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name;\n    readonly #placement;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super();\n        this.#name = name;\n        this.#placement = placement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<HeaderTypes> {\n        return HeaderTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrAcronym: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(nameOrAcronym: S,): EnumByString<S>\n    public static getValue<I extends HeaderTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): HeaderTypes\n    public static getValue(value: PossibleValue,): | HeaderTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder';\nimport type {SingleHeaderContent} from '../SimpleHeader';\nimport type {ReactElement}        from '../../../../util/react/ReactProperty';\n\nimport {assert}              from '../../../../util/utilitiesMethods';\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>();\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>();\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #tableIdentifier: string;\n    readonly #header;\n    #parent: | HeaderHolder | null;\n    #subHeaders?: readonly HeaderHolder[];\n    #subLevel?: number;\n    #width?: number;\n    #height?: number;\n    #wasRendered;\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement;\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier;\n        this.#parent = null;\n        this.#header = header;\n        this.#wasRendered = false;\n        this.#callbackToRenderHead = callbackToRenderHead;\n        this.#callbackToRenderFoot = callbackToRenderFoot;\n\n        HeaderHolderContainer.#addInstance(this);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    static #addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES;\n        const tableIdentifier = instance.#tableIdentifier;\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!;\n\n        array.push(instance);\n    }\n\n    static #getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!;\n    }\n\n    static #getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP;\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!;\n\n        let maximumSubLevel = this.#getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel;\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!;\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header;\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): | HeaderHolder | null {\n        return this.#parent;\n    }\n\n    public set parent(value: | HeaderHolder | null,) {\n        this.setParent(value);\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: | HeaderHolder | null,): | this | never\n    public setParent(value: | HeaderHolder | null,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',);\n        this.#parent = value;\n        return this;\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY;\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value);\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value;\n        return this;\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0;\n            let parent: this['parent'] = this.parent;\n            while (parent != null) {\n                currentSubLevel++;\n                parent = parent.parent;\n            }\n            this.#subLevel = currentSubLevel;\n        }\n        return this.#subLevel;\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1;\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.#getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel;\n            this.#height = currentHeight;\n        }\n        return this.#height;\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,);\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1;\n        }\n        return this.#width;\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered;\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value;\n        return this;\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false);\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot();\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderHead(this);\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderFoot(this);\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types';\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map(content => {\n        const key = content[0];\n        return <tr key={`${key} (header)`}>\n            {content.map((innerContent, index) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${key}-${index}`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>;\n    })}</>;\n}\n","import {PureComponent} from 'react';\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types';\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader';\n\nimport AnyTranslationComponent from '../../../lang/components/AnyTranslationComponent';\nimport {EMPTY_ARRAY}           from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}   from '../../../util/emptyReactVariables';\nimport {HeaderTypes}           from './header/HeaderTypes';\nimport Image                   from '../images/Image';\nimport Tooltip                 from '../../../bootstrap/tooltip/Tooltip';\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders;\n    #layout?: Layout;\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get type(): HeaderTypes {\n        return this.props.type;\n    }\n\n    public get headers(): SingleHeadersContent {\n        return this.props.headers;\n    }\n\n    public get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder();\n    }\n\n    public get layout(): Layout {\n        return this.#layout ??= this.props.layout();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key;\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY;\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>;\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT;\n\n        const tooltip = header.tooltip;\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT;\n\n        return <AnyTranslationComponent namespace={tooltip.namespace}>{translation =>\n            <Tooltip option={({title: translation(tooltip.translationKey, tooltip.replace,) as string, placement: type.placement,})}\n                     elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>}</AnyTranslationComponent>;\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header);\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>;\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers;\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length;\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>;\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders;\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered());\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>;\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react';\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types';\nimport type {HeaderHolder}               from './header/HeaderHolder';\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types';\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder';\nimport type {ReactComponent}             from '../../../util/react/ReactComponent';\nimport type {ReactElement}               from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent}        from './SimpleHeader';\nimport type {TableProperties}            from './Table.types';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables';\nimport {HeaderTypes}                  from './header/HeaderTypes';\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container';\nimport TableContent                   from './TableContent';\nimport TableHeaders                   from './TableHeaders';\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary';\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info';\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id() {\n        return this.props.id;\n    }\n\n    public get caption() {\n        return this.props.caption;\n    }\n\n    public get headers() {\n        return this.props.headers;\n    }\n\n    public get content() {\n        return this.props.content;\n    }\n\n    public get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR;\n    }\n\n    public get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR;\n    }\n\n\n    #getEveryHeaders(): EveryHeaders\n    #getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    #getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][];\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header);\n            array.push([TableHeaders.getHeaderKey(header), header,]);\n            if (subHeaders.length !== 0)\n                array.push(...this.#getEveryHeaders(subHeaders,));\n        }\n        return array;\n    }\n\n    #getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]));\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))));\n\n        return everyHeaderHolders;\n    }\n\n    #getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = [];\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel;\n            const height = headerContainer.height;\n            const width = headerContainer.width;\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key);\n        });\n        return layout;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption;\n        const headers = this.headers;\n        const isHeaderNull = headers == null;\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.#getEveryHeaderHolders(this.#getEveryHeaders()));\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.#getLayout(everyHeadersHolder.get));\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>;\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][];\n","export abstract class AbstractAppOptionWithSomething<T, > {\n\n    //region -------------------- Fields --------------------\n\n    readonly #callbackToRender;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(callbackToRender: () => T,) {\n        this.#callbackToRender = callbackToRender;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _callbackToRender() {\n        return this.#callbackToRender;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n"],"sourceRoot":""}