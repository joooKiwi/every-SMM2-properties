{"version":3,"file":"static/js/573.c8608bf9.chunk.js","mappings":"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","sources":["app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/withInterpreter/ListDimension.creator.ts","app/withInterpreter/ViewDisplays.ts","bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {route} from 'routes/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation(),\n        path = route(routeName)\n\n    return currentPath === path || view === currentView\n        ? <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n        : <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`}/>\n}","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties}       from 'app/AppProperties.types'\nimport type {AppStates}                          from 'app/AppStates.types'\nimport type {AppInterpreter}                     from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}                   from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ReactElement, ReactElementOrString} from 'util/react/ReactProperties'\nimport type {NullOr}                             from 'util/types/nullable'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #typeDisplayed?: ViewDisplays\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get typeDisplayed(): ViewDisplays {\n        return this.#typeDisplayed ??= ViewDisplays.getValue(this.props.typeDisplayed)\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}.\n     * It is also used for the {@link Table} id.\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {typeDisplayed, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${typeDisplayed.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={typeDisplayed}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${typeDisplayed.type})`} className=\"app-content\">{typeDisplayed.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'routes/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport {ListDimensionCreator}       from 'app/withInterpreter/ListDimension.creator'\nimport NameComponent                from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {SIMPLE_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnSimpleList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            dimensions = optionInterpreter.createListDimension()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main list container`} id={id}\n                     className={`${key}-container listElement-container ${new ListDimensionCreator(dimensions).createDimensions()}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {DimensionOnList}                                                                                                                                                                                           from 'app/interpreter/DimensionOnList'\nimport type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from 'app/withInterpreter/ListDimension.creator.types'\nimport type {ObjectHolder}                                                                                                                                                                                              from 'util/holder/ObjectHolder'\nimport type {NullOr}                                                                                                                                                                                                    from 'util/types/nullable'\n\nimport {ObjectHolderContainer} from 'util/holder/ObjectHolder.container'\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    }\n\n    readonly #dimension\n    #smallHolder: ObjectHolder<| SMALL | DefaultSmallDimension>\n    #mediumHolder: ObjectHolder<| MEDIUM | DefaultMediumDimension>\n    #largeHolder: ObjectHolder<| LARGE | DefaultLargeDimension>\n    #extraLargeHolder: ObjectHolder<| EXTRA_LARGE | DefaultExtraLargeDimension>\n    #extraExtraLargeHolder: ObjectHolder<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>,) {\n        this.#dimension = dimension\n        this.#smallHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.small\n            return value === undefined ? this.defaultSmall : value\n        })\n        this.#mediumHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.medium\n            return value === undefined ? ListDimensionCreator.defaultMedium : value\n        })\n        this.#largeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.large\n            return value === undefined ? this.defaultLarge : value\n        })\n        this.#extraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraLarge\n            return value === undefined ? this.defaultExtraLarge : value\n        })\n        this.#extraExtraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge\n            return value === undefined ? this.defaultExtraExtraLarge : value\n        })\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>>> {\n        return this.#dimension\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>)\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.get\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.get\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.get\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.get\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.get\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {AbstractAppWithInterpreter}      from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport type {AbstractCardListApp}             from 'app/withInterpreter/AbstractCardListApp'\nimport type {AbstractSimpleListApp}           from 'app/withInterpreter/AbstractSimpleListApp'\nimport type {AbstractTableApp}                from 'app/withInterpreter/AbstractTableApp'\nimport type {HTMLType, Names, Ordinals, Type} from 'app/withInterpreter/ViewDisplays.types'\nimport type {ClassWithType}                   from 'core/ClassWithType'\nimport type {ReactElement}                    from 'util/react/ReactProperties'\n\nimport {assert}           from 'util/utilitiesMethods'\nimport {Nullable, NullOr} from 'util/types/nullable'\n\nexport abstract class ViewDisplays\n    extends Enum<Ordinals, Names>\n    implements ClassWithType<Type> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly TABLE =       new class ViewDisplays_Table extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createTable' in app, 'The application does not handle a table creation.',)\n            return app.createTable()\n        }\n\n        protected override _getRoutePath<PATH extends string, >(path: PATH,) {\n            return `${path} (table)` as const\n        }\n\n    }('table', 'table',)\n    public static readonly SIMPLE_LIST = new class ViewDisplays_SimpleList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createList' in app, 'The application does not handle a \"simple list\" creation.',)\n            return app.createList()\n        }\n\n        protected override _getRoutePath<PATH extends string, >(path: PATH,) {\n            return `${path} (list)` as const\n        }\n\n    }('simple-list', 'list',)\n    public static readonly CARD_LIST =   new class ViewDisplays_CardList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createCardList' in app, 'The application does not handle a \"card list\" creation.',)\n            return app.createCardList()\n        }\n\n        protected override _getRoutePath<PATH extends string, >(path: PATH,) {\n            return `${path} (card)` as const\n        }\n\n    }('card-list', 'card-list',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ViewDisplays\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #htmlType\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: Type, htmlType: HTMLType,) {\n        super()\n        this.#type = type\n        this.#htmlType = htmlType\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): Type {\n        return this.#type\n    }\n\n    public get htmlType(): HTMLType {\n        return this.#htmlType\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract createComponent(app: PossibleApp,): ReactElement\n\n    /**\n     * Get a route path with the type in parentheses\n     *\n     * @param path The nullable path to get its types\n     */\n    public getRoutePath<PATH extends string, >(path: Nullable<PATH>,): NullOr<PossibleRoutePath<PATH>> {\n        return path == null ? null : this._getRoutePath(path)\n    }\n\n    /**\n     * Get a route path with only the {@link ViewDisplays.SIMPLE_LIST} & {@link ViewDisplays.CARD_LIST}.\n     *\n     * @param path The nullable path to get its types\n     * @throws {AssertionError} (only in development) It is the {@link ViewDisplays.TABLE} calling it\n     */\n    public getRoutePathAsListOnly<PATH extends string, >(path: Nullable<PATH>,): NullOr<PossibleListRoutePath<PATH>> {\n        // @ts-ignore\n        assert(this !== ViewDisplays.TABLE, 'The view display cannot be retrieved for a list only (simple & card) display',)\n        return this.getRoutePath(path) as NullOr<PossibleListRoutePath<PATH>>\n    }\n\n    protected abstract _getRoutePath<PATH extends string, >(path: PATH,): PossibleRoutePath<PATH>\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return ViewDisplays\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<ViewDisplays>,): ViewDisplays {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<ViewDisplays> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<ViewDisplays> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleRoutePath<PATH extends string, > = `${PATH} (${| 'list' | 'card' | 'table'})`\ntype PossibleListRoutePath<PATH extends string, > = `${PATH} (${| 'list' | 'card'})`\ntype PossibleApp = | AbstractAppWithInterpreter<any> | AbstractSimpleListApp<any> | AbstractCardListApp<any> | AbstractTableApp<any>\n","import {Popover} from 'bootstrap'\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from 'bootstrap/popover/Popover.types'\n\nimport {BootstrapInstance}                from 'bootstrap/BootstapInstance'\nimport {BootstrapWithBasicEventsInstance} from 'bootstrap/BootstrapWithBasicEventsInstance'\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {}\n    /** @see Popover.Events.show */\n    public static readonly SHOW_EVENT = `show${Popover.EVENT_KEY}` as Popover.Events.show\n    /** @see Popover.Events.shown */\n    public static readonly SHOWN_EVENT = `shown${Popover.EVENT_KEY}` as Popover.Events.shown\n    /** @see Popover.Events.hide */\n    public static readonly HIDE_EVENT = `hide${Popover.EVENT_KEY}` as Popover.Events.hide\n    /** @see Popover.Events.hidden */\n    public static readonly HIDDEN_EVENT = `hidden${Popover.EVENT_KEY}` as Popover.Events.hidden\n    /** @see Popover.Events.inserted */\n    public static readonly INSERTED_EVENT = `inserted${Popover.EVENT_KEY}` as Popover.Events.inserted\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,)\n        this.on(callbacks)\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,)\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,))\n        return this\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted)\n        return this\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,)\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element)\n    }\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                              from 'bootstrap/popover/Popover.types'\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {PopoverInstance} from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)))\n    return children ?? null\n}\n","import type {SpanPopoverConfiguration}                          from 'bootstrap/popover/Popover.types'\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import {Popover}                                       from 'bootstrap'\nimport {Component, type Dispatch, type SetStateAction} from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/Popover.types'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\nimport type {ReactElement}                                             from 'util/react/ReactProperties'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrentLanguage)\n\n    return <div key={`${id} - list container`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap()].filter(([language,]) => languagesToDisplay.includes(language)).map(([language, value,]) =>\n            <div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n                <TextComponent\n                    content={`${languageTranslation(language.englishName)}${ProjectLanguages.currentLanguage.space}${ProjectLanguages.currentLanguage.unionTrait}${ProjectLanguages.currentLanguage.space}`}\n                    className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n                <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n            </div>\n        )}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["DisplayButtonGroup","key","reactKey","views","currentView","id","className","map","view","name","DisplayButton","routeName","currentPath","useLocation","pathname","path","route","htmlType","type","disabled","to","AbstractAppWithInterpreter","props","this","ViewDisplays","typeDisplayed","_createPossibleViewDisplay","_createKey","_createAppOptionInterpreter","UnfinishedText","isHidden","_key","_createTitleContent","__possibleViewDisplay","_createAsideContent","_createDescription","createComponent","AbstractApp","SIMPLE_LIST","AbstractSimpleListApp","__listRouteName","_createSimpleListRouteName","enumerable","englishName","optionInterpreter","_appOptionInterpreter","dimensions","createListDimension","content","iterable","uniqueEnglishName","_createUniqueNameOnSimpleList","reference","nameContainer","englishNameInHtml","push","ListDimensionCreator","createDimensions","popoverOrientation","dimension","ObjectHolderContainer","value","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","DEFAULT_DIMENSION","default","defaultDefault","get","sm","md","lg","xl","xxl","Symbol","iterator","_getRoutePath","assert","TABLE","getRoutePath","Enum","values","app","createTable","createList","CARD_LIST","createCardList","PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","BootstrapWithBasicEventsInstance","addEventListener","event","children","option","triggers","elementId","useEffect","flat","forEach","TextPopover","otherProperties","TextComponent","NamePopoverComponent","ProjectLanguages","state","listId","setDoesDisplayPopover","setState","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrentLanguage","toNameMap","language","includes","languageTranslation","NameComponent","useState","english","StringContainer"],"sourceRoot":""}