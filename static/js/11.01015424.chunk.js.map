{"version":3,"sources":["bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx","app/EveryGameReferencesApp.tsx"],"names":["PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","getOrCreateInstance","this","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","type","addEventListener","event","children","EMPTY_REACT_ELEMENT","option","triggers","elementId","useEffect","flat","forEach","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","currentLanguage","get","name","state","listId","setDoesDisplayPopover","popoverOrientation","setState","ContentTranslationComponent","translation","createOption","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","className","toNameMap","entries","includes","map","value","languageKey","englishName","LanguageTranslationComponent","style","unionTrait","NameComponent","useState","english","StringContainer","getInHtml","EveryGameReferencesApp","groupId","enumReferences","returnOfLine","gameReference","GameReferences","getValue","enumReference","englishNameInHtml","length","renderSingleComponent","reference","_getContainer","Games","values","GameStyles","SoundEffects","soundEffect_games","__otherGameReferences","RETURN_OF_LINES","alreadyIncludedNames","game","enumerable","AbstractApp","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG_COUNTRY","KIRBY_ADVENTURE","KID_ICARIUS_UPRISING","MEGA_MAN","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_AWAKENING","POKEMON_Y","PIKMIN_3","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","MONSTER_MANOR","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","SHAUN_THE_SHEEP"],"mappings":"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","file":"static/js/11.01015424.chunk.js","sourcesContent":["import {Popover} from 'bootstrap';\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from './Popover.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Popover.Event.SHOW as Popover.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Popover.Event.SHOWN as Popover.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Popover.Event.HIDE as Popover.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Popover.Event.HIDDEN as Popover.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Popover.Event.INSERTED as Popover.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,);\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element);\n    }\n\n}\n","import {useEffect}         from 'react';\n\nimport type {PopoverConfiguration}                            from './Popover.types';\nimport type {ReactElement, ReactPropertyWithOptionalChildren} from '../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {PopoverInstance}     from './PopoverInstance';\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertyWithOptionalChildren<PopoverConfiguration, T>,): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)));\n    return children;\n}\n","import Popover from './Popover';\n\nimport type {SpanPopoverConfiguration}                        from './Popover.types';\nimport type {ReactElementOrString, ReactPropertyWithChildren} from '../../util/react/ReactProperty';\n\nimport TextComponent from '../../app/tools/text/TextComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertyWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>;\n}\n","import {Popover}                                       from 'bootstrap';\nimport {Component, type Dispatch, type SetStateAction} from 'react';\n\nimport type {Name}                                                                         from '../Name';\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from './Name.properties';\nimport type {ReactComponent}                                                               from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                                                 from '../../../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../../components/ContentTranslationComponent';\nimport {ProjectLanguages}          from '../../ProjectLanguages';\nimport TextComponent               from '../../../app/tools/text/TextComponent';\nimport TextPopover                 from '../../../bootstrap/popover/TextPopover';\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent;\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,);\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name);\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        };\n    }\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get listId(): string {\n        return this.props.listId;\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover;\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties;\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name;\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation;\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id;\n        const setDoesDisplayPopover = this.setDoesDisplayPopover;\n\n        this.setState({\n            element: <ContentTranslationComponent>{translation =>\n                <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, translation('In other languages'),)}\n                             {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                    {this.#currentLanguageTextContent}\n                </TextPopover>\n            }</ContentTranslationComponent>,\n        });\n    }\n\n    public override render(): ReactElement {\n        return this.state.element;\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    };\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation;\n\n    return option;\n}\n","import type {NameListProperties} from './Name.properties';\n\nimport LanguageTranslationComponent from '../../components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../../ProjectLanguages';\nimport TextComponent                from '../../../app/tools/text/TextComponent';\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage);\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`;\n\n                return <LanguageTranslationComponent key={`${id} - language translation component (${languageKey})`}>{translation =>\n                    <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${translation(language.englishName)} ${language.unionTrait} '`,})}>\n                        <TextComponent content={value}/>\n                    </li>\n                }</LanguageTranslationComponent>;\n            })\n    }</ul>;\n}\n","import './Name.component.scss';\n\nimport {useState} from 'react';\n\nimport type {NameProperties} from './Name.properties';\n\nimport {StringContainer}    from '../../../util/StringContainer';\nimport NamePopoverComponent from './NamePopover.component';\nimport NameListComponent    from './NameList.component';\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false);\n    const {name,} = otherProperties;\n\n    const englishName = name.english;\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`;\n    const listId = `${elementId}-list`;\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>;\n}\n","import './EveryGameReferencesApp.scss';\n\nimport {Fragment}                       from 'react';\nimport type {PossibleEnglishName_Games} from '../core/soundEffect/SoundEffects.types';\nimport type {ReactElement}              from '../util/react/ReactProperty';\n\nimport AbstractApp                     from './AbstractApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {GameReferences}                from '../core/gameReference/GameReferences';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../core/game/Games';\nimport {GameStyles}                    from '../core/gameStyle/GameStyles';\nimport NameComponent                   from '../lang/name/component/Name.component';\nimport {SoundEffects}                  from '../core/soundEffect/SoundEffects';\n\n/**\n * @reactComponent\n */\nexport default class EveryGameReferencesApp\n    extends AbstractApp {\n\n    //region -------------------- Fields --------------------\n\n    /**\n     * Every {@link GameReferences} that will do a return of line after its rendering.\n     */\n    public static RETURN_OF_LINES = [GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n        GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n        GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n        GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n        GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n        GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n        GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n        GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n        GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n        GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n        GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n        GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n        GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n        GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n        GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n    ] as const;\n\n    static #otherGameReferences?: readonly GameReferences[];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & initialisation methods --------------------\n\n    private static get __otherGameReferences(): readonly GameReferences[] {\n        if (this.#otherGameReferences == null) {\n            const alreadyIncludedNames = [\n                ...Games.values.map(game => game.englishName),\n                ...GameStyles.values.map(game => game.englishName),\n                ...SoundEffects.soundEffect_games.map(game => game.englishName) as PossibleEnglishName_Games[],\n            ];\n            this.#otherGameReferences = GameReferences.values.filter(enumerable => !alreadyIncludedNames.includes(enumerable.englishName as never));\n        }\n        return this.#otherGameReferences;\n    }\n\n    //endregion -------------------- Getter & initialisation methods --------------------\n    //region -------------------- Methods --------------------\n\n    protected _getContainer(groupId: string, title: PossibleTitle, enumReferences: readonly (| Games | GameStyles | SoundEffects)[],): ReactElement\n    protected _getContainer(groupId: string, title: PossibleTitle, enumReferences: readonly GameReferences[], returnOfLine: readonly GameReferences[],): ReactElement\n    protected _getContainer(groupId: string, title: PossibleTitle, enumReferences: readonly PossibleGameReference[], returnOfLine?: readonly GameReferences[],) {\n        return <div key={`names container - ${groupId}`} id={`${groupId}-names-container`} className=\"names-container\">\n            <GameContentTranslationComponent>{translation =>\n                <h2 key={`names title - ${groupId}`} id={`${groupId}-names-title`} className=\"col-12 names-title\">{translation(title)}</h2>\n            }</GameContentTranslationComponent>\n            <div key={`name (container) - ${groupId}`} id={`${groupId}-name-container`} className=\"container-fluid name-container\">{\n                enumReferences.map(gameReference => [gameReference, GameReferences.getValue(gameReference.name)!] as const).map(([enumReference, gameReference,]) =>\n                    <Fragment key={`single name container - ${gameReference.englishName}`}>\n                        <div id={`${gameReference.englishNameInHtml}-name-container`} className={`${enumReferences.length > 5 ? 'col-3' : 'col'} single-name-container`}>\n                            <div className=\"single-name-sub-container\">\n                                {enumReference.renderSingleComponent ?? EMPTY_REACT_ELEMENT}\n                                <NameComponent id={`${groupId}-name`} name={gameReference.reference}/>\n                            </div>\n                        </div>\n                        {returnOfLine?.includes(gameReference) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : EMPTY_REACT_ELEMENT}\n                    </Fragment>)\n            }</div>\n        </div>;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    protected override _mainContent() {\n        return <div className=\"container-fluid main-container\">\n            <GameContentTranslationComponent>{translation =>\n                <h2 id=\"main-names-title\" className=\"col-12 names-title\">{translation('Game references')}</h2>\n            }</GameContentTranslationComponent>\n            {this._getContainer('game', 'Games', Games.values,)}\n            {this._getContainer('gameStyle', 'Game styles', GameStyles.values,)}\n            {this._getContainer('soundEffect', 'Sound effects', SoundEffects.soundEffect_games,)}\n            {this._getContainer('otherGameReferences', 'Other game references', EveryGameReferencesApp.__otherGameReferences, EveryGameReferencesApp.RETURN_OF_LINES,)}\n        </div>;\n    }\n\n}\n\ntype PossibleGameReference = (Games | GameStyles | SoundEffects | GameReferences)\n                             & { renderSingleComponent?: ReactElement };\n//@FIXME this variable should be replaced with SingleTranslationKey<'gameContent'> if possible\ntype PossibleTitle = 'Games' | 'Game styles' | 'Sound effects' | 'Other game references';\n"],"sourceRoot":""}