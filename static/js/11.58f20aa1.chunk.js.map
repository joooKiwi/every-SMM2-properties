{"version":3,"sources":["app/options/CommonOptions.tsx","app/options/component/EmptyAppOption.ts","app/options/EntityAppOption.tsx","app/EveryEntitiesApp.tsx"],"names":["Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","EmptyAppOption","renderContent","EMPTY_ARRAY","renderTableHeader","CourseThemeComponent","EditorVoiceSoundComponent","InstrumentPropertyComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","defaultValue","content","_createContentOption","AppOptionWithContentComponent","__appOptionWithContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","typeDisplayed","ViewDisplays","TABLE","GameStyles","values","SUPER_MARIO_BROS","Times","Themes","courseThemes","value","Enum","getValueOn","getValuesOn","AbstractAppOption","CALLBACK_TO_GET_ENUMERATION","image","editorImage","_gameStyles","map","gameStyle","Set","themes","theme","times","time","index","flat","src","alt","acronym","clearConditionImage","IMAGES","EmptyEditorImage","ContentTranslationComponent","subHeaders","renderSingleComponent","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","className","getNameContent","editorVoiceSound","nameHeader","GAME","entity","displayAllAsText","WHEN_ALL_SELECTED_GAME","GameContentTranslationComponent","GAME_STYLE","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","getCategoryContent","CATEGORY_AS_TEXT","EntityCategories","getValue","imagePath","categoryHeader","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","limits","displayAcronymIfApplicable","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","EntityLimitTypes","EDITOR","englishCommonText","tooltip","namespace","Games","SUPER_MARIO_MAKER_1","path","SUPER_MARIO_MAKER_2","WHILE_PLAYING","SimpleSound","EveryEntitiesApp","props","state","createDefaultState","Entities","htmlName","editorVoice1","fileName","editorVoice2","europeanFileName","category","categoryEnglish","title","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/11.58f20aa1.chunk.js","sourcesContent":["import {lazy, ReactElement} from 'react';\n\nimport type {ClassWithEnglishName}   from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}     from '../../core/ClassWithReference';\nimport type {Enum}                   from '../../util/enum/Enum';\nimport type {Name}                   from '../../lang/name/Name';\nimport type {NameTrait}              from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory} from '../../lang/name/NameTraitFromACategory';\nimport type {SingleHeaderContent}    from '../tools/table/SimpleHeader';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\n","import type {AppOptionWithTable}   from './AppOptionWithTable';\nimport type {AppOptionWithContent} from './AppOptionWithContent';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY;\n    public readonly renderTableHeader = null;\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {Entities}                                                                                                                                                              from '../../core/entity/Entities';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityAppOption.types';\nimport type {EntityAppStates}                                                                                                                                                       from '../AppStates.types';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AbstractAppOption}             from './AbstractAppOption';\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {EntityCategories}              from '../../core/entityCategory/EntityCategories';\nimport {EntityLimitTypes}              from '../../core/entityLimit/EntityLimitTypes';\nimport {EmptyAppOption}                from './component/EmptyAppOption';\nimport {EmptyEditorImage}              from '../../core/entity/images/editor/EmptyEditorImage';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\nimport {GameStyles}                    from '../../core/gameStyle/GameStyles';\nimport {Themes}                        from '../../core/theme/Themes';\nimport {Times}                         from '../../core/time/Times';\nimport {ViewDisplays}                  from '../withInterpreter/ViewDisplays';\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =        lazy(() => import('../../core/theme/CourseTheme.component'));\nconst EditorVoiceSoundComponent =   lazy(() => import('../../core/editorVoice/EditorVoiceSound.component'));\nconst InstrumentPropertyComponent = lazy(() => import( '../../core/entity/properties/instrument/InstrumentProperty.component'));\nconst GameComponent =               lazy(() => import('../../core/game/Game.component'));\nconst GameStyleComponent =          lazy(() => import('../../core/gameStyle/GameStyle.component'));\nconst LimitComponent =              lazy(() => import('../../core/entityLimit/Limit.component'));\nconst TimeComponent =               lazy(() => import('../../core/time/Time.component'));\nconst TextComponent =               lazy(() => import( '../tools/text/TextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport abstract class EntityAppOption\n    extends AbstractAppOption<boolean, EntityAppStates, Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        get #createImageOnEditor(): PossibleRenderReactElement {\n            const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n            const image = enumeration.editorImage;\n\n            return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`editor image (${enumeration.englishName})`}>{\n                [...new Set(EntityAppOption.themes.map(theme =>\n                    EntityAppOption.times.map(time => image.get(true, gameStyle, theme, time,)\n                        .map((image, index,) => [theme, time, image, index,] as const))).flat(2))]\n                    .map(([theme, time, image, index,]) =>\n                        <img src={image} alt={`${gameStyle.acronym}-${theme.englishName}-${time.englishName}-${index + 1}`}/>)\n            }</Fragment>);\n        }\n\n        get #createImageOnClearCondition(): PossibleRenderReactElement {\n            const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n            const image = enumeration.clearConditionImage;\n\n            return EntityAppOption._gameStyles.map(gameStyle =>\n                <Fragment key={`clear condition image (${enumeration.englishName})`}>{\n                    image.get(gameStyle).map((image, index,) => <img src={image} alt={`${gameStyle.acronym}-${index + 1}`}/>)\n                }</Fragment>);\n        }\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return enumeration.editorImage === EmptyEditorImage.get\n                    ? this.#createImageOnClearCondition\n                    : this.#createImageOnEditor;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            };\n        }\n\n    }(true,);\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new class EntityAppOption_ImagesOnEditor extends EntityAppOption {}(true,);\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new class EntityAppOption_ImagesOnClearCondition extends EntityAppOption {}(true,);\n    public static readonly IMAGES_ON_WHILE_PLAYING = new class EntityAppOption_ImagesOnWhilePlaying extends EntityAppOption {}(false,);\n    public static readonly IMAGES_ON_UNUSED = new class EntityAppOption_ImagesOnUnused extends EntityAppOption {}(false,);\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSound} name={enumeration.englishName}/>\n                </div>;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }(true,);\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME.get}/>;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_GAME = new class EntityAppOption_WhenAllSelectedGame extends EntityAppOption {}(false,);\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME_STYLE.get}/>;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: <GameContentTranslationComponent translationKey=\"Game style\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new class EntityAppOption_WhenAllSelectedGameStyle extends EntityAppOption {}(false,);\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_COURSE_THEME.get}/>;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: <GameContentTranslationComponent translationKey=\"Course theme\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new class EntityAppOption_WhenAllSelectedCourseTheme extends EntityAppOption {}(false,);\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_TIME.get}/>;\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: <GameContentTranslationComponent translationKey=\"Time\"/>,};\n        }\n\n    }(false,);\n    public static readonly WHEN_ALL_SELECTED_TIME = new class EntityAppOption_WhenAllSelectedTime extends EntityAppOption {}(false,);\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer;\n\n                return CommonOptions.get.getCategoryContent(enumeration,\n                    () => EntityAppOption.CATEGORY_AS_TEXT.get\n                        ? categoryName\n                        : EntityCategories.getValue(categoryName.english)!.imagePath,);\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.categoryHeader;\n        }\n\n    }(true,);\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new class EntityAppOption_CategoryAsText extends EntityAppOption {}(false,);\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override get _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const entity = enumeration.reference;\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds;\n                const editorLimit_SMM2 = entity.editorLimit_smm2;\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS}\n                                          displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2}\n                                          displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()}\n                                    displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                ];\n            };\n        }\n\n        protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: <GameContentTranslationComponent translationKey=\"Limit\"/>,\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.EDITOR.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit in the editor',},\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.WHILE_PLAYING.englishCommonText}/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Limit while playing',},\n                    },\n                ],\n            };\n        }\n\n    }(true,);\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new class EntityAppOption_IfApplicableAcronymOnLimitAsText extends EntityAppOption {}(true,);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EveryEntitiesApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities;\n\n    static #gameStyles?: readonly GameStyles[];\n    static #gameStyles_unusedImages?: readonly [GameStyles,] | readonly [];\n    static #times?: readonly Times[];\n    static #themes?: readonly Themes[];\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(defaultValue: boolean,) {\n        super(defaultValue,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get createDefaultState(): EntityAppStates {\n        return {\n            typeDisplayed: ViewDisplays.TABLE,\n        };\n    }\n\n\n    protected static get _gameStyles() {\n        return this.#gameStyles ??= GameStyles.values;\n    }\n\n    protected static get _gameStyles_unusedImages() {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,];\n    }\n\n    protected static get times() {\n        return this.#times ??= Times.values;\n    }\n\n    protected static get themes() {\n        return this.#themes ??= Themes.courseThemes;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected get _createContentOption(): PossibleOptionWithContent {\n        return null;\n    }\n\n    protected get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption;\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,);\n        }\n        return this.#appOptionWithContent;\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected get _createTableHeaderOption(): PossibleOptionWithTable {\n        return null;\n    }\n\n    protected get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption;\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,);\n        }\n        return this.#appOptionWithTable;\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityAppOption> {\n        return EntityAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityAppOption = EntityAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityAppOption\n    public static getValue(value: PossibleValue,): | EntityAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = | (() => PossibleRenderReactElement) | null;\ntype PossibleOptionWithTable = | SingleHeaderContent | null;\n","import './EveryEntitiesApp.scss';\nimport './options/EntityAppOption.scss';\n\nimport {lazy} from 'react';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {EntityAppStates}                                    from './AppStates.types';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {Entities}                      from '../core/entity/Entities';\nimport {EntityAppOption}               from './options/EntityAppOption';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\n\nconst SimpleSound = lazy(() => import('./tools/sounds/SimpleSound'));\n\n/**\n * @reactComponent\n */\nexport default class EveryEntitiesApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, {}, EntityAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = EntityAppOption.createDefaultState;\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'entity';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every entities\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable(): IterableIterator<Entities> {\n                return Entities[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({englishNameInHtml: htmlName, reference, editorVoiceSound: {fileName: editorVoice1, europeanFileName: editorVoice2,},}: Entities,): ReactElement {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`;//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    {editorVoice1 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice1} title={`${htmlName} - editor voice`}/>}\n                    {editorVoice2 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice2} title={`${htmlName} - editor voice (european)`}/>}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): EntityAppOption[] {\n                return [EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    EntityAppOption.GAME,\n                    EntityAppOption.GAME_STYLE,\n                    EntityAppOption.COURSE_THEME,\n                    EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every entities\"/>,\n                };\n            }\n\n            public createTableContent(option: EntityAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: EntityAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}