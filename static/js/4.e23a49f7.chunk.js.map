{"version":3,"file":"static/js/4.e23a49f7.chunk.js","mappings":"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","sources":["app/options/SoundEffectAppOption.tsx","app/SoundEffectApp.tsx"],"sourcesContent":["import type {CollectionHolder, CollectionIterator}              from '@joookiwi/collection'\nimport type {CompanionEnumSingleton, PossibleEnumerableValueBy} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}                                    from '@joookiwi/enumerable'\n\nimport type {SoundEffects}        from 'core/soundEffect/SoundEffects'\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/SoundEffectAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {CommonOptions}                  from 'app/options/CommonOptions'\nimport UnfinishedText, {unfinishedText} from 'app/tools/text/UnfinishedText'\nimport {Games}                          from 'core/game/Games'\nimport SoundEffectComponent             from 'core/soundEffect/SoundEffect.component'\nimport {SoundEffectCategories}          from 'core/soundEffectCategory/SoundEffectCategories'\nimport SimpleSoundComponent             from 'util/file/sound/component/SimpleSound.component'\n\nexport abstract class SoundEffectAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<SoundEffects> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly SMM1_AND_SMM3DS_ICON = new class GameStyleAppOption_SMM1AndSMM3DSIcon extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return SoundEffectAppOption.renderSMM1And3DSImage(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.smm1And3dsGameHeader\n        }\n\n    }()\n    public static readonly SMM2_ICON =            new class GameStyleAppOption_SMM2Icon extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return SoundEffectAppOption.renderSMM2Image(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.smm2GameHeader\n        }\n\n    }()\n    public static readonly NAME =                 new class GameStyleAppOption_Name extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly CATEGORY =             new class GameStyleAppOption_Category extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            const {reference,} = enumeration\n\n            return CommonOptions.get.getCategoryContent(enumeration, () => SoundEffectCategories.getValueByName(reference.categoryEnglish).imageFile,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    public static readonly PLAYER_BEHAVIOUR =     new class GameStyleAppOption_PlayerBehaviour extends SoundEffectAppOption {\n\n        protected override _createContentOption(enumeration: SoundEffects,) {\n            return enumeration.reference.playerSoundEffectTriggerContainer.createNewComponent(enumeration.englishName,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'player behaviour', element: unfinishedText('Player behaviour'),}//TODO add Player behaviour\n        }\n\n    }()\n    public static readonly SOUNDS =               new class GameStyleAppOption_PlayerBehaviour extends SoundEffectAppOption {\n\n        protected override _createContentOption({englishName, sounds_exclusiveSmm1, sounds_standaloneSmm1, sounds_smm2,}: SoundEffects,) {\n            const isSMM1Empty = sounds_exclusiveSmm1.length === 0,\n                isSMM2Empty = sounds_smm2.length === 0\n\n            if (isSMM1Empty && isSMM2Empty)\n                return null\n            return <div key={`${englishName} (sound effect sounds)`} className={`soundEffect-sounds-container ${isSMM1Empty || isSMM2Empty ? ` soundEffect-sounds-smm${isSMM1Empty ? 2 : 1}-only-container` : ''}`}>\n                {isSMM1Empty\n                    ? null\n                    : <div key={`${englishName} (sound effect sounds - SMM1&3DS)`} className=\"soundEffect-sounds-smm1-container\">\n                        {sounds_standaloneSmm1.map(sound => <div key={`${englishName} (sound effect sound - SMM1&3DS - ${sound.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm1-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                            <SimpleSoundComponent file={sound} title={`${englishName} (${sound.key})`}/>\n                        </div>)}\n                    </div>}\n                {isSMM2Empty\n                    ? null\n                    : <div key={`${englishName} (sound effect sounds (SMM2))`} className=\"soundEffect-sounds-smm2-container\">\n                        {sounds_smm2.map(sound => <div key={`${englishName} (sound effect sound - SMM2 - ${sound.key})`} className=\"soundEffect-sound-container soundEffect-sound-smm2-container col-12 col-lg-6 col-xl-4 col-xxl-3\">\n                            <SimpleSoundComponent file={sound} title={`${englishName} (${sound.key})`}/>\n                        </div>)}\n                    </div>}\n            </div>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'sounds', element: <UnfinishedText>Sounds</UnfinishedText>,}//TODO add sounds\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<SoundEffectAppOption, typeof SoundEffectAppOption> = class CompanionEnum_SoundEffectAppOption\n        extends CompanionEnum<SoundEffectAppOption, typeof SoundEffectAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundEffectAppOption\n\n        private constructor() {\n            super(SoundEffectAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundEffectAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    public static renderSMM1And3DSImage(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker1 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_1}/> : null\n    }\n\n    public static renderSMM2Image(enumerable: SoundEffects,): ReactElement {\n        const reference = enumerable.reference\n\n        return reference.isInSuperMarioMaker2 ? <SoundEffectComponent reference={enumerable} name={reference} game={Games.SUPER_MARIO_MAKER_2}/> : null\n    }\n\n    protected abstract _createContentOption(enumeration: SoundEffects,): ReactElement\n\n    public renderContent(enumeration: SoundEffects,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    public static getValue(value: PossibleEnumerableValueBy<SoundEffectAppOption>,): SoundEffectAppOption {\n        return SoundEffectAppOption.CompanionEnum.get.getValue(value,)\n    }\n\n    public static get values(): CollectionHolder<SoundEffectAppOption> {\n        return SoundEffectAppOption.CompanionEnum.get.values\n    }\n\n    public static [Symbol.iterator](): CollectionIterator<SoundEffectAppOption> {\n        return SoundEffectAppOption.CompanionEnum.get[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './SoundEffectApp.scss'\n\nimport type {SoundEffectProperties}                                from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable}                              from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\n\nimport {SoundEffectAppOption}   from 'app/options/SoundEffectAppOption'\nimport {AbstractTableApp}       from 'app/withInterpreter/AbstractTableApp'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame}             from 'util/utilitiesMethods'\n\nexport default class SoundEffectApp\n    extends AbstractTableApp<AppInterpreterWithTable<SoundEffects, SoundEffectAppOption>, SoundEffectProperties> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'soundEffect'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everySoundEffect (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everySoundEffect (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everySoundEffect (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('sound effect.all')\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class SoundEffectAppInterpreter implements AppInterpreterWithTable<SoundEffects, SoundEffectAppOption> {\n\n            public get content() {\n                return filterGame(SoundEffects.values, $this.props.games,)\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: SoundEffects,) {\n                return <div>\n                    <div className=\"soundEffect-images-container\">\n                        {SoundEffectAppOption.renderSMM1And3DSImage(enumerable)}\n                        {SoundEffectAppOption.renderSMM2Image(enumerable)}\n                    </div>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n            public readonly tableColor = 'primary' satisfies BootstrapThemeColor\n            public readonly tableCaption = gameContentTranslation('sound effect.all') satisfies ReactElementOrString\n\n            public get tableOptions(): readonly SoundEffectAppOption[] {\n                const games = $this.props.games\n\n                const options = [] as SoundEffectAppOption[]\n                if (games.hasSMM1Or3DS)\n                    options.push(SoundEffectAppOption.SMM1_AND_SMM3DS_ICON,)\n                if (games.hasSMM2)\n                    options.push(SoundEffectAppOption.SMM2_ICON,)\n                options.push(\n                    SoundEffectAppOption.NAME,\n                    SoundEffectAppOption.CATEGORY,\n                    SoundEffectAppOption.PLAYER_BEHAVIOUR,\n                    SoundEffectAppOption.SOUNDS,\n                )\n                return options\n            }\n\n\n            public createNewTableContent(content: SoundEffects, option: SoundEffectAppOption,) {\n                return option.renderContent(content,)\n            }\n\n            public createTableHeader(option: SoundEffectAppOption,) {\n                return option.renderTableHeader()\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"names":["_Symbol$iterator","Symbol","iterator","SoundEffectAppOption","_ref","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","value","enumeration","this","_createContentOption","_createTableHeaderOption","enumerable","reference","isInSuperMarioMaker1","_jsx","SoundEffectComponent","name","game","Games","SUPER_MARIO_MAKER_1","isInSuperMarioMaker2","SUPER_MARIO_MAKER_2","CompanionEnum","get","getValue","values","Enum","SMM1_AND_SMM3DS_ICON","_SoundEffectAppOption","GameStyleAppOption_SMM1AndSMM3DSIcon","_super2","apply","arguments","renderSMM1And3DSImage","CommonOptions","smm1And3dsGameHeader","SMM2_ICON","_SoundEffectAppOption2","GameStyleAppOption_SMM2Icon","_super3","renderSMM2Image","smm2GameHeader","NAME","_SoundEffectAppOption3","GameStyleAppOption_Name","_super4","getNameContent","nameHeader","CATEGORY","_SoundEffectAppOption4","GameStyleAppOption_Category","_super5","getCategoryContent","SoundEffectCategories","getValueByName","categoryEnglish","imageFile","categoryHeader","PLAYER_BEHAVIOUR","_SoundEffectAppOption5","GameStyleAppOption_PlayerBehaviour","_super6","playerSoundEffectTriggerContainer","createNewComponent","englishName","element","unfinishedText","SOUNDS","_SoundEffectAppOption6","_super7","_ref2","sounds_exclusiveSmm1","sounds_standaloneSmm1","sounds_smm2","isSMM1Empty","length","isSMM2Empty","_jsxs","className","concat","children","map","sound","SimpleSoundComponent","file","title","UnfinishedText","_instance","_classPrivateFieldLooseKey","_class","_CompanionEnum","CompanionEnum_SoundEffectAppOption","_super8","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","SoundEffectApp","_AbstractTableApp","gameContentTranslation","$this","SoundEffectAppInterpreter","tableHeadersColor","tableColor","tableCaption","filterGame","SoundEffects","props","games","options","hasSMM1Or3DS","push","hasSMM2","content","option","renderContent","renderTableHeader","AbstractTableApp"],"sourceRoot":""}