{"version":3,"sources":["bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx","app/withInterpreter/ViewDisplays.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/EveryPredefinedMessagesApp.tsx"],"names":["PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","getOrCreateInstance","this","type","callback","addEventListener","event","inserted","onInserted","__addEventListener","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","children","EMPTY_REACT_ELEMENT","option","triggers","elementId","useEffect","flat","forEach","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","currentLanguage","get","name","state","listId","setDoesDisplayPopover","popoverOrientation","setState","ContentTranslationComponent","translation","createOption","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","className","toNameMap","entries","includes","map","value","languageKey","englishName","LanguageTranslationComponent","style","unionTrait","NameComponent","useState","StringContainer","getInHtml","english","Symbol","iterator","ViewDisplays","htmlType","currentValue","key","callbackOnClick","disabled","onClick","Enum","getValueOn","getValuesOn","values","TABLE","SIMPLE_LIST","CARD_LIST","app","assert","createTable","createList","createCardList","AbstractAppWithInterpreter","typeDisplayed","_createPossibleViewDisplay","_createKey","_createAppOptionInterpreter","__possibleViewDisplay","viewDisplay","createButton","_key","nextValue","__createViewDisplayGroup","_createTitleContent","createComponent","AbstractApp","AbstractSimpleListApp","optionInterpreter","_appOptionInterpreter","iterable","enumerable","reference","nameContainer","englishNameInHtml","push","EveryPredefinedMessagesApp","TranslationUtility","replaceAndInterpretTranslation","predefinedMessages","PredefinedMessages"],"mappings":"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","file":"static/js/11.58782620.chunk.js","sourcesContent":["import {Popover} from 'bootstrap';\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from './Popover.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Popover.Event.SHOW as Popover.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Popover.Event.SHOWN as Popover.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Popover.Event.HIDE as Popover.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Popover.Event.HIDDEN as Popover.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Popover.Event.INSERTED as Popover.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,);\n    }\n\n\n    private __addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.__addEventListener(PopoverInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element);\n    }\n\n}\n","import {useEffect}         from 'react';\n\nimport type {PopoverConfiguration}                            from './Popover.types';\nimport type {ReactElement, ReactPropertyWithOptionalChildren} from '../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {PopoverInstance}     from './PopoverInstance';\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertyWithOptionalChildren<PopoverConfiguration, T>,): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)));\n    return children;\n}\n","import Popover from './Popover';\n\nimport type {SpanPopoverConfiguration}                        from './Popover.types';\nimport type {ReactElementOrString, ReactPropertyWithChildren} from '../../util/react/ReactProperty';\n\nimport TextComponent from '../../app/tools/text/TextComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertyWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>;\n}\n","import {Popover}                                       from 'bootstrap';\nimport {Component, type Dispatch, type SetStateAction} from 'react';\n\nimport type {Name}                                                                         from '../Name';\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from './Name.properties';\nimport type {ReactComponent}                                                               from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                                                 from '../../../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../../components/ContentTranslationComponent';\nimport {ProjectLanguages}          from '../../ProjectLanguages';\nimport TextComponent               from '../../../app/tools/text/TextComponent';\nimport TextPopover                 from '../../../bootstrap/popover/TextPopover';\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent;\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,);\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name);\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        };\n    }\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get listId(): string {\n        return this.props.listId;\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover;\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties;\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name;\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation;\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id;\n        const setDoesDisplayPopover = this.setDoesDisplayPopover;\n\n        this.setState({\n            element: <ContentTranslationComponent>{translation =>\n                <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, translation('In other languages'),)}\n                             {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                    {this.#currentLanguageTextContent}\n                </TextPopover>\n            }</ContentTranslationComponent>,\n        });\n    }\n\n    public override render(): ReactElement {\n        return this.state.element;\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    };\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation;\n\n    return option;\n}\n","import type {NameListProperties} from './Name.properties';\n\nimport LanguageTranslationComponent from '../../components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../../ProjectLanguages';\nimport TextComponent                from '../../../app/tools/text/TextComponent';\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage);\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`;\n\n                return <LanguageTranslationComponent key={`${id} - language translation component (${languageKey})`}>{translation =>\n                    <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${translation(language.englishName)} ${language.unionTrait} '`,})}>\n                        <TextComponent content={value}/>\n                    </li>\n                }</LanguageTranslationComponent>;\n            })\n    }</ul>;\n}\n","import './Name.component.scss';\n\nimport {useState} from 'react';\n\nimport type {NameProperties} from './Name.properties';\n\nimport {StringContainer}    from '../../../util/StringContainer';\nimport NamePopoverComponent from './NamePopover.component';\nimport NameListComponent    from './NameList.component';\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false);\n    const {name,} = otherProperties;\n\n    const elementId = `${id}-${StringContainer.getInHtml(name.english)}`;\n    const listId = `${elementId}-list`;\n\n    return <div key={`${elementId} - container`} id={`${elementId}-container`}>\n        <NamePopoverComponent id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>;\n}\n","import type {AbstractAppWithInterpreter}                                                                                                                                                  from './AbstractAppWithInterpreter';\nimport type {AbstractCardListApp}                                                                                                                                                         from './AbstractCardListApp';\nimport type {AbstractSimpleListApp}                                                                                                                                                       from './AbstractSimpleListApp';\nimport type {AbstractTableApp}                                                                                                                                                            from './AbstractTableApp';\nimport type {StaticReference}                                                                                                                                                             from '../../util/enum/Enum.types';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue, Type} from './ViewDisplays.types';\nimport {HTMLType}                                                                                                                                                                         from './ViewDisplays.types';\nimport type {ReactElement}                                                                                                                                                                from '../../util/react/ReactProperty';\n\nimport {Enum}   from '../../util/enum/Enum';\nimport {assert} from '../../util/utilitiesMethods';\n\nexport abstract class ViewDisplays\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static/* readonly*/ TABLE;\n    public static/* readonly*/ SIMPLE_LIST;\n    public static/* readonly*/ CARD_LIST;\n\n    static {\n        this.TABLE =       new class ViewDisplays_Table extends ViewDisplays {\n\n            public override createComponent(app: PossibleApp,): ReactElement {\n                assert('createTable' in app, 'The application does not handle a table creation.',);\n                return app.createTable();\n            }\n\n        }('table', 'table',);\n        this.SIMPLE_LIST = new class ViewDisplays_SimpleList extends ViewDisplays {\n\n            public override createComponent(app: PossibleApp,): ReactElement {\n                assert('createList' in app, 'The application does not handle a \"simple list\" creation.',);\n                return app.createList();\n            }\n\n        }('simple-list', 'list',);\n        this.CARD_LIST =   new class ViewDisplays_CardList extends ViewDisplays {\n\n            public override createComponent(app: PossibleApp,): ReactElement {\n                assert('createCardList' in app, 'The application does not handle a \"card list\" creation.',);\n                return app.createCardList();\n            }\n\n        }('card-list', 'card-list',);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: ViewDisplays;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    readonly #type;\n    readonly #htmlType;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(type: Type, htmlType: HTMLType,) {\n        super();\n        this.#type = type;\n        this.#htmlType = htmlType;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): Type {\n        return this.#type;\n    }\n\n    public get htmlType(): HTMLType {\n        return this.#htmlType;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract createComponent(app: PossibleApp,): ReactElement;\n\n    /**\n     * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n     *\n     * @param currentValue the current value selected in the \"button group\"\n     * @param key the react key\n     * @param callbackOnClick the callback to call when clicking the button (to change the view)\n     */\n    public createButton(currentValue: ViewDisplays, key: string, callbackOnClick: (nextValue: ViewDisplays,) => void,): ReactElement {\n        return this === currentValue\n            ? <button key={`${key} (${this.name})`} className={`btn btn-success bi-${this.htmlType} btn-viewDisplay`} disabled/>\n            : <button key={`${key} (${this.name})`} className={`btn btn-dark bi-${this.htmlType} btn-viewDisplay`} onClick={() => callbackOnClick(this)}/>;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ViewDisplays> {\n        return ViewDisplays;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends ViewDisplays = ViewDisplays, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): ViewDisplays\n    public static getValue(value: PossibleValue,): | ViewDisplays | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleApp = | AbstractAppWithInterpreter<any> | AbstractSimpleListApp<any> | AbstractCardListApp<any> | AbstractTableApp<any>;\n","import './AbstractAppWithInterpreter.scss';\n\nimport type {AppInterpreter}                     from '../interpreter/AppInterpreter';\nimport type {AppWithVariableDisplayStates}       from '../AppStates.types';\nimport type {ReactElement, ReactElementOrString} from '../../util/react/ReactProperty';\n\nimport AbstractApp    from '../AbstractApp';\nimport {ViewDisplays} from './ViewDisplays';\nimport {assert}       from '../../util/utilitiesMethods';\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Attributes --------------------\n\n    #possibleViewDisplay?: readonly ViewDisplays[];\n    #key?: string;\n    #appInterpreter?: APP;\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    /**\n     * Get the {@link ViewDisplays view display} state held by this instance.\n     */\n    public get typeDisplayed(): ViewDisplays {\n        assert(this.state != null, 'The state has not been initialised in the constructor.',);\n        assert(this.state.typeDisplayed != null, 'The state \"type displayed\" has not been initialised in the constructor.',);\n        return this.state.typeDisplayed;\n    }\n\n    /**\n     * Set the state {@link ViewDisplays view display} to the value received in this instance.\n     *\n     * @param value the new {@link ViewDisplays view display} state\n     */\n    public set typeDisplayed(value: ViewDisplays,) {\n        this.setState({typeDisplayed: value,});\n    }\n\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewDisplays[];\n\n    private get __possibleViewDisplay(): readonly ViewDisplays[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay();\n    }\n\n\n    protected abstract _createKey(): string;\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}.\n     * It is also used for the {@link Table} id.\n     *\n     * @see __createViewDisplayGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey();\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP;\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter();\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    private get __createViewDisplayGroup(): ReactElement {\n        return <div key={`${this._key} (group)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">\n            {this.__possibleViewDisplay.map(viewDisplay =>\n                viewDisplay.createButton(this.typeDisplayed, this._key, nextValue => this.typeDisplayed = nextValue,))}\n        </div>;\n    }\n\n    protected abstract _createTitleContent(): ReactElementOrString;\n\n    protected override _mainContent(): ReactElement {\n        const typeDisplayed = this.typeDisplayed;\n\n        return <div key={`${this._key} (sub main container)`} id=\"subMain-container\">\n            <aside id=\"viewChanger-container\">\n                {this.__createViewDisplayGroup}\n            </aside>\n            <div id={`${this._key}-container`} className={`${typeDisplayed.htmlType}-container`}>\n                <h1 key={`${this._key} (title)`} id={`${this._key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <div key={`${this._key} (${typeDisplayed.type})`} className=\"app-content\">{typeDisplayed.createComponent(this,)}</div>\n            </div>\n\n        </div>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppInterpreterWithSimpleList} from '../interpreter/AppInterpreterWithSimpleList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\n\nimport {AbstractAppWithInterpreter} from './AbstractAppWithInterpreter';\nimport NameComponent                from '../../lang/name/component/Name.component';\nimport {ViewDisplays}               from './ViewDisplays';\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Attributes --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST,];\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractSimpleListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const englishName = enumerable.englishName;\n            const name = enumerable.reference.nameContainer;\n            const id = `${this._key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${englishName} - main list container`} id={id}\n                     className={`${this._key}-container listElement-container col-12 col-sm-4 col-md-3 col-lg-2`}>\n                    <span key={`${englishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${englishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Fragment} from 'react';\n\nimport type {ReactElementOrString}         from '../util/react/ReactProperty';\nimport type {AppInterpreterWithSimpleList} from './interpreter/AppInterpreterWithSimpleList';\n\nimport {AbstractSimpleListApp}         from './withInterpreter/AbstractSimpleListApp';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {PredefinedMessages}            from '../core/predefinedMessage/PredefinedMessages';\nimport {TranslationUtility}            from '../lang/components/TranslationUtility';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\nexport default class EveryPredefinedMessagesApp\n    extends AbstractSimpleListApp<AppInterpreterWithSimpleList<PredefinedMessages>> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {typeDisplayed: ViewDisplays.SIMPLE_LIST,};\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'predefinedMessage';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => <>{TranslationUtility.replaceAndInterpretTranslation(\n            translation,\n            'Every predefined messages', {\n                predefinedMessages: <Fragment key=\"predefined message title (plural predefined message)\">--predefined messages--</Fragment>,//TODO add predefined message reference\n            },\n        )}</>\n        }</GameContentTranslationComponent>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithSimpleList<PredefinedMessages> {\n        return new class implements AppInterpreterWithSimpleList<PredefinedMessages> {\n\n            public get iterable(): IterableIterator<PredefinedMessages> {\n                return PredefinedMessages[Symbol.iterator]();\n            }\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}