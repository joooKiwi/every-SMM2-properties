{"version":3,"sources":["app/tools/sounds/SoundFounds.ts","app/tools/sounds/SoundStates.ts","app/tools/sounds/holder/SoundSubElementsHolder.ts","app/tools/sounds/SimpleSound.tsx"],"names":["Symbol","iterator","SoundFounds","englishName","this","callback","Enum","getNonNullDefaultOn","value","setDefault","setNonNullDefaultOn","values","find","enumerable","getValueOn","getValuesOn","YES","NO","ON_PLAY","ON_CREATE","_DEFAULT","SoundStates","STANDBY","PAUSED","PLAYING","EXCEPTION","playElement","stopElement","pauseElement","exceptionElement","SoundSubElementsHolder","SimpleSound","properties","state","isSourceRetrieved","__isSoundFound","setState","audio","source","_source","_everyAudioElements","has","get","set","Audio","onended","loop","isEveryAudioLoopsAfterCompleted","props","isSoundFound","default","Number","isFinite","_audio","duration","title","play","then","onPlay","__stop","catch","pause","currentTime","onCreate","className","getElements","onClick","__play","_title","__pause","forEach","audioElement","Component","Map"],"mappings":"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","file":"static/js/3.ef49c1d3.chunk.js","sourcesContent":["import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, IsSourceFoundCallback, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundFounds.types';\nimport type {ClassWithEnglishName}                                                                                                                                                                                      from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                                           from '../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundFounds\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static /*readonly*/ YES;\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static /*readonly*/ NO;\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static /*readonly*/ ON_PLAY;\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static /*readonly*/ ON_CREATE;\n\n    static {\n        this.YES =       new class SoundFounds_Yes extends SoundFounds {\n\n            public override onCreate(callback: IsSourceFoundCallback,): void {\n                callback(true);\n            }\n\n            public override onPlay(callback: IsSourceFoundCallback,): true {\n                callback(true);\n                return true;\n            }\n\n        }('yes',);\n        this.NO =        new class SoundFounds_No extends SoundFounds {\n\n            public override onCreate(callback: IsSourceFoundCallback,): void {\n                callback(false);\n            }\n\n            public override onPlay(callback: IsSourceFoundCallback,): false {\n                callback(false);\n                return false;\n            }\n\n        }('no',);\n        this.ON_PLAY =   new class SoundFounds_OnPlay extends SoundFounds {\n\n            public override onPlay(callback: IsSourceFoundCallback,): null {\n                callback();\n                return null;\n            }\n\n        }('on play',);\n        this.ON_CREATE = new class SoundFounds_OnCreate extends SoundFounds {\n\n            public override onCreate(callback: IsSourceFoundCallback,): void {\n                callback();\n            }\n\n        }('on create',);\n    }\n\n    protected static readonly _DEFAULT = SoundFounds.ON_PLAY;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: SoundFounds;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SimpleSound sound element} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): | boolean | null {\n        return null;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundFounds> {\n        return SoundFounds;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): SoundFounds {\n        return Enum.getNonNullDefaultOn(this);\n    }\n\n    public static set default(value: | SoundFounds | string,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | SoundFounds | string,): typeof SoundFounds {\n        return Enum.setNonNullDefaultOn(this, value,);\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundFounds, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundFounds\n    public static getValue(value: PossibleValue,): | SoundFounds | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundStates.types';\nimport type {ClassWithEnglishName}                                                                                                                                                               from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                    from '../../../util/enum/Enum.types';\nimport type {ReactElement}                                                                                                                                                                       from '../../../util/react/ReactProperty';\nimport type {SoundSubElementsHolder}                                                                                                                                                             from './holder/SoundSubElementsHolder';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static/* readonly*/ STANDBY;\n    public static/* readonly*/ PAUSED;\n    public static/* readonly*/ PLAYING;\n    public static/* readonly*/ EXCEPTION;\n\n    static {\n        this.STANDBY = new class SoundStates_Standby extends SoundStates {\n\n            public override getElements({playElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n                return [playElement(),];\n            }\n\n        }('standby',);\n        this.PAUSED =  new class SoundStates_Paused extends SoundStates {\n\n            public override getElements({playElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n                return [playElement(), stopElement(),];\n            }\n\n        } ('paused',);\n        this.PLAYING = new class SoundStates_Playing extends SoundStates {\n\n            public override getElements({pauseElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n                return [pauseElement(), stopElement(),];\n            }\n\n        }('playing',);\n        this.EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n            public override getElements({exceptionElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n                return [exceptionElement(),];\n            }\n\n        }('exception',);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: SoundStates;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElements(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<SoundStates> {\n        return SoundStates;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundStates, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundStates\n    public static getValue(value: PossibleValue,): | SoundStates | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {ReactElement} from '../../../../util/react/ReactProperty';\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Attributes --------------------\n\n    readonly #playElement;\n    readonly #pauseElement;\n    readonly #stopElement;\n    readonly #exceptionElement;\n\n    //region -------------------- Attributes --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement;\n        this.#pauseElement = pauseElement;\n        this.#stopElement = stopElement;\n        this.#exceptionElement = exceptionElement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement;\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement;\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement;\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement;\n","import './SimpleSound.scss';\n\nimport {Component} from 'react';\n\nimport type {IsSourceFoundCallback} from './SoundFounds.types';\nimport type {SimpleSoundProperties} from './properties/SimpleSoundProperties';\nimport type {SimpleSoundState}      from './properties/SimpleSoundState';\nimport type {ReactElement}          from '../../../util/react/ReactProperty';\n\nimport {SoundFounds}            from './SoundFounds';\nimport {SoundStates}            from './SoundStates';\nimport {SoundSubElementsHolder} from './holder/SoundSubElementsHolder';\n\nexport default class SimpleSound\n    extends Component<SimpleSoundProperties, SimpleSoundState> {\n\n    //region -------------------- Attributes --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play';\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause';\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop';\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception';\n\n    static #IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = false;\n\n    static readonly #EVERY_AUDIO_ELEMENTS = new Map<string, HTMLAudioElement>();\n\n    #audio?: HTMLAudioElement;\n    readonly #isSourceFoundCallback: IsSourceFoundCallback;\n\n    //endregion -------------------- Attributes --------------------\n\n    public constructor(properties: SimpleSoundProperties,) {\n        super(properties);\n        this.state = {\n            state: SoundStates.STANDBY,\n            isSourceRetrieved: false,\n        };\n        this.#isSourceFoundCallback = (value: boolean = this.__isSoundFound,) =>\n            value\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, state: SoundStates.EXCEPTION,});\n\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    /**\n     * A {@link Map} of every audio elements.<br/>\n     * The key is the source of the audio element created.\n     *\n     * @see _audio\n     */\n    protected static get _everyAudioElements() {\n        return this.#EVERY_AUDIO_ELEMENTS;\n    }\n\n    public static get isEveryAudioLoopsAfterCompleted(): boolean {\n        return this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED;\n    }\n\n    public static set isEveryAudioLoopsAfterCompleted(value: boolean,) {\n        this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = value;\n        this._everyAudioElements.forEach(audioElement => audioElement.loop = value);\n    }\n\n    /**\n     * A {@link HTMLAudioElement Audio} element created from the source\n     * and with the global property {@link isEveryAudioLoopsAfterCompleted}.\n     *\n     * @note The element is created only if any buttons (play, pause or stop) is handled. Otherwise, it will not be created.\n     */\n    protected get _audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const source = this._source;\n            let audio: HTMLAudioElement;\n            if (SimpleSound._everyAudioElements.has(source))\n                audio = SimpleSound._everyAudioElements.get(source)!;\n            else\n                SimpleSound._everyAudioElements.set(source, audio = new Audio(source));\n            this.#audio = audio;\n            audio.onended = () => this.setState({state: SoundStates.STANDBY,});\n            audio.loop = SimpleSound.isEveryAudioLoopsAfterCompleted;\n        }\n        return this.#audio;\n    }\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n    //region -------------------- Getter methods (source) --------------------\n\n    protected get _source() {\n        return this.props.source;\n    }\n\n    public get isSoundFound(): SoundFounds {\n        return this.props.isSoundFound ?? SoundFounds.default;\n    }\n\n    private get __isSoundFound(): boolean {\n        return Number.isFinite(this._audio.duration);\n    }\n\n    //endregion -------------------- Getter methods (source) --------------------\n\n    protected get _title() {\n        return this.props.title;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * <p>\n     *  Play the current audio element.\n     *\n     *  And when the audio element has finished playing,\n     *  it will change the state to {@link SoundStates.STANDBY standby}.\n     * </p>\n     *\n     * <p>\n     *  Depending on if an {@link Error exception} is raised,\n     *  it will change the state to {@link SoundStates.EXCEPTION exception}.\n     * </p>\n     *\n     * <p>\n     *  But, if the {@link SoundFounds} is {@link SoundFounds.YES},\n     *  it will assume that the source is valid.\n     * </p>\n     */\n    private __play(): void {\n        this._audio.play()\n            .then(() => {\n                const isSoundFound = this.isSoundFound.onPlay(this.#isSourceFoundCallback) ?? this.__isSoundFound;\n                if (!isSoundFound)\n                    this.__stop(SoundStates.EXCEPTION);\n            })\n            .catch(() => this.setState({state: SoundStates.EXCEPTION,}));\n        this.setState({state: SoundStates.PLAYING,});\n    }\n\n    /**\n     * Pause the current audio element.\n     */\n    private __pause(): void {\n        this._audio.pause();\n        this.setState({state: SoundStates.PAUSED,});\n    }\n\n    /**\n     * Stop the current audio element.\n     *\n     * @param state either {@link SoundStates.STANDBY standby} or {@link SoundStates.EXCEPTION exception} state\n     */\n    private __stop(state: SoundStates = SoundStates.STANDBY,): void {\n        const audio = this._audio;\n        audio.pause();\n        audio.currentTime = 0;\n        this.setState({state: state,});\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.state.isSourceRetrieved)\n            this.isSoundFound.onCreate(this.#isSourceFoundCallback);\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio;\n        if (audio != null)\n            audio.onended = null;\n    }\n\n    public override render(): ReactElement {\n        return <div key={this._title} className=\"audio-state-container container\">{\n            this.state.state.getElements(new SoundSubElementsHolder(\n                () => <div key={`${this._title} - play`} className={SimpleSound.#PLAY_CLASSES} onClick={() => this.__play()}/>,\n                () => <div key={`${this._title} - pause`} className={SimpleSound.#PAUSE_CLASSES} onClick={() => this.__pause()}/>,\n                () => <div key={`${this._title} - stop`} className={SimpleSound.#STOP_CLASSES} onClick={() => this.__stop()}/>,\n                () => <div key={`${this._title} - exception`} className={SimpleSound.#EXCEPTION_CLASSES}/>,\n            ))\n        }</div>;\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"sourceRoot":""}