{"version":3,"file":"static/js/293.35661069.chunk.js","mappings":"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","sources":["app/CourseTagApp.tsx","app/tools/button/LinkButton.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './CourseTagApp.scss'\n\nimport type {CourseTagAppProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList,} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}             from 'app/interpreter/DimensionOnList'\nimport type {CourseTagTypes}              from 'app/property/CourseTagTypes'\nimport type {ClassWithType}               from 'core/ClassWithType'\nimport type {CourseTags}                  from 'core/courseTag/CourseTags'\nimport type {PossibleRouteName}           from 'route/EveryRoutes.types'\n\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport {AbstractCardListApp}                        from 'app/withInterpreter/AbstractCardListApp'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {TAG, COURSE,} = OtherWordInTheGames\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class CourseTagApp\n    extends AbstractCardListApp<CourseTags, AppInterpreterWithCardList<CourseTags>, CourseTagAppProperties>\n    implements ClassWithType<CourseTagTypes> {\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): CourseTagTypes {\n        return this.props.type\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'courseTag'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (list)`\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (card)`\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('course tag.all', {\n            course: COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.singularEnglishName).toLowerCase(),\n            courses: COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.pluralEnglishName).toLowerCase(),\n            tag: TAG.singularLowerCaseNameOnReference,\n            tags: TAG.pluralLowerCaseNameOnReference,\n        },)\n    }\n\n    protected override _createAsideContent(): NullOr<ReactElementOrString> {\n        const {type, viewDisplay,} = this\n\n        return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"everyCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"officialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.officialRouteName)} color={type.officialColor}>{contentTranslation('Official.Yes')}</LinkButton>\n                <LinkButton partialId=\"unofficialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.unofficialRouteName)} color={type.unofficialColor}>{contentTranslation('Official.No')}</LinkButton>\n            </div>\n            <LinkButton partialId=\"makerCentralCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.makerCentralRouteName)} color={type.makerCentralColor}>Maker Central</LinkButton>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class CourseTagAppInterpreter implements AppInterpreterWithCardList<CourseTags> {\n\n            public get content() {\n                return $this.type.content\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 1,\n                    small: 2,\n                    medium: 4,\n                    large: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n                return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n                //TODO add Maker Central name\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<PossibleRouteName>\n\n    color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["TAG","COURSE","OtherWordInTheGames","CourseTagApp","AbstractCardListApp","type","this","props","_createKey","_createSimpleListRouteName","concat","routeName","_createCardListRouteName","_createTitleContent","_COURSE$singularLower","_COURSE$pluralLowerCa","gameContentTranslation","course","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","courses","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","tag","singularLowerCaseNameOnReference","tags","pluralLowerCaseNameOnReference","_createAsideContent","viewDisplay","_jsxs","id","className","children","_jsx","LinkButton","partialId","getRoutePathAsListOnly","allRouteName","color","allColor","contentTranslation","officialRouteName","officialColor","unofficialRouteName","unofficialColor","makerCentralRouteName","makerCentralColor","_createAppOptionInterpreter","$this","content","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","_ref","reference","courseTag","englishName","name","firstAppearance","simpleName","disabled","Link","to","routeFromName","_routeName","_classPrivateFieldLooseKey","AbstractSimpleListApp","constructor","arguments","Object","defineProperty","writable","value","_createPossibleViewDisplay","super","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createUniqueNameOnCardList","enumerable","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","lg","extraLarge","xl","extraExtraLarge","xxl","dimensions","size","length","contentToDisplay","Array","index","uniqueEnglishName","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","DisplayButtonGroup","reactKey","views","currentView","map","_ref2","view","DisplayButton","_ref3","pathname","currentPath","useLocation","path","htmlType","onClick","CompanionEnum","get","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","__possibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","createList","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}