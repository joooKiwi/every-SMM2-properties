{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/property/CourseTagTypes.tsx","app/CourseTagApp.tsx"],"names":["AbstractCardListApp","enumerable","englishName","optionInterpreter","this","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","Symbol","iterator","CourseTagTypes","type","_createAllLinkButtonProperties","ContentTranslationComponent","translationKey","_createOfficialLinkButtonProperties","_createUnofficialLinkButtonProperties","_createMakerCentralLinkButtonProperties","value","values","find","Enum","getValueOn","getValuesOn","partialId","routeName","color","disabled","to","route","ALL","CourseTags","OFFICIAL","officialCourseTags","UNOFFICIAL","unofficialCourseTags","MAKER_CENTRAL","makerCentralCourseTags","CourseTagApp","props","state","typeDisplayed","getValue","GameContentTranslationComponent","translation","TranslationUtility","replaceAndInterpretTranslation","course","tags","createAllLinkButton","createOfficialLinkButton","createUnofficialLinkButton","createMakerCentralLinkButton","$this","courseTag","firstAppearance","EMPTY_REACT_ELEMENT","simpleName"],"mappings":"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","file":"static/js/12.3010fb98.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList'\nimport type {AppProperties}                from '../AppProperties.types'\nimport type {AppWithVariableDisplayStates} from '../AppStates.types'\nimport type {ReactElement}                 from '../../util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp'\nimport {ListDimensionCreator}  from './ListDimension.creator'\nimport NameComponent           from '../../lang/name/component/Name.component'\nimport {ViewDisplays}          from './ViewDisplays'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnCardList(enumerable: ReturnType<APP['iterable']['next']>['value'],): string {\n        //TODO find a better way to use the enumerable type than the complicated name\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {BootstrapColor}                                                                                                                                                                               from '../../bootstrap/Bootstrap.types'\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleCourseTagType, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './CourseTagType.types'\nimport type {EveryPossibleRouteNames}                                                                                                                                                                      from '../../routes/everyRoutes.types'\nimport type {StaticReference}                                                                                                                                                                              from '../../util/enum/Enum.types'\nimport type {ReactElement, ReactElementOrString}                                                                                                                                                           from '../../util/react/ReactProperties'\n\nimport ContentTranslationComponent from '../../lang/components/ContentTranslationComponent'\nimport {CourseTags}                from '../../core/courseTag/CourseTags'\nimport {Enum}                      from '../../util/enum/Enum'\nimport {route}                     from '../../routes/route'\n\nexport abstract class CourseTagTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL =              new class CourseTagTypes_All extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'success',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'success',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'success',]\n        }\n\n    }('all',)\n    public static readonly OFFICIAL =         new class CourseTagTypes_Official extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.officialCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'danger',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'warning',]\n        }\n\n    }('official',)\n    public static readonly UNOFFICIAL =       new class CourseTagTypes_Unofficial extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.unofficialCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'danger',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_MAKER_CENTRAL, 'warning',]\n        }\n\n    }('unofficial',)\n    public static readonly MAKER_CENTRAL =    new class CourseTagTypes_MakerCentral extends CourseTagTypes {\n\n        public override get iterator(): IterableIterator<CourseTags> {\n            return CourseTags.makerCentralCourseTags[Symbol.iterator]()\n        }\n\n\n        protected override _createAllLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_ALL, 'warning',]\n        }\n\n        protected override _createOfficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_OFFICIAL, 'warning',]\n        }\n\n        protected override _createUnofficialLinkButtonProperties(): LinkProperties {\n            return [CourseTagTypes.#ROUTE_UNOFFICIAL, 'warning',]\n        }\n\n        protected override _createMakerCentralLinkButtonProperties(): LinkProperties {\n            return CourseTagTypes.#FINAL_PATH\n        }\n\n    }('makerCentral',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: CourseTagTypes\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    static readonly #ROUTE_ALL: PossibleRouteName = 'everyCourseTags'\n    static readonly #ROUTE_OFFICIAL: PossibleRouteName = 'officialCourseTags'\n    static readonly #ROUTE_UNOFFICIAL: PossibleRouteName = 'unofficialCourseTags'\n    static readonly #ROUTE_MAKER_CENTRAL: PossibleRouteName = 'makerCentralCourseTags'\n\n    static readonly #FINAL_PATH: LinkProperties = [null, 'success',]\n\n    readonly #type\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: PossibleCourseTagType,) {\n        super()\n        this.#type = type\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): PossibleCourseTagType {\n        return this.#type\n    }\n\n    public abstract get iterator(): IterableIterator<CourseTags>\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- Link button methods --------------------\n\n    protected abstract _createAllLinkButtonProperties(): LinkProperties\n\n    public createAllLinkButton(): ReactElement {\n        return this.#createLinkButton('all', this._createAllLinkButtonProperties(), <ContentTranslationComponent translationKey=\"All\"/>,)\n    }\n\n\n    protected abstract _createOfficialLinkButtonProperties(): LinkProperties\n\n    public createOfficialLinkButton(): ReactElement {\n        return this.#createLinkButton('official', this._createOfficialLinkButtonProperties(), <ContentTranslationComponent translationKey=\"Official.Yes\"/>,)\n    }\n\n\n    protected abstract _createUnofficialLinkButtonProperties(): LinkProperties\n\n    public createUnofficialLinkButton(): ReactElement {\n        return this.#createLinkButton('unofficial', this._createUnofficialLinkButtonProperties(), <ContentTranslationComponent translationKey=\"Official.No\"/>,)\n    }\n\n\n    protected abstract _createMakerCentralLinkButtonProperties(): LinkProperties\n\n    public createMakerCentralLinkButton(): ReactElement {\n        return this.#createLinkButton('makerCentral', this._createMakerCentralLinkButtonProperties(), 'Maker Central',)\n    }\n\n\n    #createLinkButton(partialId: PossibleCourseTagType, [routeName, color,]: LinkProperties, value: ReactElementOrString,): ReactElement {\n        const id = `${partialId}CourseTag-button`,\n            className = `btn btn-${color}`\n\n        return routeName == null\n            ? <button type=\"button\" id={id} className={className} disabled>{value}</button>\n            : <Link type=\"button\" id={id} className={className} to={route(routeName)}>{value}</Link>\n    }\n\n    //endregion -------------------- Link button methods --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<CourseTagTypes> {\n        return CourseTagTypes\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    protected static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.type === value)\n            ?? null\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends CourseTagTypes = CourseTagTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): CourseTagTypes\n    public static getValue(value: PossibleValue,): | CourseTagTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this)\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleRouteName = Extract<EveryPossibleRouteNames, `${| 'every' | Exclude<PossibleCourseTagType, 'every'> | `${'official' | 'unofficial'}${| 'And' | 'Excluding'}MakerCentral`}CourseTags`>\ntype LinkProperties = readonly [\n    routeName: | PossibleRouteName | null,\n    color: Extract<BootstrapColor, | 'success' | 'warning' | 'danger'>,\n]\n","import './CourseTagApp.scss'\n\nimport {Fragment} from 'react'\n\nimport type {AppInterpreterWithCardList,}                          from './interpreter/AppInterpreterWithCardList'\nimport type {CourseTagAppProperties}                               from './AppProperties.types'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList'\nimport type {ReactElement, ReactElementOrString}                   from '../util/react/ReactProperties'\n\nimport {AbstractCardListApp}           from './withInterpreter/AbstractCardListApp'\nimport {CourseTags}                    from '../core/courseTag/CourseTags'\nimport {CourseTagTypes}                from './property/CourseTagTypes'\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables'\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent'\nimport {TranslationUtility}            from '../lang/components/TranslationUtility'\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays'\n\nexport default class CourseTagApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CourseTags>, CourseTagAppProperties> {\n\n    //region -------------------- Fields --------------------\n\n    #type?: CourseTagTypes\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: CourseTagAppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): CourseTagTypes {\n        return this.#type ??= CourseTagTypes.getValue(this.props.type)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'courseTag'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => <>{TranslationUtility.replaceAndInterpretTranslation(\n            translation,\n            'Every course tags', {\n                course: <Fragment key=\"every course tag (lowercase course)\">--course--</Fragment>,//TODO add course reference\n                tags: <Fragment key=\"every course tag (plural lowercase tag)\">--tags--</Fragment>,//TODO add tag reference\n            },\n        )}</>\n        }</GameContentTranslationComponent>\n    }\n\n    protected override _createAsideContent(): | ReactElementOrString | null {\n        const type = this.type\n\n        return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n            {type.createAllLinkButton()}\n            <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n                {type.createOfficialLinkButton()}\n                {type.createUnofficialLinkButton()}\n            </div>\n            {type.createMakerCentralLinkButton()}\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<CourseTags> {\n        const $this = this\n\n        return new class implements AppInterpreterWithCardList<CourseTags> {\n\n            public get iterable(): IterableIterator<CourseTags> {\n                return $this.type.iterator\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,): ReactElement {\n                return courseTag.firstAppearance == null\n                    ? EMPTY_REACT_ELEMENT\n                    : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n                //TODO add Maker Central name\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}