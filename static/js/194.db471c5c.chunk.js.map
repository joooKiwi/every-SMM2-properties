{"version":3,"file":"static/js/194.db471c5c.chunk.js","mappings":"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","sources":["core/medal/Medal.container.ts","core/medal/Medal.loader.ts","core/medal/Medals.ts","core/medal/file/fileCreator.ts","app/MedalApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Entity}                                                                             from 'core/entity/Entity'\nimport type {CharacterName}                                                                      from 'core/characterName/CharacterName'\n\nimport {ClassContainingAName} from 'lang/name/ClassContainingAName'\n\nexport class MedalContainer\n    extends ClassContainingAName<string>\n    implements Medal {\n\n    //region -------------------- Fields --------------------\n\n    readonly #imageName\n    readonly #maximumAmountAllowedToUploadALevel\n    readonly #amountOfStarReceivedToUnlockIt\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(associatedReference: | Entity | CharacterName,\n                       imageName: PossibleEnglishName,\n                       maximumAmountAllowedToUploadALevel: PossibleMaximumAmountAllowedToUploadALevel,\n                       amountOfStarReceivedToUnlockIt: PossibleAmountOfStarReceivedToUnlockIt,) {\n        super(associatedReference,)\n        this.#imageName = imageName\n        this.#maximumAmountAllowedToUploadALevel = maximumAmountAllowedToUploadALevel\n        this.#amountOfStarReceivedToUnlockIt = amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get imageName(): PossibleEnglishName {\n        return this.#imageName\n    }\n\n    public get maximumAmountAllowedToUploadALevel(): PossibleMaximumAmountAllowedToUploadALevel {\n        return this.#maximumAmountAllowedToUploadALevel\n    }\n\n    public get amountOfStarReceivedToUnlockIt(): PossibleAmountOfStarReceivedToUnlockIt {\n        return this.#amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import file from 'resources/compiled/Medals (SMM).json'\n\nimport type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Loader}                                                                             from 'util/loader/Loader'\n\nimport {isInProduction}      from 'variables'\nimport {MedalContainer}      from 'core/medal/Medal.container'\nimport {Medals}              from 'core/medal/Medals'\nimport {CompanionEnumByName} from 'util/enumerable/companion/CompanionEnumByName'\n\n/**\n * @dependsOn<{@link Medals}>\n * @indirectlyDependsOn<{@link CharacterNameLoader}>\n * @indirectlyDependsOn<{@link CharacterNames}>\n * @indirectlyDependsOn<{@link Entities}>\n * @indirectlyDependsOn<{@link EntityLoader}>\n * @recursiveReference<{@link Medals}>\n * @singleton\n */\nexport class MedalLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, Medal>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MedalLoader\n\n    private constructor() {}\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, Medal>\n\n    public load(): ReadonlyMap<PossibleEnglishName, Medal> {\n        if (this.#map != null)\n            return this.#map\n\n        const medalCompanion = Medals.CompanionEnum.get\n        const references = new Map<PossibleEnglishName, Medal>()\n        let index = file.length\n        while (index-- > 0) {\n            const content = file[index] as Content\n            references.set(content.image, createReference(content, medalCompanion,),)\n        }\n\n        if (!isInProduction)\n            console.info(\n                '-------------------- \"medal\" has been loaded --------------------\\n',\n                references,\n                '\\n-------------------- \"medal\" has been loaded --------------------',\n            )\n\n        return this.#map = references\n\n    }\n\n}\n\ninterface Content {\n\n    readonly amountOfAllowedLevelToUpload: PossibleMaximumAmountAllowedToUploadALevel\n    readonly amountOfStarReceived: PossibleAmountOfStarReceivedToUnlockIt\n    readonly image: PossibleEnglishName\n\n}\n\n/** A type-alias definition of the {@link Medals.CompanionEnum} */\ntype MedalCompanion = CompanionEnumByName<Medals, typeof Medals>\n\nfunction createReference(content: Content, medalCompanion: MedalCompanion,): Medal {\n    const imageName = content.image\n\n    return new MedalContainer(\n        medalCompanion.getValueByName(imageName,).associatedReference.reference,\n        imageName,\n        content.amountOfAllowedLevelToUpload,\n        content.amountOfStarReceived,\n    )\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                                         from 'core/ClassWithEnglishName'\nimport type {Medal}                                                                        from 'core/medal/Medal'\nimport type {Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                                                               from 'core/medal/file/MedalImageFile'\nimport type {CompanionEnumByNameSingleton}                                                 from 'util/enumerable/Singleton.types'\nimport type {ClassWithImageFile}                                                           from 'util/file/image/ClassWithImageFile'\n\nimport {MedalLoader}                    from 'core/medal/Medal.loader'\nimport * as FileCreator                 from 'core/medal/file/fileCreator'\nimport {StringContainer}                from 'util/StringContainer'\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\nimport {Entities}                       from 'core/entity/Entities'\nimport {CharacterNames}                 from 'core/characterName/CharacterNames'\n\n/**\n * @todo Change the \"associated reference\" used from the \"Green Koopa Troopa\" to \"Koopa Troopa\"\n * @recursiveReference<{@link MedalLoader}>\n */\nexport class Medals\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImageFile<MedalImageFile> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GOOMBA =         new Medals('Goomba', 0, Entities.GOOMBA,)\n    public static readonly KOOPA_TROOPA =   new Medals('Koopa Troopa', 1, Entities.GREEN_KOOPA_TROOPA,)\n    public static readonly PIRANHA_PLANT =  new Medals('Piranha Plant', 2, Entities.PIRANHA_PLANT,)\n    public static readonly SPINY =          new Medals('Spiny', 3, Entities.SPINY,)\n    public static readonly CHEEP_CHEEP =    new Medals('Cheep Cheep', 4, Entities.CHEEP_CHEEP,)\n    public static readonly BLOOPER =        new Medals('Blooper', 5, Entities.BLOOPER,)\n    public static readonly LAKITU =         new Medals('Lakitu', 6, Entities.LAKITU,)\n    public static readonly BOWSER =         new Medals('Bowser', 7, Entities.BOWSER,)\n    public static readonly TOAD =           new Medals('Toad', 8, CharacterNames.TOAD, )\n    public static readonly PRINCESS_PEACH = new Medals('Princess Peach', 9, CharacterNames.PRINCESS_PEACH,)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static CompanionEnum: CompanionEnumByNameSingleton<Medals, typeof Medals> = class CompanionEnum_Medals\n        extends CompanionEnumByEnglishNameOnly<Medals, typeof Medals> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Medals\n\n        private constructor() {\n            super(Medals,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Medals()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, Medal>\n\n    #reference?: Medal\n    readonly #associatedReference: | Entities | CharacterNames\n\n    readonly #englishName\n    readonly #imageName: PossibleImageName\n    #imageFile?: MedalImageFile\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber, associatedReference: | Entities | CharacterNames,) {\n        super()\n        this.#englishName = new StringContainer(englishName,)\n        this.#imageName = `Honor_Medal_0${imageNumber}^l.bflim`\n        this.#associatedReference = associatedReference\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, Medal> {\n        return this.#REFERENCE_MAP ??= MedalLoader.get.load()\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): Medal {\n        return this.#reference ??= Medals.REFERENCE_MAP.get(this.englishName,)!\n    }\n\n    public get associatedReference(): | Entities | CharacterNames {\n        return this.#associatedReference\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml\n    }\n\n    public get imageFile(): MedalImageFile {\n        return this.#imageFile ??= FileCreator.medalImage(this.#imageName, this.englishName,)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {PossibleEnglishName, PossibleImageName} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                         from 'core/medal/file/MedalImageFile'\n\nimport {SimpleImageFile} from 'util/file/image/SimpleImageFile'\n\n/**\n * Create a simple {@link MedalImageFile} from a {@link name} prpvided\n *\n * @param name The file name\n * @param commonName The fallback name\n */\nexport function medalImage(name: PossibleImageName, commonName: PossibleEnglishName,): MedalImageFile {\n    return new SimpleImageFile('medal', name, 'tiff', commonName,)\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport SubMainContainer         from 'app/_SubMainContainer'\nimport Image                    from 'app/tools/images/Image'\nimport CardList                 from 'app/withInterpreter/CardList'\nimport SimpleList               from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {Medals}                 from 'core/medal/Medals'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport {assert}                 from 'util/utilitiesMethods'\n\nclass MedalAppInterpreter\n    implements AppInterpreterWithCardList<Medals> {\n\n    public get content() {\n        return Medals.CompanionEnum.get.values.toArray()\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 2,\n            small: 4,\n            medium: 5,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: Medals,): ReactElement {\n        return <Image file={enumerable.imageFile}/>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyMedal (list)',],\n    [ViewDisplays.CARD_LIST, 'everyMedal (card)',],\n] as const satisfies readonly ViewAndRouteName[]\nconst appInterpreter = new MedalAppInterpreter()\n\n/** @reactComponent */\nexport default function MedalApp({viewDisplay,}: AppWithInterpreterProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The MedalApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n\n    const titleContent = gameContentTranslation('medal.all',)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"medal\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <SimpleList reactKey=\"medal\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"medal\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <CardList reactKey=\"medal\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <div className=\"description-container\">{description}</div>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_imageName","_classPrivateFieldLooseKey","_maximumAmountAllowedToUploadALevel","_amountOfStarReceivedToUnlockIt","MedalContainer","ClassContainingAName","constructor","associatedReference","imageName","maximumAmountAllowedToUploadALevel","amountOfStarReceivedToUnlockIt","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","_instance","_map","MedalLoader","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","load","medalCompanion","Medals","CompanionEnum","references","Map","index","file","length","content","set","image","createReference","isInProduction","console","info","getValueByName","reference","amountOfAllowedLevelToUpload","amountOfStarReceived","_REFERENCE_MAP","_reference","_associatedReference","_englishName","_imageFile","Enum","englishName","imageNumber","StringContainer","concat","REFERENCE_MAP","_classPrivateFieldLoo3","_classPrivateFieldLoo4","englishNameInHtml","getInHtml","imageFile","_classPrivateFieldLoo5","_classPrivateFieldLoo6","name","commonName","SimpleImageFile","_Medals","GOOMBA","Entities","KOOPA_TROOPA","GREEN_KOOPA_TROOPA","PIRANHA_PLANT","SPINY","CHEEP_CHEEP","BLOOPER","LAKITU","BOWSER","TOAD","CharacterNames","PRINCESS_PEACH","_CompanionEnum_Medals","CompanionEnum_Medals","CompanionEnumByEnglishNameOnly","_classPrivateFieldLoo7","_classPrivateFieldLoo8","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","appInterpreter","values","toArray","createListDimension","default","small","medium","createCardListDimension","createCardListContent","enumerable","_jsx","Image","MedalApp","_ref","viewDisplay","assert","TABLE","titleContent","gameContentTranslation","SubMainContainer","reactKey","children","SimpleList","interpreter","CardList","DisplayButtonGroup","key","views","currentView","id","className","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","asideContent","description","_jsxs","UnfinishedText","isHidden","_keyRetriever","keyRetriever","dimensions","df","sm","md","lg","large","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","contentToDisplay","Array","uniqueKey","NameComponent","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english"],"sourceRoot":""}