{"version":3,"file":"static/js/194.247000b1.chunk.js","mappings":"6iCAMmEA,GAAAC,EAAAA,EAAAA,GAAA,aAAAC,GAAAD,EAAAA,EAAAA,GAAA,sCAAAE,GAAAF,EAAAA,EAAAA,GAAA,kCAE5D,MAAMG,UACDC,EAAAA,EAYDC,YAAYC,EACAC,EACAC,EACAC,GACfC,MAAMJ,GAbVK,OAAAC,eAAA,KAAAb,EAAA,CAAAc,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAX,EAAA,CAAAY,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAV,EAAA,CAAAW,UAAA,EAAAC,WAAA,KAcIC,EAAAA,EAAAA,GAAAC,KAAIjB,GAAAA,GAAcQ,GAClBQ,EAAAA,EAAAA,GAAAC,KAAIf,GAAAA,GAAuCO,GAC3CO,EAAAA,EAAAA,GAAAC,KAAId,GAAAA,GAAmCO,CAC3C,CAKWF,gBACP,OAAAQ,EAAAA,EAAAA,GAAOC,KAAIjB,GAAAA,EACf,CAEWS,yCACP,OAAAO,EAAAA,EAAAA,GAAOC,KAAIf,GAAAA,EACf,CAEWQ,qCACP,OAAAM,EAAAA,EAAAA,GAAOC,KAAId,GAAAA,EACf,ECjCJ,IAAAe,GAAAjB,EAAAA,EAAAA,GAAA,YAAAkB,GAAAlB,EAAAA,EAAAA,GAAA,OASO,MAAMmB,EAODd,cAMRM,OAAAC,eAAA,KAAAM,EAAA,CAAAL,UAAA,EAAAC,WAAA,GANuB,CAELM,iBAAO,IAADC,EAAAC,EACpB,OAAW,QAAXA,GAAAD,GAAAN,EAAAA,EAAAA,GAAOC,KAAIC,IAAAA,UAAA,IAAAK,EAAAA,EAAAD,EAAAJ,GAAe,IAAID,IAClC,CAMOO,OACH,GAAiB,OAAbR,EAAAA,EAAAA,GAAAC,KAAIE,GAAAA,GACJ,OAAAH,EAAAA,EAAAA,GAAOC,KAAIE,GAAAA,GAEf,MAAMM,EAAa,IAAIC,IACvB,IAAIC,EAAQC,EAAKC,OACjB,KAAOF,KAAU,GAAG,CAChB,MAAMG,EAAUF,EAAKD,GACrBF,EAAWM,IAAID,EAAQE,MAAOC,EAAgBH,GAClD,CASA,OAPKI,EAAAA,GACDC,QAAQC,KACJ,sEACAX,EACA,wEAGDT,EAAAA,EAAAA,GAAAC,KAAIE,GAAAA,GAAQM,CAEvB,EAYJ,SAASQ,EAAgBH,GACrB,MAAMtB,EAAYsB,EAAQE,MAE1B,OAAO,IAAI5B,EACPiC,EAAOC,cAAcjB,IAAIkB,eAAe/B,GAAYD,oBAAoBiC,UACxEhC,EACAsB,EAAQW,6BACRX,EAAQY,qBAEhB,CAvDI9B,OAAAC,eAHSO,EAAWF,EAAA,CAAAJ,UAAA,EAAAC,WAAA,I,kECJxB4B,GAAA1C,EAAAA,EAAAA,GAAA,iBAAA2C,GAAA3C,EAAAA,EAAAA,GAAA,aAAA4C,GAAA5C,EAAAA,EAAAA,GAAA,uBAAA6C,GAAA7C,EAAAA,EAAAA,GAAA,eAAAD,GAAAC,EAAAA,EAAAA,GAAA,aAAA8C,GAAA9C,EAAAA,EAAAA,GAAA,aAIO,MAAMoC,UACDW,EAAAA,KAsDA1C,YAAY2C,EAAkCC,EAAkC3C,GACpFI,QAAOC,OAAAC,eAAA,KAAA+B,EAAA,CAAA9B,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAgC,EAAA,CAAA/B,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAiC,EAAA,CAAAhC,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAb,EAAA,CAAAc,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAkC,EAAA,CAAAjC,UAAA,EAAAC,WAAA,KACPC,EAAAA,EAAAA,GAAAC,KAAI6B,GAAAA,GAAgB,IAAIK,EAAAA,EAAgBF,IACxCjC,EAAAA,EAAAA,GAAAC,KAAIjB,GAAAA,GAAA,gBAAAoD,OAA8BF,EAAW,aAC7ClC,EAAAA,EAAAA,GAAAC,KAAI4B,GAAAA,GAAwBtC,CAChC,CAKkB8C,2BAA0D,IAAD/B,EAAAC,EACvE,OAAW,QAAXA,GAAAD,GAAAN,EAAAA,EAAAA,GAAOC,KAAI0B,IAAAA,UAAA,IAAApB,EAAAA,EAAAD,EAAAqB,GAAoBvB,EAAYC,IAAIG,MACnD,CAMWgB,gBAAoB,IAADc,EAAAC,EAC1B,OAAW,QAAXA,GAAAD,GAAAtC,EAAAA,EAAAA,GAAOC,KAAI2B,IAAAA,UAAA,IAAAW,EAAAA,EAAAD,EAAAV,GAAgBP,EAAOgB,cAAchC,IAAIJ,KAAKgC,YAC7D,CAEW1C,0BACP,OAAAS,EAAAA,EAAAA,GAAOC,KAAI4B,GAAAA,EACf,CAGWI,kBACP,OAAOjC,EAAAA,EAAAA,GAAAC,KAAI6B,GAAAA,GAAczB,GAC7B,CAEWmC,wBACP,OAAOxC,EAAAA,EAAAA,GAAAC,KAAI6B,GAAAA,GAAcW,SAC7B,CAEWC,gBAA6B,IAADC,EAAAC,ECnGhBC,EAAyBC,EDoG5C,OAAW,QAAXF,GAAAD,GAAA3C,EAAAA,EAAAA,GAAOC,KAAI8B,IAAAA,UAAA,IAAAa,EAAAA,EAAAD,EAAAZ,ICpGQc,GDoG8B7C,EAAAA,EAAAA,GAACC,KAAIjB,GAAAA,GCpGV8D,EDoGuB7C,KAAKgC,YCnGrE,IAAIc,EAAAA,EAAgB,QAASF,EAAM,OAAQC,GDoGlD,EA5FSzB,EAOc2B,OAAiB,IAAI3B,EAAO,SAAU,EAAG4B,EAAS,SAAAD,QAPhE3B,EAQc6B,aAAiB,IAAI7B,EAAO,eAAgB,EAAG4B,EAAS,SAAAE,oBARtE9B,EASc+B,cAAiB,IAAI/B,EAAO,gBAAiB,EAAG4B,EAAS,SAAAG,eATvE/B,EAUcgC,MAAiB,IAAIhC,EAAO,QAAS,EAAG4B,EAAS,SAAAI,OAV/DhC,EAWciC,YAAiB,IAAIjC,EAAO,cAAe,EAAG4B,EAAS,SAAAK,aAXrEjC,EAYckC,QAAiB,IAAIlC,EAAO,UAAW,EAAG4B,EAAS,SAAAM,SAZjElC,EAacmC,OAAiB,IAAInC,EAAO,SAAU,EAAG4B,EAAS,SAAAO,QAbhEnC,EAccoC,OAAiB,IAAIpC,EAAO,SAAU,EAAG4B,EAAS,SAAAQ,QAdhEpC,EAecqC,KAAiB,IAAIrC,EAAO,OAAQ,EAAGsC,EAAAA,EAAeD,MAfpErC,EAgBcuC,eAAiB,IAAIvC,EAAO,iBAAkB,EAAGsC,EAAAA,EAAeC,gBAhB9EvC,EAqBKC,eAAapB,GAAAjB,EAAAA,EAAAA,GAAA,YAAA4E,EAAwD,MAAMC,UAC7EC,EAAAA,EAMAzE,cACJK,MAAM0B,EACV,CAEkBhB,iBAAO,IAAD2D,EAAAC,EACpB,OAAW,QAAXA,GAAAD,GAAAhE,EAAAA,EAAAA,GAAOC,KAAIC,IAAAA,UAAA,IAAA+D,EAAAA,EAAAD,EAAA9D,GAAe,IAAI4D,CAClC,GAIHlE,OAAAC,eAAAgE,EAAA3D,EAAA,CAAAJ,UAAA,EAAAC,WAAA,IAAA8D,GAGDjE,OAAAC,eAzCSwB,EAAMM,EAAA,CAAA7B,UAAA,EAAAC,WAAA,I,qCEXJ,MAAMmE,UACTC,EAAAA,EAIWC,aACf,MAAO,OACX,CAEmBC,6BACf,MAAO,mBACX,CAEmBC,2BACf,MAAO,mBACX,CAEmBC,sBACf,OAAOC,EAAAA,EAAAA,IAAuB,YAClC,CAEmBC,8BACf,OAAO,IAAI,MAEI3D,cACP,OAAOO,EAAOC,cAAcjB,IAAIqE,OAAOC,SAC3C,CAIOC,sBACH,MAAO,CACHC,QAAS,EACTC,MAAO,EACPC,OAAQ,EAEhB,CAKOC,0BACH,OAAO/E,KAAK2E,qBAChB,CAEOK,sBAAsBC,GACzB,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACxE,KAAMsE,EAAWxC,WACnC,EAKR,E,yGCpDoE2C,GAAApG,EAAAA,EAAAA,GAAA,aAEjE,MAAekF,UAIVmB,EAAAA,EAA0ChG,cAAA,SAAAiG,WAElD3F,OAAAC,eAAA,KAAAwF,EAAA,CAAAvF,UAAA,EAAAC,WAAA,IAOmByF,6BACf,MAAO,IACA7F,MAAM6F,6BACT,CAACC,EAAAA,EAAaC,UAAWzF,KAAK0F,iBAEtC,CAEYA,sBAAsC,IAADrF,EAAAC,EAC7C,OAAW,QAAXA,GAAAD,GAAAN,EAAAA,EAAAA,GAAOC,KAAIoF,IAAAA,UAAA,IAAA9E,EAAAA,EAAAD,EAAA+E,GAAgBpF,KAAKqE,0BACpC,CAIUsB,4BAA4BV,GAClC,OAAOA,EAAWjD,WACtB,CASO4D,iBACH,MAAMC,EAAoB7F,KAAK8F,sBACzBC,EAAM/F,KAAKgG,MACVpB,QAASqB,EAAIpB,MAAOqB,EAAIpB,OAAQqB,EAAIC,MAAOC,EAAIC,WAAYC,EAAIC,gBAAiBC,GAAQZ,EAAkBd,0BAC3G2B,EAAU,YAAAvE,OAAe8D,GAAE9D,OAAS,MAAN+D,EAAa,GAAE,gBAAA/D,OAAmB+D,IAAI/D,OAAS,MAANgE,EAAa,GAAE,gBAAAhE,OAAmBgE,IAAIhE,OAAS,MAANkE,EAAa,GAAE,gBAAAlE,OAAmBkE,IAAIlE,OAAS,MAANoE,EAAa,GAAE,gBAAApE,OAAmBoE,IAAIpE,OAAU,MAAPsE,EAAc,GAAE,iBAAAtE,OAAoBsE,IACtO5F,EAAUgF,EAAkBhF,QAE5B8F,EAAO9F,EAAQD,OACfgG,EAAmB,IAAIC,MAAoBF,GACjD,IAAIjG,EAAQiG,EACZ,KAAOjG,KAAU,GAAG,CAChB,MAAMuE,EAAapE,EAAQH,GACrBoG,EAAoB9G,KAAK2F,4BAA4BV,GAG3D2B,EAAiBlG,IACbwE,EAAAA,EAAAA,KAAA,OAA6D6B,GAAE,GAAA5E,OAAK4D,EAAG,KAAA5D,OAAI8C,EAAW1C,kBAAiB,cAAcyE,UAAS,GAAA7E,OAAK4D,EAAG,cAAakB,UAC/IC,EAAAA,EAAAA,MAAA,OAAiEF,UAAU,+DAA8DC,SAAA,EACrI/B,EAAAA,EAAAA,KAACiC,EAAAA,EAAa,CAA+CJ,GAAG,OAAOnE,KAAMqC,EAAW1D,UAAU6F,cAAeC,mBAAmB,QAAM,GAAAlF,OAAnH2E,EAAiB,uBACxC5B,EAAAA,EAAAA,KAAA,OAAK8B,UAAU,iCAAgCC,SAAEpB,EAAkBb,sBAAsBC,OAAkB,GAAA9C,OAFlG2E,EAAiB,qCAGxB,GAAA3E,OAJG2E,EAAiB,+BAMtC,CACA,OAAO5B,EAAAA,EAAAA,KAAA,OAAK8B,UAAS,OAAA7E,OAASuE,EAAU,wCAAuCO,SAAEL,GACrF,E,yIC5DW,SAASU,EAAkBC,GAAuE,IAArEC,SAAUzB,EAAG,MAAE0B,EAAK,YAAEC,GAA2CH,EACzG,OAAOrC,EAAAA,EAAAA,KAAA,OAA6C6B,GAAG,4BAA4BC,UAAU,YAAWC,SAAEQ,EAAME,KAAIC,IAAA,IAAEC,EAAMjF,GAAMgF,EAAA,OAC9H1C,EAAAA,EAAAA,KAAC4C,EAAa,CAAiDN,SAAUzB,EAAK8B,KAAMA,EAAME,UAAWnF,EAAM8E,YAAaA,GAAY,GAAAvF,OAA7G4D,EAAG,6BAAA5D,OAA4B0F,EAAI,KAA4E,KACzI,GAAA1F,OAFmB4D,EAAG,6BAG3B,CAEA,SAAS+B,EAAaE,GAA4E,IAA1ER,SAAUzB,EAAG,KAAE8B,EAAI,YAAEH,EAAW,UAAEK,GAAoCC,EAC1F,MAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,MAC3BC,GAAOC,EAAAA,EAAAA,GAAcN,GAE3B,OAAIG,IAAgBE,GAAQP,IAASH,GAC1BxC,EAAAA,EAAAA,KAAA,UAAsC8B,UAAS,sBAAA7E,OAAwB0F,EAAKS,SAAQ,oBAAoBC,KAAK,SAASC,UAAQ,MAAArG,OAA9G4D,EAAG,MAAA5D,OAAK0F,EAAKjF,KAAI,OACrCsC,EAAAA,EAAAA,KAACuD,EAAAA,GAAI,CAA+BC,GAAIN,EAAMpB,UAAS,mBAAA7E,OAAqB0F,EAAKS,SAAQ,oBAAoBK,QAASA,IAAMnD,EAAAA,EAAanE,cAAcjB,IAAIwI,QAAUf,GAAK,GAAA1F,OAA5J4D,EAAG,MAAA5D,OAAK0F,EAAKjF,KAAI,KAC1C,CCfuE,IAAAiG,GAAA7J,EAAAA,EAAAA,GAAA,uBAAAgH,GAAAhH,EAAAA,EAAAA,GAAA,OAAA8J,GAAA9J,EAAAA,EAAAA,GAAA,kBAEhE,MAAe+J,UAGVC,EAAAA,EAUD3J,YAAY4J,GACfvJ,MAAMuJ,GATVtJ,OAAAC,eAAA,KAAAiJ,EAAA,CAAAhJ,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAoG,EAAA,CAAAnG,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAkJ,EAAA,CAAAjJ,UAAA,EAAAC,WAAA,GAUA,CAKWoJ,kBACP,OAAOlJ,KAAKiJ,MAAMC,WACtB,CAIYC,4BAAsD,IAAD9I,EAAAC,EAC7D,OAAW,QAAXA,GAAAD,GAAAN,EAAAA,EAAAA,GAAOC,KAAI6I,IAAAA,UAAA,IAAAvI,EAAAA,EAAAD,EAAAwI,GAA0B7I,KAAKuF,4BAC9C,CAUcS,WAAgB,IAAD3D,EAAAC,EACzB,OAAW,QAAXA,GAAAD,GAAAtC,EAAAA,EAAAA,GAAOC,KAAIgG,IAAAA,UAAA,IAAA1D,EAAAA,EAAAD,EAAA2D,GAAUhG,KAAKmE,YAC9B,CAQc2B,4BAA8B,IAADpD,EAAAC,EACvC,OAAW,QAAXA,GAAAD,GAAA3C,EAAAA,EAAAA,GAAOC,KAAI8I,IAAAA,UAAA,IAAAnG,EAAAA,EAAAD,EAAAoG,GAAqB9I,KAAKwE,6BACzC,CAOU4E,sBACN,OAAO,IACX,CAEUC,qBACN,OAAOnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAc,CAACC,UAAQ,EAAAtC,SAAC,eACpC,CAEmBuC,eACf,MAAM,YAACN,EAAalD,KAAMD,GAAQ/F,KAElC,OAAOkF,EAAAA,EAAAA,KAAA,OAAyC6B,GAAG,oBAAmBE,UAClEC,EAAAA,EAAAA,MAAA,OAAKH,GAAE,GAAA5E,OAAK4D,EAAG,cAAciB,UAAS,GAAA7E,OAAK+G,EAAYZ,SAAQ,cAAarB,SAAA,EACxE/B,EAAAA,EAAAA,KAAA,MAA2B6B,GAAE,GAAA5E,OAAK4D,EAAG,UAAUiB,UAAU,YAAWC,SAAEjH,KAAKsE,uBAAqB,GAAAnC,OAApF4D,EAAG,cACfmB,EAAAA,EAAAA,MAAA,SAAqCH,GAAG,wBAAuBE,SAAA,EAC3D/B,EAAAA,EAAAA,KAACoC,EAAkB,CAACE,SAAUzB,EAAK0B,MAAOzH,KAAKmJ,sBAAuBzB,YAAawB,IAClFlJ,KAAKoJ,wBAAqB,GAAAjH,OAFhB4D,EAAG,qBAIlBb,EAAAA,EAAAA,KAAA,KAAA+B,SAAiCjH,KAAKqJ,sBAAoB,GAAAlH,OAA/C4D,EAAG,oBACdb,EAAAA,EAAAA,KAAA,OAA0C8B,UAAU,cAAaC,SAAEiC,EAAYO,gBAAgBzJ,OAAM,GAAAmC,OAAxF4D,EAAG,MAAA5D,OAAK+G,EAAYX,KAAI,UACnC,GAAApG,OATU4D,EAAG,yBAW3B,E,eClFyEX,GAAApG,EAAAA,EAAAA,GAAA,aAEtE,MAAeqG,UAIV0D,EAAsC1J,cAAA,SAAAiG,WAE9C3F,OAAAC,eAAA,KAAAwF,EAAA,CAAAvF,UAAA,EAAAC,WAAA,IAOmByF,6BACf,MAAO,CACH,CAACC,EAAAA,EAAakE,YAAa1J,KAAK2J,iBAExC,CAEYA,sBAAsC,IAADtJ,EAAAC,EAC7C,OAAW,QAAXA,GAAAD,GAAAN,EAAAA,EAAAA,GAAOC,KAAIoF,IAAAA,UAAA,IAAA9E,EAAAA,EAAAD,EAAA+E,GAAgBpF,KAAKoE,4BACpC,CAIUwF,8BAA8B3E,GACpC,OAAOA,EAAWjD,WACtB,CAQO6H,aACH,MAAMhE,EAAoB7F,KAAK8F,sBACzBC,EAAM/F,KAAKgG,MACVpB,QAASqB,EAAIpB,MAAOqB,EAAIpB,OAAQqB,EAAIC,MAAOC,EAAIC,WAAYC,EAAIC,gBAAiBC,GAAQZ,EAAkBlB,sBAC3G+B,EAAU,YAAAvE,OAAe8D,GAAE9D,OAAS,MAAN+D,EAAa,GAAE,gBAAA/D,OAAmB+D,IAAI/D,OAAS,MAANgE,EAAa,GAAE,gBAAAhE,OAAmBgE,IAAIhE,OAAS,MAANkE,EAAa,GAAE,gBAAAlE,OAAmBkE,IAAIlE,OAAS,MAANoE,EAAa,GAAE,gBAAApE,OAAmBoE,IAAIpE,OAAU,MAAPsE,EAAc,GAAE,iBAAAtE,OAAoBsE,IACtO5F,EAAUgF,EAAkBhF,QAE5B8F,EAAO9F,EAAQD,OACfgG,EAAmB,IAAIC,MAAoBF,GACjD,IAAIjG,EAAQiG,EACZ,KAAOjG,KAAU,GAAG,CAChB,MAAMuE,EAAapE,EAAQH,GACrBoG,EAAoB9G,KAAK4J,8BAA8B3E,GAG7D2B,EAAiBlG,IACbwE,EAAAA,EAAAA,KAAA,OAAwD6B,GAAE,GAAA5E,OAAK4D,EAAG,KAAA5D,OAAI8C,EAAW1C,kBAAiB,cAAcyE,UAAS,GAAA7E,OAAK4D,EAAG,cAAakB,UAC1I/B,EAAAA,EAAAA,KAAA,QAA8D8B,UAAU,iEAAgEC,UACpI/B,EAAAA,EAAAA,KAACiC,EAAAA,EAAa,CAA+CJ,GAAG,OAAOnE,KAAMqC,EAAW1D,UAAU6F,cAAeC,mBAAmB,QAAM,GAAAlF,OAAnH2E,EAAiB,uBAAoG,GAAA3E,OADlI2E,EAAiB,iCAExB,GAAA3E,OAHE2E,EAAiB,0BAKtC,CACA,OAAO5B,EAAAA,EAAAA,KAAA,OAAK8B,UAAS,OAAA7E,OAASuE,EAAU,wCAAuCO,SAAEL,GACrF,E,yGCtDW,SAASkD,EAAOvC,GAA8J,IAA9G,SAACN,EAAQ,OAAE8C,EAAQC,GAAIC,EAAQ,UAAEC,GAAyE3C,EAKrL,OAJA4C,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAWC,EAAAA,EAAyBjK,IAAIkK,IAAIJ,EAAW,IAAIK,EAAAA,EAAgBL,EAAWH,EAAQE,IACpG,MAAO,IAAMI,EAAAA,EAAyBjK,IAAIoK,OAAOJ,GAAWK,SAAS,IAE1D,OAARxD,QAAQ,IAARA,EAAAA,EAAY,IACvB,C,eCVe,SAASyD,EAAWnD,GAAmK,IAAnG,SAACN,EAAQ,UAAEiD,KAAcS,GAAsEpD,EAC9L,OAAOrC,EAAAA,EAAAA,KAAC4E,EAAO,CAACI,UAAWA,KAAeS,EAAe1D,UACrD/B,EAAAA,EAAAA,KAAC0F,EAAAA,EAAa,CAAiB7D,GAAImD,EAAWrJ,QAASoG,EAAU,iBAAe,WAA5DiD,IAE5B,C,0BCDAW,GAAA7L,EAAAA,EAAAA,GAAA,8BACe,MAAM8L,UACTC,EAAAA,UAUR1L,YAAY4J,GACRvJ,MAAMuJ,GARVtJ,OAAAC,eAAA,KAAAiL,EAAA,CAAAhL,UAAA,EAAAC,WAAA,KASIC,EAAAA,EAAAA,GAAAC,KAAI6K,GAAAA,GAA+BG,EAAAA,EAAiBpC,QAAQxI,IAAYJ,KAAK4C,MAC7E5C,KAAKiL,MAAQ,CACTC,SAAShG,EAAAA,EAAAA,KAAC0F,EAAAA,EAAa,CAAgC/J,SAAOd,EAAAA,EAAAA,GAAEC,KAAI6K,GAAAA,IAA6B,GAAA1I,OAAjEnC,KAAK+G,GAAE,iBAE/C,CAKWA,SACP,OAAO/G,KAAKiJ,MAAMlC,EACtB,CAEWoE,aACP,OAAOnL,KAAKiJ,MAAMkC,MACtB,CAEWC,4BACP,OAAOpL,KAAKiJ,MAAMmC,qBACtB,CAEWT,sBACP,OAAO3K,KAAKiJ,MAAM0B,eACtB,CAEW/H,WACP,OAAO5C,KAAK2K,gBAAgB/H,IAChC,CAEWyE,yBACP,OAAOrH,KAAK2K,gBAAgBtD,kBAChC,CAIgBgE,oBACZ,MAAMtE,EAAK/G,KAAK+G,GACVqE,EAAwBpL,KAAKoL,sBAEnCpL,KAAKsL,SAAS,CACVJ,SAAShG,EAAAA,EAAAA,KAACwF,EAAW,CAA8BR,UAAWnD,EAAIgD,OAAQwB,EAAavL,KAAKmL,OAAQnL,KAAKqH,oBAAoBmE,EAAAA,EAAAA,IAAmB,0BACtHxL,KAAK2K,gBAAiBX,GAAK,CAACyB,KAAMA,IAAML,GAAsB,GAAOM,KAAMA,IAAMN,GAAsB,IAAUnE,UAAAlH,EAAAA,EAAAA,GACtIC,KAAI6K,GAAAA,IAAA,GAAA1I,OAFqB4E,EAAE,qBAKxC,CAEgB4E,SACZ,OAAO3L,KAAKiL,MAAMC,OACtB,EAWJ,SAASK,EAAarB,EAAmB7C,EAAkDuE,GACvF,MAAM7B,EAAmC,CACrC6B,MAAOA,EACP/K,QAASgL,SAASC,eAAe5B,GACjC6B,MAAM,EACNC,QAAS,eAKb,OAH0B,MAAtB3E,IACA0C,EAAOkC,UAAY5E,GAEhB0C,CACX,CC1Fe,SAASmC,EAAiB3E,GAAgE,IAA/D,GAACR,EAAE,OAAEoE,EAAM,KAAEvI,EAAI,mBAAEuJ,GAAwC5E,EACjG,MAAM6E,EAAqBxJ,EAAKyJ,kBAAkBC,QAAOC,IAAOA,EAAGC,YAE7D3L,EAAU,GACV4L,EAAU7J,EAAK8J,YACrB,IAAK,MAAOC,EAAU7M,KAAW2M,EACxBL,EAAmBQ,SAASD,IAEjC9L,EAAQgM,MAAK3F,EAAAA,EAAAA,MAAA,OAAwEF,UAAU,2BAA0BC,SAAA,EACrH/B,EAAAA,EAAAA,KAAC0F,EAAAA,EAAa,CACV/J,QAAO,GAAAsB,QAAK2K,EAAAA,EAAAA,IAAoBH,EAAS3K,cAAYG,OAAG6I,EAAAA,EAAiBpC,QAAQmE,OAAK5K,OAAG6I,EAAAA,EAAiBpC,QAAQoE,YAAU7K,OAAG6I,EAAAA,EAAiBpC,QAAQmE,OACxJ/F,UAAU,6EACd9B,EAAAA,EAAAA,KAAC0F,EAAAA,EAAa,CAAC/J,QAASf,EAAOkH,UAAU,wCAAqC,GAAA7E,OAJxD4E,EAAE,kCAAA5E,OAAiCwK,EAAS3K,eAO1E,OAAOkD,EAAAA,EAAAA,KAAA,OAAoC6B,GAAIoE,EAAQnE,UAAU,gBAAgBiG,QAASd,EAAmBlF,SAAEpG,GAAO,GAAAsB,OAAlG4E,EAAE,qBAC1B,C,eCPe,SAASI,EAAaI,GAA6C,IAA5C,GAACR,KAAO4D,GAAgCpD,EAC1E,MAAO4E,EAAoBf,IAA0B8B,EAAAA,EAAAA,WAAS,IACxD,KAACtK,GAAS+H,EAEV3I,EAAcY,EAAKuK,QACnBjD,EAAS,GAAA/H,OAAM4E,EAAE,KAAA5E,OAAID,EAAAA,EAAgBM,UAAUR,IAC/CmJ,EAAM,GAAAhJ,OAAM+H,EAAS,SAE3B,OAAOhD,EAAAA,EAAAA,MAAA,OAAgDH,GAAE,GAAA5E,OAAK+H,EAAS,cAAclD,UAAU,iBAAgBC,SAAA,EAC3G/B,EAAAA,EAAAA,KAAC4F,EAAoB,CAA0C/D,GAAImD,EAAWiB,OAAQA,EAAQC,sBAAuBA,EAAuBT,gBAAiBA,GAAgB,GAAAxI,OAA/IH,EAAW,gBAAAG,OAAe4E,EAAE,OAC1D7B,EAAAA,EAAAA,KAACgH,EAAiB,CAAuCtJ,KAAMA,EAAMmE,GAAImD,EAAWiB,OAAQA,EAAQgB,mBAAoBA,GAAmB,GAAAhK,OAAhHH,EAAW,aAAAG,OAAY4E,EAAE,QAAyF,GAAA5E,OAF7HH,EAAW,kBAAAG,OAAiB4E,EAAE,KAItD,C","sources":["core/medal/Medal.container.ts","core/medal/Medal.loader.ts","core/medal/Medals.ts","core/medal/file/fileCreator.ts","app/MedalApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Entity}                                                                             from 'core/entity/Entity'\nimport type {CharacterName}                                                                      from 'core/characterName/CharacterName'\n\nimport {ClassContainingAName} from 'lang/name/ClassContainingAName'\n\nexport class MedalContainer\n    extends ClassContainingAName<string>\n    implements Medal {\n\n    //region -------------------- Fields --------------------\n\n    readonly #imageName\n    readonly #maximumAmountAllowedToUploadALevel\n    readonly #amountOfStarReceivedToUnlockIt\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(associatedReference: | Entity | CharacterName,\n                       imageName: PossibleEnglishName,\n                       maximumAmountAllowedToUploadALevel: PossibleMaximumAmountAllowedToUploadALevel,\n                       amountOfStarReceivedToUnlockIt: PossibleAmountOfStarReceivedToUnlockIt,) {\n        super(associatedReference,)\n        this.#imageName = imageName\n        this.#maximumAmountAllowedToUploadALevel = maximumAmountAllowedToUploadALevel\n        this.#amountOfStarReceivedToUnlockIt = amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get imageName(): PossibleEnglishName {\n        return this.#imageName\n    }\n\n    public get maximumAmountAllowedToUploadALevel(): PossibleMaximumAmountAllowedToUploadALevel {\n        return this.#maximumAmountAllowedToUploadALevel\n    }\n\n    public get amountOfStarReceivedToUnlockIt(): PossibleAmountOfStarReceivedToUnlockIt {\n        return this.#amountOfStarReceivedToUnlockIt\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import file from 'resources/compiled/Medals (SMM).json'\n\nimport type {PossibleAmountOfStarReceivedToUnlockIt, PossibleMaximumAmountAllowedToUploadALevel} from 'core/medal/loader.types'\nimport type {Medal}                                                                              from 'core/medal/Medal'\nimport type {PossibleEnglishName}                                                                from 'core/medal/Medals.types'\nimport type {Loader}                                                                             from 'util/loader/Loader'\n\nimport {isInProduction} from 'variables'\nimport {MedalContainer} from 'core/medal/Medal.container'\nimport {Medals}         from 'core/medal/Medals'\n\n/**\n * @dependsOn<{@link Medals}>\n * @indirectlyDependsOn<{@link CharacterNameLoader}>\n * @indirectlyDependsOn<{@link CharacterNames}>\n * @indirectlyDependsOn<{@link Entities}>\n * @indirectlyDependsOn<{@link EntityLoader}>\n * @recursiveReference<{@link Medals}>\n * @singleton\n */\nexport class MedalLoader\n    implements Loader<ReadonlyMap<PossibleEnglishName, Medal>> {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: MedalLoader\n\n    private constructor() {}\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    #map?: Map<PossibleEnglishName, Medal>\n\n    public load(): ReadonlyMap<PossibleEnglishName, Medal> {\n        if (this.#map != null)\n            return this.#map\n\n        const references = new Map<PossibleEnglishName, Medal>()\n        let index = file.length\n        while (index-- > 0) {\n            const content = file[index] as Content\n            references.set(content.image, createReference(content,),)\n        }\n\n        if (!isInProduction)\n            console.info(\n                '-------------------- \"medal\" has been loaded --------------------\\n',\n                references,\n                '\\n-------------------- \"medal\" has been loaded --------------------',\n            )\n\n        return this.#map = references\n\n    }\n\n}\n\ninterface Content {\n\n    amountOfAllowedLevelToUpload: PossibleMaximumAmountAllowedToUploadALevel\n    amountOfStarReceived: PossibleAmountOfStarReceivedToUnlockIt\n    image: PossibleEnglishName\n\n}\n\nfunction createReference(content: Content,): Medal {\n    const imageName = content.image\n\n    return new MedalContainer(\n        Medals.CompanionEnum.get.getValueByName(imageName,).associatedReference.reference,\n        imageName,\n        content.amountOfAllowedLevelToUpload,\n        content.amountOfStarReceived,\n    )\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                                         from 'core/ClassWithEnglishName'\nimport type {Medal}                                                                        from 'core/medal/Medal'\nimport type {Names, Ordinals, PossibleEnglishName, PossibleImageName, PossibleImageNumber} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                                                               from 'core/medal/file/MedalImageFile'\nimport type {CompanionEnumByNameSingleton}                                                 from 'util/enumerable/Singleton.types'\nimport type {ClassWithImageFile}                                                           from 'util/file/image/ClassWithImageFile'\n\nimport {MedalLoader}                    from 'core/medal/Medal.loader'\nimport * as FileCreator                 from 'core/medal/file/fileCreator'\nimport {StringContainer}                from 'util/StringContainer'\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\nimport {Entities}                       from 'core/entity/Entities'\nimport {CharacterNames}                 from 'core/characterName/CharacterNames'\n\n/**\n * @todo Change the \"associated reference\" used from the \"Green Koopa Troopa\" to \"Koopa Troopa\"\n * @recursiveReference<{@link MedalLoader}>\n */\nexport class Medals\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<PossibleEnglishName>,\n        ClassWithImageFile<MedalImageFile> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly GOOMBA =         new Medals('Goomba', 0, Entities.GOOMBA,)\n    public static readonly KOOPA_TROOPA =   new Medals('Koopa Troopa', 1, Entities.GREEN_KOOPA_TROOPA,)\n    public static readonly PIRANHA_PLANT =  new Medals('Piranha Plant', 2, Entities.PIRANHA_PLANT,)\n    public static readonly SPINY =          new Medals('Spiny', 3, Entities.SPINY,)\n    public static readonly CHEEP_CHEEP =    new Medals('Cheep Cheep', 4, Entities.CHEEP_CHEEP,)\n    public static readonly BLOOPER =        new Medals('Blooper', 5, Entities.BLOOPER,)\n    public static readonly LAKITU =         new Medals('Lakitu', 6, Entities.LAKITU,)\n    public static readonly BOWSER =         new Medals('Bowser', 7, Entities.BOWSER,)\n    public static readonly TOAD =           new Medals('Toad', 8, CharacterNames.TOAD, )\n    public static readonly PRINCESS_PEACH = new Medals('Princess Peach', 9, CharacterNames.PRINCESS_PEACH,)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static CompanionEnum: CompanionEnumByNameSingleton<Medals, typeof Medals> = class CompanionEnum_Medals\n        extends CompanionEnumByEnglishNameOnly<Medals, typeof Medals> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Medals\n\n        private constructor() {\n            super(Medals,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Medals()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    static #REFERENCE_MAP?: ReadonlyMap<PossibleEnglishName, Medal>\n\n    #reference?: Medal\n    readonly #associatedReference: | Entities | CharacterNames\n\n    readonly #englishName\n    readonly #imageName: PossibleImageName\n    #imageFile?: MedalImageFile\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: PossibleEnglishName, imageNumber: PossibleImageNumber, associatedReference: | Entities | CharacterNames,) {\n        super()\n        this.#englishName = new StringContainer(englishName,)\n        this.#imageName = `Honor_Medal_0${imageNumber}^l.bflim`\n        this.#associatedReference = associatedReference\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE_MAP(): ReadonlyMap<PossibleEnglishName, Medal> {\n        return this.#REFERENCE_MAP ??= MedalLoader.get.load()\n    }\n\n    /**\n     * {@inheritDoc}\n     * @semiAsynchronously\n     */\n    public get reference(): Medal {\n        return this.#reference ??= Medals.REFERENCE_MAP.get(this.englishName,)!\n    }\n\n    public get associatedReference(): | Entities | CharacterNames {\n        return this.#associatedReference\n    }\n\n\n    public get englishName(): PossibleEnglishName {\n        return this.#englishName.get\n    }\n\n    public get englishNameInHtml(): string {\n        return this.#englishName.getInHtml\n    }\n\n    public get imageFile(): MedalImageFile {\n        return this.#imageFile ??= FileCreator.medalImage(this.#imageName, this.englishName,)\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {PossibleEnglishName, PossibleImageName} from 'core/medal/Medals.types'\nimport type {MedalImageFile}                         from 'core/medal/file/MedalImageFile'\n\nimport {SimpleImageFile} from 'util/file/image/SimpleImageFile'\n\n/**\n * Create a simple {@link MedalImageFile} from a {@link name} prpvided\n *\n * @param name The file name\n * @param commonName The fallback name\n */\nexport function medalImage(name: PossibleImageName, commonName: PossibleEnglishName,): MedalImageFile {\n    return new SimpleImageFile('medal', name, 'tiff', commonName,)\n}\n","import type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {Medals}                 from 'core/medal/Medals'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport Image                    from 'app/tools/images/Image'\n\nexport default class MedalApp\n    extends AbstractCardListApp<Medals, AppInterpreterWithCardList<Medals>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'medal'\n    }\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyMedal (list)'\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return 'everyMedal (card)'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('medal.all',)\n    }\n\n    protected override _createAppOptionInterpreter() {\n        return new class MedalAppInterpreter implements AppInterpreterWithCardList<Medals> {\n\n            public get content() {\n                return Medals.CompanionEnum.get.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 2,\n                    small: 4,\n                    medium: 5,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension() {\n                return this.createListDimension()\n            }\n\n            public createCardListContent(enumerable: Medals,): ReactElement {\n                return <Image file={enumerable.imageFile}/>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<const out CONTENT extends Content,\n    const out APP extends AppInterpreterWithCardList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<CONTENT, APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createCardListDimension()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["_imageName","_classPrivateFieldLooseKey","_maximumAmountAllowedToUploadALevel","_amountOfStarReceivedToUnlockIt","MedalContainer","ClassContainingAName","constructor","associatedReference","imageName","maximumAmountAllowedToUploadALevel","amountOfStarReceivedToUnlockIt","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","_instance","_map","MedalLoader","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","load","references","Map","index","file","length","content","set","image","createReference","isInProduction","console","info","Medals","CompanionEnum","getValueByName","reference","amountOfAllowedLevelToUpload","amountOfStarReceived","_REFERENCE_MAP","_reference","_associatedReference","_englishName","_imageFile","Enum","englishName","imageNumber","StringContainer","concat","REFERENCE_MAP","_classPrivateFieldLoo3","_classPrivateFieldLoo4","englishNameInHtml","getInHtml","imageFile","_classPrivateFieldLoo5","_classPrivateFieldLoo6","name","commonName","SimpleImageFile","GOOMBA","Entities","KOOPA_TROOPA","GREEN_KOOPA_TROOPA","PIRANHA_PLANT","SPINY","CHEEP_CHEEP","BLOOPER","LAKITU","BOWSER","TOAD","CharacterNames","PRINCESS_PEACH","_class","CompanionEnum_Medals","CompanionEnumByEnglishNameOnly","_classPrivateFieldLoo7","_classPrivateFieldLoo8","MedalApp","AbstractCardListApp","_createKey","_createSimpleListRouteName","_createCardListRouteName","_createTitleContent","gameContentTranslation","_createAppOptionInterpreter","values","toArray","createListDimension","default","small","medium","createCardListDimension","createCardListContent","enumerable","_jsx","Image","_routeName","AbstractSimpleListApp","arguments","_createPossibleViewDisplay","ViewDisplays","CARD_LIST","__cardRouteName","_createUniqueNameOnCardList","createCardList","optionInterpreter","_appOptionInterpreter","key","_key","df","sm","md","large","lg","extraLarge","xl","extraExtraLarge","xxl","dimensions","size","contentToDisplay","Array","uniqueEnglishName","id","className","children","_jsxs","NameComponent","nameContainer","popoverOrientation","DisplayButtonGroup","_ref","reactKey","views","currentView","map","_ref2","view","DisplayButton","routeName","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","_possibleViewDisplay","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","props","viewDisplay","__possibleViewDisplay","_createAsideContent","_createDescription","UnfinishedText","isHidden","_mainContent","createComponent","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","createList","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english"],"sourceRoot":""}