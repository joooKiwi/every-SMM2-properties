{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/options/component/AppOptionWithContent.component.ts","app/options/component/AppOptionWithTable.component.ts","app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/withInterpreter/AbstractTableApp.tsx","app/options/component/AbstractAppOptionWithSomething.ts"],"names":["AbstractCardListApp","optionInterpreter","this","_appOptionInterpreter","key","_key","content","iterable","enumerable","englishName","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","AppOptionWithContentComponent","callbackToRender","value","_callbackToRender","Array","AbstractAppOptionWithSomething","AppOptionWithTableComponent","Symbol","iterator","HeaderTypes","placement","values","find","simpleName","Enum","getValueOn","getValuesOn","HEAD","layout","FOOT","reverse","HeaderHolderContainer","tableIdentifier","header","callbackToRenderHead","callbackToRenderFoot","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","EMPTY_REACT_ELEMENT","map","has","get","maximumSubLevel","previousHeader","set","instance","Map","TableContent","innerContent","index","filter","TableHeaders","props","type","headers","everyHeadersHolder","headerAsTh","createSingleHeaderContent","everyHeaderHolders","forEach","headerHolder","resetRendered","getLayout","layoutAsTr","layoutAsTh","render","EMPTY_ARRAY","element","Image","source","path","fallbackName","alt","tooltip","AnyTranslationComponent","namespace","translation","Tooltip","option","title","translationKey","replace","elementId","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","isHeaderNull","DelayedObjectHolderContainer","layoutHolder","tableColor","headersColor","array","getSubHeaders","everyHeaders","subHeader","headerContainer","j","i","AbstractTableApp","tableProperties","tableOptions","tableHeader","createTableHeader","callbackToGetEnumerable","createTableContent","flat","TABLE"],"mappings":"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","file":"static/js/1.1c586f15.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp';\nimport NameComponent           from '../../lang/name/component/Name.component';\nimport {ViewDisplays}          from './ViewDisplays';\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const englishName = enumerable.englishName;\n            const name = enumerable.reference.nameContainer;\n            const id = `${key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${englishName} - main card list container`} id={id}\n                     className={`${key}-container listElement-container col-12 col-sm-4 col-md-3 col-lg-2`}>\n                    <div key={`${name} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${englishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppOptionWithContent, PossibleRenderReactElement} from './AppOptionWithContent';\nimport type {ReactElement}                                     from '../../../util/react/ReactProperty';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithContentComponent\n    extends AbstractAppOptionWithSomething<PossibleRenderReactElement>\n    implements AppOptionWithContent {\n\n    public constructor(callbackToRender: () => PossibleRenderReactElement,) {\n        super(callbackToRender,);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        const value = this._callbackToRender();\n        return value instanceof Array ? value : [value];\n    }\n\n}\n","import type {AppOptionWithTable}  from './AppOptionWithTable';\nimport type {SingleHeaderContent} from '../../tools/table/SimpleHeader';\n\nimport {AbstractAppOptionWithSomething} from './AbstractAppOptionWithSomething';\n\nexport class AppOptionWithTableComponent\n    extends AbstractAppOptionWithSomething<SingleHeaderContent>\n    implements AppOptionWithTable {\n\n    public constructor(callbackToRender: () => SingleHeaderContent,) {\n        super(callbackToRender,);\n    }\n\n    public get renderTableHeader(): SingleHeaderContent {\n        return this._callbackToRender();\n    }\n\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleNonNullableValue, PossiblePlacement, PossibleStringValue, PossibleValue} from './HeaderTypes.types';\nimport type {StaticReference}                                                                                                                                                                                        from '../../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../../util/enum/Enum';\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return layout;\n        }\n\n    }('head', 'top',);\n    public static readonly FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return [...layout].reverse();\n        }\n\n    }('foot', 'bottom',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: HeaderTypes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name;\n    readonly #placement;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super();\n        this.#name = name;\n        this.#placement = placement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<HeaderTypes> {\n        return HeaderTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrAcronym: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(nameOrAcronym: S,): EnumByString<S>\n    public static getValue<I extends HeaderTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): HeaderTypes\n    public static getValue(value: PossibleValue,): | HeaderTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder';\nimport type {SingleHeaderContent} from '../SimpleHeader';\nimport type {ReactElement}        from '../../../../util/react/ReactProperty';\n\nimport {assert}              from '../../../../util/utilitiesMethods';\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>();\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>();\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #tableIdentifier: string;\n    readonly #header;\n    #parent: | HeaderHolder | null;\n    #subHeaders?: readonly HeaderHolder[];\n    #subLevel?: number;\n    #width?: number;\n    #height?: number;\n    #wasRendered;\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement;\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier;\n        this.#parent = null;\n        this.#header = header;\n        this.#wasRendered = false;\n        this.#callbackToRenderHead = callbackToRenderHead;\n        this.#callbackToRenderFoot = callbackToRenderFoot;\n\n        HeaderHolderContainer.#addInstance(this);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    static #addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES;\n        const tableIdentifier = instance.#tableIdentifier;\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!;\n\n        array.push(instance);\n    }\n\n    static #getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!;\n    }\n\n    static #getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP;\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!;\n\n        let maximumSubLevel = this.#getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel;\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!;\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header;\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): | HeaderHolder | null {\n        return this.#parent;\n    }\n\n    public set parent(value: | HeaderHolder | null,) {\n        this.setParent(value);\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: | HeaderHolder | null,): | this | never\n    public setParent(value: | HeaderHolder | null,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',);\n        this.#parent = value;\n        return this;\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY;\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value);\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value;\n        return this;\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0;\n            let parent: this['parent'] = this.parent;\n            while (parent != null) {\n                currentSubLevel++;\n                parent = parent.parent;\n            }\n            this.#subLevel = currentSubLevel;\n        }\n        return this.#subLevel;\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1;\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.#getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel;\n            this.#height = currentHeight;\n        }\n        return this.#height;\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,);\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1;\n        }\n        return this.#width;\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered;\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value;\n        return this;\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false);\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot();\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderHead(this);\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderFoot(this);\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types';\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map(content => {\n        const key = content[0];\n        return <tr key={`${key} (header)`}>\n            {content.map((innerContent, index) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${key}-${index}`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>;\n    })}</>;\n}\n","import {PureComponent} from 'react';\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types';\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader';\n\nimport AnyTranslationComponent from '../../../lang/components/AnyTranslationComponent';\nimport {EMPTY_ARRAY}           from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}   from '../../../util/emptyReactVariables';\nimport {HeaderTypes}           from './header/HeaderTypes';\nimport Image                   from '../images/Image';\nimport Tooltip                 from '../../../bootstrap/tooltip/Tooltip';\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders;\n    #layout?: Layout;\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get type(): HeaderTypes {\n        return this.props.type;\n    }\n\n    public get headers(): SingleHeadersContent {\n        return this.props.headers;\n    }\n\n    public get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder();\n    }\n\n    public get layout(): Layout {\n        return this.#layout ??= this.props.layout();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key;\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY;\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>;\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT;\n\n        const tooltip = header.tooltip;\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT;\n\n        return <AnyTranslationComponent namespace={tooltip.namespace}>{translation =>\n            <Tooltip option={({title: translation(tooltip.translationKey, tooltip.replace,) as string, placement: type.placement,})}\n                     elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>}</AnyTranslationComponent>;\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header);\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>;\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers;\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length;\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>;\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders;\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered());\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>;\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react';\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types';\nimport type {HeaderHolder}               from './header/HeaderHolder';\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types';\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder';\nimport type {ReactComponent}             from '../../../util/react/ReactComponent';\nimport type {ReactElement}               from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent}        from './SimpleHeader';\nimport type {TableProperties}            from './Table.types';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables';\nimport {HeaderTypes}                  from './header/HeaderTypes';\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container';\nimport TableContent                   from './TableContent';\nimport TableHeaders                   from './TableHeaders';\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary';\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info';\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id() {\n        return this.props.id;\n    }\n\n    public get caption() {\n        return this.props.caption;\n    }\n\n    public get headers() {\n        return this.props.headers;\n    }\n\n    public get content() {\n        return this.props.content;\n    }\n\n    public get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR;\n    }\n\n    public get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR;\n    }\n\n\n    #getEveryHeaders(): EveryHeaders\n    #getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    #getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][];\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header);\n            array.push([TableHeaders.getHeaderKey(header), header,]);\n            if (subHeaders.length !== 0)\n                array.push(...this.#getEveryHeaders(subHeaders,));\n        }\n        return array;\n    }\n\n    #getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]));\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))));\n\n        return everyHeaderHolders;\n    }\n\n    #getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = [];\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel;\n            const height = headerContainer.height;\n            const width = headerContainer.width;\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key);\n        });\n        return layout;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption;\n        const headers = this.headers;\n        const isHeaderNull = headers == null;\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.#getEveryHeaderHolders(this.#getEveryHeaders()));\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.#getLayout(everyHeadersHolder.get));\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>;\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][];\n","import type {AppInterpreterWithTable}      from '../interpreter/AppInterpreterWithTable';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}          from '../tools/table/SimpleHeader';\nimport type {SingleTableContent}           from '../tools/table/Table.types';\n\nimport {AbstractCardListApp} from './AbstractCardListApp';\nimport Table                 from '../tools/table/Table';\nimport {ViewDisplays}        from './ViewDisplays';\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST, ViewDisplays.TABLE,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractTableApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[];\n        let index = 1;\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable;\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    optionInterpreter.tableOptions.map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        return <Table key={`${key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${key}-table`}\n                      content={this.#tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: <>#</>,},\n                          ...(optionInterpreter.tableOptions\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader))\n                              .filter(header => header != null) as SingleHeaderContent[])\n                      ]}/>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","export abstract class AbstractAppOptionWithSomething<T, > {\n\n    //region -------------------- Fields --------------------\n\n    readonly #callbackToRender;\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(callbackToRender: () => T,) {\n        this.#callbackToRender = callbackToRender;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected get _callbackToRender() {\n        return this.#callbackToRender;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n"],"sourceRoot":""}