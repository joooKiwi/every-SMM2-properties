{"version":3,"file":"static/js/669.c072d929.chunk.js","mappings":"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","sources":["app/CharacterNameApp.tsx","app/withInterpreter/AbstractCardListApp.tsx","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {AbstractCardListApp}     from 'app/withInterpreter/AbstractCardListApp'\nimport {CharacterNames}          from 'core/characterName/CharacterNames'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport default class CharacterNameApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CharacterNames>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'characterName'\n    }\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyCharacterName (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyCharacterName (card)'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('character name.all',)\n    }\n\n    protected override _createUniqueNameOnSimpleList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createUniqueNameOnCardList(enumerable: CharacterNames,): string {\n        return enumerable.uniqueEnglishName\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<CharacterNames> {\n        return new class implements AppInterpreterWithCardList<CharacterNames> {\n\n            public get iterable() {\n                return CharacterNames[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({uniqueEnglishName: name, editorVoiceSoundFileHolder,}: CharacterNames,) {\n                return <div className=\"card-body\">\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n\n}","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {CARD_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["CharacterNameApp","_AbstractCardListApp","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","gameContentTranslation","enumerable","uniqueEnglishName","_class","get","CharacterNames","Symbol","iterator","_ref","name","editorVoiceSoundFileHolder","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","AbstractCardListApp","CARD_LIST","ViewDisplays","_routeName","_classPrivateFieldLooseKey","_AbstractSimpleListAp","_this","_len","length","args","Array","_key","call","concat","Object","defineProperty","_assertThisInitialized","writable","_toConsumableArray","_get","_getPrototypeOf","prototype","this","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createCardListRouteName","englishName","_step","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","_iterator","_createForOfIteratorHelper","iterable","s","n","done","_createUniqueNameOnCardList","reference","nameContainer","id","englishNameInHtml","push","_jsxs","NameComponent","popoverOrientation","createCardListContent","err","e","f","_Fragment","AbstractSimpleListApp","regularFile","regularSoundFile","europeanFile","europeanSoundFile","SimpleSoundComponent","file","title"],"sourceRoot":""}