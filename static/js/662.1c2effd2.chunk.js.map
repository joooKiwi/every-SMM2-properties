{"version":3,"file":"static/js/662.1c2effd2.chunk.js","mappings":"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","sources":["app/EntityCategoryApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './EntityCategoryApp.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport SubMainContainer         from 'app/_SubMainContainer'\nimport Image                    from 'app/tools/images/Image'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport CardList                 from 'app/withInterpreter/CardList'\nimport SimpleList               from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {EntityCategories}       from 'core/entityCategory/EntityCategories'\nimport {OtherWordInTheGames}    from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport {assert}                 from 'util/utilitiesMethods'\n\nclass EntityCategoryAppInterpreter\n    implements AppInterpreterWithCardList<EntityCategories> {\n\n    public get content() {\n        return EntityCategories.CompanionEnum.get.values.toArray()\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            large: 4,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: EntityCategories,) {\n        return <Image file={enumerable.imageFile}/>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEntityCategory (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEntityCategory (card)',],\n] as const satisfies readonly ViewAndRouteName[]\nconst titleContent = (() => {\n    const singularEntityName = OtherWordInTheGames.ENTITY.singularNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName,)\n    const singularEntityLowerCaseName = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? singularEntityName.toLowerCase()\n    return gameContentTranslation('entity category.all', {Entity: singularEntityName, entity: singularEntityLowerCaseName,},)\n})()\nconst appInterpreter = new EntityCategoryAppInterpreter()\n\n/** @reactComponent */\nexport default function EntityCategoryApp({viewDisplay,}: AppWithInterpreterProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The EntityCategoryApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"entityCategory\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <SimpleList reactKey=\"entityCategory\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"entityCategory\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <CardList reactKey=\"entityCategory\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <p className=\"description-container\">{description}</p>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","titleContent","_OtherWordInTheGames$","_OtherWordInTheGames$2","singularEntityName","OtherWordInTheGames","ENTITY","singularNameOnReferenceOrNull","unfinishedText","singularEnglishName","singularEntityLowerCaseName","singularLowerCaseNameOnReferenceOrNull","toLowerCase","gameContentTranslation","Entity","entity","appInterpreter","content","EntityCategories","CompanionEnum","get","values","toArray","createListDimension","default","small","large","createCardListDimension","this","createCardListContent","enumerable","_jsx","Image","file","imageFile","EntityCategoryApp","_ref","viewDisplay","assert","TABLE","SubMainContainer","reactKey","children","SimpleList","interpreter","CardList","DisplayButtonGroup","key","views","currentView","id","className","map","_ref2","view","name","DisplayButton","routeName","concat","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","asideContent","description","_jsxs","UnfinishedText","isHidden","_keyRetriever","keyRetriever","englishName","dimensions","df","sm","md","medium","lg","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","index","uniqueKey","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","_classPrivateFieldLooseKey","NamePopoverComponent","Component","constructor","props","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}