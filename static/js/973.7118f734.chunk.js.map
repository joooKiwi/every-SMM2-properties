{"version":3,"file":"static/js/973.7118f734.chunk.js","mappings":"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","sources":["util/sound/player/AbstractSoundPlayer.ts","util/sound/player/SoundStates.ts","util/sound/history/HistoryState.ts","util/sound/history/SoundStateHistory.ts","util/sound/player/SimpleSoundPlayer.ts","util/sound/player/SoundPlayer.factory.ts","util/sound/holder/SoundSubElementsHolder.ts","util/sound/player/Validators.ts","util/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {ExtendedMap} from '../../extended/ExtendedMap'\nimport type {SoundPlayer} from './SoundPlayer'\n\nimport {ExtendedMapContainer} from '../../extended/ExtendedMap.container'\nimport {isInProduction}       from '../../../variables'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #MAP?: ExtendedMap<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            (AbstractSoundPlayer.map)\n                .if(map => map.includes(key))\n                .isMet(() => {\n                    throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n                })\n                .set(key, this)\n        }\n    }\n\n    public static get map(): ExtendedMap<string, SoundPlayer> {\n        return this.#MAP ??= new ExtendedMapContainer()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {EnglishName, Names, Ordinals} from './SoundStates.types'\nimport type {ClassWithEnglishName}         from '../../../core/ClassWithEnglishName'\nimport type {Nullable}                     from '../../types'\nimport type {ReactElement}                 from '../../react/ReactProperties'\nimport type {SoundSubElementsHolder}       from '../holder/SoundSubElementsHolder'\n\nimport {getValueByEnglishName} from '../../utilitiesMethods'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n\n    // public static getValueByName<T, >(value: T,): SoundStatesByName<T>\n    public static getValueByName(value: Nullable<| SoundStates | string>,): SoundStates {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): EnumerableConstructor<Ordinals, Names> {\n        return SoundStates\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<SoundStates>,): SoundStates {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<SoundStates> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {SoundStates} from '../player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","import type {Nullable} from '../../types'\n\nimport {SoundStates}  from '../player/SoundStates'\nimport {HistoryState} from './HistoryState'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false,)\n        this.#history = [this.current,]\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {OnAfterPauseSoundPlayerCallback, OnAfterPlayingSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback} from './types'\nimport type {Nullable, NullOr}                                                                                                                                                                                                                                                                                                                                  from '../../types'\nimport type {SoundFile}                                                                                                                                                                                                                                                                                                                                         from '../SoundFile'\n\nimport {AbstractSoundPlayer} from './AbstractSoundPlayer'\nimport {SoundStateHistory}   from '../history/SoundStateHistory'\nimport {SoundStates}         from './SoundStates'\nimport {HistoryState}        from '../history/HistoryState'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onPlaying?: NullOr<OnAfterPlayingSoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onEnd?: NullOr<OnEndSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false,),)\n                this.onPlaying?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false,),)\n                this.onEnd?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onPlaying(): NullOr<OnAfterPlayingSoundPlayerCallback<this>> {\n        return this.#onPlaying ?? null\n    }\n\n    public set onPlaying(value: Nullable<OnAfterPlayingSoundPlayerCallback<this>>,) {\n        this.#onPlaying = value ?? null\n    }\n\n    public setOnPlaying(value: Nullable<OnAfterPlayingSoundPlayerCallback<this>>,) {\n        this.onPlaying = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onEnd(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEnd ?? null\n    }\n\n    public set onEnd(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEnd = value ?? null\n    }\n\n    public setOnEnd(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEnd = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false,),))\n        this.setState(new HistoryState(PLAYING, true,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {Nullable}  from '../../types'\nimport type {SoundFile} from '../SoundFile'\n\nimport {AbstractSoundPlayer} from './AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from './SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import type {ReactElement} from '../../react/ReactProperties'\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {CollectionHolder, EnumerableConstructorWithDefault, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                               from '@joookiwi/enumerable'\n\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from './Validators.types'\nimport type {ClassWithEnglishName}                                from '../../../core/ClassWithEnglishName'\nimport type {Nullable, NullOrBoolean}                             from '../../types'\n\nimport {getValueByEnglishName} from '../../utilitiesMethods'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Validators\n    protected static readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n\n    // public static getValueByName<T, >(value: T,): ValidatorsByName<T>\n    public static getValueByName(value: Nullable<| Validators | string>,): Validators {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructorWithDefault<Ordinals, Names> {\n        return Validators\n    }\n\n    public static get default(): Validators {\n        return Enum.getDefaultOn(this,)\n    }\n\n    public static set default(value: PossibleValueByEnumerable<Validators>,) {\n        this.setDefault(value,)\n    }\n\n    public static setDefault(value: PossibleValueByEnumerable<Validators>,): typeof Validators {\n        return Enum.setDefaultOn(this, value,)\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<Validators>,): Validators {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<Validators> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import './SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {IsSourceFoundCallback} from '../player/Validators.types'\nimport type {ReactComponent}        from '../../react/ReactComponent'\nimport type {ReactElement}          from '../../react/ReactProperties'\nimport type {SimpleSoundState}      from './state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from '../player/SimpleSoundPlayer'\nimport type {SimpleSoundProperties} from './property/SimpleSoundProperties'\nimport type {SoundFile}             from '../SoundFile'\n\nimport {AbstractSoundPlayer}    from '../player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from '../player/SoundPlayer.factory'\nimport {SoundStates}            from '../player/SoundStates'\nimport {SoundSubElementsHolder} from '../holder/SoundSubElementsHolder'\nimport {Validators}             from '../player/Validators'\nimport {HistoryState}           from '../history/HistoryState'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.default\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false,),)\n        AbstractSoundPlayer.map.remove(audio.source.key)\n    }\n\n    public override render(): ReactElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["AbstractSoundPlayer","key","isInProduction","map","if","includes","isMet","ReferenceError","set","this","ExtendedMapContainer","DEFAULT_DOES_LOOP","Symbol","iterator","SoundStates","englishName","value","getValueByEnglishName","Enum","values","STANDBY","playElement","PAUSED","stopElement","PLAYING","pauseElement","LOADING","loadingElement","EXCEPTION","exceptionElement","HistoryState","state","isLoading","other","SoundStateHistory","currentState","current","setLast","_history","push","TypeError","last","SimpleSoundPlayer","source","title","doesLoop","setState","audio","Audio","fullName","onplaying","event","history","stop","pause","onPlaying","onended","onEnd","loop","paused","isAudioExistant","Number","isFinite","duration","onBeforePlay","onAfterPlay","onBeforePause","onAfterPause","onBeforeStop","onAfterStop","onBeforeStateChanged","onAfterStateChanged","play","then","isDurationValid","catch","isPaused","isStandby","currentTime","equals","SoundPlayerFactory","SoundSubElementsHolder","Validators","callback","setDefault","ALL_YES","ALL_NO","ON_PLAY_ONLY","ON_CREATE_ONLY","_DEFAULT","SimpleSoundComponent","props","isSourceRetrieved","_audio","file","validator","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","remove","elementsHolder","className","onClick","role","componentState","getElementsFrom","Component"],"sourceRoot":""}