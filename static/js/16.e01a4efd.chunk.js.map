{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/EveryCourseTagsApp.tsx"],"names":["AbstractCardListApp","optionInterpreter","this","_appOptionInterpreter","key","_key","content","iterable","enumerable","englishName","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","EveryCourseTagsApp","props","state","typeDisplayed","translation","TranslationUtility","replaceAndInterpretTranslation","course","tags","CourseTags","Symbol","iterator","courseTag","firstAppearance","EMPTY_REACT_ELEMENT","simpleName"],"mappings":"+RAQsBA,EAAtB,gLAWI,WACI,OAAO,YAAAA,EAAP,QAZR,4BAsBI,WACI,IADkC,EAC5BC,EAAoBC,KAAKC,sBACzBC,EAAMF,KAAKG,KAEXC,EAAU,GAJkB,cAKTL,EAAkBM,UALT,IAKlC,2BAAqD,CAAC,IAA3CC,EAA0C,QAC3CC,EAAcD,EAAWC,YACzBC,EAAOF,EAAWG,UAAUC,cAC5BC,EAAE,UAAMT,EAAN,YAAaI,EAAWM,kBAAxB,cAGRR,EAAQS,KACJ,qBAAuDF,GAAIA,EACtDG,UAAS,UAAKZ,EAAL,sEADd,SAEI,sBAAoDY,UAAU,yCAA9D,UACI,cAAC,UAAD,CAAuDH,GAAG,OAAOH,KAAMA,EAAMO,mBAAmB,QAAhG,UAAuBR,EAAvB,sBACA,qBAAKO,UAAU,iCAAf,SAAiDf,EAAkBiB,sBAAsBV,OAF7F,UAAaE,EAAb,qCAFJ,UAAaD,EAAb,kCAZ0B,8BAqBlC,OAAO,mCAAGH,QA3ClB,GAEYa,K,sBAFUnB,E,qBAMwC,CAACoB,IAAaC,YAAaD,IAAaE,c,iNCAjFC,E,kDAGjB,WAAmBC,GAAa,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,CAACC,cAAeN,IAAaE,WAFf,E,8CAO/B,WACI,MAAO,c,iCAGX,WACI,OAAO,cAAC,IAAD,UAAkC,SAAAK,GAAW,OAAI,mCAAGC,IAAmBC,+BAC1EF,EACA,oBAAqB,CACjBG,OAAQ,cAAC,WAAD,wBAAc,uCACtBC,KAAM,cAAC,WAAD,sBAAc,oD,yCAMhC,WACI,OAAO,0FAEH,WACI,OAAOC,aAAWC,OAAOC,cAH1B,mCAQH,YAAqG,IAA5DC,EAA2D,EAAtExB,UAAmCD,EAAmC,EAAhDD,YAChD,OAAoC,MAA7B0B,EAAUC,gBACXC,IACA,8BAAyCF,EAAUC,gBAAgBE,YAAnE,UAAa5B,EAAb,4BAXP,U,GAzBHV","file":"static/js/16.e01a4efd.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp';\nimport NameComponent           from '../../lang/name/component/Name.component';\nimport {ViewDisplays}          from './ViewDisplays';\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,];\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        const key = this._key;\n\n        const content = [] as ReactElement[];\n        for (const enumerable of optionInterpreter.iterable) {\n            const englishName = enumerable.englishName;\n            const name = enumerable.reference.nameContainer;\n            const id = `${key}-${enumerable.englishNameInHtml}-container`;\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${englishName} - main card list container`} id={id}\n                     className={`${key}-container listElement-container col-12 col-sm-4 col-md-3 col-lg-2`}>\n                    <div key={`${name} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${englishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            );\n        }\n        return <>{content}</>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './EveryCourseTagsApp.scss';\n\nimport {Fragment} from 'react';\n\nimport type {ReactElement, ReactElementOrString} from '../util/react/ReactProperty';\nimport type {AppInterpreterWithCardList}         from './interpreter/AppInterpreterWithCardList';\n\nimport {AbstractCardListApp}           from './withInterpreter/AbstractCardListApp';\nimport {CourseTags}                    from '../core/courseTag/CourseTags';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport {TranslationUtility}            from '../lang/components/TranslationUtility';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\nexport default class EveryCourseTagsApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CourseTags>> {\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {typeDisplayed: ViewDisplays.CARD_LIST,};\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'courseTag';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent>{translation => <>{TranslationUtility.replaceAndInterpretTranslation(\n            translation,\n            'Every course tags', {\n                course: <Fragment key=\"every course tag (lowercase course)\">--course--</Fragment>,//TODO add course reference\n                tags: <Fragment key=\"every course tag (plural lowercase tag)\">--tags--</Fragment>,//TODO add tag reference\n            },\n        )}</>\n        }</GameContentTranslationComponent>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<CourseTags> {\n        return new class implements AppInterpreterWithCardList<CourseTags> {\n\n            public get iterable(): IterableIterator<CourseTags> {\n                return CourseTags[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,): ReactElement {\n                return courseTag.firstAppearance == null\n                    ? EMPTY_REACT_ELEMENT\n                    : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}