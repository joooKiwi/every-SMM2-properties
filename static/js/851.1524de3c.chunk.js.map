{"version":3,"file":"static/js/851.1524de3c.chunk.js","mappings":"kQAaMA,GAAuBC,EAAAA,EAAAA,OAAK,kBAAM,qDAAN,IAIbC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,OAAAA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MAKjB,WACI,MAAO,YACV,2CAGD,WACI,MAAO,yBACV,yCAED,WACI,MAAO,yBACV,oCAGD,WACI,OAAOC,EAAAA,EAAAA,IAAuB,iBACjC,4CAED,WACI,OAAO,iFAEH,WACI,OAAOC,EAAAA,EAAYC,OAAOC,WAC7B,GAJE,iCAQH,WACI,OAAO,IACV,GAVE,qCAeH,WACI,MAAO,MACV,GAjBE,mCAmBH,YAA6D,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAClC,OAAO,gBAAKC,UAAU,oBAAf,SAAoCF,EAAOG,KAAI,SAACC,EAAOC,GAAR,OAClD,SAACZ,EAAD,CAAsBa,KAAMF,EAAOG,MAAK,UAAKN,EAAL,yBAA0BI,EAA1B,MADU,KAGzD,KAvBE,KA4BV,K,EApDgBV,CACTa,EAAAA,E,yNCHLC,EAAcC,EAAAA,EAAAA,U,uBAICF,EAAtB,yTAWI,WACI,MAAM,GAAN,4FAEI,CAACC,EAAWE,KAAKC,kBAExB,GAhBL,2BAkBI,WAAwD,IAAD,IACnD,4BAAOD,KAAP,2BAA2BA,KAAKE,0BACnC,GApBL,yCAwBI,SAAsCC,GAClC,OAAOA,EAAWC,WACrB,GA1BL,4BAmCI,WACI,IADkC,EAC5BC,EAAoBL,KAAKM,sBAC3BC,EAAMP,KAAKQ,KACXC,EAAoBJ,EAAkBK,0BACtCC,EAAa,IAAIC,EAAAA,EAA2C,SAAtBH,EAA+BJ,EAAkBQ,sBAAwBJ,GAAmBK,mBAEhIC,EAAU,GANkB,UAOTV,EAAkBW,UAPT,IAOlC,2BAAqD,CAAC,IAA3Cb,EAA0C,QAC3Cc,EAAoBjB,KAAKkB,4BAA4Bf,GACrDb,EAAOa,EAAWgB,UAAUC,cAC5BC,EAAE,UAAMd,EAAN,YAAaJ,EAAWmB,kBAAxB,cAGRP,EAAQQ,MACJ,gBAA6DF,GAAIA,EAAI9B,UAAS,UAAKgB,EAAL,4CAA4CI,GAA1H,UACI,iBAAiEpB,UAAU,yCAA3E,WACI,SAAC,UAAD,CAA6D8B,GAAG,OAAO/B,KAAMA,EAAMkC,mBAAmB,QAAtG,UAAuBP,EAAvB,uBACA,gBAAK1B,UAAU,iCAAf,SAAiDc,EAAkBoB,sBAAsBtB,OAF7F,UAAac,EAAb,qCADJ,UAAaA,EAAb,gCAOP,CArBiC,+BAsBlC,OAAO,8BAAGF,GACb,KA1DL,GAEYW,EAAAA,E","sources":["app/InstrumentApp.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import {lazy} from 'react'\n\nimport type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {Instruments}            from 'core/instrument/Instruments'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- dynamic imports --------------------\n\nconst SimpleSoundComponent = lazy(() => import('util/file/sound/component/SimpleSound.component'))\n\n//endregion -------------------- dynamic imports --------------------\n\nexport default class InstrumentApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<Instruments>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected _createKey() {\n        return 'instrument'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyInstruments (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyInstruments (card)'\n    }\n\n\n    protected _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('instrument.all')\n    }\n\n    protected _createAppOptionInterpreter(): AppInterpreterWithCardList<Instruments> {\n        return new class implements AppInterpreterWithCardList<Instruments> {\n\n            public get iterable() {\n                return Instruments[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({sounds, name,}: Instruments,) {\n                return <div className=\"instrument-sounds\">{sounds.map((sound, index,) =>\n                    <SimpleSoundComponent file={sound} title={`${name} (instrument #${index})`}/>\n                )}</div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'routes/everyRoutes.types'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {CARD_LIST,} = ViewDisplays\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["SimpleSoundComponent","lazy","InstrumentApp","gameContentTranslation","Instruments","Symbol","iterator","sounds","name","className","map","sound","index","file","title","AbstractCardListApp","CARD_LIST","ViewDisplays","this","__cardRouteName","_createCardListRouteName","enumerable","englishName","optionInterpreter","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","reference","nameContainer","id","englishNameInHtml","push","popoverOrientation","createCardListContent","AbstractSimpleListApp"],"sourceRoot":""}