{"version":3,"file":"static/js/819.90715707.chunk.js","mappings":"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","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: unknown,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","export class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction} from 'variables'\n\nexport abstract class AbstractSoundPlayer<const out KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #map?: Map<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            const map = AbstractSoundPlayer.map\n            if (map.has(key))\n                throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n            map.set(key, this,)\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public static get map(): Map<string, SoundPlayer> {\n        return this.#map ??= new Map()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\nimport type {CompanionEnumByNameSingleton} from 'util/enumerable/Singleton.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<SoundStates, typeof SoundStates> = class CompanionEnum_SoundStates\n        extends CompanionEnumByEnglishNameOnly<SoundStates, typeof SoundStates> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_SoundStates\n\n        private constructor() {\n            super(SoundStates,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_SoundStates()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n    //endregion -------------------- Methods --------------------\n\n}","import {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.last = this.current\n        this._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<const SOURCE extends SoundFile = SoundFile, const TITLE extends string = string, const DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio != null)\n            return this.#audio\n\n        const audio = new Audio(this.source.fullName,)\n        audio.onplaying = event => {\n            switch (this.history.current.state) {\n                case STANDBY:\n                    return this.stop()\n                case PAUSED:\n                    return this.pause()\n            }\n            this.setState(new HistoryState(PLAYING, false, true,),)\n            this.onPlayingEvent?.(this, event,)\n        }\n        audio.onpause = event => {\n            if (this.history.current.state !== STANDBY)\n                this.setState(new HistoryState(PAUSED, false, true,),)\n            this.onPauseEvent?.(this, event,)\n        }\n        audio.onplay = event => {\n            this.setState(new HistoryState(PLAYING, true, true,),)\n            this.onPlayEvent?.(this, event,)\n        }\n        audio.onended = event => {\n            this.setState(new HistoryState(STANDBY, false, true,),)\n            this.onEndEvent?.(this, event,)\n        }\n        audio.title = this.title\n        audio.loop = this.doesLoop\n        return this.#audio = audio\n    }\n\n    /** The audio element has been initialized (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements have not been initialized, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitializedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid != null)\n            return this.#isDurationValid\n\n        if (!this.isAudioExistant)\n            return false\n        return this.#isDurationValid = Number.isFinite(this.audio.duration)\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current\n        const isLoading = currentState.isLoading\n        const isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current\n        const isLoading = currentState.isLoading\n        const isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history\n        const currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<const SOURCE extends SoundFile = SoundFile, const TITLE extends string = string, const DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import {Enum} from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {CompanionEnumByNameSingleton}                        from 'util/enumerable/Singleton.types'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\n\nimport {CompanionEnumByEnglishNameOnly} from 'util/enumerable/companion/CompanionEnumByEnglishNameOnly'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumByNameSingleton<Validators, typeof Validators> = class CompanionEnum_Validators\n        extends CompanionEnumByEnglishNameOnly<Validators, typeof Validators> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_Validators\n\n        private constructor() {\n            super(Validators,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_Validators()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n        protected override readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {}\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<const FILE extends SoundFile = SoundFile, const TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio\n            const isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.CompanionEnum.get.defaultValue\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initializing it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio != null)\n            return this.#audio\n\n        const source = this.file\n        return this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n            .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n            .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.delete(audio.source.key)\n    }\n\n    public override render(): ReactJSXElement {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","constructor","state","isLoading","isFromEventDirectly","Object","defineProperty","_state","writable","value","_isLoading","_isFromEventDirectly","_classPrivateFieldLooseBase","this","equals","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","_playElement","_pauseElement","_stopElement","_loadingElement","_exceptionElement","_map","_classPrivateFieldLooseKey","AbstractSoundPlayer","key","isInProduction","map","has","ReferenceError","concat","set","_classPrivateFieldLoo","_classPrivateFieldLoo2","Map","DEFAULT_DOES_LOOP","_englishName","SoundStates","Enum","englishName","super","englishNameInHtml","_SoundStates","STANDBY","getElementsFrom","_ref","PAUSED","_ref2","PLAYING","_ref3","LOADING","_ref4","EXCEPTION","_ref5","CompanionEnum","_instance","_CompanionEnum_SoundStates","CompanionEnum_SoundStates","CompanionEnumByEnglishNameOnly","get","_history","_last","_current","SoundStateHistory","currentState","current","history","last","push","setCurrent","TypeError","setLast","_source","_title","_doesLoop","_audio","_isDurationValid","_onBeforePlay","_onAfterPlay","_onBeforePause","_onAfterPause","_onBeforeStop","_onAfterStop","_onBeforeStateChanged","_onAfterStateChanged","_onPlayEvent","_onPlayingEvent","_onPauseEvent","_onEndEvent","SimpleSoundPlayer","source","title","doesLoop","arguments","length","undefined","setState","audio","Audio","fullName","onplaying","event","_this$onPlayingEvent","stop","pause","onPlayingEvent","call","onpause","_this$onPauseEvent","onPauseEvent","onplay","_this$onPlayEvent","onPlayEvent","onended","_this$onEndEvent","onEndEvent","loop","isAudioExistant","isPaused","paused","isDurationValid","Number","isFinite","duration","onBeforePlay","_classPrivateFieldLoo3","setOnBeforePlay","onAfterPlay","_classPrivateFieldLoo4","setOnAfterPlay","onBeforePause","_classPrivateFieldLoo5","setOnBeforePause","onAfterPause","_classPrivateFieldLoo6","setOnAfterPause","onBeforeStop","_classPrivateFieldLoo7","setOnBeforeStop","onAfterStop","_classPrivateFieldLoo8","setOnAfterStop","onBeforeStateChanged","_classPrivateFieldLoo9","setOnBeforeStateChanged","onAfterStateChanged","_classPrivateFieldLoo10","setOnAfterStateChanged","_classPrivateFieldLoo11","setOnPlayingEvent","_classPrivateFieldLoo12","setOnPlayEvent","_classPrivateFieldLoo13","setOnPauseEvent","_classPrivateFieldLoo14","setOnEndEvent","play","_this$onBeforePlay","_this$onAfterPlay","then","catch","_this$onBeforePause","_this$onAfterPause","_this$onBeforeStop","_this$onAfterStop","isStandby","currentTime","_this$onBeforeStateCh","_this$onAfterStateCha","SoundPlayerFactory","createSimple","Validators","onCreate","callback","onPlay","_Validators","ALL_YES","ALL_NO","ON_PLAY_ONLY","ON_CREATE_ONLY","_CompanionEnum_Validators","CompanionEnum_Validators","_DEFAULT","_PLAY_CLASSES","_PAUSE_CLASSES","_STOP_CLASSES","_LOADING_CLASSES","_EXCEPTION_CLASSES","_isSourceFoundCallback","SimpleSoundComponent","Component","props","isSourceRetrieved","file","validator","_this$props$validator","defaultValue","componentState","soundPlayer","componentDidMount","componentWillUnmount","delete","render","elementsHolder","_jsx","className","onClick","role","_jsxs","children"],"sourceRoot":""}