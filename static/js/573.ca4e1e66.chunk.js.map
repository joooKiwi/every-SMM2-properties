{"version":3,"file":"static/js/573.ca4e1e66.chunk.js","mappings":"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","sources":["app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/withInterpreter/ListDimension.creator.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation(),\n        path = routeFromName(routeName)\n\n    return currentPath === path || view === currentView\n        ? <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n        : <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport {ListDimensionCreator}       from 'app/withInterpreter/ListDimension.creator'\nimport NameComponent                from 'lang/name/component/Name.component'\nimport {ReactElement}               from 'react'\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnSimpleList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const dimensions = new ListDimensionCreator(optionInterpreter.createListDimension(),).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {Lazy} from '@joookiwi/lazy'\nimport {lazy}      from '@joookiwi/lazy'\n\nimport type {DimensionOnList}                                                                                                                                                                                           from 'app/interpreter/DimensionOnList'\nimport type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from 'app/withInterpreter/ListDimension.creator.types'\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    }\n\n    readonly #dimension\n    #smallHolder: Lazy<| SMALL | DefaultSmallDimension>\n    #mediumHolder: Lazy<| MEDIUM | DefaultMediumDimension>\n    #largeHolder: Lazy<| LARGE | DefaultLargeDimension>\n    #extraLargeHolder: Lazy<| EXTRA_LARGE | DefaultExtraLargeDimension>\n    #extraExtraLargeHolder: Lazy<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>,) {\n        this.#dimension = dimension\n        this.#smallHolder = lazy(() => {\n            const value = this.dimensionOrDefault.small\n            return value === undefined ? this.defaultSmall : value\n        },)\n        this.#mediumHolder = lazy(() => {\n            const value = this.dimensionOrDefault.medium\n            return value === undefined ? ListDimensionCreator.defaultMedium : value\n        },)\n        this.#largeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.large\n            return value === undefined ? this.defaultLarge : value\n        },)\n        this.#extraLargeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.extraLarge\n            return value === undefined ? this.defaultExtraLarge : value\n        },)\n        this.#extraExtraLargeHolder = lazy(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge\n            return value === undefined ? this.defaultExtraExtraLarge : value\n        },)\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>>> {\n        return this.#dimension\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>)\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.value\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.value\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.value\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.value\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.value\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["DisplayButtonGroup","_ref","key","reactKey","views","currentView","_jsx","id","className","children","map","_ref2","_ref3","_slicedToArray","view","name","DisplayButton","routeName","concat","_ref4","currentPath","useLocation","pathname","path","routeFromName","htmlType","type","disabled","Link","to","onClick","ViewDisplays","current","_possibleViewDisplay","_classPrivateFieldLooseKey","_key","_appInterpreter","AbstractAppWithInterpreter","_AbstractApp","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","writable","value","_createClass","get","this","viewDisplay","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createPossibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_createKey","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAppOptionInterpreter","UnfinishedText","isHidden","_jsxs","_createTitleContent","__possibleViewDisplay","_createAsideContent","_createDescription","createComponent","AbstractApp","_routeName","AbstractSimpleListApp","_AbstractAppWithInter","_len","arguments","length","args","Array","apply","SIMPLE_LIST","__listRouteName","_createSimpleListRouteName","enumerable","englishName","optionInterpreter","_appOptionInterpreter","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","size","contentToDisplay","index","uniqueEnglishName","_createUniqueNameOnSimpleList","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","_Fragment","_dimension","_smallHolder","_mediumHolder","_largeHolder","_extraLargeHolder","_extraExtraLargeHolder","dimension","lazy","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","_this$dimension","DEFAULT_DIMENSION","_this$dimension$defau","_this$dimension2","default","defaultDefault","sm","md","lg","xl","xxl","Popover","option","triggers","on","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","_objectWithoutProperties","_excluded","_objectSpread","TextComponent","_currentLanguageTextContent","NamePopoverComponent","ProjectLanguages","state","element","listId","setDoesDisplayPopover","setState","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","_step","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","language","includes","push","languageTranslation","space","unionTrait","err","e","f","hidden","_useState","useState","_useState2","english","StringContainer","getInHtml"],"sourceRoot":""}