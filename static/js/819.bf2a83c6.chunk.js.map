{"version":3,"file":"static/js/819.bf2a83c6.chunk.js","mappings":"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","sources":["util/file/sound/history/HistoryState.ts","util/file/sound/holder/SoundSubElementsHolder.ts","util/file/sound/player/AbstractSoundPlayer.ts","util/file/sound/player/SoundStates.ts","util/file/sound/history/SoundStateHistory.ts","util/file/sound/player/SimpleSoundPlayer.ts","util/file/sound/player/SoundPlayer.factory.ts","util/file/sound/player/Validators.ts","util/file/sound/component/SimpleSound.component.tsx"],"sourcesContent":["import type {SoundStates} from 'util/file/sound/player/SoundStates'\n\nexport class HistoryState {\n\n    //region -------------------- Fields --------------------\n\n    readonly #state\n    readonly #isLoading\n    readonly #isFromEventDirectly\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(state: | SoundStates | HistoryState, isLoading: | boolean | HistoryState, isFromEventDirectly: | boolean | HistoryState,) {\n        this.#state = state instanceof HistoryState ? state.state : state\n        this.#isLoading = isLoading instanceof HistoryState ? isLoading.isLoading : isLoading\n        this.#isFromEventDirectly = isFromEventDirectly instanceof HistoryState ? isFromEventDirectly.isFromEventDirectly : isFromEventDirectly\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get state(): SoundStates {\n        return this.#state\n    }\n\n    public get isLoading(): boolean {\n        return this.#isLoading\n    }\n\n    public get isFromEventDirectly(): boolean {\n        return this.#isFromEventDirectly\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Equals methods --------------------\n\n    public equals(other: any,): boolean {\n        if (other == null)\n            return false\n        if (!(other instanceof HistoryState))\n            return false\n\n        return this.state === other.state\n            && this.isLoading === other.isLoading\n            && this.isFromEventDirectly === other.isFromEventDirectly\n    }\n\n    //endregion -------------------- Equals methods --------------------\n\n}\n","import type {ReactElement} from 'util/react/ReactProperties'\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement\n    readonly #pauseElement\n    readonly #stopElement\n    readonly #loadingElement\n    readonly #exceptionElement\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, loadingElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement\n        this.#pauseElement = pauseElement\n        this.#stopElement = stopElement\n        this.#loadingElement = loadingElement\n        this.#exceptionElement = exceptionElement\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement\n    }\n\n    public get loadingElement(): ReactCallback {\n        return this.#loadingElement\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement\n","import type {ExtendedMap} from 'util/extended/ExtendedMap'\nimport type {SoundPlayer} from 'util/file/sound/player/SoundPlayer'\n\nimport {isInProduction}       from 'variables'\nimport {ExtendedMapContainer} from 'util/extended/ExtendedMap.container'\n\nexport abstract class AbstractSoundPlayer<KEY extends string = string, >\n    implements SoundPlayer {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DOES_LOOP = false\n\n    static #MAP?: ExtendedMap<string, SoundPlayer>\n\n    //endregion -------------------- Fields --------------------\n\n    protected constructor(key: KEY,) {\n        if (!isInProduction) {\n            (AbstractSoundPlayer.map)\n                .if(map => map.includes(key))\n                .isMet(() => {\n                    throw new ReferenceError(`A duplicate sound player was found with the same key \"${key}\".`)\n                })\n                .set(key, this)\n        }\n    }\n\n    public static get map(): ExtendedMap<string, SoundPlayer> {\n        return this.#MAP ??= new ExtendedMapContainer()\n    }\n\n    public abstract play(): this\n\n    public abstract pause(): this\n\n    public abstract stop(): this\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}         from 'core/ClassWithEnglishName'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\nimport type {EnglishName, Names, Ordinals} from 'util/file/sound/player/SoundStates.types'\nimport type {SoundSubElementsHolder}       from 'util/file/sound/holder/SoundSubElementsHolder'\nimport type {Nullable}                     from 'util/types/nullable'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY =   new class SoundStates_Standby extends SoundStates {\n\n        public override getElementsFrom({playElement,}: SoundSubElementsHolder,) {\n            return [playElement(),]\n        }\n\n    }('standby',)\n    public static readonly PAUSED =    new class SoundStates_Paused extends SoundStates {\n\n        public override getElementsFrom({playElement, stopElement,}: SoundSubElementsHolder,) {\n            return [playElement(), stopElement(),]\n        }\n\n    }('paused',)\n    public static readonly PLAYING =   new class SoundStates_Playing extends SoundStates {\n\n        public override getElementsFrom({pauseElement, stopElement,}: SoundSubElementsHolder,) {\n            return [pauseElement(), stopElement(),]\n        }\n\n    }('playing',)\n    public static readonly LOADING =   new class SoundStates_Loading extends SoundStates {\n\n        public override getElementsFrom({loadingElement,}: SoundSubElementsHolder,) {\n            return [loadingElement(),]\n        }\n\n    }('loading',)\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElementsFrom({exceptionElement,}: SoundSubElementsHolder,) {\n            return [exceptionElement(),]\n        }\n\n    }('exception',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElementsFrom(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[]\n\n\n    public static getValueByName(value: Nullable<| SoundStates | string>,): SoundStates {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): EnumerableConstructor<Ordinals, Names> {\n        return SoundStates\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<SoundStates>,): SoundStates {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<SoundStates> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {Nullable} from 'util/types/nullable'\n\nimport {HistoryState} from 'util/file/sound/history/HistoryState'\nimport {SoundStates}  from 'util/file/sound/player/SoundStates'\n\nexport class SoundStateHistory {\n\n    //region -------------------- Fields --------------------\n\n    readonly #history: HistoryState[]\n    #last?: HistoryState\n    #current!: HistoryState\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(currentState: SoundStates,) {\n        if (currentState === SoundStates.LOADING)\n            throw new ReferenceError('The first state of the history cannot be the loading state!')\n        this.#current = new HistoryState(currentState, false, false,)\n        this.#history = [this.current,]\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get history(): readonly HistoryState[] {\n        return this.#history\n    }\n\n    protected get _history(): HistoryState[] {\n        return this.#history\n    }\n\n\n    public get current(): HistoryState {\n        return this.#current\n    }\n\n    public set current(value: Nullable<HistoryState>,) {\n        if (value == null)\n            return\n        this.setLast(this.current)\n            ._history.push(this.#current = value)\n    }\n\n    public setCurrent(value: Nullable<HistoryState>,): this {\n        this.current = value\n        return this\n    }\n\n\n    public get last(): HistoryState {\n        if (this.#last == null)\n            throw new ReferenceError('The history has no last state!')\n        return this.#last\n    }\n\n    protected set last(value: Nullable<HistoryState>,) {\n        if (value == null)\n            throw new TypeError('The last state could not be set to a null value.')\n        this.#last = value\n    }\n\n    protected setLast(value: Nullable<HistoryState>,): this {\n        this.last = value\n        return this\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n","import type {SoundFile}                                                                                                                                                                                                                                                                                                                                                                                                          from 'util/file/sound/SoundFile'\nimport type {OnAfterPauseSoundPlayerCallback, OnAfterPlaySoundPlayerCallback, OnAfterStateChangedSoundPlayerCallback, OnAfterStopSoundPlayerCallback, OnBeforePauseSoundPlayerCallback, OnBeforePlaySoundPlayerCallback, OnBeforeStateChangedSoundPlayerCallback, OnBeforeStopSoundPlayerCallback, OnEndSoundPlayerCallback, OnPauseEventSoundPlayerCallback, OnPlayEventSoundPlayerCallback, OnPlayingEventSoundPlayerCallback} from 'util/file/sound/player/types'\nimport type {Nullable, NullOr}                                                                                                                                                                                                                                                                                                                                                                                                   from 'util/types/nullable'\n\nimport {HistoryState}        from 'util/file/sound/history/HistoryState'\nimport {SoundStateHistory}   from 'util/file/sound/history/SoundStateHistory'\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundStates}         from 'util/file/sound/player/SoundStates'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, PAUSED, PLAYING, EXCEPTION,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\n/**\n * @see https://www.w3schools.com/tags/ref_av_dom.asp Audio DOM reference (W3School.com)\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio Embed audio element (Mozilla.org)\n */\nexport class SimpleSoundPlayer<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >\n    extends AbstractSoundPlayer<SOURCE['key']> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #source\n    readonly #title\n    readonly #doesLoop\n    readonly #history\n\n    #audio?: HTMLAudioElement\n    #isDurationValid?: boolean\n    #onBeforePlay?: NullOr<OnBeforePlaySoundPlayerCallback<this>>\n    #onAfterPlay?: NullOr<OnAfterPlaySoundPlayerCallback<this>>\n    #onBeforePause?: NullOr<OnBeforePauseSoundPlayerCallback<this>>\n    #onAfterPause?: NullOr<OnAfterPauseSoundPlayerCallback<this>>\n    #onBeforeStop?: NullOr<OnBeforeStopSoundPlayerCallback<this>>\n    #onAfterStop?: NullOr<OnAfterStopSoundPlayerCallback<this>>\n    #onBeforeStateChanged?: NullOr<OnBeforeStateChangedSoundPlayerCallback<this>>\n    #onAfterStateChanged?: NullOr<OnAfterStateChangedSoundPlayerCallback<this>>\n\n    #onPlayEvent?: NullOr<OnPlayEventSoundPlayerCallback<this>>\n    #onPlayingEvent?: NullOr<OnPlayingEventSoundPlayerCallback<this>>\n    #onPauseEvent?: NullOr<OnPauseEventSoundPlayerCallback<this>>\n    #onEndEvent?: NullOr<OnEndSoundPlayerCallback<this>>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(source: SOURCE, title: TITLE, doesLoop: DOES_LOOP = AbstractSoundPlayer.DEFAULT_DOES_LOOP as DOES_LOOP,) {\n        super(source.key,)\n        this.#source = source\n        this.#title = title\n        this.#doesLoop = doesLoop\n        this.setState((this.#history = new SoundStateHistory(STANDBY,)).current,)\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    public get source(): SOURCE {\n        return this.#source\n    }\n\n    public get title(): TITLE {\n        return this.#title\n    }\n\n    public get doesLoop(): DOES_LOOP {\n        return this.#doesLoop\n    }\n\n    public get history(): SoundStateHistory {\n        return this.#history\n    }\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    public get audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const audio = this.#audio = new Audio(this.source.fullName)\n            audio.onplaying = event => {\n                switch (this.history.current.state) {\n                    case STANDBY:\n                        return this.stop()\n                    case PAUSED:\n                        return this.pause()\n                }\n                this.setState(new HistoryState(PLAYING, false, true,),)\n                this.onPlayingEvent?.(this, event,)\n            }\n            audio.onpause = event => {\n                this.setState(new HistoryState(PAUSED, false, true,),)\n                this.onPauseEvent?.(this, event,)\n            }\n            audio.onplay = event => {\n                this.setState(new HistoryState(PLAYING, true, true,),)\n                this.onPlayEvent?.(this, event,)\n            }\n            audio.onended = event => {\n                this.setState(new HistoryState(STANDBY, false, true,),)\n                this.onEndEvent?.(this, event,)\n            }\n            audio.title = this.title\n            audio.loop = this.doesLoop\n        }\n        return this.#audio\n    }\n\n    /** The audio element has been initialised (by calling its getter) */\n    public get isAudioExistant(): boolean {\n        return this.#audio != null\n    }\n\n    /**\n     * The element is paused.\n     * If the elements has not been initialised, then it is <b>false</b>.\n     */\n    public get isPaused(): boolean {\n        return this.#audio?.paused ?? false\n    }\n\n    /**\n     * The element has a valid duration time.\n     * And if the element {@link isAudioExistant is not existant}, then it will always return <b>false</b>.\n     *\n     * @onlyInitialisedOnce\n     */\n    public get isDurationValid(): boolean {\n        if (this.#isDurationValid == null) {\n            if (!this.isAudioExistant)\n                return false\n            this.#isDurationValid = Number.isFinite(this.audio.duration)\n        }\n        return this.#isDurationValid\n    }\n\n    //region -------------------- Getter & setter methods (audio event) --------------------\n\n    public get onBeforePlay(): NullOr<OnBeforePlaySoundPlayerCallback<this>> {\n        return this.#onBeforePlay ?? null\n    }\n\n    public set onBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,) {\n        this.#onBeforePlay = value ?? null\n    }\n\n    public setOnBeforePlay(value: Nullable<OnBeforePlaySoundPlayerCallback<this>>,): this {\n        this.onBeforePlay = value\n        return this\n    }\n\n\n    public get onAfterPlay(): NullOr<OnAfterPlaySoundPlayerCallback<this>> {\n        return this.#onAfterPlay ?? null\n    }\n\n    public set onAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,) {\n        this.#onAfterPlay = value ?? null\n    }\n\n    public setOnAfterPlay(value: Nullable<OnAfterPlaySoundPlayerCallback<this>>,): this {\n        this.onAfterPlay = value\n        return this\n    }\n\n\n    public get onBeforePause(): NullOr<OnBeforePauseSoundPlayerCallback<this>> {\n        return this.#onBeforePause ?? null\n    }\n\n    public set onBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,) {\n        this.#onBeforePause = value ?? null\n    }\n\n    public setOnBeforePause(value: Nullable<OnBeforePauseSoundPlayerCallback<this>>,): this {\n        this.onBeforePause = value\n        return this\n    }\n\n\n    public get onAfterPause(): NullOr<OnAfterPauseSoundPlayerCallback<this>> {\n        return this.#onAfterPause ?? null\n    }\n\n    public set onAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,) {\n        this.#onAfterPause = value ?? null\n    }\n\n    public setOnAfterPause(value: Nullable<OnAfterPauseSoundPlayerCallback<this>>,): this {\n        this.onAfterPause = value\n        return this\n    }\n\n\n    public get onBeforeStop(): NullOr<OnBeforeStopSoundPlayerCallback<this>> {\n        return this.#onBeforeStop ?? null\n    }\n\n    public set onBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,) {\n        this.#onBeforeStop = value ?? null\n    }\n\n    public setOnBeforeStop(value: Nullable<OnBeforeStopSoundPlayerCallback<this>>,): this {\n        this.onBeforeStop = value\n        return this\n    }\n\n\n    public get onAfterStop(): NullOr<OnAfterStopSoundPlayerCallback<this>> {\n        return this.#onAfterStop ?? null\n    }\n\n    public set onAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,) {\n        this.#onAfterStop = value ?? null\n    }\n\n    public setOnAfterStop(value: Nullable<OnAfterStopSoundPlayerCallback<this>>,): this {\n        this.onAfterStop = value\n        return this\n    }\n\n\n    public get onBeforeStateChanged(): NullOr<OnBeforeStateChangedSoundPlayerCallback<this>> {\n        return this.#onBeforeStateChanged ?? null\n    }\n\n    public set onBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,) {\n        this.#onBeforeStateChanged = value ?? null\n    }\n\n    public setOnBeforeStateChanged(value: Nullable<OnBeforeStateChangedSoundPlayerCallback<this>>,): this {\n        this.onBeforeStateChanged = value\n        return this\n    }\n\n\n    public get onAfterStateChanged(): NullOr<OnAfterStateChangedSoundPlayerCallback<this>> {\n        return this.#onAfterStateChanged ?? null\n    }\n\n    public set onAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,) {\n        this.#onAfterStateChanged = value ?? null\n    }\n\n    public setOnAfterStateChanged(value: Nullable<OnAfterStateChangedSoundPlayerCallback<this>>,): this {\n        this.onAfterStateChanged = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio event) --------------------\n    //region -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    public get onPlayingEvent(): NullOr<OnPlayingEventSoundPlayerCallback<this>> {\n        return this.#onPlayingEvent ?? null\n    }\n\n    public set onPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.#onPlayingEvent = value ?? null\n    }\n\n    public setOnPlayingEvent(value: Nullable<OnPlayingEventSoundPlayerCallback<this>>,) {\n        this.onPlayingEvent = value\n        return this\n    }\n\n\n    public get onPlayEvent(): NullOr<OnPlayEventSoundPlayerCallback<this>> {\n        return this.#onPlayEvent ?? null\n    }\n\n    public set onPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.#onPlayEvent = value ?? null\n    }\n\n    public setOnPlayEvent(value: Nullable<OnPlayEventSoundPlayerCallback<this>>,) {\n        this.onPlayEvent = value\n        return this\n    }\n\n\n    public get onPauseEvent(): NullOr<OnPauseEventSoundPlayerCallback<this>> {\n        return this.#onPauseEvent ?? null\n    }\n\n    public set onPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,) {\n        this.#onPauseEvent = value ?? null\n    }\n\n    public setOnPauseEvent(value: Nullable<OnPauseEventSoundPlayerCallback<this>>,): this {\n        this.onPauseEvent = value\n        return this\n    }\n\n\n    public get onEndEvent(): NullOr<OnEndSoundPlayerCallback<this>> {\n        return this.#onEndEvent ?? null\n    }\n\n    public set onEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,) {\n        this.#onEndEvent = value ?? null\n    }\n\n    public setOnEndEvent(value: Nullable<OnEndSoundPlayerCallback<this>>,): this {\n        this.onEndEvent = value\n        return this\n    }\n\n    //endregion -------------------- Getter & setter methods (audio HTML event) --------------------\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n\n    //endregion -------------------- Getter & setter methods --------------------\n\n    /**\n     * <p>\n     *     Play the current {@link audio} element &\n     *     setting the state to {@link SoundStates.PLAYING} (by the {@link HTMLAudioElement.onplaying onPlaying event}).\n     * </p>\n     *\n     * <p>\n     *     It will validate if the {@link isDurationValid duration is valid}\n     *     and depending on it, the state will be set to {@link SoundStates.EXCEPTION}.\n     * </p>\n     *\n     * <p>\n     *     And until the element is not {@link SoundStates.PLAYING playing}, the state will be {@link SoundStates.LOADING}.\n     * </p>\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override play(): this {\n        const currentState = this.history.current\n\n        if (currentState.isLoading)\n            return this.setState(new HistoryState(PLAYING, true, false,))\n        if (currentState.state === PLAYING)\n            return this\n\n        this.onBeforePlay?.(this)\n\n        const audio = this.audio\n        audio.play()\n            .then(() => this.isDurationValid ? this : this.setState(new HistoryState(EXCEPTION, false, false,),),)\n            .catch(() => this.setState(new HistoryState(EXCEPTION, false, false,),))\n        this.setState(new HistoryState(PLAYING, true, false,),)\n        this.onAfterPlay?.(this)\n        return this\n    }\n\n    /**\n     * Pause the {@link audio} element &\n     * setting the state to {@link SoundStates.PAUSED}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override pause(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isPaused = currentState.state === PAUSED\n\n        if (!isLoading || !isPaused) {\n            if (isLoading)\n                return this.setState(new HistoryState(PAUSED, true, false,))\n            if (isPaused)\n                return this\n        }\n\n        this.onBeforePause?.(this)\n        this.audio.pause()\n        this.setState(new HistoryState(PAUSED, false, false,),)\n        this.onAfterPause?.(this)\n        return this\n    }\n\n    /**\n     * Stop the {@link audio} element by pausing it,\n     * putting the current time to 0 &\n     * setting the state to {@link SoundStates.STANDBY}\n     *\n     * @doesNotTriggerIfIsSameState\n     */\n    public override stop(): this {\n        const currentState = this.history.current,\n            isLoading = currentState.isLoading,\n            isStandby = currentState.state === STANDBY\n\n        if (!isLoading || !isStandby) {\n            if (isLoading)\n                return this.setState(new HistoryState(STANDBY, true, false,))\n            if (isStandby)\n                return this\n        }\n\n        this.onBeforeStop?.(this)\n        const audio = this.audio\n        audio.pause()\n        audio.currentTime = 0\n        this.setState(new HistoryState(STANDBY, false, false,),)\n        this.onAfterStop?.(this)\n        return this\n    }\n\n    public setState(value: HistoryState,): this {\n        const history = this.history,\n            currentState = history.current\n        if (currentState.equals(value))\n            return this\n        this.onBeforeStateChanged?.(this, value, currentState,)\n        history.current = value\n        this.onAfterStateChanged?.(this, value, currentState,)\n        return this\n    }\n\n}\n","import type {SoundFile} from 'util/file/sound/SoundFile'\nimport type {Nullable}  from 'util/types/nullable'\n\nimport {AbstractSoundPlayer} from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SimpleSoundPlayer}   from 'util/file/sound/player/SimpleSoundPlayer'\n\nexport class SoundPlayerFactory {\n\n    /**\n     * Create a simple sound player\n     *\n     * @param source The source of the audio element\n     * @param title The title displayed for the audio element\n     * @param doesLoop The audio element loop (by default false)\n     */\n    public static createSimple<SOURCE extends SoundFile = SoundFile, TITLE extends string = string, DOES_LOOP extends boolean = false, >(source: SOURCE, title: TITLE, doesLoop?: Nullable<DOES_LOOP>,) {\n        return new SimpleSoundPlayer(source, title, doesLoop ?? AbstractSoundPlayer.DEFAULT_DOES_LOOP,)\n    }\n\n}\n","import type {CollectionHolder, EnumerableConstructorWithDefault, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                               from '@joookiwi/enumerable'\n\nimport type {ClassWithEnglishName}                                from 'core/ClassWithEnglishName'\nimport type {EnglishName, IsSourceFoundCallback, Names, Ordinals} from 'util/file/sound/player/Validators.types'\nimport type {Nullable, NullOrBoolean}                             from 'util/types/nullable'\n\nimport {getValueByEnglishName} from 'util/utilitiesMethods'\n\nexport abstract class Validators\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_YES =        new class SoundFounds_AllYes extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true)\n            return true\n        }\n\n    }('all yes',)\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly ALL_NO =         new class SoundFounds_AllNo extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false)\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false)\n            return false\n        }\n\n    }('all no',)\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY_ONLY =   new class SoundFounds_OnPlayOnly extends Validators {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback()\n            return null\n        }\n\n    }('on play only',)\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE_ONLY = new class SoundFounds_OnCreateOnly extends Validators {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback()\n        }\n\n    }('on create only',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: Validators\n    protected static readonly _DEFAULT = Validators.ON_PLAY_ONLY\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super()\n        this.#englishName = englishName\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName//TODO replace with a proper html name or remove this method entirely\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SoundPlayer sound player} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): NullOrBoolean {\n        return null\n    }\n\n\n    public static getValueByName(value: Nullable<| Validators | string>,): Validators {\n        return getValueByEnglishName(value, this,)\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructorWithDefault<Ordinals, Names> {\n        return Validators\n    }\n\n    public static get default(): Validators {\n        return Enum.getDefaultOn(this,)\n    }\n\n    public static set default(value: PossibleValueByEnumerable<Validators>,) {\n        this.setDefault(value,)\n    }\n\n    public static setDefault(value: PossibleValueByEnumerable<Validators>,): typeof Validators {\n        return Enum.setDefaultOn(this, value,)\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<Validators>,): Validators {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<Validators> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import 'util/file/sound/component/SimpleSound.component.scss'\n\nimport {Component} from 'react'\n\nimport type {ReactComponent}        from 'util/react/ReactComponent'\nimport type {SoundFile}             from 'util/file/sound/SoundFile'\nimport type {SimpleSoundProperties} from 'util/file/sound/component/property/SimpleSoundProperties'\nimport type {SimpleSoundState}      from 'util/file/sound/component/state/SimpleSound.state'\nimport type {SimpleSoundPlayer}     from 'util/file/sound/player/SimpleSoundPlayer'\nimport type {IsSourceFoundCallback} from 'util/file/sound/player/Validators.types'\n\nimport {HistoryState}           from 'util/file/sound/history/HistoryState'\nimport {SoundSubElementsHolder} from 'util/file/sound/holder/SoundSubElementsHolder'\nimport {AbstractSoundPlayer}    from 'util/file/sound/player/AbstractSoundPlayer'\nimport {SoundPlayerFactory}     from 'util/file/sound/player/SoundPlayer.factory'\nimport {SoundStates}            from 'util/file/sound/player/SoundStates'\nimport {Validators}             from 'util/file/sound/player/Validators'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {STANDBY, LOADING,} = SoundStates\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class SimpleSoundComponent<FILE extends SoundFile = SoundFile, TITLE extends string = string, >\n    extends Component<SimpleSoundProperties<FILE, TITLE>, SimpleSoundState>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play'\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause'\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop'\n    static readonly #LOADING_CLASSES = 'spinner-border audio-state audio-state-loading'\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception'\n\n    #audio?: SimpleSoundPlayer<FILE, TITLE>\n    readonly #isSourceFoundCallback: IsSourceFoundCallback\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: SimpleSoundProperties<FILE, TITLE>,) {\n        super(props,)\n        this.state = {\n            state: new HistoryState(STANDBY, false, false,),\n            isSourceRetrieved: false,\n        }\n        this.#isSourceFoundCallback = value => {\n            const audio = this._audio,\n                isDurationValid = audio.isDurationValid\n            value ?? isDurationValid\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, /*state: audio.setState(new HistoryState(EXCEPTION, audio.history.current,)).history.current,*/})\n        }\n    }\n\n    //region -------------------- Getter methods --------------------\n\n\n    /** @see SimpleSoundProperties.file */\n    public get file(): FILE {\n        return this.props.file\n    }\n\n    /** @see SimpleSoundProperties.title */\n    public get title(): TITLE {\n        return this.props.title\n    }\n\n    /** @see SimpleSoundProperties.validator */\n    public get validator(): Validators {\n        return this.props.validator ?? Validators.default\n    }\n\n\n    /** @see SimpleSoundState.state */\n    public get componentState(): HistoryState {\n        return this.state.state\n    }\n\n    /** @see SimpleSoundState.isSourceRetrieved */\n    public get isSourceRetrieved(): boolean {\n        return this.state.isSourceRetrieved\n    }\n\n\n    /**\n     * Get the audio element (lazily)\n     * and initialising it upon creating the audio element\n     */\n    protected get _audio(): SimpleSoundPlayer<FILE, TITLE> {\n        if (this.#audio == null) {\n            const source = this.file\n            this.#audio = SoundPlayerFactory.createSimple(source, this.title,)\n                .setOnBeforePlay(() => this.validator.onPlay(this.#isSourceFoundCallback))\n                .setOnAfterStateChanged(soundPlayer => this.setState({state: soundPlayer.history.current,}))\n        }\n        return this.#audio\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.isSourceRetrieved)\n            this.validator.onCreate(this.#isSourceFoundCallback)\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio\n        if (audio == null)\n            return\n        audio.setState(new HistoryState(STANDBY, false, false,),)\n        AbstractSoundPlayer.map.remove(audio.source.key)\n    }\n\n    public override render(): JSX.Element {\n        const elementsHolder = new SoundSubElementsHolder(\n                () => <div key={`${this.title} - play`} className={SimpleSoundComponent.#PLAY_CLASSES} onClick={() => this._audio.play()}/>,\n                () => <div key={`${this.title} - pause`} className={SimpleSoundComponent.#PAUSE_CLASSES} onClick={() => this._audio.pause()}/>,\n                () => <div key={`${this.title} - stop`} className={SimpleSoundComponent.#STOP_CLASSES} onClick={() => this._audio.stop()}/>,\n                () => <div key={`${this.title} - loading`} className={SimpleSoundComponent.#LOADING_CLASSES} role=\"status\"/>,\n                () => <div key={`${this.title} - exception`} className={SimpleSoundComponent.#EXCEPTION_CLASSES}/>,\n            ),\n            componentState = this.componentState\n\n        return <div key={`${this.title} - container`} className=\"audio-state-container container\">\n            {componentState.isLoading ? LOADING.getElementsFrom(elementsHolder) : null}\n            {componentState.state.getElementsFrom(elementsHolder)}\n        </div>\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n"],"names":["HistoryState","state","isLoading","isFromEventDirectly","this","other","SoundSubElementsHolder","playElement","pauseElement","stopElement","loadingElement","exceptionElement","AbstractSoundPlayer","key","isInProduction","map","if","includes","isMet","ReferenceError","set","ExtendedMapContainer","DEFAULT_DOES_LOOP","Symbol","iterator","SoundStates","englishName","value","getValueByEnglishName","Enum","values","STANDBY","PAUSED","PLAYING","LOADING","EXCEPTION","SoundStateHistory","currentState","current","setLast","_history","push","TypeError","last","SimpleSoundPlayer","source","title","doesLoop","setState","audio","Audio","fullName","onplaying","event","history","stop","pause","onPlayingEvent","onpause","onPauseEvent","onplay","onPlayEvent","onended","onEndEvent","loop","paused","isAudioExistant","Number","isFinite","duration","onBeforePlay","onAfterPlay","onBeforePause","onAfterPause","onBeforeStop","onAfterStop","onBeforeStateChanged","onAfterStateChanged","play","then","isDurationValid","catch","isPaused","isStandby","currentTime","equals","SoundPlayerFactory","Validators","callback","setDefault","ALL_YES","ALL_NO","ON_PLAY_ONLY","ON_CREATE_ONLY","_DEFAULT","SimpleSoundComponent","props","isSourceRetrieved","_audio","file","validator","createSimple","setOnBeforePlay","onPlay","setOnAfterStateChanged","soundPlayer","onCreate","remove","elementsHolder","className","onClick","role","componentState","getElementsFrom","Component"],"sourceRoot":""}