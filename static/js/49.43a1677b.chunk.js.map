{"version":3,"file":"static/js/49.43a1677b.chunk.js","mappings":"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","sources":["app/GameReferenceApp.tsx","core/soundEffect/SoundEffectImage.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './GameReferenceApp.scss'\n\nimport {Fragment} from 'react'\n\nimport type {PossibleEnglishName_Games} from 'core/soundEffect/SoundEffects.types'\n\nimport GameImage                from 'core/game/GameImage'\nimport {Games}                  from 'core/game/Games'\nimport {GameReferences}         from 'core/gameReference/GameReferences'\nimport GameStyleImage           from 'core/gameStyle/GameStyleImage'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport SoundEffectImage         from 'core/soundEffect/SoundEffectImage'\nimport {SoundEffects}           from 'core/soundEffect/SoundEffects'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent            from 'lang/name/component/Name.component'\n\n\n/** Every {@link GameReferences} that will do a return of line after its rendering */\nconst RETURN_OF_LINES = [\n    GameReferences.MARIO_AND_LUIGI_PAPER_JAM, GameReferences.DONKEY_KONG_COUNTRY, GameReferences.KIRBY_ADVENTURE,\n    GameReferences.KID_ICARIUS_UPRISING, GameReferences.MEGA_MAN, GameReferences.METROID_ZERO_MISSION,\n    GameReferences.NINTENDO_ENTERTAINMENT_SYSTEM_ROB, GameReferences.FIRE_EMBLEM_AWAKENING,\n    GameReferences.POKEMON_Y, GameReferences.PIKMIN_3, GameReferences.THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES,\n    GameReferences.XENOBLADE_CHRONICLES, GameReferences.MOTHER3, GameReferences.SPLATOON,\n    GameReferences.WII_FIT, GameReferences.CHIBI_ROBO, GameReferences.ANIMAL_CROSSING_HAPPY_HOME_DESIGNER,\n    GameReferences.F_ZERO, GameReferences.GAME_AND_WATCH, GameReferences.SONIC_THE_HEDGEHOG,\n    GameReferences.DUCK_HUNT, GameReferences.PAC_MAN, GameReferences.WRECKING_CREW,\n    GameReferences.PUNCH_OUT, GameReferences.STAR_FOX_ZERO, GameReferences.YAKUMAN_HO_O,\n    GameReferences.BIG_BRAIN_ACADEMY, GameReferences.MONSTER_MANOR, GameReferences.BABYMETAL,\n    GameReferences.MONSTER_HUNTER, GameReferences.EXCITEBIKE, GameReferences.NISEKOI,\n    GameReferences.JAM_WITH_THE_BAND, GameReferences.DAIGASSO_BAND_BROS_P, GameReferences.THE_LEGENDARY_STARFY,\n    GameReferences.BALLOON_FIGHT, GameReferences.SHIN_ONIGASHIMA, GameReferences.FAMICOM_DETECTIVE_CLUB_PART_II,\n    GameReferences.PUSHMO, GameReferences.CLU_CLU_LAND, GameReferences.VOLLEYBALL,\n    GameReferences.ICE_CLIMBER, GameReferences.SHAUN_THE_SHEEP,\n] as const\n\nconst otherGameReferences = (() => {\n    const alreadyIncludedNames = [\n        ...Games.CompanionEnum.get.values.map(game => game.englishName,),\n        ...GameStyles.CompanionEnum.get.values.map(game => game.englishName,),\n        ...SoundEffects.soundEffect_games.map(game => game.englishName,) as PossibleEnglishName_Games[],\n    ]\n    return GameReferences.CompanionEnum.get.values.filter(it => !alreadyIncludedNames.includes(it.englishName as never,),)\n})()\n\n/** @reactComponent */\nexport default function GameReferenceApp() {\n    return <div id=\"gameReference-container\" className=\"container-fluid main-container\">\n        <h2 id=\"main-names-title\" className=\"names-title\">{gameContentTranslation('game reference.plural',)}</h2>\n        <div id=\"game-names-container\" className=\"names-container\">\n            <h3 id=\"game-names-title\" className=\"names-title\">{gameContentTranslation('game.plural',)}</h3>\n            <div id=\"game-name-container\" className=\"container-fluid name-container\">\n                {Games.CompanionEnum.get.values.map(it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <GameImage reference={it}/>\n                            <NameComponent id=\"game-name\" name={GameReferences.CompanionEnum.get.getValue(it.name,).reference}/>\n                        </div>\n                    </div>,)}\n            </div>\n        </div>\n        <div id=\"gameStyle-names-container\" className=\"names-container\">\n            <h3 id=\"gameStyle-names-title\" className=\"names-title\">{gameContentTranslation('game style.plural',)}</h3>\n            <div id=\"gameStyle-name-container\" className=\"container-fluid name-container\">\n                {GameStyles.CompanionEnum.get.values.map(it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <GameStyleImage reference={it}/>\n                            <NameComponent id=\"gameStyle-name\" name={GameReferences.CompanionEnum.get.getValue(it.name,).reference}/>\n                        </div>\n                    </div>,)}\n            </div>\n        </div>\n        <div id=\"soundEffect-names-container\" className=\"names-container\">\n            <h3 id=\"soundEffect-names-title\" className=\"col-12 names-title\">{gameContentTranslation('sound effect.plural',)}</h3>\n            <div id=\"soundEffect-name-container\" className=\"container-fluid name-container\">{\n                SoundEffects.soundEffect_games.map(it =>\n                    <div key={`single name container (${it.englishName})`} id={`${it.englishNameInHtml}-name-container`} className=\"col single-name-container\">\n                        <div className=\"single-name-sub-container\">\n                            <SoundEffectImage reference={it}/>\n                            <NameComponent id=\"soundEffect-name\" name={GameReferences.CompanionEnum.get.getValueByName(it.englishName,).reference}/>\n                        </div>\n                    </div>,)\n            }</div>\n        </div>\n        <div id=\"otherGameReferences-names-container\" className=\"names-container\">\n            <h3 id=\"otherGameReferences-name-title\" className=\"names-title\">{gameContentTranslation('game reference.others',)}</h3>\n            <div id=\"otherGameReferences-name-container\" className=\"container-fluid name-container\">\n                {otherGameReferences.map(it =>\n                    <Fragment key={`single name container - ${it.englishName}`}>\n                        <div id={`${it.englishNameInHtml}-name-container`} className=\"col-3 single-name-container\">\n                            <div className=\"single-name-sub-container\">\n                                <NameComponent id=\"otherGameReferences-name\" name={it.reference}/>\n                            </div>\n                        </div>\n                        {RETURN_OF_LINES.includes(it,) ? <div className=\"col-12 name-container return-of-line-name-container\"/> : null}\n                    </Fragment>,)}\n            </div>\n        </div>\n    </div>\n}\n","import type {SoundEffects}         from 'core/soundEffect/SoundEffects'\nimport type {SoundEffectImageFile} from 'core/soundEffect/file/SoundEffectImageFile'\nimport type {ReactProperties}      from 'util/react/ReactProperties'\n\nimport Image from 'app/tools/images/Image'\n\ninterface SoundEffectImageProperties\n    extends ReactProperties {\n\n    readonly reference: SoundEffects\n\n    /** The file associated or {@link SoundEffects.SMM2ImageFile} by default */\n    readonly file?: SoundEffectImageFile\n\n}\n\nexport default function SoundEffectImage({reference, file,}: SoundEffectImageProperties,) {\n    return <Image file={file ?? reference.SMM2ImageFile} className={`soundEffect-image ${reference.englishNameInHtml}-image`}/>\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["RETURN_OF_LINES","GameReferences","MARIO_AND_LUIGI_PAPER_JAM","DONKEY_KONG_COUNTRY","KIRBY_ADVENTURE","KID_ICARIUS_UPRISING","MEGA_MAN","METROID_ZERO_MISSION","NINTENDO_ENTERTAINMENT_SYSTEM_ROB","FIRE_EMBLEM_AWAKENING","POKEMON_Y","PIKMIN_3","THE_LEGEND_OF_ZELDA_TRI_FORCE_HEROES","XENOBLADE_CHRONICLES","MOTHER3","SPLATOON","WII_FIT","CHIBI_ROBO","ANIMAL_CROSSING_HAPPY_HOME_DESIGNER","F_ZERO","GAME_AND_WATCH","SONIC_THE_HEDGEHOG","DUCK_HUNT","PAC_MAN","WRECKING_CREW","PUNCH_OUT","STAR_FOX_ZERO","YAKUMAN_HO_O","BIG_BRAIN_ACADEMY","MONSTER_MANOR","BABYMETAL","MONSTER_HUNTER","EXCITEBIKE","NISEKOI","JAM_WITH_THE_BAND","DAIGASSO_BAND_BROS_P","THE_LEGENDARY_STARFY","BALLOON_FIGHT","SHIN_ONIGASHIMA","FAMICOM_DETECTIVE_CLUB_PART_II","PUSHMO","CLU_CLU_LAND","VOLLEYBALL","ICE_CLIMBER","SHAUN_THE_SHEEP","otherGameReferences","alreadyIncludedNames","Games","CompanionEnum","get","values","map","game","englishName","GameStyles","SoundEffects","soundEffect_games","filter","it","includes","GameReferenceApp","_jsxs","id","className","children","_jsx","gameContentTranslation","concat","englishNameInHtml","GameImage","reference","NameComponent","name","getValue","GameStyleImage","SoundEffectImage","getValueByName","Fragment","_ref","file","Image","SMM2ImageFile","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","content","_currentLanguageTextContent","_classPrivateFieldLooseKey","NamePopoverComponent","Component","constructor","props","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","ProjectLanguages","current","state","element","listId","setDoesDisplayPopover","popoverOrientation","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","isCurrent","nameMap","toNameMap","language","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}