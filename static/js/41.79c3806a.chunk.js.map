{"version":3,"file":"static/js/41.79c3806a.chunk.js","mappings":"wMASe,MAAMA,UACTC,EAAAA,EAIWC,aACf,MAAO,mBACX,CAGmBC,6BACf,MAAO,+BACX,CAGmBC,sBACf,OAAOC,EAAAA,EAAAA,IAAuB,yBAA0B,CACpDC,cAAcC,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAAAC,SAA0C,sBAArC,sCAClCC,YAAYH,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAAAC,SAAwC,uBAAnC,qCAExC,CAEmBE,8BACf,OAAO,IAAI,MAEIC,cACP,OAAOC,EAAAA,EAAmBC,cAAcC,IAAIC,OAAOC,SACvD,CAIOC,sBACH,MAAO,CACHC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,WAAY,EAEpB,EAKR,E,yICzCW,SAASC,EAAkBC,GAAuE,IAArEC,SAAUC,EAAG,MAAEC,EAAK,YAAEC,GAA2CJ,EACzG,OAAOlB,EAAAA,EAAAA,KAAA,OAA6CuB,GAAG,4BAA4BC,UAAU,YAAWtB,SAAEmB,EAAMI,KAAIC,IAAA,IAAEC,EAAMC,GAAMF,EAAA,OAC9H1B,EAAAA,EAAAA,KAAC6B,EAAa,CAAiDV,SAAUC,EAAKO,KAAMA,EAAMG,UAAWF,EAAMN,YAAaA,GAAY,GAAAS,OAA7GX,EAAG,6BAAAW,OAA4BJ,EAAI,KAA4E,KACzI,GAAAI,OAFmBX,EAAG,6BAG3B,CAEA,SAASS,EAAaG,GAA4E,IAA1Eb,SAAUC,EAAG,KAAEO,EAAI,YAAEL,EAAW,UAAEQ,GAAoCE,EAC1F,MAAOC,SAAUC,IAAgBC,EAAAA,EAAAA,MAC3BC,GAAOC,EAAAA,EAAAA,GAAcP,GAE3B,OAAII,IAAgBE,GAAQT,IAASL,GAC1BtB,EAAAA,EAAAA,KAAA,UAAsCwB,UAAS,sBAAAO,OAAwBJ,EAAKW,SAAQ,oBAAoBC,KAAK,SAASC,UAAQ,MAAAT,OAA9GX,EAAG,MAAAW,OAAKJ,EAAKC,KAAI,OACrC5B,EAAAA,EAAAA,KAACyC,EAAAA,GAAI,CAA+BC,GAAIN,EAAMZ,UAAS,mBAAAO,OAAqBJ,EAAKW,SAAQ,oBAAoBK,QAASA,IAAMC,EAAAA,EAAarC,cAAcC,IAAIqC,QAAUlB,GAAK,GAAAI,OAA5JX,EAAG,MAAAW,OAAKJ,EAAKC,KAAI,KAC1C,CCfuE,IAAAkB,GAAAC,EAAAA,EAAAA,GAAA,uBAAAC,GAAAD,EAAAA,EAAAA,GAAA,OAAAE,GAAAF,EAAAA,EAAAA,GAAA,kBAEhE,MAAeG,UAGVC,EAAAA,EAUDC,YAAYC,GACfC,MAAMD,GATVE,OAAAC,eAAA,KAAAV,EAAA,CAAAW,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAR,EAAA,CAAAS,UAAA,EAAAC,WAAA,IAAAH,OAAAC,eAAA,KAAAP,EAAA,CAAAQ,UAAA,EAAAC,WAAA,GAUA,CAKWC,kBACP,OAAOC,KAAKP,MAAMM,WACtB,CAIYE,4BAAsD,IAADC,EAAAC,EAC7D,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAOJ,KAAId,IAAAA,UAAA,IAAAiB,EAAAA,EAAAD,EAAAhB,GAA0Bc,KAAKK,4BAC9C,CAUcjB,WAAgB,IAADkB,EAAAC,EACzB,OAAW,QAAXA,GAAAD,GAAAF,EAAAA,EAAAA,GAAOJ,KAAIZ,IAAAA,UAAA,IAAAmB,EAAAA,EAAAD,EAAAlB,GAAUY,KAAKjE,YAC9B,CAQcyE,4BAA8B,IAADC,EAAAC,EACvC,OAAW,QAAXA,GAAAD,GAAAL,EAAAA,EAAAA,GAAOJ,KAAIX,IAAAA,UAAA,IAAAqB,EAAAA,EAAAD,EAAApB,GAAqBW,KAAKxD,6BACzC,CAOUmE,sBACN,OAAO,IACX,CAEUC,qBACN,OAAOxE,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAACwE,UAAQ,EAAAvE,SAAC,eACpC,CAEmBwE,eACf,MAAM,YAACf,EAAaX,KAAM5B,GAAQwC,KAElC,OAAO5D,EAAAA,EAAAA,KAAA,OAAyCuB,GAAG,oBAAmBrB,UAClEyE,EAAAA,EAAAA,MAAA,OAAKpD,GAAE,GAAAQ,OAAKX,EAAG,cAAcI,UAAS,GAAAO,OAAK4B,EAAYrB,SAAQ,cAAapC,SAAA,EACxEF,EAAAA,EAAAA,KAAA,MAA2BuB,GAAE,GAAAQ,OAAKX,EAAG,UAAUI,UAAU,YAAWtB,SAAE0D,KAAK/D,uBAAqB,GAAAkC,OAApFX,EAAG,cACfuD,EAAAA,EAAAA,MAAA,SAAqCpD,GAAG,wBAAuBrB,SAAA,EAC3DF,EAAAA,EAAAA,KAACiB,EAAkB,CAACE,SAAUC,EAAKC,MAAOuC,KAAKC,sBAAuBvC,YAAaqC,IAClFC,KAAKW,wBAAqB,GAAAxC,OAFhBX,EAAG,qBAIlBpB,EAAAA,EAAAA,KAAA,KAAAE,SAAiC0D,KAAKY,sBAAoB,GAAAzC,OAA/CX,EAAG,oBACdpB,EAAAA,EAAAA,KAAA,OAA0CwB,UAAU,cAAatB,SAAEyD,EAAYiB,gBAAgBhB,OAAM,GAAA7B,OAAxFX,EAAG,MAAAW,OAAK4B,EAAYpB,KAAI,UACnC,GAAAR,OATUX,EAAG,yBAW3B,E,eClFyEyD,GAAA9B,EAAAA,EAAAA,GAAA,aAEtE,MAAerD,UAIVwD,EAAsCE,cAAA,SAAA0B,WAE9CvB,OAAAC,eAAA,KAAAqB,EAAA,CAAApB,UAAA,EAAAC,WAAA,IAOmBO,6BACf,MAAO,CACH,CAACrB,EAAAA,EAAamC,YAAanB,KAAKoB,iBAExC,CAEYA,sBAAsC,IAADlB,EAAAC,EAC7C,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAOJ,KAAIiB,IAAAA,UAAA,IAAAd,EAAAA,EAAAD,EAAAe,GAAgBjB,KAAKhE,4BACpC,CAIUqF,8BAA8BC,GACpC,OAAOA,EAAWC,WACtB,CAQOC,aACH,MAAMC,EAAoBzB,KAAKQ,sBACzBhD,EAAMwC,KAAKZ,MACVpC,QAAS0E,EAAIzE,MAAO0E,EAAIzE,OAAQ0E,EAAIzE,MAAO0E,EAAIzE,WAAY0E,EAAIC,gBAAiBC,GAAQP,EAAkB1E,sBAC3GkF,EAAU,YAAA9D,OAAeuD,GAAEvD,OAAS,MAANwD,EAAa,GAAE,gBAAAxD,OAAmBwD,IAAIxD,OAAS,MAANyD,EAAa,GAAE,gBAAAzD,OAAmByD,IAAIzD,OAAS,MAAN0D,EAAa,GAAE,gBAAA1D,OAAmB0D,IAAI1D,OAAS,MAAN2D,EAAa,GAAE,gBAAA3D,OAAmB2D,IAAI3D,OAAU,MAAP6D,EAAc,GAAE,iBAAA7D,OAAoB6D,IACtOvF,EAAUgF,EAAkBhF,QAE5ByF,EAAOzF,EAAQ0F,OACfC,EAAmB,IAAIC,MAAoBH,GACjD,IAAII,EAAQJ,EACZ,KAAOI,KAAU,GAAG,CAChB,MAAMhB,EAAa7E,EAAQ6F,GACrBC,EAAoBvC,KAAKqB,8BAA8BC,GAG7Dc,EAAiBE,IACblG,EAAAA,EAAAA,KAAA,OAAwDuB,GAAE,GAAAQ,OAAKX,EAAG,KAAAW,OAAImD,EAAWkB,kBAAiB,cAAc5E,UAAS,GAAAO,OAAKX,EAAG,cAAalB,UAC1IF,EAAAA,EAAAA,KAAA,QAA8DwB,UAAU,iEAAgEtB,UACpIF,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CAA+C9E,GAAG,OAAOK,KAAMsD,EAAWoB,UAAUC,cAAeC,mBAAmB,QAAM,GAAAzE,OAAnHoE,EAAiB,uBAAoG,GAAApE,OADlIoE,EAAiB,iCAExB,GAAApE,OAHEoE,EAAiB,0BAKtC,CACA,OAAOnG,EAAAA,EAAAA,KAAA,OAAKwB,UAAS,OAAAO,OAAS8D,EAAU,wCAAuC3F,SAAE8F,GACrF,E,yGCtDW,SAASS,EAAOvF,GAA8J,IAA9G,SAAChB,EAAQ,OAAEwG,EAAQC,GAAIC,EAAQ,UAAEC,GAAyE3F,EAKrL,OAJA4F,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAWC,EAAAA,EAAyBxG,IAAIyG,IAAIJ,EAAW,IAAIK,EAAAA,EAAgBL,EAAWH,EAAQE,IACpG,MAAO,IAAMI,EAAAA,EAAyBxG,IAAI2G,OAAOJ,GAAWK,SAAS,IAE1D,OAARlH,QAAQ,IAARA,EAAAA,EAAY,IACvB,C,eCVe,SAASmH,EAAWnG,GAAmK,IAAnG,SAAChB,EAAQ,UAAE2G,KAAcS,GAAsEpG,EAC9L,OAAOlB,EAAAA,EAAAA,KAACyG,EAAO,CAACI,UAAWA,KAAeS,EAAepH,UACrDF,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CAAiBhG,GAAIsF,EAAWxG,QAASH,EAAU,iBAAe,WAA5D2G,IAE5B,C,0BCDAW,GAAAzE,EAAAA,EAAAA,GAAA,8BACe,MAAM0E,UACTC,EAAAA,UAURtE,YAAYC,GACRC,MAAMD,GARVE,OAAAC,eAAA,KAAAgE,EAAA,CAAA/D,UAAA,EAAAC,WAAA,KASIM,EAAAA,EAAAA,GAAAJ,KAAI4D,GAAAA,GAA+BG,EAAAA,EAAiB9E,QAAQrC,IAAYoD,KAAKhC,MAC7EgC,KAAKgE,MAAQ,CACTC,SAAS7H,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CAAgClH,SAAO2D,EAAAA,EAAAA,GAAEJ,KAAI4D,GAAAA,IAA6B,GAAAzF,OAAjE6B,KAAKrC,GAAE,iBAE/C,CAKWA,SACP,OAAOqC,KAAKP,MAAM9B,EACtB,CAEWuG,aACP,OAAOlE,KAAKP,MAAMyE,MACtB,CAEWC,4BACP,OAAOnE,KAAKP,MAAM0E,qBACtB,CAEWT,sBACP,OAAO1D,KAAKP,MAAMiE,eACtB,CAEW1F,WACP,OAAOgC,KAAK0D,gBAAgB1F,IAChC,CAEW4E,yBACP,OAAO5C,KAAK0D,gBAAgBd,kBAChC,CAIgBwB,oBACZ,MAAMzG,EAAKqC,KAAKrC,GACVwG,EAAwBnE,KAAKmE,sBAEnCnE,KAAKqE,SAAS,CACVJ,SAAS7H,EAAAA,EAAAA,KAACqH,EAAW,CAA8BR,UAAWtF,EAAImF,OAAQwB,EAAatE,KAAKkE,OAAQlE,KAAK4C,oBAAoB2B,EAAAA,EAAAA,IAAmB,0BACtHvE,KAAK0D,gBAAiBX,GAAK,CAACyB,KAAMA,IAAML,GAAsB,GAAOM,KAAMA,IAAMN,GAAsB,IAAU7H,UAAA8D,EAAAA,EAAAA,GACtIJ,KAAI4D,GAAAA,IAAA,GAAAzF,OAFqBR,EAAE,qBAKxC,CAEgB+G,SACZ,OAAO1E,KAAKgE,MAAMC,OACtB,EAWJ,SAASK,EAAarB,EAAmBL,EAAkD+B,GACvF,MAAM7B,EAAmC,CACrC6B,MAAOA,EACPlI,QAASmI,SAASC,eAAe5B,GACjC6B,MAAM,EACNC,QAAS,eAKb,OAH0B,MAAtBnC,IACAE,EAAOkC,UAAYpC,GAEhBE,CACX,CC1Fe,SAASmC,EAAiB3H,GAAgE,IAA/D,GAACK,EAAE,OAAEuG,EAAM,KAAElG,EAAI,mBAAEkH,GAAwC5H,EACjG,MAAM6H,EAAqBnH,EAAKoH,kBAAkBC,QAAOC,IAAOA,EAAGC,YAE7D9I,EAAU,GACV+I,EAAUxH,EAAKyH,YACrB,IAAK,MAAOC,EAAU5F,KAAW0F,EACxBL,EAAmBQ,SAASD,IAEjCjJ,EAAQmJ,MAAK7E,EAAAA,EAAAA,MAAA,OAAwEnD,UAAU,2BAA0BtB,SAAA,EACrHF,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CACVlH,QAAO,GAAA0B,QAAK0H,EAAAA,EAAAA,IAAoBH,EAASnE,cAAYpD,OAAG4F,EAAAA,EAAiB9E,QAAQ6G,OAAK3H,OAAG4F,EAAAA,EAAiB9E,QAAQ8G,YAAU5H,OAAG4F,EAAAA,EAAiB9E,QAAQ6G,OACxJlI,UAAU,6EACdxB,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CAAClH,QAASqD,EAAOlC,UAAU,wCAAqC,GAAAO,OAJxDR,EAAE,kCAAAQ,OAAiCuH,EAASnE,eAO1E,OAAOnF,EAAAA,EAAAA,KAAA,OAAoCuB,GAAIuG,EAAQtG,UAAU,gBAAgBoI,QAASd,EAAmB5I,SAAEG,GAAO,GAAA0B,OAAlGR,EAAE,qBAC1B,C,eCPe,SAAS8E,EAAanF,GAA6C,IAA5C,GAACK,KAAO+F,GAAgCpG,EAC1E,MAAO4H,EAAoBf,IAA0B8B,EAAAA,EAAAA,WAAS,IACxD,KAACjI,GAAS0F,EAEVnC,EAAcvD,EAAKkI,QACnBjD,EAAS,GAAA9E,OAAMR,EAAE,KAAAQ,OAAIgI,EAAAA,EAAgBC,UAAU7E,IAC/C2C,EAAM,GAAA/F,OAAM8E,EAAS,SAE3B,OAAOlC,EAAAA,EAAAA,MAAA,OAAgDpD,GAAE,GAAAQ,OAAK8E,EAAS,cAAcrF,UAAU,iBAAgBtB,SAAA,EAC3GF,EAAAA,EAAAA,KAACyH,EAAoB,CAA0ClG,GAAIsF,EAAWiB,OAAQA,EAAQC,sBAAuBA,EAAuBT,gBAAiBA,GAAgB,GAAAvF,OAA/IoD,EAAW,gBAAApD,OAAeR,EAAE,OAC1DvB,EAAAA,EAAAA,KAAC6I,EAAiB,CAAuCjH,KAAMA,EAAML,GAAIsF,EAAWiB,OAAQA,EAAQgB,mBAAoBA,GAAmB,GAAA/G,OAAhHoD,EAAW,aAAApD,OAAYR,EAAE,QAAyF,GAAAQ,OAF7HoD,EAAW,kBAAApD,OAAiBR,EAAE,KAItD,C","sources":["app/PredefinedMessageApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {DimensionOnList}              from 'app/interpreter/DimensionOnList'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport UnfinishedText           from 'app/tools/text/UnfinishedText'\nimport {AbstractSimpleListApp}  from 'app/withInterpreter/AbstractSimpleListApp'\nimport {PredefinedMessages}     from 'core/predefinedMessage/PredefinedMessages'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class PredefinedMessageApp\n    extends AbstractSimpleListApp<PredefinedMessages, AppInterpreterWithSimpleList<PredefinedMessages>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'predefinedMessage'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return 'everyPredefinedMessage (list)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('predefined message.all', {\n            singularName: <UnfinishedText key=\"predefined message (singular name)\">predefined message</UnfinishedText>,//TODO add predefined reference (singular form)\n            pluralName: <UnfinishedText key=\"predefined message (plural name)\">predefined messages</UnfinishedText>,//TODO add predefined reference (plural form)\n        },)\n    }\n\n    protected override _createAppOptionInterpreter() {\n        return new class PredefinedMessageAppInterpreter implements AppInterpreterWithSimpleList<PredefinedMessages> {\n\n            public get content() {\n                return PredefinedMessages.CompanionEnum.get.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): DimensionOnList {\n                return {\n                    default: 1,\n                    small: 2,\n                    medium: 3,\n                    large: 5,\n                    extraLarge: 6,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './AbstractAppWithInterpreter.scss'\n\nimport type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {AppInterpreter}               from 'app/interpreter/AppInterpreter'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport AbstractApp        from 'app/AbstractApp'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\n\nexport abstract class AbstractAppWithInterpreter<const out APP extends AppInterpreter,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewAndRouteName[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: T,) {\n        super(props,)\n    }\n\n    //region -------------------- Getter & create methods --------------------\n\n    /** The {@link ViewDisplays view display} property held by this instance */\n    public get viewDisplay(): ViewDisplays {\n        return this.props.viewDisplay\n    }\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewAndRouteName[]\n\n    private get __possibleViewDisplay(): readonly ViewAndRouteName[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}\n     *\n     * @see DisplayButtonGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const {viewDisplay, _key: key,} = this\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${viewDisplay.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    <DisplayButtonGroup reactKey={key} views={this.__possibleViewDisplay} currentView={viewDisplay}/>\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${viewDisplay.type})`} className=\"app-content\">{viewDisplay.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<const CONTENT extends Content,\n    const out APP extends AppInterpreterWithSimpleList<CONTENT>,\n    const out T extends AppWithInterpreterProperties = AppWithInterpreterProperties,\n    const S extends AppStates = AppStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            [ViewDisplays.SIMPLE_LIST, this.__listRouteName,],\n        ]\n    }\n\n    private get __listRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createSimpleListRouteName()\n    }\n\n    protected abstract _createSimpleListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnSimpleList(enumerable: CONTENT,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const {default: df, small: sm, medium: md, large: lg, extraLarge: xl, extraExtraLarge: xxl,} = optionInterpreter.createListDimension!()\n        const dimensions = `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n        }\n        return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullable<ReactElement> {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: Nullable<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["PredefinedMessageApp","AbstractSimpleListApp","_createKey","_createSimpleListRouteName","_createTitleContent","gameContentTranslation","singularName","_jsx","UnfinishedText","children","pluralName","_createAppOptionInterpreter","content","PredefinedMessages","CompanionEnum","get","values","toArray","createListDimension","default","small","medium","large","extraLarge","DisplayButtonGroup","_ref","reactKey","key","views","currentView","id","className","map","_ref2","view","name","DisplayButton","routeName","concat","_ref3","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","ViewDisplays","current","_possibleViewDisplay","_classPrivateFieldLooseKey","_key","_appInterpreter","AbstractAppWithInterpreter","AbstractApp","constructor","props","super","Object","defineProperty","writable","value","viewDisplay","this","__possibleViewDisplay","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createPossibleViewDisplay","_classPrivateFieldLoo3","_classPrivateFieldLoo4","_appOptionInterpreter","_classPrivateFieldLoo5","_classPrivateFieldLoo6","_createAsideContent","_createDescription","isHidden","_mainContent","_jsxs","createComponent","_routeName","arguments","SIMPLE_LIST","__listRouteName","_createUniqueNameOnSimpleList","enumerable","englishName","createList","optionInterpreter","df","sm","md","lg","xl","extraExtraLarge","xxl","dimensions","size","length","contentToDisplay","Array","index","uniqueEnglishName","englishNameInHtml","NameComponent","reference","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","contentTranslation","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}