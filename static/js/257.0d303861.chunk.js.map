{"version":3,"file":"static/js/257.0d303861.chunk.js","mappings":"oRAce,SAASA,EAAT,GAAuI,IAAlGC,EAAiG,EAAjGA,QAASC,EAAwF,EAAxFA,QAAeC,EAAyE,EAA/EC,KAAoBC,EAA2D,EAAlEC,MAAkBC,GAAgD,YACjJ,EAAgD,iBAATJ,EAAoB,CAACA,EAX1B,gBAWuDA,EAAzF,eAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAmD,iBAAVJ,EAAqB,CAACA,EAX5B,eAW2DA,EAA9F,eAAOK,EAAP,KAAmBC,EAAnB,KAEA,OAAO,SAAC,WAAD,QAAsBT,QAAO,yBAAOA,QAAP,IAAOA,EAAAA,EAAW,IAAlB,CAAwBD,EAAUQ,EAAYE,IAAcV,QAASA,EAASG,KAAMI,EAAWF,MAAOI,GAAgBH,GAC7J,C,4ICVc,SAASK,EAAT,GAAkH,IAAnFX,EAAkF,EAAlFA,QAAeE,EAAmE,EAAzEC,KAAoBC,EAAqD,EAA5DC,MAAkBC,GAA0C,YAC5H,OAAO,SAAC,WAAD,QAAeM,QAASZ,EAAUE,EAAQE,GAAYE,GAChE,C,+GCMc,SAASO,EAA2BC,GAC/C,OAAO,SAACf,EAAA,SAAD,QACHI,KAAM,EAACY,EAAAA,EAAAA,IAAmB,OAXL,YAYrBV,MAAO,EAACU,EAAAA,EAAAA,IAAmB,MAXP,YAYhBD,GAEX,C","sources":["app/tools/text/BooleanResultTextComponent.tsx","app/tools/text/BooleanTextComponent.tsx","app/tools/text/YesOrNoResultTextComponent.tsx"],"sourcesContent":["import type {BooleanResultTextProperties, TextColor} from './properties/BooleanResultTextProperties'\n\nimport BooleanTextComponent from './BooleanTextComponent'\n\nconst TRUE_DEFAULT_COLOR: TextColor = 'text-success'\nconst FALSE_DEFAULT_COLOR: TextColor = 'text-danger'\n\n/**\n * Create a coloration based on the boolean value.\n *\n * Return a new {@link BooleanTextComponent}\n * with the classes \"text-success\" or \"text-danger\".\n * @reactComponent\n */\nexport default function BooleanResultTextComponent({boolean, classes, true: _true, false: _false, ...otherProperties}: BooleanResultTextProperties,) {\n    const [trueValue, trueColor,] = typeof _true == 'string' ? [_true, TRUE_DEFAULT_COLOR] : _true\n    const [falseValue, falseColor,] = typeof _false == 'string' ? [_false, FALSE_DEFAULT_COLOR] : _false\n\n    return <BooleanTextComponent classes={[...(classes ?? []), (boolean ? trueColor : falseColor)]} boolean={boolean} true={trueValue} false={falseValue} {...otherProperties}/>\n}\n","import type {BooleanTextProperties} from './properties/BooleanTextProperties'\n\nimport TextComponent from './TextComponent'\n\n/**\n * Create a simple {@link TextComponent}\n * with a variable value based on a simple boolean.\n * @reactComponent\n */\nexport default function BooleanTextComponent({boolean, true: _true, false: _false, ...otherProperties}: BooleanTextProperties,) {\n    return <TextComponent content={boolean ? _true : _false} {...otherProperties}/>\n}\n","import './YesOrNoResultTextComponent.scss'\n\nimport type {TextColor}             from './properties/BooleanResultTextProperties'\nimport type {YesOrNoTextProperties} from './properties/YesOrNoTextProperties'\n\nimport BooleanResultTextComponent from './BooleanResultTextComponent'\nimport {contentTranslation}       from '../../../lang/components/translationMethods'\n\nconst YES_COLOR: TextColor = 'text-yes'\nconst NO_COLOR: TextColor = 'text-no'\n\n/**\n * Return a new {@link BooleanResultTextComponent} with a value based on the translation \"Yes\" or \"No\".\n *\n * @return {@link BooleanResultContainer}\n * @reactComponent\n */\nexport default function YesOrNoResultTextComponent(properties: YesOrNoTextProperties,): JSX.Element {\n    return <BooleanResultTextComponent\n        true={[contentTranslation('Yes'), YES_COLOR,]}\n        false={[contentTranslation('No'), NO_COLOR,]}\n        {...properties}\n    />\n}\n"],"names":["BooleanResultTextComponent","boolean","classes","_true","true","_false","false","otherProperties","trueValue","trueColor","falseValue","falseColor","BooleanTextComponent","content","YesOrNoResultTextComponent","properties","contentTranslation"],"sourceRoot":""}