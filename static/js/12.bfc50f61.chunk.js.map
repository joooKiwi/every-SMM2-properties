{"version":3,"sources":["app/withInterpreter/AbstractTableApp.tsx","app/options/component/EmptyAppOption.ts","app/options/EntityAppOption.tsx","app/EveryEntitiesApp.tsx"],"names":["AbstractTableApp","optionInterpreter","content","index","iterable","enumerable","callbackToGetEnumerable","push","englishName","tableOptions","map","tableHeader","createTableContent","flat","this","_appOptionInterpreter","tableProperties","id","_key","__tableContent","headers","key","element","createTableHeader","filter","header","AbstractCardListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","EmptyAppOption","renderContent","EMPTY_ARRAY","renderTableHeader","CourseThemeComponent","lazy","EditorVoiceSoundComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","defaultValue","_createContentOption","get","AppOptionWithContentComponent","__appOptionWithContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","value","typeDisplayed","display","section","images","IMAGES","_lastValueRetrieved","name","NAME","game","GAME","gameStyle","GAME_STYLE","courseTheme","COURSE_THEME","time","TIME","category","CATEGORY","limit","LIMIT","asText","CATEGORY_AS_TEXT","whenAll","WHEN_ALL_SELECTED_GAME","WHEN_ALL_SELECTED_GAME_STYLE","WHEN_ALL_SELECTED_COURSE_THEME","WHEN_ALL_SELECTED_TIME","ifApplicable","acronymOnLimits","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","editor","IMAGES_ON_EDITOR","clearCondition","IMAGES_ON_CLEAR_CONDITION","whilePlaying","IMAGES_ON_WHILE_PLAYING","unused","IMAGES_ON_UNUSED","GameStyles","values","SUPER_MARIO_BROS","Times","Themes","courseThemes","Enum","getValueOn","getValuesOn","AbstractAppOption","state","nextState","enumeration","CALLBACK_TO_GET_ENUMERATION","image","editorImage","_gameStyles","Set","themes","theme","times","src","alt","acronym","clearConditionImage","EmptyEditorImage","__createImageOnClearCondition","__createImageOnEditor","ContentTranslationComponent","translationKey","subHeaders","renderSingleComponent","className","CommonOptions","getNameContent","editorVoiceSound","nameHeader","entity","reference","displayAllAsText","GameContentTranslationComponent","categoryName","categoryNameContainer","getCategoryContent","EntityCategories","getValue","english","imagePath","categoryHeader","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","englishNameInHtml","limits","displayAcronymIfApplicable","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","EntityLimitTypes","EDITOR","englishCommonText","tooltip","namespace","Games","SUPER_MARIO_MAKER_1","path","SUPER_MARIO_MAKER_2","WHILE_PLAYING","SimpleSound","EveryEntitiesApp","props","REFERENCE","createDefaultState","Entities","htmlName","editorVoice1","fileName","editorVoice2","europeanFileName","categoryEnglish","EMPTY_REACT_ELEMENT","source","title","caption","option"],"mappings":"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","file":"static/js/12.bfc50f61.chunk.js","sourcesContent":["import type {AppInterpreterWithTable}      from '../interpreter/AppInterpreterWithTable';\nimport type {AppWithVariableDisplayStates} from '../AppStates.types';\nimport type {ReactElement}                 from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}          from '../tools/table/SimpleHeader';\nimport type {SingleTableContent}           from '../tools/table/Table.types';\n\nimport {AbstractCardListApp} from './AbstractCardListApp';\nimport Table                 from '../tools/table/Table';\nimport {ViewDisplays}        from './ViewDisplays';\n\nexport abstract class AbstractTableApp<APP extends AppInterpreterWithTable,\n    T = {}, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractCardListApp<APP, T, S> {\n\n    //region -------------------- Attributes --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST, ViewDisplays.TABLE,];\n\n    //endregion -------------------- Attributes --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractTableApp.#APP_OPTION_INTERPRETER;\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    private __tableContent(optionInterpreter: APP,): readonly SingleTableContent[] {\n        const content = [] as SingleTableContent[];\n        let index = 1;\n        for (const enumerable of optionInterpreter.iterable) {\n            optionInterpreter.callbackToGetEnumerable = () => enumerable;\n\n            content.push([\n                enumerable.englishName,\n                ...[<>{index}</>,\n                    optionInterpreter.tableOptions.map(tableHeader => optionInterpreter.createTableContent(tableHeader))\n                ].flat(2)\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    /**\n     * Create a table element to display the information\n     *\n     * @see Table\n     */\n    public createTable(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter;\n        return <Table key={`${this._key} (table)`}\n                      {...optionInterpreter.tableProperties}\n                      id={`${this._key}-table`}\n                      content={this.__tableContent(optionInterpreter)}\n                      headers={[\n                          {key: 'originalOrder', element: <>#</>,},\n                          ...(optionInterpreter.tableOptions\n                              .map(tableHeader => optionInterpreter.createTableHeader(tableHeader))\n                              .filter(header => header != null) as SingleHeaderContent[])\n                      ]}/>;\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppOptionWithTable}   from './AppOptionWithTable';\nimport type {AppOptionWithContent} from './AppOptionWithContent';\n\nimport {EMPTY_ARRAY} from '../../../util/emptyVariables';\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY;\n    public readonly renderTableHeader = null;\n\n}\n","import {Fragment, lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {AppOptionStatic}                                                                                                                                                       from './AppOption';\nimport type {Entities}                                                                                                                                                              from '../../core/entity/Entities';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './EntityAppOption.types';\nimport type {EntityAppStates}                                                                                                                                                       from '../AppStates.types';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\nimport type {ReactComponentWithState}                                                                                                                                               from '../../util/react/ReactComponent';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\n\nimport {AbstractAppOption}             from './AbstractAppOption';\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {Enum}                          from '../../util/enum/Enum';\nimport {EntityCategories}              from '../../core/entityCategory/EntityCategories';\nimport {EntityLimitTypes}              from '../../core/entityLimit/EntityLimitTypes';\nimport {EMPTY_ARRAY}                   from '../../util/emptyVariables';\nimport {EmptyAppOption}                from './component/EmptyAppOption';\nimport {EmptyEditorImage}              from '../../core/entity/images/editor/EmptyEditorImage';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\nimport {GameStyles}                    from '../../core/gameStyle/GameStyles';\nimport {Themes}                        from '../../core/theme/Themes';\nimport {Times}                         from '../../core/time/Times';\nimport {ViewDisplays}                  from '../withInterpreter/ViewDisplays';\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =      lazy(() => import('../../core/theme/CourseTheme.component'));\nconst EditorVoiceSoundComponent = lazy(() => import('../../core/editorVoice/EditorVoiceSound.component'));\nconst GameComponent =             lazy(() => import('../../core/game/Game.component'));\nconst GameStyleComponent =        lazy(() => import('../../core/gameStyle/GameStyle.component'));\nconst LimitComponent =            lazy(() => import('../../core/entityLimit/Limit.component'));\nconst TimeComponent =             lazy(() => import('../../core/time/Time.component'));\nconst TextComponent =             lazy(() => import( '../tools/text/TextComponent'));\n\n//endregion -------------------- dynamic imports --------------------\n\nexport abstract class EntityAppOption\n    extends AbstractAppOption<boolean, EntityAppStates, Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every images.\n     */\n    public static/* readonly*/ IMAGES;\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static/* readonly*/ IMAGES_ON_EDITOR;\n    public static/* readonly*/ IMAGES_ON_CLEAR_CONDITION;\n    public static/* readonly*/ IMAGES_ON_WHILE_PLAYING;\n    public static/* readonly*/ IMAGES_ON_UNUSED;\n\n    public static/* readonly*/ NAME;\n\n    public static/* readonly*/ GAME;\n    public static/* readonly*/ WHEN_ALL_SELECTED_GAME;\n\n    public static/* readonly*/ GAME_STYLE;\n    public static/* readonly*/ WHEN_ALL_SELECTED_GAME_STYLE;\n\n    public static/* readonly*/ COURSE_THEME;\n    public static/* readonly*/ WHEN_ALL_SELECTED_COURSE_THEME;\n\n    public static/* readonly*/ TIME;\n    public static/* readonly*/ WHEN_ALL_SELECTED_TIME;\n\n    public static/* readonly*/ CATEGORY;\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static/* readonly*/ CATEGORY_AS_TEXT;\n\n    public static/* readonly*/ LIMIT;\n    public static/* readonly*/ IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT;\n\n    static {\n        this.IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.images;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.section.images = value;\n            }\n\n            private get __createImageOnEditor(): PossibleRenderReactElement {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const image = enumeration.editorImage;\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`editor image (${enumeration.englishName})`}>{\n                    [...new Set(EntityAppOption.themes.map(theme =>\n                        EntityAppOption.times.map(time => image.get(true, gameStyle, theme, time,)\n                            .map((image, index,) => [theme, time, image, index,] as const))).flat(2))]\n                        .map(([theme, time, image, index,]) =>\n                            <img src={image} alt={`${gameStyle.acronym}-${theme.englishName}-${time.englishName}-${index + 1}`}/>)\n                }</Fragment>);\n            }\n\n            private get __createImageOnClearCondition(): PossibleRenderReactElement {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const image = enumeration.clearConditionImage;\n\n                return EntityAppOption._gameStyles.map(gameStyle =>\n                    <Fragment key={`clear condition image (${enumeration.englishName})`}>{\n                        image.get(gameStyle).map((image, index,) => <img src={image} alt={`${gameStyle.acronym}-${index + 1}`}/>)\n                    }</Fragment>);\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                    return enumeration.editorImage === EmptyEditorImage.get\n                        ? this.__createImageOnClearCondition\n                        : this.__createImageOnEditor;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {\n                    key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                    subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                        ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n                };\n            }\n\n        }(true,);\n        this.IMAGES_ON_EDITOR = new class EntityAppOption_ImagesOnEditor extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.images.editor;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.images.editor = value;\n            }\n\n        }(true,);\n        this.IMAGES_ON_CLEAR_CONDITION = new class EntityAppOption_ImagesOnClearCondition extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.images.clearCondition;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.images.clearCondition = value;\n            }\n\n        }(true,);\n        this.IMAGES_ON_WHILE_PLAYING = new class EntityAppOption_ImagesOnWhilePlaying extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.images.whilePlaying;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.images.whilePlaying = value;\n            }\n\n        }(false,);\n        this.IMAGES_ON_UNUSED = new class EntityAppOption_ImagesOnUnused extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.images.unused;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.images.unused = value;\n            }\n\n        }(false,);\n\n        this.NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.name;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.section.name = value;\n            }\n\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                    return <div className=\"nameAndEditorVoiceSound-container container\">\n                        {CommonOptions.get.getNameContent(enumeration)}\n                        <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSound} name={enumeration.englishName}/>\n                    </div>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return CommonOptions.get.nameHeader;\n            }\n\n        }(true,);\n\n        this.GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.game;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.game = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                    return <GameComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME.get}/>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,};\n            }\n\n        }(false,);\n        this.WHEN_ALL_SELECTED_GAME = new class EntityAppOption_WhenAllSelectedGame extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.whenAll.game;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.asText.whenAll.game = value;\n            }\n\n        }(false,);\n\n        this.GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.gameStyle;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.gameStyle = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                    return <GameStyleComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_GAME_STYLE.get}/>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {key: 'gameStyle', element: <GameContentTranslationComponent translationKey=\"Game style\"/>,};\n            }\n\n        }(false,);\n        this.WHEN_ALL_SELECTED_GAME_STYLE = new class EntityAppOption_WhenAllSelectedGameStyle extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.whenAll.gameStyle;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.asText.whenAll.gameStyle = value;\n            }\n\n        }(false,);\n\n        this.COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.courseTheme;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.courseTheme = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                    return <CourseThemeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_COURSE_THEME.get}/>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {key: 'courseTheme', element: <GameContentTranslationComponent translationKey=\"Course theme\"/>,};\n            }\n\n        }(false,);\n        this.WHEN_ALL_SELECTED_COURSE_THEME = new class EntityAppOption_WhenAllSelectedCourseTheme extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.whenAll.courseTheme;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.asText.whenAll.courseTheme = value;\n            }\n\n        }(false,);\n\n        this.TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.time;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.time = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n\n                return () => {\n                    const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference;\n\n                    return <TimeComponent reference={entity} name={entity} displayAllAsText={EntityAppOption.WHEN_ALL_SELECTED_TIME.get}/>;\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {key: 'time', element: <GameContentTranslationComponent translationKey=\"Time\"/>,};\n            }\n\n        }(false,);\n        this.WHEN_ALL_SELECTED_TIME = new class EntityAppOption_WhenAllSelectedTime extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.whenAll.time;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,): void {\n                nextState.display.asText.whenAll.time = value;\n            }\n\n        }(false,);\n\n        this.CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.category;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.category = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                        categoryName = enumeration.reference.categoryNameContainer;\n\n                    return CommonOptions.get.getCategoryContent(enumeration,\n                        () => EntityAppOption.CATEGORY_AS_TEXT.get\n                        ? categoryName\n                        : EntityCategories.getValue(categoryName.english)!.imagePath,);\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return CommonOptions.get.categoryHeader;\n            }\n\n        }(true,);\n        this.CATEGORY_AS_TEXT = new class EntityAppOption_CategoryAsText extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.category;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.asText.category = value;\n            }\n\n        }(false,);\n\n        this.LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.section.limit;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.section.limit = value;\n            }\n\n            protected override get _createContentOption(): PossibleOptionWithContent {\n                return () => {\n                    const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION();\n                    const entity = enumeration.reference;\n\n                    const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds;\n                    const editorLimit_SMM2 = entity.editorLimit_smm2;\n\n                    return [\n                        editorLimit_SMM1And3DS == null\n                            ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                            : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS}\n                                              displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                        editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                            ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                            : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2}\n                                              displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                        <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()}\n                                        displayAcronymIfApplicable={EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT.get}/>,\n                    ];\n                };\n            }\n\n            protected override get _createTableHeaderOption(): PossibleOptionWithTable {\n                return {\n                    key: 'limit', element: <GameContentTranslationComponent translationKey=\"Limit\"/>,\n                    subHeaders: [\n                        {\n                            key: 'limit-editor', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.EDITOR.englishCommonText}/>,\n                            tooltip: {namespace: 'gameContent', translationKey: 'Limit in the editor',},\n                            subHeaders: [\n                                {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                                {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                            ],\n                        },\n                        {\n                            key: 'limit-whilePlaying', element: <GameContentTranslationComponent translationKey={EntityLimitTypes.WHILE_PLAYING.englishCommonText}/>,\n                            tooltip: {namespace: 'gameContent', translationKey: 'Limit while playing',},\n                        },\n                    ],\n                };\n            }\n\n        }(true,);\n        this.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new class EntityAppOption_IfApplicableAcronymOnLimitAsText extends EntityAppOption {\n\n            protected override _get(state: EntityAppStates,): boolean {\n                return state.display.asText.ifApplicable.acronymOnLimits;\n            }\n\n            protected override _set(nextState: EntityAppStates, value: boolean,) {\n                nextState.display.asText.ifApplicable.acronymOnLimits = value;\n            }\n\n        }(true,);\n    }\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum attributes --------------------\n\n    static [index: number]: EntityAppOption;\n\n    //endregion -------------------- Enum attributes --------------------\n    //region -------------------- Attributes --------------------\n\n    static #REFERENCE: ReactComponentWithState<EntityAppStates>;\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EveryEntitiesApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities;\n\n    static #gameStyles?: readonly GameStyles[];\n    static #gameStyles_unusedImages?: readonly [GameStyles,] | readonly [];\n    static #times?: readonly Times[];\n    static #themes?: readonly Themes[];\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Attributes --------------------\n\n    private constructor(defaultValue: boolean,) {\n        super(defaultValue,);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public static get REFERENCE(): ReactComponentWithState<EntityAppStates> {\n        return this.#REFERENCE;\n    }\n\n    public static set REFERENCE(value: ReactComponentWithState<EntityAppStates>,) {\n        this.#REFERENCE = value;\n    }\n\n    public static get createDefaultState(): EntityAppStates {\n        return {\n            typeDisplayed: ViewDisplays.TABLE,\n            display: {\n                section: {\n                    images: EntityAppOption.IMAGES._lastValueRetrieved,\n                    name: EntityAppOption.NAME._lastValueRetrieved,\n                    game: EntityAppOption.GAME._lastValueRetrieved,\n                    gameStyle: EntityAppOption.GAME_STYLE._lastValueRetrieved,\n                    courseTheme: EntityAppOption.COURSE_THEME._lastValueRetrieved,\n                    time: EntityAppOption.TIME._lastValueRetrieved,\n                    category: EntityAppOption.CATEGORY._lastValueRetrieved,\n                    limit: EntityAppOption.LIMIT._lastValueRetrieved,\n                },\n                asText: {\n                    category: EntityAppOption.CATEGORY_AS_TEXT._lastValueRetrieved,\n                    whenAll: {\n                        game: EntityAppOption.WHEN_ALL_SELECTED_GAME._lastValueRetrieved,\n                        gameStyle: EntityAppOption.WHEN_ALL_SELECTED_GAME_STYLE._lastValueRetrieved,\n                        courseTheme: EntityAppOption.WHEN_ALL_SELECTED_COURSE_THEME._lastValueRetrieved,\n                        time: EntityAppOption.WHEN_ALL_SELECTED_TIME._lastValueRetrieved,\n                    },\n                    ifApplicable: {\n                        acronymOnLimits: EntityAppOption.IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT._lastValueRetrieved,\n                    },\n                },\n                images: {\n                    editor: EntityAppOption.IMAGES_ON_EDITOR._lastValueRetrieved,\n                    clearCondition: EntityAppOption.IMAGES_ON_CLEAR_CONDITION._lastValueRetrieved,\n                    whilePlaying: EntityAppOption.IMAGES_ON_WHILE_PLAYING._lastValueRetrieved,\n                    unused: EntityAppOption.IMAGES_ON_UNUSED._lastValueRetrieved,\n                },\n            },\n        };\n    }\n\n\n    protected static get _gameStyles() {\n        return this.#gameStyles ??= GameStyles.values;\n    }\n\n    protected static get _gameStyles_unusedImages() {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,];\n    }\n\n    protected static get times() {\n        return this.#times ??= Times.values;\n    }\n\n    protected static get themes() {\n        return this.#themes ??= Themes.courseThemes;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected get _createContentOption(): PossibleOptionWithContent {\n        return null;\n    }\n\n    protected get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption;\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,);\n        }\n        return this.#appOptionWithContent;\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.get\n            ? this.__appOptionWithContent.renderContent\n            : EMPTY_ARRAY;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected get _createTableHeaderOption(): PossibleOptionWithTable {\n        return null;\n    }\n\n    protected get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption;\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,);\n        }\n        return this.#appOptionWithTable;\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.get\n            ? this.__appOptionWithTable.renderTableHeader\n            : null;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<EntityAppOption> & AppOptionStatic<EntityAppStates> {\n        return EntityAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends EntityAppOption = EntityAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): EntityAppOption\n    public static getValue(value: PossibleValue,): | EntityAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = | (() => PossibleRenderReactElement) | null;\ntype PossibleOptionWithTable = | SingleHeaderContent | null;\n","import './EveryEntitiesApp.scss';\nimport './options/EntityAppOption.scss';\n\nimport {lazy} from 'react';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {EntityAppStates}                                    from './AppStates.types';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport {Entities}                      from '../core/entity/Entities';\nimport {EntityAppOption}               from './options/EntityAppOption';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\n\nconst SimpleSound = lazy(() => import('./tools/sounds/SimpleSound'));\n\n/**\n * @reactComponent\n */\nexport default class EveryEntitiesApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>, {}, EntityAppStates> {\n\n    public constructor(props: {},) {\n        super(props,);\n        EntityAppOption.REFERENCE = this;\n        this.state = EntityAppOption.createDefaultState;\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'entity';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every entities\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable(): IterableIterator<Entities> {\n                return Entities[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent({englishNameInHtml: htmlName, reference, editorVoiceSound: {fileName: editorVoice1, europeanFileName: editorVoice2,},}: Entities,): ReactElement {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`;//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    {editorVoice1 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice1} title={`${htmlName} - editor voice`}/>}\n                    {editorVoice2 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={editorVoice2} title={`${htmlName} - editor voice (european)`}/>}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): EntityAppOption[] {\n                return [EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    EntityAppOption.GAME,\n                    EntityAppOption.GAME_STYLE,\n                    EntityAppOption.COURSE_THEME,\n                    EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every entities\"/>,\n                };\n            }\n\n            public createTableContent(option: EntityAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: EntityAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}