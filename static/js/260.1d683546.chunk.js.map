{"version":3,"file":"static/js/260.1d683546.chunk.js","mappings":"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","sources":["app/CourseTagApp.tsx","app/tools/button/LinkButton.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import './CourseTagApp.scss'\n\nimport type {CourseTagAppProperties}                               from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList,}                          from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {CourseTagTypes}                                       from 'app/property/CourseTagTypes'\nimport type {ClassWithType}                                        from 'core/ClassWithType'\nimport type {CourseTags}                                           from 'core/courseTag/CourseTags'\nimport type {PossibleRouteName}                                    from 'route/EveryRoutes.types'\n\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport {AbstractCardListApp}                        from 'app/withInterpreter/AbstractCardListApp'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\n\n//region -------------------- Import from deconstruction --------------------\n\nconst {TAG, COURSE,} = OtherWordInTheGames\n\n//endregion -------------------- Import from deconstruction --------------------\n\nexport default class CourseTagApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<CourseTags>, CourseTagAppProperties>\n    implements ClassWithType<CourseTagTypes> {\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): CourseTagTypes {\n        return this.props.type\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'courseTag'\n    }\n\n\n    protected override _createSimpleListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (list)`\n    }\n\n    protected override _createCardListRouteName(): PossibleRouteName {\n        return `${this.type.routeName} (card)`\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('course tag.all', {\n            course: COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.singularEnglishName).toLowerCase(),\n            courses: COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(COURSE.pluralEnglishName).toLowerCase(),\n            tag: TAG.singularLowerCaseNameOnReference,\n            tags: TAG.pluralLowerCaseNameOnReference,\n        },)\n    }\n\n    protected override _createAsideContent(): NullOr<ReactElementOrString> {\n        const {type, viewDisplay,} = this\n\n        return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n            <LinkButton partialId=\"everyCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.allRouteName)} color={type.allColor}>{contentTranslation('All')}</LinkButton>\n            <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n                <LinkButton partialId=\"officialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.officialRouteName)} color={type.officialColor}>{contentTranslation('Official.Yes')}</LinkButton>\n                <LinkButton partialId=\"unofficialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.unofficialRouteName)} color={type.unofficialColor}>{contentTranslation('Official.No')}</LinkButton>\n            </div>\n            <LinkButton partialId=\"makerCentralCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.makerCentralRouteName)} color={type.makerCentralColor}>Maker Central</LinkButton>\n        </div>\n    }\n\n    protected override _createAppOptionInterpreter() {\n        const $this = this\n\n        return new class CourseTagAppInterpreter implements AppInterpreterWithCardList<CourseTags> {\n\n            public get content() {\n                return $this.type.content\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n                return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n                //TODO add Maker Central name\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    partialId: string\n\n    routeName: Nullable<PossibleRouteName>\n\n    color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {PossibleRouteName}            from 'route/EveryRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: PossibleRouteName\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): PossibleRouteName {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): PossibleRouteName\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const cardListDimension = optionInterpreter.createCardListDimension()\n        const dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension,).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["TAG","OtherWordInTheGames","COURSE","CourseTagApp","_ref","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","this","props","type","value","concat","routeName","_COURSE$singularLower","_COURSE$pluralLowerCa","gameContentTranslation","course","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","courses","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","tag","singularLowerCaseNameOnReference","tags","pluralLowerCaseNameOnReference","viewDisplay","_jsxs","id","className","children","_jsx","LinkButton","partialId","getRoutePathAsListOnly","allRouteName","color","allColor","contentTranslation","officialRouteName","officialColor","unofficialRouteName","unofficialColor","makerCentralRouteName","makerCentralColor","$this","CourseTagAppInterpreter","content","_ref2","courseTag","reference","name","englishName","firstAppearance","simpleName","AbstractCardListApp","disabled","Link","to","routeFromName","_routeName","_classPrivateFieldLooseKey","_AbstractSimpleListAp","_this","_len","length","args","Array","_key","call","Object","defineProperty","_assertThisInitialized","writable","_toConsumableArray","_get","_getPrototypeOf","prototype","ViewDisplays","CARD_LIST","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createCardListRouteName","enumerable","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","size","contentToDisplay","index","uniqueEnglishName","_createUniqueNameOnCardList","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","createCardListContent","_Fragment","AbstractSimpleListApp"],"sourceRoot":""}