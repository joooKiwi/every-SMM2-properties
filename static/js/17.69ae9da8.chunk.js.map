{"version":3,"sources":["app/withInterpreter/AbstractCardListApp.tsx","app/SoundEffectCategoryApp.tsx"],"names":["AbstractCardListApp","enumerable","englishName","optionInterpreter","this","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp","ViewDisplays","SIMPLE_LIST","CARD_LIST","SoundEffectCategoryApp","props","state","typeDisplayed","translationKey","SoundEffectCategories","Symbol","iterator","small","medium","large","source","imagePath","fallbackName"],"mappings":"wSAUsBA,EAAtB,gLAWI,WACI,OAAO,YAAAA,EAAP,QAZR,yCAeI,SAAsCC,GAElC,OAAOA,EAAWC,cAjB1B,4BA2BI,WACI,IADkC,EAC5BC,EAAoBC,KAAKC,sBAC3BC,EAAMF,KAAKG,KACXC,EAAoBL,EAAkBM,0BACtCC,EAAa,IAAIC,IAA2C,SAAtBH,EAA+BL,EAAkBS,sBAAwBJ,GAAmBK,mBAEhIC,EAAU,GANkB,cAOTX,EAAkBY,UAPT,IAOlC,2BAAqD,CAAC,IAA3Cd,EAA0C,QAC3Ce,EAAoBZ,KAAKa,4BAA4BhB,GACrDiB,EAAOjB,EAAWkB,UAAUC,cAC5BC,EAAE,UAAMf,EAAN,YAAaL,EAAWqB,kBAAxB,cAGRR,EAAQS,KACJ,qBAA6DF,GAAIA,EAAIG,UAAS,UAAKlB,EAAL,4CAA4CI,GAA1H,SACI,sBAAiEc,UAAU,yCAA3E,UACI,cAAC,UAAD,CAA6DH,GAAG,OAAOH,KAAMA,EAAMO,mBAAmB,QAAtG,UAAuBT,EAAvB,sBACA,qBAAKQ,UAAU,iCAAf,SAAiDrB,EAAkBuB,sBAAsBzB,OAF7F,UAAae,EAAb,qCADJ,UAAaA,EAAb,kCAd0B,8BAsBlC,OAAO,mCAAGF,QAjDlB,GAEYa,K,sBAFU3B,E,qBAMwC,CAAC4B,IAAaC,YAAaD,IAAaE,c,iMCAjFC,E,kDAGjB,WAAmBC,GAAwB,IAAD,8BACtC,cAAMA,IACDC,MAAQ,CACTC,cAAeN,IAAaE,WAHM,E,8CAS1C,WACI,MAAO,wB,iCAGX,WACI,OAAO,cAAC,IAAD,CAAiCK,eAAe,oC,yCAG3D,WACI,OAAO,0FAEH,WACI,OAAOC,wBAAsBC,OAAOC,cAHrC,iCAQH,WACI,MAAO,CACHC,MAAO,EACPC,OAAQ,KACRC,MAAO,QAZZ,qCAmBH,WACI,MAAO,SApBR,mCAuBH,SAA6BxC,GACzB,OAAO,cAAC,UAAD,CAAOyC,OAAQzC,EAAW0C,UAAWC,aAAY,UAAK3C,EAAWC,YAAhB,kBAxBzD,U,GApBHF","file":"static/js/17.69ae9da8.chunk.js","sourcesContent":["import type {AppInterpreterWithCardList}   from '../interpreter/AppInterpreterWithCardList'\nimport type {AppProperties}                from '../AppProperties.types'\nimport type {AppWithVariableDisplayStates} from '../AppStates.types'\nimport type {ReactElement}                 from '../../util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from './AbstractSimpleListApp'\nimport {ListDimensionCreator}  from './ListDimension.creator'\nimport NameComponent           from '../../lang/name/component/Name.component'\nimport {ViewDisplays}          from './ViewDisplays'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnCardList(enumerable: ReturnType<APP['iterable']['next']>['value'],): string {\n        //TODO find a better way to use the enumerable type than the complicated name\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import './SoundEffectCategoryApp.scss'\n\nimport type {AppInterpreterWithCardList}                           from './interpreter/AppInterpreterWithCardList'\nimport type {AppProperties}                                        from './AppProperties.types'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from './interpreter/DimensionOnList'\nimport type {ReactElement, ReactElementOrString}                   from '../util/react/ReactProperties'\n\nimport {AbstractCardListApp}           from './withInterpreter/AbstractCardListApp'\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent'\nimport Image                           from './tools/images/Image'\nimport {SoundEffectCategories}         from '../core/soundEffectCategory/SoundEffectCategories'\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays'\n\n/**\n * @reactComponent\n */\nexport default class SoundEffectCategoryApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<SoundEffectCategories>> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'soundEffectCategory'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every sound effect categories\"/>\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<SoundEffectCategories> {\n        return new class implements AppInterpreterWithCardList<SoundEffectCategories> {\n\n            public get iterable(): IterableIterator<SoundEffectCategories> {\n                return SoundEffectCategories[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: null,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: SoundEffectCategories,): ReactElement {\n                return <Image source={enumerable.imagePath} fallbackName={`${enumerable.englishName} - image`}/>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}