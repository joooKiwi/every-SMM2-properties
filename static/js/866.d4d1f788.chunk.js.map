{"version":3,"file":"static/js/866.d4d1f788.chunk.js","mappings":"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","sources":["app/withInterpreter/AbstractAppWithInterpreter.tsx","app/withInterpreter/AbstractSimpleListApp.tsx","app/withInterpreter/ListDimension.creator.ts","app/withInterpreter/ViewDisplays.tsx","bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import './AbstractAppWithInterpreter.scss'\n\nimport type {AppProperties}                      from 'app/AppProperties.types'\nimport type {AppWithVariableDisplayStates}       from 'app/AppStates.types'\nimport type {AppInterpreter}                     from 'app/interpreter/AppInterpreter'\nimport type {ReactElement, ReactElementOrString} from 'util/react/ReactProperties'\nimport type {NullOr}                             from 'util/types/nullable'\n\nimport AbstractApp    from 'app/AbstractApp'\nimport UnfinishedText from 'app/tools/text/UnfinishedText'\nimport {ViewDisplays} from 'app/withInterpreter/ViewDisplays'\nimport {assert}       from 'util/utilitiesMethods'\n\nexport abstract class AbstractAppWithInterpreter<APP extends AppInterpreter,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractApp<T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #possibleViewDisplay?: readonly ViewDisplays[]\n    #key?: string\n    #appInterpreter?: APP\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    /**\n     * Get the {@link ViewDisplays view display} state held by this instance.\n     */\n    public get typeDisplayed(): ViewDisplays {\n        assert(this.state != null, 'The state has not been initialised in the constructor.',)\n        assert(this.state.typeDisplayed != null, 'The state \"type displayed\" has not been initialised in the constructor.',)\n        return this.state.typeDisplayed\n    }\n\n    /**\n     * Set the state {@link ViewDisplays view display} to the value received in this instance.\n     *\n     * @param value the new {@link ViewDisplays view display} state\n     */\n    public set typeDisplayed(value: ViewDisplays,) {\n        this.setState({typeDisplayed: value,})\n    }\n\n\n    protected abstract _createPossibleViewDisplay(): readonly ViewDisplays[]\n\n    private get __possibleViewDisplay(): readonly ViewDisplays[] {\n        return this.#possibleViewDisplay ??= this._createPossibleViewDisplay()\n    }\n\n\n    protected abstract _createKey(): string\n\n    /**\n     * Get the group key for each {@link ViewDisplays \"view display\" button}.\n     * It is also used for the {@link Table} id.\n     *\n     * @see #createViewDisplayGroup\n     */\n    protected get _key(): string {\n        return this.#key ??= this._createKey()\n    }\n\n\n    protected abstract _createAppOptionInterpreter(): APP\n\n    /**\n     * Get the application interpreted that hold the data needed for the {@link ViewDisplays}.\n     */\n    protected get _appOptionInterpreter(): APP {\n        return this.#appInterpreter ??= this._createAppOptionInterpreter()\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    #createViewDisplayGroup(typeDisplayed: ViewDisplays, key: string,): ReactElement {\n        return <div key={`${key} (button group)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">\n            {this.__possibleViewDisplay.map(viewDisplay =>\n                viewDisplay.createButton(typeDisplayed, key, nextValue => this.typeDisplayed = nextValue,))}\n        </div>\n    }\n\n    protected abstract _createTitleContent(): ReactElementOrString\n\n    protected _createAsideContent(): NullOr<ReactElementOrString> {\n        return null\n    }\n\n    protected _createDescription(): ReactElementOrString {\n        return <UnfinishedText isHidden>description</UnfinishedText>//TODO add description\n    }\n\n    protected override _mainContent(): ReactElement {\n        const typeDisplayed = this.typeDisplayed\n        const key = this._key\n\n        return <div key={`${key} (sub main container)`} id=\"subMain-container\">\n            <div id={`${key}-container`} className={`${typeDisplayed.htmlType}-container`}>\n                <h1 key={`${key} (title)`} id={`${key}-title`} className=\"app-title\">{this._createTitleContent()}</h1>\n                <aside key={`${key} (view changer)`} id=\"viewChanger-container\">\n                    {this.#createViewDisplayGroup(typeDisplayed, key,)}\n                    {this._createAsideContent()}\n                </aside>\n                <p key={`${key} (description)`}>{this._createDescription()}</p>\n                <div key={`${key} (${typeDisplayed.type})`} className=\"app-content\">{typeDisplayed.createComponent(this,)}</div>\n            </div>\n        </div>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {AppProperties}                from 'app/AppProperties.types'\nimport type {AppWithVariableDisplayStates} from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractAppWithInterpreter} from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport {ViewDisplays}               from 'app/withInterpreter/ViewDisplays'\nimport {ListDimensionCreator}       from 'app/withInterpreter/ListDimension.creator'\nimport NameComponent                from 'lang/name/component/Name.component'\n\nexport abstract class AbstractSimpleListApp<APP extends AppInterpreterWithSimpleList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractAppWithInterpreter<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractSimpleListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnSimpleList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list with only the names displayed.\n     */\n    public createList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            dimensions = optionInterpreter.createListDimension()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnSimpleList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main list container`} id={id}\n                     className={`${key}-container listElement-container ${new ListDimensionCreator(dimensions).createDimensions()}`}>\n                    <span key={`${uniqueEnglishName} - main list text-container`} className=\"simpleListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                    </span>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n","import type {DimensionOnList}                                                                                                                                                                                           from 'app/interpreter/DimensionOnList'\nimport type {DefaultDefaultDimension, DefaultDimensionOnCardList, DefaultExtraExtraLargeDimension, DefaultExtraLargeDimension, DefaultLargeDimension, DefaultMediumDimension, DefaultSmallDimension, PossibleDimension} from 'app/withInterpreter/ListDimension.creator.types'\nimport type {ObjectHolder}                                                                                                                                                                                              from 'util/holder/ObjectHolder'\nimport type {NullOr}                                                                                                                                                                                                    from 'util/types/nullable'\n\nimport {ObjectHolderContainer} from 'util/holder/ObjectHolder.container'\n\nexport class ListDimensionCreator<DEFAULT extends PossibleDimension = PossibleDimension,\n    SMALL extends PossibleDimension = PossibleDimension,\n    MEDIUM extends PossibleDimension = PossibleDimension,\n    LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_LARGE extends PossibleDimension = PossibleDimension,\n    EXTRA_EXTRA_LARGE extends PossibleDimension = PossibleDimension, >\n    implements DimensionOnList<| NonNullable<DEFAULT> | DefaultDefaultDimension, | SMALL | DefaultSmallDimension, | MEDIUM | DefaultMediumDimension, | LARGE | DefaultLargeDimension, | EXTRA_LARGE | DefaultExtraLargeDimension, | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension> {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_DIMENSION: DefaultDimensionOnCardList = {\n        default: 12,\n        small: 4,\n        medium: 3,\n        large: 2,\n        extraLarge: null,\n        extraExtraLarge: null,\n    }\n\n    readonly #dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>//FIXME this type is only there to help typescript (it's not the standard)\n    #smallHolder: ObjectHolder<| SMALL | DefaultSmallDimension>\n    #mediumHolder: ObjectHolder<| MEDIUM | DefaultMediumDimension>\n    #largeHolder: ObjectHolder<| LARGE | DefaultLargeDimension>\n    #extraLargeHolder: ObjectHolder<| EXTRA_LARGE | DefaultExtraLargeDimension>\n    #extraExtraLargeHolder: ObjectHolder<| EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension>\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(dimension: NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>>,) {\n        this.#dimension = dimension\n        this.#smallHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.small\n            return value === undefined ? this.defaultSmall : value\n        })\n        this.#mediumHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.medium\n            return value === undefined ? ListDimensionCreator.defaultMedium : value\n        })\n        this.#largeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.large\n            return value === undefined ? this.defaultLarge : value\n        })\n        this.#extraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraLarge\n            return value === undefined ? this.defaultExtraLarge : value\n        })\n        this.#extraExtraLargeHolder = new ObjectHolderContainer(() => {\n            const value = this.dimensionOrDefault.extraExtraLarge\n            return value === undefined ? this.defaultExtraExtraLarge : value\n        })\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    /** The dimension to interpret */\n    public get dimension(): NullOr<Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE>>> {\n        return this.#dimension\n    }\n\n    /** Get the dimension stored or the default dimension if null */\n    public get dimensionOrDefault(): this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>> {\n        return (this.dimension ?? ListDimensionCreator.DEFAULT_DIMENSION) as (this['dimension'] extends null ? DefaultDimensionOnCardList : Partial<DimensionOnList<DEFAULT, SMALL, MEDIUM, LARGE, EXTRA_LARGE, EXTRA_EXTRA_LARGE>>)\n    }\n\n    //region -------------------- Default dimension --------------------\n\n    public get default(): | NonNullable<DEFAULT> | DefaultDefaultDimension {\n        return this.dimension?.default ?? ListDimensionCreator.DEFAULT_DIMENSION.default\n    }\n\n    public static get defaultDefault(): DefaultDefaultDimension {\n        return this.DEFAULT_DIMENSION.default\n    }\n\n    public get defaultDefault(): DefaultDefaultDimension {\n        return ListDimensionCreator.defaultDefault\n    }\n\n    //endregion -------------------- Default dimension --------------------\n    //region -------------------- Small dimension --------------------\n\n    public get small(): | SMALL | DefaultSmallDimension {\n        return this.#smallHolder.get\n    }\n\n    public static get defaultSmall(): DefaultSmallDimension {\n        return this.DEFAULT_DIMENSION.small\n    }\n\n    public get defaultSmall(): DefaultSmallDimension {\n        return ListDimensionCreator.defaultSmall\n    }\n\n    //endregion -------------------- Small dimension --------------------\n    //region -------------------- Medium dimension --------------------\n\n    public get medium(): | MEDIUM | DefaultMediumDimension {\n        return this.#mediumHolder.get\n    }\n\n    public static get defaultMedium(): DefaultMediumDimension {\n        return this.DEFAULT_DIMENSION.medium\n    }\n\n    public get defaultMedium(): DefaultMediumDimension {\n        return ListDimensionCreator.defaultMedium\n    }\n\n    //endregion -------------------- Medium dimension --------------------\n    //region -------------------- Large dimension --------------------\n\n    public get large(): | LARGE | DefaultLargeDimension {\n        return this.#largeHolder.get\n    }\n\n    public static get defaultLarge(): DefaultLargeDimension {\n        return this.DEFAULT_DIMENSION.large\n    }\n\n    public get defaultLarge(): DefaultLargeDimension {\n        return ListDimensionCreator.defaultLarge\n    }\n\n    //endregion -------------------- Large dimension --------------------\n    //region -------------------- Extra large dimension --------------------\n\n    public get extraLarge(): | EXTRA_LARGE | DefaultExtraLargeDimension {\n        return this.#extraLargeHolder.get\n    }\n\n    public static get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraLarge\n    }\n\n    public get defaultExtraLarge(): DefaultExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraLarge\n    }\n\n    //endregion -------------------- Extra large dimension --------------------\n    //region -------------------- Extra extra large dimension --------------------\n\n    public get extraExtraLarge(): | EXTRA_EXTRA_LARGE | DefaultExtraExtraLargeDimension {\n        return this.#extraExtraLargeHolder.get\n    }\n\n    public static get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return this.DEFAULT_DIMENSION.extraExtraLarge\n    }\n\n    public get defaultExtraExtraLarge(): DefaultExtraExtraLargeDimension {\n        return ListDimensionCreator.defaultExtraExtraLarge\n    }\n\n    //endregion -------------------- Extra extra large dimension --------------------\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    // public createDimensions(): PossibleClassDimension<this['default'], this['small'], this['medium'], this['large'], this['extraLarge'], this['extraExtraLarge']>\n    /**\n     * <p>\n     *     Create the dimension of \"card-list-container\".\n     * </p>\n     *\n     * <p>\n     *     It create the attribute col-<b>[DIMENSION]</b>-<b>[AMOUNT]</b>.<br/>\n     *     It will always have a default dimension (col-<b>[AMOUNT]</b>).\n     * </p>\n     *\n     * <p>\n     *     But for the other dimensions, they can be nullable.\n     *     The format is \"col-<b>[DIMENSION]</b> [col-sm-<b>[DIMENSION]</b>]? [col-md-<b>[DIMENSION]</b>]? [col-lg-<b>[DIMENSION]</b>]? [col-xl-<b>[DIMENSION]</b>]? [col-xxl-<b>[DIMENSION]</b>]?\"\n     * </p>\n     * @see PossibleClassDimension\n     */\n    public createDimensions(): string {\n        const sm = this.small,\n            md = this.medium,\n            lg = this.large,\n            xl = this.extraLarge,\n            xxl = this.extraExtraLarge\n\n        return `col-${this.default} ${sm == null ? '' : `col-sm-${sm} `}${md == null ? '' : `col-md-${md} `}${lg == null ? '' : `col-lg-${lg} `}${xl == null ? '' : `col-xl-${xl} `}${xxl == null ? '' : `col-xxl-${xxl} `}`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\n\nimport type {AbstractAppWithInterpreter}      from 'app/withInterpreter/AbstractAppWithInterpreter'\nimport type {AbstractCardListApp}             from 'app/withInterpreter/AbstractCardListApp'\nimport type {AbstractSimpleListApp}           from 'app/withInterpreter/AbstractSimpleListApp'\nimport type {AbstractTableApp}                from 'app/withInterpreter/AbstractTableApp'\nimport type {HTMLType, Names, Ordinals, Type} from 'app/withInterpreter/ViewDisplays.types'\nimport type {ReactElement}                    from 'util/react/ReactProperties'\n\nimport {assert} from 'util/utilitiesMethods'\n\nexport abstract class ViewDisplays\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly TABLE =       new class ViewDisplays_Table extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createTable' in app, 'The application does not handle a table creation.',)\n            return app.createTable()\n        }\n\n    }('table', 'table',)\n    public static readonly SIMPLE_LIST = new class ViewDisplays_SimpleList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createList' in app, 'The application does not handle a \"simple list\" creation.',)\n            return app.createList()\n        }\n\n    }('simple-list', 'list',)\n    public static readonly CARD_LIST =   new class ViewDisplays_CardList extends ViewDisplays {\n\n        public override createComponent(app: PossibleApp,): ReactElement {\n            assert('createCardList' in app, 'The application does not handle a \"card list\" creation.',)\n            return app.createCardList()\n        }\n\n    }('card-list', 'card-list',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ViewDisplays\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #htmlType\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(type: Type, htmlType: HTMLType,) {\n        super()\n        this.#type = type\n        this.#htmlType = htmlType\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get type(): Type {\n        return this.#type\n    }\n\n    public get htmlType(): HTMLType {\n        return this.#htmlType\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract createComponent(app: PossibleApp,): ReactElement\n\n    /**\n     * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n     *\n     * @param currentValue the current value selected in the \"button group\"\n     * @param key the react key\n     * @param callbackOnClick the callback to call when clicking the button (to change the view)\n     */\n    public createButton(currentValue: ViewDisplays, key: string, callbackOnClick: (nextValue: ViewDisplays,) => void,): ReactElement {\n        return this === currentValue\n            ? <button key={`${key} (${this.name})`} className={`btn btn-success bi-${this.htmlType} btn-viewDisplay`} disabled/>\n            : <button key={`${key} (${this.name})`} className={`btn btn-dark bi-${this.htmlType} btn-viewDisplay`} onClick={() => callbackOnClick(this)}/>\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return ViewDisplays\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<ViewDisplays>,): ViewDisplays {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<ViewDisplays> {\n        return Enum.getValuesOn(this)\n    }\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]()\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleApp = | AbstractAppWithInterpreter<any> | AbstractSimpleListApp<any> | AbstractCardListApp<any> | AbstractTableApp<any>\n","import {Popover} from 'bootstrap'\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from 'bootstrap/popover/Popover.types'\n\nimport {BootstrapInstance}                from 'bootstrap/BootstapInstance'\nimport {BootstrapWithBasicEventsInstance} from 'bootstrap/BootstrapWithBasicEventsInstance'\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {}\n    /** @see Popover.Events.show */\n    public static readonly SHOW_EVENT = `show${Popover.EVENT_KEY}` as Popover.Events.show\n    /** @see Popover.Events.shown */\n    public static readonly SHOWN_EVENT = `shown${Popover.EVENT_KEY}` as Popover.Events.shown\n    /** @see Popover.Events.hide */\n    public static readonly HIDE_EVENT = `hide${Popover.EVENT_KEY}` as Popover.Events.hide\n    /** @see Popover.Events.hidden */\n    public static readonly HIDDEN_EVENT = `hidden${Popover.EVENT_KEY}` as Popover.Events.hidden\n    /** @see Popover.Events.inserted */\n    public static readonly INSERTED_EVENT = `inserted${Popover.EVENT_KEY}` as Popover.Events.inserted\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,)\n        this.on(callbacks)\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,)\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,))\n        return this\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted)\n        return this\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,)\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,)\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element)\n    }\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                              from 'bootstrap/popover/Popover.types'\nimport type {ReactElement, ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {PopoverInstance} from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)))\n    return children ?? null\n}\n","import type {SpanPopoverConfiguration}                          from 'bootstrap/popover/Popover.types'\nimport type {ReactElementOrString, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import {Popover}                                       from 'bootstrap'\nimport {Component, type Dispatch, type SetStateAction} from 'react'\n\nimport type {Name}                                                                         from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                                               from 'util/react/ReactComponent'\nimport type {ReactElement}                                                                 from 'util/react/ReactProperties'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages'),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): ReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage)\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`\n\n                return <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${languageTranslation(language.englishName)} ${language.unionTrait} '`,})}>\n                    <TextComponent key={`${id} - text component (${languageKey})`} content={value}/>\n                </li>\n            })\n    }</ul>\n}\n","import './Name.component.scss'\n\nimport {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["AbstractAppWithInterpreter","assert","this","state","typeDisplayed","value","setState","_createPossibleViewDisplay","_createKey","_createAppOptionInterpreter","UnfinishedText","isHidden","key","_key","id","className","htmlType","_createTitleContent","_createAsideContent","_createDescription","createComponent","type","AbstractApp","__possibleViewDisplay","map","viewDisplay","createButton","nextValue","AbstractSimpleListApp","enumerable","englishName","optionInterpreter","_appOptionInterpreter","dimensions","createListDimension","content","iterable","uniqueEnglishName","_createUniqueNameOnSimpleList","name","reference","nameContainer","englishNameInHtml","push","ListDimensionCreator","createDimensions","popoverOrientation","ViewDisplays","dimension","ObjectHolderContainer","dimensionOrDefault","small","undefined","defaultSmall","medium","defaultMedium","large","defaultLarge","extraLarge","defaultExtraLarge","extraExtraLarge","defaultExtraExtraLarge","DEFAULT_DIMENSION","default","defaultDefault","get","sm","md","lg","xl","xxl","Symbol","iterator","currentValue","callbackOnClick","disabled","onClick","Enum","values","TABLE","app","createTable","SIMPLE_LIST","createList","CARD_LIST","createCardList","PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","BootstrapWithBasicEventsInstance","addEventListener","event","children","option","triggers","elementId","useEffect","flat","forEach","TextPopover","otherProperties","TextComponent","NamePopoverComponent","props","ProjectLanguages","listId","setDoesDisplayPopover","createOption","contentTranslation","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","toNameMap","entries","includes","languageKey","style","languageTranslation","unionTrait","NameComponent","useState","english","StringContainer"],"sourceRoot":""}