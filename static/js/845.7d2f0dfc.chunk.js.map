{"version":3,"file":"static/js/845.7d2f0dfc.chunk.js","mappings":"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","sources":["app/SoundEffectCategoryApp.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import './SoundEffectCategoryApp.scss'\n\nimport type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\n\nimport Image                    from 'app/tools/images/Image'\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {SoundEffectCategories}  from 'core/soundEffectCategory/SoundEffectCategories'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport default class SoundEffectCategoryApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<SoundEffectCategories>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'soundEffectCategory'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everySoundEffect (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everySoundEffect (card)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('sound effect category.all')\n    }\n\n    protected override _createAppOptionInterpreter() {\n        return new class SoundEffectCategoryAppInterpreter implements AppInterpreterWithCardList<SoundEffectCategories> {\n\n            public get content() {\n                return SoundEffectCategories.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: null,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: SoundEffectCategories,) {\n                return <Image file={enumerable.imageFile}/>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\nimport {ReactElement}          from 'react'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const cardListDimension = optionInterpreter.createCardListDimension()\n        const dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension,).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["SoundEffectCategoryApp","_AbstractCardListApp","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","gameContentTranslation","SoundEffectCategoryAppInterpreter","get","SoundEffectCategories","values","toArray","small","medium","large","enumerable","_jsx","Image","file","imageFile","AbstractCardListApp","_routeName","_classPrivateFieldLooseKey","_AbstractSimpleListAp","_this","_len","length","args","Array","_key","call","concat","Object","defineProperty","_assertThisInitialized","writable","_toConsumableArray","_get","_getPrototypeOf","prototype","ViewDisplays","CARD_LIST","this","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createCardListRouteName","englishName","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","size","contentToDisplay","index","uniqueEnglishName","_createUniqueNameOnCardList","id","englishNameInHtml","className","children","_jsxs","NameComponent","name","reference","nameContainer","popoverOrientation","createCardListContent","_Fragment","AbstractSimpleListApp"],"sourceRoot":""}