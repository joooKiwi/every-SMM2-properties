{"version":3,"file":"static/js/408.ffc79722.chunk.js","mappings":"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","sources":["external/MakerCentralLinks.ts","app/CourseTagApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["export const MAKER_CENTRAL_LEVEL_LINK = 'https://makercentral.io/levels'\nexport const MAKER_CENTRAL_HOME_LINK = 'https://makercentral.io'\n","import './CourseTagApp.scss'\n\nimport {Link} from 'react-router-dom'\n\nimport type {CourseTagAppProperties}     from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}           from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ClassWithType}              from 'core/ClassWithType'\nimport type {CourseTags}                 from 'core/courseTag/CourseTags'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport {CourseTagTypes}                             from 'app/property/CourseTagTypes'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {MAKER_CENTRAL_LEVEL_LINK}                   from 'external/MakerCentralLinks'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {assert}                                     from 'util/utilitiesMethods'\n\nclass CourseTagAppInterpreter\n    implements AppInterpreterWithCardList<CourseTags>,\n        ClassWithType<CourseTagTypes> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #type\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(type: CourseTagTypes,) {\n        this.#type = type\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get type(): CourseTagTypes {\n        return this.#type\n    }\n\n    public get content() {\n        return this.type.content\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 4,\n            large: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent({reference: courseTag, englishName: name,}: CourseTags,) {\n        return courseTag.firstAppearance == null ? null : <sub key={`${name} - first appearance`}>{courseTag.firstAppearance.simpleName}</sub>\n        //TODO add Maker Central name\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\n/** @reactComponent */\nexport default function CourseTagApp({viewDisplay, type,}: CourseTagAppProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The CourseTagApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n\n    const course = OtherWordInTheGames.COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.singularEnglishName,).toLowerCase()\n    const courses = OtherWordInTheGames.COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.pluralEnglishName,).toLowerCase()\n    const tag = OtherWordInTheGames.TAG.singularLowerCaseNameOnReference\n    const tags = OtherWordInTheGames.TAG.pluralLowerCaseNameOnReference\n\n    const titleContent = gameContentTranslation('course tag.all', {\n        course: course, courses: courses,\n        tag: tag, tags: tags,\n    },)\n    const appInterpreter = new CourseTagAppInterpreter(type,)\n    const viewDisplayAndRouteName = [\n        [ViewDisplays.SIMPLE_LIST, `${type.routeName} (list)`,],\n        [ViewDisplays.CARD_LIST, `${type.routeName} (card)`,],\n    ] as const satisfies readonly ViewAndRouteName[]\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"courseTag\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<CourseTagDescription type={type} viewDisplay={viewDisplay}/>}\n                                 asideContent={<CourseTagAsideContent type={type} viewDisplay={viewDisplay}/>}>\n            <SimpleList reactKey=\"courseTag\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"courseTag\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             description={<CourseTagDescription type={type} viewDisplay={viewDisplay}/>}\n                             asideContent={<CourseTagAsideContent type={type} viewDisplay={viewDisplay}/>}>\n        <CardList reactKey=\"courseTag\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Description content --------------------\n\ninterface CourseTagDescriptionProperties\n    extends ReactProperties {\n\n    readonly type: CourseTagTypes\n\n    readonly viewDisplay: ViewDisplays\n\n}\n\n/** @reactComponent */\nfunction CourseTagDescription({viewDisplay, type,}: CourseTagDescriptionProperties,) {\n    const course = OtherWordInTheGames.COURSE.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.singularEnglishName,).toLowerCase()\n    const courses = OtherWordInTheGames.COURSE.pluralLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.COURSE.pluralEnglishName,).toLowerCase()\n    const tag = OtherWordInTheGames.TAG.singularLowerCaseNameOnReference\n    const tags = OtherWordInTheGames.TAG.pluralLowerCaseNameOnReference\n\n    const officialLink = type === CourseTagTypes.OFFICIAL ? null : viewDisplay.getRoutePathAsListOnly(type.officialRouteName,)\n    const unofficialLink = type === CourseTagTypes.UNOFFICIAL ? null : viewDisplay.getRoutePathAsListOnly(type.unofficialRouteName,)\n    const makerCentralLink = type === CourseTagTypes.MAKER_CENTRAL ? null : viewDisplay.getRoutePathAsListOnly(type.makerCentralRouteName,)\n\n    const routeName = type.routeName\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : `${routeName} (list)` satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : `${routeName} (card)` satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation(`course tag.description.intro page (${type.type})`, {\n                official: <b key=\"official (singular)\">{contentTranslation('Official.singular',).toLowerCase()}</b>,\n                officials: <b key=\"official (plural)\">{contentTranslation('Official.plural',).toLowerCase()}</b>,\n                unofficial: <b key=\"unofficial (singular)\">{contentTranslation('Unofficial.singular',).toLowerCase()}</b>,\n                unofficials: <b key=\"unofficial (plural)\">{contentTranslation('Unofficial.plural',).toLowerCase()}</b>,\n                MakerCentralLink: <Link key=\"Maker Central link\" to={MAKER_CENTRAL_LEVEL_LINK} id=\"makerCentralLink\" className=\"link-primary fw-bold\">Maker Central</Link>,\n                course: course, courses: courses,\n                tag: tag, tags: tags,\n                smm2Image: <GameImage reference={Games.SUPER_MARIO_MAKER_2}/>,\n            },)}\n            {gameContentTranslation('course tag.description.intro references', {\n                course: course, courses: courses,\n                officialLink: <LinkText key=\"official link (singular)\" partialId=\"officialLink\" routeName={officialLink} color=\"primary\">{contentTranslation('Official.singular',).toLowerCase()}</LinkText>,\n                officialsLink: <LinkText key=\"official link (plural)\" partialId=\"officialLink\" routeName={officialLink} color=\"primary\">{contentTranslation('Official.plural',).toLowerCase()}</LinkText>,\n                unofficialLink: <LinkText key=\"unofficial link (singular)\" partialId=\"unofficialLink\" routeName={unofficialLink} color=\"primary\">{contentTranslation('Unofficial.singular',).toLowerCase()}</LinkText>,\n                unofficialsLink: <LinkText key=\"unofficial link (plural)\" partialId=\"unofficialLink\" routeName={unofficialLink} color=\"primary\">{contentTranslation('Unofficial.plural',).toLowerCase()}</LinkText>,\n                MakerCentralLink: <LinkText key=\"Maker Central link\" partialId=\"makerCentralLink\" routeName={makerCentralLink} color=\"primary\">Maker Central</LinkText>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('course tag.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface CourseTagAsideContentProperties\n    extends ReactProperties {\n\n    readonly type: CourseTagTypes\n\n    readonly viewDisplay: ViewDisplays\n\n}\n\n/** @reactComponent */\nfunction CourseTagAsideContent({viewDisplay, type,}: CourseTagAsideContentProperties,) {\n    return <div id=\"courseTag-linkButtons-container\" className=\"btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"everyCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.allRouteName,)} color={type.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"courseTag-linkButton-officialAndUnofficial-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"officialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.officialRouteName,)} color={type.officialColor}>{contentTranslation('Official.singular',)}</LinkButton>\n            <LinkButton partialId=\"unofficialCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.unofficialRouteName,)} color={type.unofficialColor}>{contentTranslation('Unofficial.singular',)}</LinkButton>\n        </div>\n        <LinkButton partialId=\"makerCentralCourseTag\" routeName={viewDisplay.getRoutePathAsListOnly(type.makerCentralRouteName,)} color={type.makerCentralColor}>Maker Central</LinkButton>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <div className=\"description-container\">{description}</div>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or a simple underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["MAKER_CENTRAL_LEVEL_LINK","_type","_classPrivateFieldLooseKey","CourseTagAppInterpreter","constructor","type","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","content","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","_ref","reference","courseTag","englishName","name","firstAppearance","_jsx","children","simpleName","concat","CourseTagApp","_ref2","_OtherWordInTheGames$","_OtherWordInTheGames$2","viewDisplay","assert","ViewDisplays","TABLE","course","OtherWordInTheGames","COURSE","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","courses","pluralLowerCaseNameOnReferenceOrNull","pluralEnglishName","tag","TAG","singularLowerCaseNameOnReference","tags","pluralLowerCaseNameOnReference","titleContent","gameContentTranslation","appInterpreter","viewDisplayAndRouteName","SIMPLE_LIST","routeName","CARD_LIST","SubMainContainer","reactKey","description","CourseTagDescription","asideContent","CourseTagAsideContent","SimpleList","interpreter","CardList","_ref3","_OtherWordInTheGames$3","_OtherWordInTheGames$4","officialLink","CourseTagTypes","OFFICIAL","getRoutePathAsListOnly","officialRouteName","unofficialLink","UNOFFICIAL","unofficialRouteName","makerCentralLink","MAKER_CENTRAL","makerCentralRouteName","listLink","cardLink","_jsxs","_Fragment","official","contentTranslation","officials","unofficial","unofficials","MakerCentralLink","Link","to","id","className","smm2Image","GameImage","Games","SUPER_MARIO_MAKER_2","LinkText","partialId","color","officialsLink","unofficialsLink","cardsLink","_ref4","LinkButton","allRouteName","allColor","officialColor","unofficialColor","makerCentralColor","DisplayButtonGroup","key","views","currentView","map","view","DisplayButton","pathname","currentPath","useLocation","path","routeFromName","htmlType","disabled","onClick","CompanionEnum","get","current","alert","UnfinishedText","isHidden","_keyRetriever","keyRetriever","enumerable","dimensions","df","sm","md","lg","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","length","contentToDisplay","Array","index","uniqueKey","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","super","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}