{"version":3,"sources":["app/tools/text/BooleanTextComponent.tsx","app/options/CommonOptions.tsx","app/tools/text/BooleanResultTextComponent.tsx","app/tools/text/YesOrNoResultTextComponent.tsx","app/options/ThemeAppOption.tsx","app/EveryThemesApp.tsx"],"names":["BooleanTextComponent","boolean","_true","true","_false","false","otherProperties","content","Image","lazy","NameComponent","CommonOptions","this","key","element","translationKey","enumeration","id","name","reference","popoverOrientation","imagePath_or_nameCallback","categoryNameContainer","EmptyStringName","get","EMPTY_REACT_ELEMENT","imagePath_or_name","englishName","english","startingKey","source","fallbackName","englishNameInHtml","BooleanResultTextComponent","classes","trueValue","trueColor","falseValue","falseColor","YesOrNoResultTextComponent","properties","translation","NightEffectComponent","Symbol","iterator","ThemeAppOption","AppOptionWithContentComponent","_createContentOption","__appOptionWithContent","renderContent","AppOptionWithTableComponent","_createTableHeaderOption","__appOptionWithTable","renderTableHeader","value","Enum","getValueOn","getValuesOn","values","IMAGE","CALLBACK_TO_GET_ENUMERATION","renderSingleComponent","endlessMarioImagePath","ContentTranslationComponent","subHeaders","NAME","getNameContent","nameHeader","COURSE_AND_WORLD_THEME","isInCourseTheme","isInWorldTheme","BASE_PATH","tooltip","namespace","GAME","isInSuperMarioMaker1","isInSuperMarioMakerFor3DS","isInSuperMarioMaker2","GameContentTranslationComponent","alt","Games","SUPER_MARIO_MAKER_1","path","imagePath","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","NIGHT_EFFECT","courseTheme","theme","Times","NIGHT","replace","night","EveryThemesApp","props","state","typeDisplayed","ViewDisplays","TABLE","Themes","enumerable","className","caption","option","AbstractTableApp"],"mappings":"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","file":"static/js/10.0a6c7ba8.chunk.js","sourcesContent":["import type {BooleanTextProperties} from './properties/BooleanTextProperties';\n\nimport TextComponent from './TextComponent';\n\n/**\n * Create a simple {@link TextComponent}\n * with a variable value based on a simple boolean.\n * @reactComponent\n */\nexport default function BooleanTextComponent({boolean, true: _true, false: _false, ...otherProperties}: BooleanTextProperties,) {\n    return <TextComponent content={boolean ? _true : _false} {...otherProperties}/>;\n}\n","import {lazy, ReactElement} from 'react';\n\nimport type {ClassWithEnglishName}   from '../../core/ClassWithEnglishName';\nimport type {ClassWithReference}     from '../../core/ClassWithReference';\nimport type {Enum}                   from '../../util/enum/Enum';\nimport type {Name}                   from '../../lang/name/Name';\nimport type {NameTrait}              from '../../lang/name/NameTrait';\nimport type {NameTraitFromACategory} from '../../lang/name/NameTraitFromACategory';\nimport type {SingleHeaderContent}    from '../tools/table/SimpleHeader';\n\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {EmptyStringName}               from '../../lang/name/EmptyStringName';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =         lazy(() => import('../tools/images/Image'));\nconst NameComponent = lazy(() => import('../../lang/name/component/Name.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @singleton\n */\nexport class CommonOptions {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: CommonOptions;\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this();\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n    //region -------------------- Fields --------------------\n\n    #nameHeader?: SingleHeaderContent;\n\n    #categoryHeader?: SingleHeaderContent;\n\n    //endregion -------------------- Fields --------------------\n\n    public get nameHeader(): SingleHeaderContent {\n        return this.#nameHeader ??= {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,};\n    }\n\n    public getNameContent(enumeration: EnumerationWithReference,): ReactElement {\n        return <NameComponent id=\"name\" name={enumeration.reference} popoverOrientation=\"left\"/>;\n    }\n\n\n    public get categoryHeader(): SingleHeaderContent {\n        return this.#categoryHeader ??= {key: 'category', element: <GameContentTranslationComponent translationKey=\"Category\"/>,};\n    }\n\n    public getCategoryContent(enumeration: EnumerationWithCategoryReference, imagePath_or_nameCallback: () => | string | Name<string>,): ReactElement {\n        const name = enumeration.reference.categoryNameContainer;\n        if (name === EmptyStringName.get)\n            return EMPTY_REACT_ELEMENT;\n\n        const imagePath_or_name = imagePath_or_nameCallback();\n        const englishName = name.english;\n        const startingKey = `category name (${englishName})`;\n        if (typeof imagePath_or_name == 'string')\n            return <Image key={`${startingKey} image`} source={imagePath_or_name} fallbackName={`${name.english} - image`}/>;\n        return <NameComponent key={`${startingKey} name`} id={`category-name-${enumeration.englishNameInHtml}`} name={name} popoverOrientation=\"left\"/>;\n    }\n\n}\n\ntype EnumerationWithReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<Name<string>>;\ntype EnumerationWithCategoryReference = Enum<any, any> & ClassWithEnglishName<string> & ClassWithReference<NameTraitFromACategory<string, NameTrait<string>>>;\n","import type {BooleanResultTextProperties, TextColor} from './properties/BooleanResultTextProperties';\n\nimport BooleanTextComponent from './BooleanTextComponent';\n\nconst TRUE_DEFAULT_COLOR: TextColor = 'text-success';\nconst FALSE_DEFAULT_COLOR: TextColor = 'text-danger';\n\n/**\n * Create a coloration based on the boolean value.\n *\n * Return a new {@link BooleanTextComponent}\n * with the classes \"text-success\" or \"text-danger\".\n * @reactComponent\n */\nexport default function BooleanResultTextComponent({boolean, classes, true: _true, false: _false, ...otherProperties}: BooleanResultTextProperties,) {\n    const [trueValue, trueColor,] = typeof _true == 'string' ? [_true, TRUE_DEFAULT_COLOR] : _true;\n    const [falseValue, falseColor,] = typeof _false == 'string' ? [_false, FALSE_DEFAULT_COLOR] : _false;\n\n    return <BooleanTextComponent classes={[...(classes ?? []), (boolean ? trueColor : falseColor)]} boolean={boolean} true={trueValue} false={falseValue} {...otherProperties}/>;\n}\n","import './YesOrNoResultTextComponent.scss';\n\nimport type {TextColor}             from './properties/BooleanResultTextProperties';\nimport type {YesOrNoTextProperties} from './properties/YesOrNoTextProperties';\n\nimport BooleanResultTextComponent  from './BooleanResultTextComponent';\nimport ContentTranslationComponent from '../../../lang/components/ContentTranslationComponent';\n\nconst YES_COLOR: TextColor = 'text-yes';\nconst NO_COLOR: TextColor = 'text-no';\n\n/**\n * Return a new {@link BooleanResultTextComponent} with a value based on the translation \"Yes\" or \"No\".\n *\n * @return {@link BooleanResultContainer}\n * @reactComponent\n */\nexport default function YesOrNoResultTextComponent(properties: YesOrNoTextProperties,): JSX.Element {\n    return <ContentTranslationComponent>{translation =>\n        <BooleanResultTextComponent\n            true={[translation('Yes'), YES_COLOR,]}\n            false={[translation('No'), NO_COLOR,]}\n            {...properties}\n        />}</ContentTranslationComponent>;\n}\n","import {lazy} from 'react';\n\nimport type {AppOptionWithContent, PossibleRenderReactElement}                                                                                                                      from './component/AppOptionWithContent';\nimport type {AppOptionWithTable}                                                                                                                                                    from './component/AppOptionWithTable';\nimport type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './ThemeAppOption.types';\nimport type {StaticReference}                                                                                                                                                       from '../../util/enum/Enum.types';\nimport type {Themes}                                                                                                                                                                from '../../core/theme/Themes';\nimport type {ReactElement}                                                                                                                                                          from '../../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                                                                                                                                   from '../tools/table/SimpleHeader';\n\nimport {AppOptionWithContentComponent} from './component/AppOptionWithContent.component';\nimport {AppOptionWithTableComponent}   from './component/AppOptionWithTable.component';\nimport {BASE_PATH}                     from '../../variables';\nimport {CommonOptions}                 from './CommonOptions';\nimport ContentTranslationComponent     from '../../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../../util/emptyReactVariables';\nimport {Enum}                          from '../../util/enum/Enum';\nimport GameContentTranslationComponent from '../../lang/components/GameContentTranslationComponent';\nimport {Games}                         from '../../core/game/Games';\nimport {Times}                         from '../../core/time/Times';\nimport YesOrNoResultTextComponent      from '../tools/text/YesOrNoResultTextComponent';\n\n//region -------------------- dynamic imports --------------------\n\nconst Image =                lazy(() => import('../tools/images/Image'));\nconst NightEffectComponent = lazy(() => import('../../core/nightEffect/NightEffect.component'));\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly IMAGE =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = ThemeAppOption.CALLBACK_TO_GET_ENUMERATION();\n\n                return [\n                    enumeration.renderSingleComponent(false),\n                    enumeration.endlessMarioImagePath == null ? EMPTY_REACT_ELEMENT :\n                        <Image source={enumeration.endlessMarioImagePath} fallbackName={`Endless Mario Image (${enumeration.englishName})`}/>,\n                ];\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: <ContentTranslationComponent translationKey=\"Image\"/>,\n                subHeaders: [\n                    {key: 'image-empty', element: EMPTY_REACT_ELEMENT,},\n                    {key: 'image-endless-mario', element: <>--Endless Mario--</>},\n                ],\n            };\n        }\n\n    }();\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => CommonOptions.get.getNameContent(ThemeAppOption.CALLBACK_TO_GET_ENUMERATION());\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return CommonOptions.get.nameHeader;\n        }\n\n    }();\n    public static readonly COURSE_AND_WORLD_THEME = new class ThemeAppOption_CourseAndWorldTheme extends ThemeAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = ThemeAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const reference = enumeration.reference;\n\n                return [\n                    <YesOrNoResultTextComponent boolean={reference.isInCourseTheme}/>,\n                    <YesOrNoResultTextComponent boolean={reference.isInWorldTheme}/>,\n                ];\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'theme', element: <>--course & world theme--</>,\n                subHeaders: [\n                    {\n                        key: 'isInTheCourseTheme', element: <Image source={`/${BASE_PATH}/theme/Course theme.tiff`} fallbackName=\"Course theme\"/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Is in the course theme',},\n                    },\n                    {\n                        key: 'isInTheWorldTheme', element: <Image source={`/${BASE_PATH}/theme/World theme.tiff`} fallbackName=\"World theme\"/>,\n                        tooltip: {namespace: 'gameContent', translationKey: 'Is in the world theme',},\n                    },\n                ],\n            };\n        }\n    }();\n    public static readonly GAME =                   new class ThemeAppOption_Game extends ThemeAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = ThemeAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const reference = enumeration.reference;\n\n                return [\n                    <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker1}/>,\n                    <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMakerFor3DS}/>,\n                    <YesOrNoResultTextComponent boolean={reference.isInSuperMarioMaker2}/>,\n                ];\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,\n                subHeaders: [\n                    {key: 'isInSuperMarioMaker1', alt: Games.SUPER_MARIO_MAKER_1.englishName, path: Games.SUPER_MARIO_MAKER_1.imagePath,},\n                    {key: 'isInSuperMarioMakerForNintendo3DS', alt: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.englishName, path: Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS.imagePath,},\n                    {key: 'isInSuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.englishName, path: Games.SUPER_MARIO_MAKER_2.imagePath,},\n                ],\n            };\n        }\n\n    }();\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption(): PossibleOptionWithContent {\n            return () => {\n                const enumeration = ThemeAppOption.CALLBACK_TO_GET_ENUMERATION();\n                const {courseTheme,} = enumeration.reference;\n\n                return <NightEffectComponent theme={courseTheme}/>;\n            };\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'effect', element: <Image source={Times.NIGHT.imagePath} fallbackName={`effect - ${Times.NIGHT.englishName}`}/>,\n                tooltip: {\n                    namespace: 'gameContent', translationKey: 'Effect (night)',\n                    replace: {night: '--night effect name--',},//TODO add translation for the night effect name\n                    // replace: {night: translation(Times.NIGHT.englishName).toLowerCase(),},\n                },\n            };\n        }\n\n    }();\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: ThemeAppOption;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link ThemeAppOption} and get by {@link EveryThemesApp}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Themes;\n\n    #appOptionWithContent?: AppOptionWithContent;\n    #appOptionWithTable?: AppOptionWithTable;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super();\n    }\n\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(): PossibleOptionWithContent;\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        return this.#appOptionWithContent ??= new AppOptionWithContentComponent(this._createContentOption(),);\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent;\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): PossibleOptionWithTable;\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        return this.#appOptionWithTable ??= new AppOptionWithTableComponent(() => this._createTableHeaderOption(),);\n    }\n\n    public get renderTableHeader(): | SingleHeaderContent | null {\n        return this.__appOptionWithTable.renderTableHeader;\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<ThemeAppOption> {\n        return ThemeAppOption;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals = Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number = number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(name: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(name: S,): EnumByString<S>\n    public static getValue<I extends ThemeAppOption = ThemeAppOption, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): ThemeAppOption\n    public static getValue(value: PossibleValue,): | ThemeAppOption | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = (() => PossibleRenderReactElement);\ntype PossibleOptionWithTable = SingleHeaderContent;\n","import './EveryThemesApp.scss';\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties} from './interpreter/AppInterpreterWithTable';\nimport type {ReactElement, ReactElementOrString}                 from '../util/react/ReactProperty';\nimport type {SingleHeaderContent}                                from './tools/table/SimpleHeader';\nimport type {ThemeAppStates}                                     from './AppStates.types';\n\nimport {AbstractTableApp}              from './withInterpreter/AbstractTableApp';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport Image                           from './tools/images/Image';\nimport {ThemeAppOption}                from './options/ThemeAppOption';\nimport {Themes}                        from '../core/theme/Themes';\nimport {ViewDisplays}                  from './withInterpreter/ViewDisplays';\n\n/**\n * @reactComponent\n */\nexport default class EveryThemesApp\n    extends AbstractTableApp<AppInterpreterWithTable<Themes, ThemeAppOption>, {}, ThemeAppStates> {\n\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {\n            typeDisplayed: ViewDisplays.TABLE,\n        };\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey(): string {\n        return 'theme';\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return <GameContentTranslationComponent translationKey=\"Every themes\"/>;\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Themes, ThemeAppOption> {\n        return new class implements AppInterpreterWithTable<Themes, ThemeAppOption> {\n\n            public get iterable(): IterableIterator<Themes> {\n                return Themes[Symbol.iterator]();\n            }\n\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListContent(enumerable: Themes,): ReactElement {\n                const {englishName, englishNameInHtml, endlessMarioImagePath,} = enumerable;\n\n                return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n                    {enumerable.renderSingleComponent(true)}\n                    {endlessMarioImagePath != null ? <Image source={endlessMarioImagePath} fallbackName={`${englishName} (Endless mario)`}/> : EMPTY_REACT_ELEMENT}\n                </div>;\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Themes,) {\n                ThemeAppOption.CALLBACK_TO_GET_ENUMERATION = value;\n            }\n\n            public get tableOptions(): ThemeAppOption[] {\n                return [\n                    ThemeAppOption.IMAGE,\n                    ThemeAppOption.NAME,\n                    ThemeAppOption.COURSE_AND_WORLD_THEME,\n                    ThemeAppOption.GAME,\n                    ThemeAppOption.NIGHT_EFFECT,\n                ];\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: <GameContentTranslationComponent translationKey=\"Every themes\"/>,\n                };\n            }\n\n\n            public createTableContent(option: ThemeAppOption,): readonly ReactElement[] {\n                return option.renderContent;\n            }\n\n            public createTableHeader(option: ThemeAppOption,): | SingleHeaderContent | null {\n                return option.renderTableHeader;\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }();\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n"],"sourceRoot":""}