{"version":3,"file":"static/js/146.b0ef8686.chunk.js","mappings":"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","sources":["app/options/EntityAppOption.tsx","app/EntityApp.tsx","app/options/component/EmptyAppOption.ts","core/editorVoice/EditorVoiceSound.component.tsx"],"sourcesContent":["import type {CollectionHolder, EnumerableConstructor, PossibleValueByEnumerable} from '@joookiwi/enumerable/dist/types'\nimport {Enum}                                                                    from '@joookiwi/enumerable'\nimport {Fragment, lazy}                                                          from 'react'\n\nimport type {Names, Ordinals}                                  from 'app/options/EntityAppOption.types'\nimport type {AppOptionWithContent, PossibleRenderReactElement} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}                               from 'app/options/component/AppOptionWithTable'\nimport type {SingleHeaderContent}                              from 'app/tools/table/SimpleHeader'\nimport type {Entities}                                         from 'core/entity/Entities'\nimport type {ReactElement}                                     from 'util/react/ReactProperties'\nimport type {NullOr}                                           from 'util/types/nullable'\nimport type {EmptyArray}                                       from 'util/types/variables'\n\nimport {CommonOptions}                              from 'app/options/CommonOptions'\nimport {AppOptionWithContentComponent}              from 'app/options/component/AppOptionWithContent.component'\nimport {AppOptionWithTableComponent}                from 'app/options/component/AppOptionWithTable.component'\nimport {EmptyAppOption}                             from 'app/options/component/EmptyAppOption'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {EntityCategories}                           from 'core/entityCategory/EntityCategories'\nimport {Games}                                      from 'core/game/Games'\nimport {GameStyles}                                 from 'core/gameStyle/GameStyles'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {Times}                                      from 'core/time/Times'\n\n//region -------------------- dynamic imports --------------------\n\nconst CourseThemeComponent =        lazy(() => import('core/theme/CourseTheme.component'))\nconst EditorVoiceSoundComponent =   lazy(() => import('core/editorVoice/EditorVoiceSound.component'))\nconst Image =                       lazy(() => import('app/tools/images/Image'))\nconst InstrumentPropertyComponent = lazy(() => import('core/entity/properties/instrument/InstrumentProperty.component'))\nconst GameComponent =               lazy(() => import('core/game/Game.component'))\nconst GameStyleComponent =          lazy(() => import('core/gameStyle/GameStyle.component'))\nconst LimitComponent =              lazy(() => import('core/entityLimit/Limit.component'))\nconst TimeComponent =               lazy(() => import('core/time/Time.component'))\nconst TextComponent =               lazy(() => import('app/tools/text/TextComponent'))\n\n//endregion -------------------- dynamic imports --------------------\n\n/**\n * @todo convert the \"_createTableHeaderOption\" to have the enumerable as an argument and to be non-null\n * @todo merge all of the \"image\" into 1 type\n * @todo merge all of the \"game\" into 1 type\n * @todo merge all of the \"game style\" into 1 type\n * @todo merge all of the \"time\" into 1 type\n * @todo merge all of the \"category\" into 1 type\n * @todo merge all of the \"limit\" into 1 type\n */\nexport class EntityAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Display every image.\n     */\n    public static readonly IMAGES = new class EntityAppOption_Images extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    {englishName, englishNameInHtml, uniqueImage,} = enumeration\n\n                return EntityAppOption._gameStyles.map(gameStyle => <Fragment key={`unique image (${englishName})`}>{\n                    uniqueImage.get(gameStyle).map(image =>\n                        <Image className={`entity-image ${englishNameInHtml}-image`} file={image}/>)\n                }</Fragment>)\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'image', element: contentTranslation('Image'),\n                subHeaders: EntityAppOption._gameStyles.map<SingleHeaderContent>(gameStyle =>\n                    ({key: `image-${gameStyle.acronym}`, element: gameStyle.renderSingleComponent,})),\n            }\n        }\n\n    }()\n    /**\n     * Display an animation or not.\n     *\n     * If the value is \"separated\", then, it will display every image animation separated.\n     * @see AnimatedImages\n     */\n    public static readonly IMAGES_ON_EDITOR = new EntityAppOption()\n    public static readonly IMAGES_ON_CLEAR_CONDITION = new EntityAppOption()\n    public static readonly IMAGES_ON_WHILE_PLAYING = new EntityAppOption()\n    public static readonly IMAGES_ON_UNUSED = new EntityAppOption()\n\n    public static readonly NAME = new class EntityAppOption_Name extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n\n                return <div className=\"nameAndEditorVoiceSound-container container\">\n                    {CommonOptions.get.getNameContent(enumeration)}\n                    <div className=\"properties\">\n                        <InstrumentPropertyComponent value={enumeration}/>\n                    </div>\n                    <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n                </div>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n\n    public static readonly GAME = new class EntityAppOption_Game extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.gameHeader\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME = new EntityAppOption()\n\n    public static readonly GAME_STYLE = new class EntityAppOption_GameStyle extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <GameStyleComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'gameStyle', element: gameContentTranslation('game style.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_GAME_STYLE = new EntityAppOption()\n\n    public static readonly COURSE_THEME = new class EntityAppOption_CourseTheme extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <CourseThemeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'courseTheme', element: gameContentTranslation('theme.course.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_COURSE_THEME = new EntityAppOption()\n\n    public static readonly TIME = new class EntityAppOption_Time extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const entity = EntityAppOption.CALLBACK_TO_GET_ENUMERATION().reference\n\n                return <TimeComponent reference={entity} name={entity} displayAllAsText/>\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {key: 'time', element: gameContentTranslation('time.singular'),}\n        }\n\n    }()\n    public static readonly WHEN_ALL_SELECTED_TIME = new EntityAppOption()\n\n    public static readonly CATEGORY = new class EntityAppOption_Category extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION(),\n                    categoryName = enumeration.reference.categoryNameContainer\n\n                return CommonOptions.get.getCategoryContent(enumeration, () => EntityCategories.getValueByName(categoryName.english).imageFile,)\n            }\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.categoryHeader\n        }\n\n    }()\n    /**\n     * Tell whenever a {@link EntityAppOption.CATEGORY category} is displayed\n     * as a text (<i>true</i>) or an image (<i>false</i>).\n     */\n    public static readonly CATEGORY_AS_TEXT = new EntityAppOption()\n\n    public static readonly LIMIT = new class EntityAppOption_Limit extends EntityAppOption {\n\n        protected override _createContentOption() {\n            return () => {\n                const enumeration = EntityAppOption.CALLBACK_TO_GET_ENUMERATION()\n                const entity = enumeration.reference\n\n                const editorLimit_SMM1And3DS = entity.editorLimit_smm1And3ds\n                const editorLimit_SMM2 = entity.editorLimit_smm2\n\n                return [\n                    editorLimit_SMM1And3DS == null\n                        ? <TextComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} content={'N/A'}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker1And3DS-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM1And3DS} displayAcronymIfApplicable/>,\n                    editorLimit_SMM2 == null || editorLimit_SMM2 === 'N/A'\n                        ? <TextComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} content={editorLimit_SMM2} isUnknown={entity.isUnknown_editorLimit_smm2}/>\n                        : <LimitComponent id={`editor-SuperMarioMaker2-${enumeration.englishNameInHtml}`} limits={editorLimit_SMM2} displayAcronymIfApplicable/>,\n                    <LimitComponent id={`whilePlaying-${enumeration.englishNameInHtml}`} limits={entity.toLimitWhilePlayingMap()} displayAcronymIfApplicable/>,\n                ]\n            }\n        }\n\n        protected override _createTableHeaderOption(): PossibleOptionWithTable {\n            return {\n                key: 'limit', element: gameContentTranslation('limit.singular'),\n                subHeaders: [\n                    {\n                        key: 'limit-editor', element: gameContentTranslation('limit.editor.value'),\n                        tooltip: gameContentTranslation('limit.editor.limit'),\n                        subHeaders: [\n                            {key: 'limit-editor-SuperMarioMaker1And3DS', alt: Games.SUPER_MARIO_MAKER_1.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_1.imageFile.fullName,},\n                            {key: 'limit-editor-SuperMarioMaker2', alt: Games.SUPER_MARIO_MAKER_2.imageFile.fallbackName, path: Games.SUPER_MARIO_MAKER_2.imageFile.fullName,},\n                        ],\n                    },\n                    {\n                        key: 'limit-whilePlaying', element: gameContentTranslation('limit.play.value'),\n                        tooltip: gameContentTranslation('limit.play.limit'),\n                    },\n                ],\n            }\n        }\n\n    }()\n    public static readonly IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT = new EntityAppOption()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: EntityAppOption\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    /**\n     * The callback to get the enumeration based for each option.\n     *\n     * @note It should only be set by {@link EntityApp} and get by {@link EntityAppOption}.\n     */\n    public static CALLBACK_TO_GET_ENUMERATION: () => Entities\n\n    static #gameStyles?: readonly GameStyles[]\n    static #gameStyles_unusedImages?: | readonly [GameStyles,] | EmptyArray\n    static #times?: readonly Times[]\n    static #themes?: readonly Themes[]\n\n    #appOptionWithContent?: AppOptionWithContent\n    #appOptionWithTable?: AppOptionWithTable\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    protected static get _gameStyles(): readonly GameStyles[] {\n        return this.#gameStyles ??= GameStyles.values.toArray()\n    }\n\n    protected static get _gameStyles_unusedImages(): | readonly [GameStyles,] | EmptyArray {\n        return this.#gameStyles_unusedImages ??= [GameStyles.SUPER_MARIO_BROS,]\n    }\n\n    protected static get times(): readonly Times[] {\n        return this.#times ??= Times.values.toArray()\n    }\n\n    protected static get themes(): readonly Themes[] {\n        return this.#themes ??= Themes.courseThemes\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected _createContentOption(): PossibleOptionWithContent {\n        return null\n    }\n\n    private get __appOptionWithContent(): AppOptionWithContent {\n        if (this.#appOptionWithContent == null) {\n            const content = this._createContentOption()\n            this.#appOptionWithContent = content == null\n                ? EmptyAppOption.get\n                : new AppOptionWithContentComponent(content,)\n        }\n        return this.#appOptionWithContent\n    }\n\n    public get renderContent(): readonly ReactElement[] {\n        return this.__appOptionWithContent.renderContent\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected _createTableHeaderOption(): PossibleOptionWithTable {\n        return null\n    }\n\n    private get __appOptionWithTable(): AppOptionWithTable {\n        if (this.#appOptionWithTable == null) {\n            const content = this._createTableHeaderOption()\n            this.#appOptionWithTable = content == null ? EmptyAppOption.get : new AppOptionWithTableComponent(() => content,)\n        }\n        return this.#appOptionWithTable\n    }\n\n    public get renderTableHeader(): NullOr<SingleHeaderContent> {\n        return this.__appOptionWithTable.renderTableHeader\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): EnumerableConstructor<Ordinals, Names> {\n        return EntityAppOption\n    }\n\n    public static getValue(value: PossibleValueByEnumerable<EntityAppOption>,): EntityAppOption {\n        return Enum.getValueOn(this, value,)\n    }\n\n    public static get values(): CollectionHolder<EntityAppOption> {\n        return Enum.getValuesOn(this,)\n    }\n\n    public static* [Symbol.iterator](): IterableIterator<EntityAppOption> {\n        yield* this.values\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n\ntype PossibleOptionWithContent = NullOr<() => PossibleRenderReactElement>\ntype PossibleOptionWithTable = NullOr<SingleHeaderContent>\n","import './EntityApp.scss'\nimport './options/EntityAppOption.scss'\n\nimport type {AppInterpreterWithTable, SimplifiedTableProperties}   from 'app/interpreter/AppInterpreterWithTable'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'routes/everyRoutes.types'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport {EntityAppOption}         from 'app/options/EntityAppOption'\nimport {AbstractTableApp}        from 'app/withInterpreter/AbstractTableApp'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {Entities}                from 'core/entity/Entities'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport default class EntityApp\n    extends AbstractTableApp<AppInterpreterWithTable<Entities, EntityAppOption>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'entity'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (card)'\n    }\n\n    protected override _createTableRouteName(): EveryPossibleRouteNames {\n        return 'everyEntity (table)'\n    }\n\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('entity.all')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithTable<Entities, EntityAppOption> {\n        return new class implements AppInterpreterWithTable<Entities, EntityAppOption> {\n\n            public get iterable() {\n                return Entities[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: 4,\n                    large: 3,\n                    extraLarge: 2,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({englishName: name, reference, editorVoiceSoundFileHolder,}: Entities,) {\n                //TODO encapsulate the voiceSound into a sound interpreter.\n                const category = reference.categoryEnglish === '' ? '' : `entityCategory-${reference.categoryEnglish}`//TODO move to the parent container className.\n                return <div className={`${category}`}>\n                    <EditorVoiceSoundComponent editorVoiceSound={editorVoiceSoundFileHolder} name={name}/>\n                </div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n            //region -------------------- Table interpreter --------------------\n\n            public set callbackToGetEnumerable(value: () => Entities,) {\n                EntityAppOption.CALLBACK_TO_GET_ENUMERATION = value\n            }\n\n            public get tableOptions(): readonly EntityAppOption[] {\n                return [\n                    EntityAppOption.IMAGES,\n                    EntityAppOption.NAME,\n                    // EntityAppOption.GAME,\n                    // EntityAppOption.GAME_STYLE,\n                    // EntityAppOption.COURSE_THEME,\n                    // EntityAppOption.TIME,\n                    EntityAppOption.CATEGORY,\n                    EntityAppOption.LIMIT,\n                ]\n            }\n\n            public get tableProperties(): SimplifiedTableProperties {\n                return {\n                    caption: gameContentTranslation('entity.all'),\n                }\n            }\n\n            public createTableContent(option: EntityAppOption,) {\n                return option.renderContent\n            }\n\n            public createTableHeader(option: EntityAppOption,) {\n                return option.renderTableHeader\n            }\n\n            //endregion -------------------- Table interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppOptionWithContent} from 'app/options/component/AppOptionWithContent'\nimport type {AppOptionWithTable}   from 'app/options/component/AppOptionWithTable'\n\nimport {EMPTY_ARRAY} from 'util/emptyVariables'\n\n/**\n * @singleton\n */\nexport class EmptyAppOption\n    implements AppOptionWithContent, AppOptionWithTable {\n\n    //region -------------------- Singleton usage --------------------\n\n    static #instance?: EmptyAppOption\n\n    private constructor() {\n    }\n\n    public static get get() {\n        return this.#instance ??= new this()\n    }\n\n    //endregion -------------------- Singleton usage --------------------\n\n    public readonly renderContent = EMPTY_ARRAY\n    public readonly renderTableHeader = null\n\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSoundFileHolder} from 'core/editorVoice/holder/sound/EditorVoiceSoundFileHolder'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {Nullable}                   from 'util/types/nullable'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    editorVoiceSound: Nullable<EditorVoiceSoundFileHolder>\n\n    name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSoundFile: regularFile, europeanSoundFile: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n"],"names":["CourseThemeComponent","lazy","EditorVoiceSoundComponent","Image","InstrumentPropertyComponent","GameComponent","GameStyleComponent","LimitComponent","TimeComponent","TextComponent","Symbol","iterator","EntityAppOption","this","content","_createContentOption","EmptyAppOption","AppOptionWithContentComponent","__appOptionWithContent","renderContent","_createTableHeaderOption","AppOptionWithTableComponent","__appOptionWithTable","renderTableHeader","GameStyles","Times","Themes","value","Enum","values","IMAGES","enumeration","CALLBACK_TO_GET_ENUMERATION","englishName","englishNameInHtml","uniqueImage","_gameStyles","map","gameStyle","Fragment","get","image","className","file","key","element","contentTranslation","subHeaders","acronym","renderSingleComponent","IMAGES_ON_EDITOR","IMAGES_ON_CLEAR_CONDITION","IMAGES_ON_WHILE_PLAYING","IMAGES_ON_UNUSED","NAME","CommonOptions","editorVoiceSound","editorVoiceSoundFileHolder","name","GAME","entity","reference","displayAllAsText","WHEN_ALL_SELECTED_GAME","GAME_STYLE","gameContentTranslation","WHEN_ALL_SELECTED_GAME_STYLE","COURSE_THEME","WHEN_ALL_SELECTED_COURSE_THEME","TIME","WHEN_ALL_SELECTED_TIME","CATEGORY","categoryName","categoryNameContainer","EntityCategories","english","imageFile","CATEGORY_AS_TEXT","LIMIT","editorLimit_SMM1And3DS","editorLimit_smm1And3ds","editorLimit_SMM2","editorLimit_smm2","id","limits","displayAcronymIfApplicable","isUnknown","isUnknown_editorLimit_smm2","toLimitWhilePlayingMap","tooltip","alt","Games","path","IF_APPLICABLE_ACRONYM_ON_LIMIT_AS_TEXT","EntityApp","Entities","small","medium","large","extraLarge","category","categoryEnglish","caption","option","AbstractTableApp","EMPTY_ARRAY","regularFile","regularSoundFile","europeanFile","europeanSoundFile","title"],"sourceRoot":""}