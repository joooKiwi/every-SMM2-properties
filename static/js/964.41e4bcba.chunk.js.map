{"version":3,"file":"static/js/964.41e4bcba.chunk.js","mappings":"8NAQO,MAAMA,UACDC,EAAAA,eA4FAC,WAAAA,GACJC,OACJ,CAKA,YAAWC,GACP,MAAO,SACX,CAEA,aAAWC,GACP,MAAO,SACX,CAEA,eAAWC,GACP,MAAO,SACX,CAEA,aAAWC,GACP,MAAO,SACX,CAKOC,eAAAA,CAAgBC,GACnB,MAAM,qBAANC,OAA4BD,EAAYE,SAAQ,aACpD,CAEOC,gBAAAA,CAAiBH,GACpB,MAAM,qBAANC,OAA4BD,EAAYE,SAAQ,WACpD,CAEOE,kBAAAA,CAAmBJ,GACtB,MAAM,qBAANC,OAA4BD,EAAYE,SAAQ,aACpD,CAEOG,gBAAAA,CAAiBL,GACpB,MAAM,qBAANC,OAA4BD,EAAYE,SAAQ,WACpD,EAIHI,EAzIYf,EAAAA,EAKcgB,UAAY,IAAI,cAAwChB,EAE3DQ,eAAAA,GACZ,OAAO,IACX,GATKR,EAYciB,kBAAoB,IAAI,cAA+CjB,EAE1F,YAAoBI,GAChB,MAAO,SACX,CAEA,aAAoBG,GAChB,MAAO,SACX,CAEgBK,gBAAAA,GACZ,OAAO,IACX,GAxBKZ,EA2BckB,mCAAqC,IAAI,cAA6DlB,EAEzH,YAAoBI,GAChB,MAAO,SACX,CAEA,aAAoBC,GAChB,MAAO,SACX,CAEA,aAAoBE,GAChB,MAAO,SACX,CAEgBM,kBAAAA,GACZ,OAAO,IACX,GA3CKb,EA8CcmB,oBAAsB,IAAI,cAAgDnB,EAE7F,YAAoBI,GAChB,MAAO,SACX,CAEA,eAAoBE,GAChB,MAAO,SACX,CAEA,aAAoBD,GAChB,MAAO,SACX,CAEgBS,gBAAAA,GACZ,OAAO,IACX,GA9DKd,EAqEcoB,eAAaC,GAAAC,EAAAA,EAAAA,GAAA,YAAAC,EAAqG,MAAMC,UACnIC,EAAAA,wBAMAvB,WAAAA,GACJC,MAAMH,EAAkB0B,EAAAA,EAC5B,CAEA,cAAkBC,GAAO,IAADC,EAAAC,EACpB,OAAW,QAAXA,GAAAD,GAAAE,EAAAA,EAAAA,GAAOC,KAAIV,IAAAA,UAAA,IAAAQ,EAAAA,EAAAD,EAAAP,GAAe,IAAIG,CAClC,GAIHQ,OAAAC,eAAAV,EAAAF,EAAA,CAAAa,UAAA,EAAAC,WAAA,IAAAZ,G,iLClEmFa,GAAAd,EAAAA,EAAAA,GAAA,SAExF,MAAMe,EAUKnC,WAAAA,CAAYoC,GAPnBN,OAAAC,eAAA,KAAAG,EAAA,CAAAF,UAAA,EAAAC,WAAA,KAQIL,EAAAA,EAAAA,GAAAC,KAAIK,GAAAA,GAAUE,CAClB,CAIA,WAAWC,GACP,OAAOC,EAAAA,EAAAA,IAAWC,EAAAA,EAAarB,cAAcO,IAAIe,QAAMZ,EAAAA,EAAAA,GAAEC,KAAIK,GAAAA,GACjE,CAIOO,mBAAAA,GACH,MAAO,CACHC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,MAAO,EAEf,CAKOC,uBAAAA,GACH,OAAOjB,KAAKY,qBAChB,CAEOM,qBAAAA,CAAsBC,GACzB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBC,UAC1CF,EAAAA,EAAAA,KAACG,EAAAA,EAAyB,CAACC,iBAAkBL,EAAWM,2BAA4BC,KAAMP,EAAWQ,eAE7G,EAMJ,MAAMC,EAA0B,CAC5B,CAACC,EAAAA,EAAaC,YAAa,2BAC3B,CAACD,EAAAA,EAAaE,UAAW,4BAIvBC,EADoBrC,EAAAA,EAAMsC,cAAcrC,IACXX,UAC7BiD,EAAOvC,EAAAA,EAAMwC,oBACbC,EAASzC,EAAAA,EAAMR,mCACfkD,EAAO1C,EAAAA,EAAMP,oBAGJ,SAASkD,EAAcC,GAAiD,IAAhD,YAAC7D,EAAW,MAAE6B,GAA8BgC,GAC/EC,EAAAA,EAAAA,IAAO9D,IAAgBmD,EAAAA,EAAaY,MAAO,+FAC3C,MAAMC,GAAeC,EAAAA,EAAAA,IAAuB,oBACtCC,EAAiB,IAAItC,EAA0BC,GAE/CsC,EAA8C,KAAvCC,EAAAA,EAAAA,IAAUd,EAAUzB,GAAQwC,OACnC9E,EAAiBgB,UACjBsB,EAAMyC,QACF/E,EAAiBmB,oBACjBmB,EAAM0C,QACFhF,EAAiBiB,kBACjBjB,EAAiBkB,mCAE/B,OAAIT,IAAgBmD,EAAAA,EAAaC,aACtBV,EAAAA,EAAAA,KAAC8B,EAAAA,EAAgB,CAACC,SAAS,cAAcvB,wBAAyBA,EAAyBlD,YAAaA,EAAagE,aAAcA,EACjHU,aAAahC,EAAAA,EAAAA,KAACiC,EAAsB,CAAC3E,YAAaA,EAAamE,KAAMA,IACrES,cAAclC,EAAAA,EAAAA,KAACmC,EAAuB,CAAC7E,YAAaA,EAAamE,KAAMA,IAAQvB,UACpGF,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,CAACL,SAAS,cAAcM,YAAab,OAEjDxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAgB,CAACC,SAAS,cAAcvB,wBAAyBA,EAAyBlD,YAAaA,EAAagE,aAAcA,EACjHU,aAAahC,EAAAA,EAAAA,KAACiC,EAAsB,CAAC3E,YAAaA,EAAamE,KAAMA,IACrES,cAAclC,EAAAA,EAAAA,KAACmC,EAAuB,CAAC7E,YAAaA,EAAamE,KAAMA,IAAQvB,UACpGF,EAAAA,EAAAA,KAACsC,EAAAA,EAAQ,CAACP,SAAS,cAAcM,YAAab,KAEtD,CAcA,SAASS,EAAsBM,GAA2D,IAADC,EAAA,IAAzD,YAAClF,EAAW,KAAEmE,GAAwCc,EAClF,MAAME,EAA0E,QAApED,EAAGE,EAAoB,oBAAAC,OAAOC,8CAAsC,IAAAJ,EAAAA,GAAIK,EAAAA,EAAAA,GAAeH,EAAoB,oBAAAC,OAAOG,oBAAoBC,eAE5IC,EAAWvB,EAAKhE,iBAAiBH,GACjC2F,EAAaxB,EAAK/D,mBAAmBJ,GACrC4F,EAAWzB,EAAK9D,iBAAiBL,GAEjC6F,EAAW7F,IAAgBmD,EAAAA,EAAaC,YAAc,KAAO,0BAC7D0C,EAAW9F,IAAgBmD,EAAAA,EAAaE,UAAY,KAAO,0BAEjE,OAAO0C,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAApD,SAAA,EACHmD,EAAAA,EAAAA,MAAA,KAAAnD,SAAA,EACKqB,EAAAA,EAAAA,IAAuB,wCACvBA,EAAAA,EAAAA,IAAuB,uCAAwC,CAC5DyB,UAAUhD,EAAAA,EAAAA,KAACuD,EAAAA,EAAU,CAAgBC,GAAG,uBAAuBC,UAAWT,EAAS9C,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW7C,KAAhF,YAC1BmC,YAAYjD,EAAAA,EAAAA,KAACuD,EAAAA,EAAU,CAAkBC,GAAG,yBAAyBC,UAAWR,EAAW/C,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW3C,KAAtF,cAC5BkC,UAAUlD,EAAAA,EAAAA,KAACuD,EAAAA,EAAU,CAAgBC,GAAG,uBAAuBC,UAAWP,EAAShD,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW1C,KAAhF,eAE7BM,EAAAA,EAAAA,IAAuB,sCAAuC,CAC3DyB,UAAUhD,EAAAA,EAAAA,KAACuD,EAAAA,EAAU,CAAgBC,GAAG,kCAAkCC,UAAWT,EAAS9C,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW7C,KAA3F,YAC1BoC,UAAUlD,EAAAA,EAAAA,KAACuD,EAAAA,EAAU,CAAgBC,GAAG,kCAAkCC,UAAWP,EAAShD,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW1C,KAA3F,eAE7BM,EAAAA,EAAAA,IAAuB,8CACvBA,EAAAA,EAAAA,IAAuB,0CAA2C,CAG/DqC,YAAY5D,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAAkBC,UAAU,aAAaL,UAAU,cAAcM,MAAM,UAAS7D,SAAEuC,GAA7E,cAC1BuB,gBAAgBhE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAAsBC,UAAU,uBAAuBL,UAAU,cAAcM,MAAM,UAAS7D,UAACF,EAAAA,EAAAA,KAACiE,EAAAA,EAAU,CAACN,UAAWO,EAAAA,EAAOC,WAAYC,aAAW,KAA/I,kBAC9BC,qBAAqBrE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAA2BC,UAAU,qBAAqBL,UAAU,cAAcM,MAAM,UAAS7D,UAAEoE,EAAAA,EAAAA,IAAmB,qBAAjH,6BAG3CtE,EAAAA,EAAAA,KAAA,KAAAE,UAAIqB,EAAAA,EAAAA,IAAuB,oCAAqC,CAC5D4B,UAAUnD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAAgBC,UAAU,WAAWL,UAAWN,EAAUY,MAAM,UAAS7D,UAAEoE,EAAAA,EAAAA,IAAmB,2BAA4BvB,eAArH,YACxBK,UAAUpD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAAgBC,UAAU,WAAWL,UAAWL,EAAUW,MAAM,UAAS7D,UAAEoE,EAAAA,EAAAA,IAAmB,2BAA4BvB,eAArH,YACxBwB,WAAWvE,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAAiBC,UAAU,YAAYL,UAAWL,EAAUW,MAAM,UAAS7D,UAAEoE,EAAAA,EAAAA,IAAmB,yBAA0BvB,eAArH,mBAGrC,CAeA,SAASZ,EAAuBqC,GAA4D,IAA3D,YAAClH,EAAW,KAAEmE,GAAyC+C,EACpF,OAAOnB,EAAAA,EAAAA,MAAA,OAAKG,GAAG,oCAAoCvD,UAAU,6DAA4DC,SAAA,EACrHF,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CAACX,UAAU,eAAeL,UAAWhC,EAAKpE,gBAAgBC,GAAeyG,MAAOtC,EAAKxE,SAASiD,UAAEoE,EAAAA,EAAAA,IAAmB,UAC9HjB,EAAAA,EAAAA,MAAA,OAAKG,GAAG,iDAAiDvD,UAAU,yBAAwBC,SAAA,EACvFF,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CAACX,UAAU,WAAWL,UAAWhC,EAAKhE,iBAAiBH,GAAeyG,MAAOtC,EAAKvE,UAAUgD,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW7C,OAC9Hd,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CAACX,UAAU,aAAaL,UAAWhC,EAAK/D,mBAAmBJ,GAAeyG,MAAOtC,EAAKtE,YAAY+C,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW3C,OACpIhB,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CAACX,UAAU,WAAWL,UAAWhC,EAAK9D,iBAAiBL,GAAeyG,MAAOtC,EAAKrE,UAAU8C,UAACF,EAAAA,EAAAA,KAAC0D,EAAAA,EAAS,CAACC,UAAW1C,WAG1I,C,8FCjLe,SAASyD,EAAkBvD,GAAuE,IAArEY,SAAU4C,EAAG,MAAEC,EAAK,YAAEC,GAA2C1D,EACzG,OAAOnB,EAAAA,EAAAA,KAAA,OAA6CwD,GAAG,4BAA4BvD,UAAU,YAAWC,SAAE0E,EAAME,KAAIvC,IAAA,IAAEwC,EAAMzE,GAAMiC,EAAA,OAC9HvC,EAAAA,EAAAA,KAACgF,EAAa,CAAiDjD,SAAU4C,EAAKI,KAAMA,EAAMtB,UAAWnD,EAAMuE,YAAaA,GAAY,GAAAtH,OAA7GoH,EAAG,6BAAApH,OAA4BwH,EAAI,KAA4E,KACzI,GAAAxH,OAFmBoH,EAAG,6BAG3B,CAEA,SAASK,EAAaR,GAA4E,IAA1EzC,SAAU4C,EAAG,KAAEI,EAAI,YAAEF,EAAW,UAAEpB,GAAoCe,EAC1F,MAAOS,SAAUC,IAAgBC,EAAAA,EAAAA,MAC3BC,GAAOC,EAAAA,EAAAA,GAAc5B,GAE3B,OAAIyB,IAAgBE,GAAQL,IAASF,GAC1B7E,EAAAA,EAAAA,KAAA,UAAsCC,UAAS,sBAAA1C,OAAwBwH,EAAKO,SAAQ,oBAAoBC,KAAK,SAASC,UAAQ,MAAAjI,OAA9GoH,EAAG,MAAApH,OAAKwH,EAAKzE,KAAI,OACrCN,EAAAA,EAAAA,KAACyF,EAAAA,GAAI,CAA+BC,GAAIN,EAAMnF,UAAS,mBAAA1C,OAAqBwH,EAAKO,SAAQ,oBAAoBK,QAASA,IAAMlF,EAAAA,EAAaxC,cAAcO,IAAIoH,QAAUb,GAAK,GAAAxH,OAA5JoH,EAAG,MAAApH,OAAKwH,EAAKzE,KAAI,KAC1C,C,cCIe,SAASwB,EAAgBX,GAA4I,IAA3I,SAACY,EAAQ,wBAAEvB,EAAuB,YAAElD,EAAW,MAAEuI,EAAK,aAAEvE,EAAY,aAAEY,EAAY,YAAEF,EAAW,SAAE9B,GAAsCiB,EAC5K,OAAOnB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UACrCmD,EAAAA,EAAAA,MAAA,OAAKG,GAAE,GAAAjG,OAAKwE,EAAQ,kBAAkB9B,UAAS,iBAAA1C,OAAmBD,EAAYgI,SAAQ,cAAapF,SAAA,EAC/FF,EAAAA,EAAAA,KAAA,MAAIwD,GAAE,GAAAjG,OAAKwE,EAAQ,cAAc9B,UAAU,YAAWC,SAAEoB,IAC9C,MAATuE,EAAgB,MAAO7F,EAAAA,EAAAA,KAAA,SAAOwD,GAAE,GAAAjG,OAAKwE,EAAQ,oBAAoB9B,UAAU,kBAAiBC,SAAE2F,KAC/FxC,EAAAA,EAAAA,MAAA,SAAOpD,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAC0E,EAAkB,CAAC3C,SAAUA,EAAU6C,MAAOpE,EAAyBqE,YAAavH,IACpF4E,KAEW,MAAfF,GAAsBhC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAc,CAACP,KAAK,YAAYQ,UAAQ,EAAA7F,SAAC,iBAA+BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,SAAE8B,KACxIhC,EAAAA,EAAAA,KAAA,OAAKwD,GAAE,GAAAjG,OAAKwE,EAAQ,gBAAgB9B,UAAU,cAAaC,SAAEA,QAGzE,C,wECnBe,SAASuE,EAAUtD,GAA8H,IAA7H,UAAC2C,EAAS,UAAEL,EAAS,MAAEM,EAAK,SAAE7D,GAA2FiB,EACxJ,MAAMqC,EAAE,GAAAjG,OAAMuG,EAAS,WACjB7D,EAAS,WAAA1C,OAAcwG,EAAK,gBAElC,OAAiB,MAAbN,GACOzD,EAAAA,EAAAA,KAAA,UAAQuF,KAAK,SAAS/B,GAAIA,EAAIvD,UAAWA,EAAWuF,UAAQ,EAAAtF,SAAEA,KAClEF,EAAAA,EAAAA,KAACyF,EAAAA,GAAI,CAACF,KAAK,SAAS/B,GAAIA,EAAIvD,UAAWA,EAAWyF,IAAIL,EAAAA,EAAAA,GAAc5B,GAAYvD,SAAEA,GAC7F,C,wECPe,SAAS2D,EAAQ1C,GAA2H,IAA1H,UAAC2C,EAAS,UAAEL,EAAS,MAAEM,EAAK,SAAE7D,GAAwFiB,EACnJ,MAAMqC,EAAE,GAAAjG,OAAMuG,EAAS,SAEvB,OAAiB,MAAbL,GACOzD,EAAAA,EAAAA,KAAA,QAAMwD,GAAIA,EAAIvD,UAAU,4BAA2BC,SAAEA,KACzDF,EAAAA,EAAAA,KAACyF,EAAAA,GAAI,CAACjC,GAAIA,EAAIvD,UAAS,QAAA1C,OAAUwG,GAAS2B,IAAIL,EAAAA,EAAAA,GAAc5B,GAAYvD,SAAEA,GACrF,C,wECRe,SAASqD,EAAUpC,GAA+G,IAA9G,GAACqC,EAAE,UAAEC,EAAS,SAAEvD,GAA0FiB,EACzI,OAAiB,MAAbsC,GACOzD,EAAAA,EAAAA,KAAA,QAAMwD,GAAIA,EAAGtD,SAAEA,KACnBF,EAAAA,EAAAA,KAACyF,EAAAA,GAAI,CAACjC,GAAIA,EAAIkC,IAAIL,EAAAA,EAAAA,GAAc5B,GAAYvD,SAAEA,GACzD,C,4DCFe,SAASoC,EAAQnB,GAAyG,IAAD6E,EAAA,IAAtE,SAACjE,EAAQ,YAAEM,EAAW,aAAE4D,GAA2C9E,EACrH,QAAZ6E,EAAAC,SAAY,IAAAD,IAAZC,EAAiBlG,GAAcA,EAAWQ,aAC1C,MAAM2F,EAsBV,SAAyB7D,GACrB,MAAM6D,EAAa7D,EAAYxC,0BACzBsG,EAAKD,EAAWzG,QAChB2G,EAAKF,EAAWxG,MAChB2G,EAAKH,EAAWvG,OAChB2G,EAAKJ,EAAWtG,MAChB2G,EAAKL,EAAWM,WAChBC,EAAMP,EAAWQ,gBAEvB,MAAM,YAANnJ,OAAmB4I,GAAE5I,OAAS,MAAN6I,EAAa,GAAE,gBAAA7I,OAAmB6I,IAAI7I,OAAS,MAAN8I,EAAa,GAAE,gBAAA9I,OAAmB8I,IAAI9I,OAAS,MAAN+I,EAAa,GAAE,gBAAA/I,OAAmB+I,IAAI/I,OAAS,MAANgJ,EAAa,GAAE,gBAAAhJ,OAAmBgJ,IAAIhJ,OAAU,MAAPkJ,EAAc,GAAE,iBAAAlJ,OAAoBkJ,GACpO,CAhCuBE,CAAgBtE,GAC7BjD,EAAUiD,EAAYjD,QAEtBwH,EAAOxH,EAAQuC,OACfkF,EAAmB,IAAIC,MAAoBF,GACjD,IAAIG,EAAQH,EACZ,KAAOG,KAAU,GAAG,CAChB,MAAMhH,EAAaX,EAAQ2H,GACrBC,EAAYf,EAAalG,GAG/B8G,EAAiBE,IACb/G,EAAAA,EAAAA,KAAA,OAAqDwD,GAAE,GAAAjG,OAAKwE,EAAQ,KAAAxE,OAAIwC,EAAWkH,kBAAiB,cAAchH,UAAS,GAAA1C,OAAKwE,EAAQ,cAAa7B,UACjJmD,EAAAA,EAAAA,MAAA,OAAyDpD,UAAU,+DAA8DC,SAAA,EAC7HF,EAAAA,EAAAA,KAACkH,EAAAA,EAAa,CAAuC1D,GAAG,OAAOlD,KAAMP,EAAW4D,UAAUwD,cAAeC,mBAAmB,QAAM,GAAA7J,OAA3GyJ,EAAS,uBAChChH,EAAAA,EAAAA,KAAA,OAAmDC,UAAU,iCAAgCC,SAAEmC,EAAYvC,sBAAsBC,IAAW,GAAAxC,OAA/HyJ,EAAS,gCAA6H,GAAAzJ,OAF1IyJ,EAAS,qCAGhB,GAAAzJ,OAJGyJ,EAAS,+BAM9B,CACA,OAAOhH,EAAAA,EAAAA,KAAA,OAAKC,UAAS,OAAA1C,OAAS2I,EAAU,wCAAuChG,SAAE2G,GACrF,C,6DCvBe,SAASzE,EAAUjB,GAA2G,IAAD6E,EAAA,IAAxE,SAACjE,EAAQ,YAAEM,EAAW,aAAE4D,GAA6C9E,EACzH,QAAZ6E,EAAAC,SAAY,IAAAD,IAAZC,EAAiBlG,GAAcA,EAAWQ,aAC1C,MAAM2F,EAqBV,SAAyB7D,GACrB,MAAM6D,EAAa7D,EAAY7C,sBACzB2G,EAAKD,EAAWzG,QAChB2G,EAAKF,EAAWxG,MAChB2G,EAAKH,EAAWvG,OAChB2G,EAAKJ,EAAWtG,MAChB2G,EAAKL,EAAWM,WAChBC,EAAMP,EAAWQ,gBAEvB,MAAM,YAANnJ,OAAmB4I,GAAE5I,OAAS,MAAN6I,EAAa,GAAE,gBAAA7I,OAAmB6I,IAAI7I,OAAS,MAAN8I,EAAa,GAAE,gBAAA9I,OAAmB8I,IAAI9I,OAAS,MAAN+I,EAAa,GAAE,gBAAA/I,OAAmB+I,IAAI/I,OAAS,MAANgJ,EAAa,GAAE,gBAAAhJ,OAAmBgJ,IAAIhJ,OAAU,MAAPkJ,EAAc,GAAE,iBAAAlJ,OAAoBkJ,GACpO,CA/BuBE,CAAgBtE,GAC7BjD,EAAUiD,EAAYjD,QAEtBwH,EAAOxH,EAAQuC,OACfkF,EAAmB,IAAIC,MAAoBF,GACjD,IAAIG,EAAQH,EACZ,KAAOG,KAAU,GAAG,CAChB,MAAMhH,EAAaX,EAAQ2H,GACrBC,EAAYf,EAAalG,GAG/B8G,EAAiBE,IACb/G,EAAAA,EAAAA,KAAA,OAAgDwD,GAAE,GAAAjG,OAAKwE,EAAQ,KAAAxE,OAAIwC,EAAWkH,kBAAiB,cAAchH,UAAS,GAAA1C,OAAKwE,EAAQ,cAAa7B,UAC5IF,EAAAA,EAAAA,KAAA,QAAsDC,UAAU,iEAAgEC,UAC5HF,EAAAA,EAAAA,KAACkH,EAAAA,EAAa,CAAuC1D,GAAG,OAAOlD,KAAMP,EAAW4D,UAAUwD,cAAeC,mBAAmB,QAAM,GAAA7J,OAA3GyJ,EAAS,uBAAoG,GAAAzJ,OAD1HyJ,EAAS,iCAEhB,GAAAzJ,OAHEyJ,EAAS,0BAK9B,CACA,OAAOhH,EAAAA,EAAAA,KAAA,OAAKC,UAAS,OAAA1C,OAAS2I,EAAU,wCAAuChG,SAAE2G,GACrF,C,6DCvBe,SAAS1G,EAAyBgB,GAAmE,IAAlE,iBAACf,EAAgB,KAAEE,GAA2Ca,EAC5G,GAAwB,MAApBf,EACA,OAAO,KAEX,MAAOiH,aAAcC,EAAaC,cAAeC,GAAiBpH,EAClE,OAAsB,MAAfkH,EACD,KACgB,MAAhBE,GACIxH,EAAAA,EAAAA,KAAA,OAA6DC,UAAU,oCAAmCC,UACxGF,EAAAA,EAAAA,KAACyH,EAAAA,EAAoB,CAACC,KAAMJ,EAAaK,MAAOrH,KAAO,0CAAA/C,OADL+C,EAAI,OAGxD+C,EAAAA,EAAAA,MAAA,OAA6DpD,UAAU,8CAA6CC,SAAA,EAClHF,EAAAA,EAAAA,KAAA,OAA+DC,UAAU,oCAAmCC,UACxGF,EAAAA,EAAAA,KAACyH,EAAAA,EAAoB,CAACC,KAAMJ,EAAaK,MAAOrH,KAAO,6CAAA/C,OADJ+C,KAGvDN,EAAAA,EAAAA,KAAA,OAAgEC,UAAU,oCAAmCC,UACzGF,EAAAA,EAAAA,KAACyH,EAAAA,EAAoB,CAACC,KAAMF,EAAcG,MAAOrH,KAAO,6CAAA/C,OADL+C,EAAI,QAErD,0CAAA/C,OAN4C+C,EAAI,KAStE,C,yGCzBe,SAASsH,EAAOzG,GAA8J,IAA9G,SAACjB,EAAQ,OAAE2H,EAAQC,GAAIC,EAAQ,UAAEC,GAAyE7G,EAKrL,OAJA8G,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAWC,EAAAA,EAAyB3J,IAAI4J,IAAIJ,EAAW,IAAIK,EAAAA,EAAgBL,EAAWH,EAAQE,IACpG,MAAO,IAAMI,EAAAA,EAAyB3J,IAAI8J,OAAOJ,GAAWK,SAAS,IAE1D,OAARrI,QAAQ,IAARA,EAAAA,EAAY,IACvB,C,eCVe,SAASsI,EAAWrH,GAAmK,IAAnG,SAACjB,EAAQ,UAAE8H,KAAcS,GAAsEtH,EAC9L,OAAOnB,EAAAA,EAAAA,KAAC4H,EAAO,CAACI,UAAWA,KAAeS,EAAevI,UACrDF,EAAAA,EAAAA,KAAC0I,EAAAA,EAAa,CAAiBlF,GAAIwE,EAAW5I,QAASc,EAAU,iBAAe,WAA5D8H,IAE5B,C,0BCDAW,GAAAxK,EAAAA,EAAAA,GAAA,8BACe,MAAMyK,UACTC,EAAAA,UAUR9L,WAAAA,CAAY+L,GACR9L,MAAM8L,GARVjK,OAAAC,eAAA,KAAA6J,EAAA,CAAA5J,UAAA,EAAAC,WAAA,KASIL,EAAAA,EAAAA,GAAAC,KAAI+J,GAAAA,GAA+BI,EAAAA,EAAiBnD,QAAQpH,IAAYI,KAAK0B,MAC7E1B,KAAKoK,MAAQ,CACTC,SAASjJ,EAAAA,EAAAA,KAAC0I,EAAAA,EAAa,CAAgCtJ,SAAOT,EAAAA,EAAAA,GAAEC,KAAI+J,GAAAA,IAA6B,GAAApL,OAAjEqB,KAAK4E,GAAE,iBAE/C,CAKA,MAAWA,GACP,OAAO5E,KAAKkK,MAAMtF,EACtB,CAEA,UAAW0F,GACP,OAAOtK,KAAKkK,MAAMI,MACtB,CAEA,yBAAWC,GACP,OAAOvK,KAAKkK,MAAMK,qBACtB,CAEA,mBAAWV,GACP,OAAO7J,KAAKkK,MAAML,eACtB,CAEA,QAAWnI,GACP,OAAO1B,KAAK6J,gBAAgBnI,IAChC,CAEA,sBAAW8G,GACP,OAAOxI,KAAK6J,gBAAgBrB,kBAChC,CAIgBgC,iBAAAA,GACZ,MAAM5F,EAAK5E,KAAK4E,GACV2F,EAAwBvK,KAAKuK,sBAEnCvK,KAAKyK,SAAS,CACVJ,SAASjJ,EAAAA,EAAAA,KAACwI,EAAW,CAA8BR,UAAWxE,EAAIqE,OAAQyB,EAAa1K,KAAKsK,OAAQtK,KAAKwI,oBAAoB9C,EAAAA,EAAAA,IAAmB,0BACtH1F,KAAK6J,gBAAiBX,GAAK,CAACyB,KAAMA,IAAMJ,GAAsB,GAAOK,KAAMA,IAAML,GAAsB,IAAUjJ,UAAAvB,EAAAA,EAAAA,GACtIC,KAAI+J,GAAAA,IAAA,GAAApL,OAFqBiG,EAAE,qBAKxC,CAEgBiG,MAAAA,GACZ,OAAO7K,KAAKoK,MAAMC,OACtB,EAWJ,SAASK,EAAatB,EAAmBZ,EAAwDO,GAC7F,MAAME,EAAmC,CACrCF,MAAOA,EACPvI,QAASsK,SAASC,eAAe3B,GACjC4B,MAAM,EACNC,QAAS,eAKb,OAH0B,MAAtBzC,IACAS,EAAOiC,UAAY1C,GAEhBS,CACX,CC1Fe,SAASkC,EAAiB5I,GAAgE,IAA/D,GAACqC,EAAE,OAAE0F,EAAM,KAAE5I,EAAI,mBAAE0J,GAAwC7I,EACjG,MAAM8I,EAAqB3J,EAAK4J,kBAAkBC,QAAOC,IAAOA,EAAGC,YAE7DjL,EAAU,GACVkL,EAAUhK,EAAKiK,YACrB,IAAK,MAAOC,EAAUxL,KAAWsL,EACxBL,EAAmBQ,SAASD,IAEjCpL,EAAQsL,MAAKrH,EAAAA,EAAAA,MAAA,OAAwEpD,UAAU,2BAA0BC,SAAA,EACrHF,EAAAA,EAAAA,KAAC0I,EAAAA,EAAa,CACVtJ,QAAO,GAAA7B,QAAKoN,EAAAA,EAAAA,IAAoBH,EAASjK,cAAYhD,OAAGwL,EAAAA,EAAiBnD,QAAQgF,OAAKrN,OAAGwL,EAAAA,EAAiBnD,QAAQiF,YAAUtN,OAAGwL,EAAAA,EAAiBnD,QAAQgF,OACxJ3K,UAAU,6EACdD,EAAAA,EAAAA,KAAC0I,EAAAA,EAAa,CAACtJ,QAASJ,EAAOiB,UAAU,wCAAqC,GAAA1C,OAJxDiG,EAAE,kCAAAjG,OAAiCiN,EAASjK,eAO1E,OAAOP,EAAAA,EAAAA,KAAA,OAAoCwD,GAAI0F,EAAQjJ,UAAU,gBAAgB6K,QAASd,EAAmB9J,SAAEd,GAAO,GAAA7B,OAAlGiG,EAAE,qBAC1B,C,eCPe,SAAS0D,EAAa/F,GAA6C,IAA5C,GAACqC,KAAOiF,GAAgCtH,EAC1E,MAAO6I,EAAoBb,IAA0B4B,EAAAA,EAAAA,WAAS,IACxD,KAACzK,GAASmI,EAEVlI,EAAcD,EAAK0K,QACnBhD,EAAS,GAAAzK,OAAMiG,EAAE,KAAAjG,OAAI0N,EAAAA,EAAgBC,UAAU3K,IAC/C2I,EAAM,GAAA3L,OAAMyK,EAAS,SAE3B,OAAO3E,EAAAA,EAAAA,MAAA,OAAgDG,GAAE,GAAAjG,OAAKyK,EAAS,cAAc/H,UAAU,iBAAgBC,SAAA,EAC3GF,EAAAA,EAAAA,KAAC4I,EAAoB,CAA0CpF,GAAIwE,EAAWkB,OAAQA,EAAQC,sBAAuBA,EAAuBV,gBAAiBA,GAAgB,GAAAlL,OAA/IgD,EAAW,gBAAAhD,OAAeiG,EAAE,OAC1DxD,EAAAA,EAAAA,KAAC+J,EAAiB,CAAuCzJ,KAAMA,EAAMkD,GAAIwE,EAAWkB,OAAQA,EAAQc,mBAAoBA,GAAmB,GAAAzM,OAAhHgD,EAAW,aAAAhD,OAAYiG,EAAE,QAAyF,GAAAjG,OAF7HgD,EAAW,kBAAAhD,OAAiBiG,EAAE,KAItD,C","sources":["app/property/EditorVoiceGames.ts","app/EditorVoiceApp.tsx","app/withInterpreter/DisplayButtonGroup.tsx","app/_SubMainContainer.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx","app/withInterpreter/CardList.tsx","app/withInterpreter/SimpleList.tsx","core/editorVoice/EditorVoiceSound.component.tsx","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx"],"sourcesContent":["import type {CompanionEnumWithParentSingleton}   from '@joookiwi/enumerable'\nimport {CompanionEnumWithParent, EnumWithParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/EditorVoiceGames.types'\n\nimport {ViewDisplays} from 'app/withInterpreter/ViewDisplays'\nimport {Games}        from 'core/game/Games'\n\nexport class EditorVoiceGames\n    extends EnumWithParent<Games, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAMES = new class EditorVoiceGames_AllGames extends EditorVoiceGames {\n\n        public override getAllRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER = new class EditorVoiceGames_SuperMarioMaker extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm1RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class EditorVoiceGames_SuperMarioMakerForNintendo3DS extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class EditorVoiceGames_SuperMarioMaker2 extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm3dsColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override getSmm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<EditorVoiceGames, typeof EditorVoiceGames, Games, typeof Games> = class CompanionEnum_EditorVoiceGames\n        extends CompanionEnumWithParent<EditorVoiceGames, typeof EditorVoiceGames, Games, typeof Games> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EditorVoiceGames\n\n        private constructor() {\n            super(EditorVoiceGames, Games,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_EditorVoiceGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm1Color(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public getAllRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (${viewDisplay.urlValue as | 'list' | 'card'} Game=all)`\n    }\n\n    public getSmm1RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (${viewDisplay.urlValue as | 'list' | 'card'} Game=1)`\n    }\n\n    public getSmm3dsRouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (${viewDisplay.urlValue as | 'list' | 'card'} Game=3DS)`\n    }\n\n    public getSmm2RouteName(viewDisplay: ViewDisplays,): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (${viewDisplay.urlValue as | 'list' | 'card'} Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport './EditorVoiceApp.scss'\n\nimport type {EditorVoiceProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {DimensionOnList}            from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}           from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}             from 'util/collection/GameCollection'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\nimport type {PossibleRouteName}          from 'route/EveryRoutes.types'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {EditorVoiceGames}                           from 'app/property/EditorVoiceGames'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport SimpleList                                   from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport {EditorVoices}                               from 'core/editorVoice/EditorVoices'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport GameImage                                    from 'core/game/GameImage'\nimport {Games}                                      from 'core/game/Games'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport ThemeImage                                   from 'core/theme/ThemeImage'\nimport {Themes}                                     from 'core/theme/Themes'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport {assert, filterGame, intersect}              from 'util/utilitiesMethods'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\n\nclass EditorVoiceAppInterpreter\n    implements AppInterpreterWithCardList<EditorVoices> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection,) {\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(EditorVoices.CompanionEnum.get.values, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: EditorVoices,) {\n        return <div className=\"editorVoices-container\">\n            <EditorVoiceSoundComponent editorVoiceSound={enumerable.editorVoiceSoundFileHolder} name={enumerable.englishName}/>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEditorVoice (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEditorVoice (card)',],\n] as const satisfies readonly ViewAndRouteName[]\n\nconst GamePossibilities = Games.Possibilities.get\nconst allGames = GamePossibilities.ALL_GAMES\nconst smm1 = Games.SUPER_MARIO_MAKER_1\nconst smm3ds = Games.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\nconst smm2 = Games.SUPER_MARIO_MAKER_2\n\n/** @reactComponent */\nexport default function EditorVoiceApp({viewDisplay, games,}: EditorVoiceProperties,) {\n    assert(viewDisplay !== ViewDisplays.TABLE, 'The EditorVoiceApp only handle the \"simple list\" or \"card list\" as a possible view display.',)\n    const titleContent = gameContentTranslation('editor voice.all',)\n    const appInterpreter = new EditorVoiceAppInterpreter(games,)\n\n    const game = intersect(allGames, games,).length === 3\n        ? EditorVoiceGames.ALL_GAMES\n        : games.hasSMM2\n            ? EditorVoiceGames.SUPER_MARIO_MAKER_2\n            : games.hasSMM1\n                ? EditorVoiceGames.SUPER_MARIO_MAKER\n                : EditorVoiceGames.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"editorVoice\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 description={<EditorVoiceDescription viewDisplay={viewDisplay} game={game}/>}\n                                 asideContent={<EditorVoiceAsideContent viewDisplay={viewDisplay} game={game}/>}>\n            <SimpleList reactKey=\"editorVoice\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"editorVoice\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             description={<EditorVoiceDescription viewDisplay={viewDisplay} game={game}/>}\n                             asideContent={<EditorVoiceAsideContent viewDisplay={viewDisplay} game={game}/>}>\n        <CardList reactKey=\"editorVoice\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n//region -------------------- Description content --------------------\n\ninterface EditorVoiceDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: EditorVoiceGames\n\n}\n\n/** @reactComponent */\nfunction EditorVoiceDescription({viewDisplay, game,}: EditorVoiceDescriptionProperties,) {\n    const entity = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName.toLowerCase(),)\n\n    const smm1Link = game.getSmm1RouteName(viewDisplay,)\n    const smm3dsLink = game.getSmm3dsRouteName(viewDisplay,)\n    const smm2Link = game.getSmm2RouteName(viewDisplay,)\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyEditorVoice (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyEditorVoice (card)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation('editor voice.description.intro page',)}\n            {gameContentTranslation('editor voice.description.intro games', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1Link}><GameImage reference={smm1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm3dsLink}><GameImage reference={smm3ds}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('editor voice.description.intro smm1', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-references-description\" routeName={smm1Link}><GameImage reference={smm1}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-references-description\" routeName={smm2Link}><GameImage reference={smm2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('editor voice.description.intro characters',)}\n            {gameContentTranslation('editor voice.description.intro variants', {\n                //TODO change the underwater link to a different link\n                //TODO change the european link to a different link\n                entityLink: <LinkText key=\"entityLink\" partialId=\"entityLink\" routeName=\"everyEntity\" color=\"primary\">{entity}</LinkText>,\n                underwaterLink: <LinkText key=\"underwaterLink\" partialId=\"underwaterEntityLink\" routeName=\"everyEntity\" color=\"primary\"><ThemeImage reference={Themes.UNDERWATER} isSmallPath/></LinkText>,\n                europeanVariantLink: <LinkText key=\"europeanVariantLink\" partialId=\"europeanEntityLink\" routeName=\"everyEntity\" color=\"primary\">{contentTranslation('variant.European',)}</LinkText>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('editor voice.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface EditorVoiceAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: EditorVoiceGames\n\n}\n\n/** @reactComponent */\nfunction EditorVoiceAsideContent({viewDisplay, game,}: EditorVoiceAsideContentProperties,) {\n    return <div id=\"editorVoice-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameLimit\" routeName={game.getAllRouteName(viewDisplay,)} color={game.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"editorVoice-gamesButton-singularGame-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smm1Game\" routeName={game.getSmm1RouteName(viewDisplay,)} color={game.smm1Color}><GameImage reference={smm1}/></LinkButton>\n            <LinkButton partialId=\"smm3dsGame\" routeName={game.getSmm3dsRouteName(viewDisplay,)} color={game.smm3dsColor}><GameImage reference={smm3ds}/></LinkButton>\n            <LinkButton partialId=\"smm2Game\" routeName={game.getSmm2RouteName(viewDisplay,)} color={game.smm2Color}><GameImage reference={smm2}/></LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import {Link, useLocation} from 'react-router-dom'\n\nimport type {DisplayButtonGroupProperties, DisplayButtonProperties} from 'app/withInterpreter/DisplayButtonGroup.properties'\n\nimport {ViewDisplays}  from 'app/withInterpreter/ViewDisplays'\nimport {routeFromName} from 'route/route'\n\n/**\n * Create a button to be used in a \"button group\" for displaying a specific \"view display\".\n *\n * @reactComponent\n */\nexport default function DisplayButtonGroup({reactKey: key, views, currentView,}: DisplayButtonGroupProperties,) {\n    return <div key={`${key} (button group container)`} id=\"btn-viewDisplay-container\" className=\"btn-group\">{views.map(([view, name,]) =>\n        <DisplayButton key={`${key} (button group content - ${view})`} reactKey={key} view={view} routeName={name} currentView={currentView}/>\n    )}</div>\n}\n\nfunction DisplayButton({reactKey: key, view, currentView, routeName,}: DisplayButtonProperties,) {\n    const {pathname: currentPath,} = useLocation()\n    const path = routeFromName(routeName,)\n\n    if (currentPath === path || view === currentView)\n        return <button key={`${key} (${view.name})`} className={`btn btn-success bi-${view.htmlType} btn-viewDisplay`} type=\"button\" disabled/>\n    return <Link key={`${key} (${view.name})`} to={path} className={`btn btn-dark bi-${view.htmlType} btn-viewDisplay`} onClick={() => ViewDisplays.CompanionEnum.get.current = view}/>\n}\n","import './_SubMainContainer.scss'\n\nimport type {ViewAndRouteName}                  from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {SimpleReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport DisplayButtonGroup from 'app/withInterpreter/DisplayButtonGroup'\nimport {ViewDisplays}     from 'app/withInterpreter/ViewDisplays'\nimport UnfinishedText     from 'app/tools/text/UnfinishedText'\n\ninterface SubMainContainerProperties\n    extends SimpleReactPropertiesWithChildren<ReactElementOrString> {\n\n    readonly reactKey: string\n\n    readonly viewDisplayAndRouteName: readonly ViewAndRouteName[]\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly alert?: ReactElementOrString\n\n    readonly titleContent: ReactElementOrString\n\n    readonly asideContent?: ReactElementOrString\n\n    readonly description?: ReactElementOrString\n\n}\n\n/** @reactComponent */\nexport default function SubMainContainer({reactKey, viewDisplayAndRouteName, viewDisplay, alert, titleContent, asideContent, description, children,}: SubMainContainerProperties,) {\n    return <div className=\"subMain-container\">\n        <div id={`${reactKey}-app-container`} className={`app-container ${viewDisplay.htmlType}-container`}>\n            <h1 id={`${reactKey}-app-title`} className=\"app-title\">{titleContent}</h1>\n            {alert == null ? null : <aside id={`${reactKey}-alert-container`} className=\"alert-container\">{alert}</aside>}\n            <aside className=\"viewChanger-container\">\n                <DisplayButtonGroup reactKey={reactKey} views={viewDisplayAndRouteName} currentView={viewDisplay}/>\n                {asideContent}\n            </aside>\n            {description == null ? <UnfinishedText type=\"paragraph\" isHidden>description</UnfinishedText> : <div className=\"description-container\">{description}</div>}\n            <div id={`${reactKey}-app-content`} className=\"app-content\">{children}</div>\n        </div>\n    </div>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or a simple underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {Content}                    from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList} from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactProperties}            from 'util/react/ReactProperties'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface CardListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithCardList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list of elements in a card manner.\n * It can be similar to the <u>simple list</u> but has more information displayed.\n *\n * @reactComponent\n */\nexport default function CardList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: CardListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main card list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <div key={`${uniqueKey} - main card list sub-container`} className=\"listElement-container cardListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                    <div key={`${uniqueKey} - card content container`} className=\"cardListName-content-container\">{interpreter.createCardListContent(enumerable)}</div>\n                </div>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithCardList,): string {\n    const dimensions = interpreter.createCardListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import type {ReactProperties}              from 'util/react/ReactProperties'\nimport type {AppInterpreterWithSimpleList} from 'app/interpreter/AppInterpreterWithSimpleList'\nimport type {Content}                      from 'app/interpreter/AppInterpreter'\n\nimport NameComponent from 'lang/name/component/Name.component'\n\ninterface SimpleListProperties<CONTENT extends Content, >\n    extends ReactProperties {\n\n    readonly reactKey: string\n\n    readonly interpreter: AppInterpreterWithSimpleList<CONTENT>\n\n    readonly keyRetriever?: (enumerable: CONTENT,) => string\n\n}\n\n/**\n * Create a list with only the names displayed\n *\n * @reactComponent\n */\nexport default function SimpleList<const CONTENT extends Content, >({reactKey, interpreter, keyRetriever,}: SimpleListProperties<CONTENT>,) {\n    keyRetriever ??= enumerable => enumerable.englishName\n    const dimensions = createDimension(interpreter,)\n    const content = interpreter.content\n\n    const size = content.length\n    const contentToDisplay = new Array<ReactElement>(size,)\n    let index = size\n    while (index-- > 0) {\n        const enumerable = content[index]\n        const uniqueKey = keyRetriever(enumerable,)\n\n        //TODO change the popover to be on the id instead of the name directly\n        contentToDisplay[index] =\n            <div key={`${uniqueKey} - main list container`} id={`${reactKey}-${enumerable.englishNameInHtml}-container`} className={`${reactKey}-container`}>\n                <span key={`${uniqueKey} - main list text-container`} className=\"listElement-container simpleListElement-container rounded-pill\">\n                    <NameComponent key={`${uniqueKey} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                </span>\n            </div>\n    }\n    return <div className={`row ${dimensions} align-items-center flex-grow-1 gx-0`}>{contentToDisplay}</div>\n}\n\nfunction createDimension(interpreter: AppInterpreterWithSimpleList,): string {\n    const dimensions = interpreter.createListDimension()\n    const df = dimensions.default\n    const sm = dimensions.small\n    const md = dimensions.medium\n    const lg = dimensions.large\n    const xl = dimensions.extraLarge\n    const xxl = dimensions.extraExtraLarge\n\n    return `row-cols-${df}${sm == null ? '' : ` row-cols-sm-${sm}`}${md == null ? '' : ` row-cols-md-${md}`}${lg == null ? '' : ` row-cols-lg-${lg}`}${xl == null ? '' : ` row-cols-xl-${xl}`}${xxl == null ? '' : ` row-cols-xxl-${xxl}`}`\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    readonly editorVoiceSound: Nullable<EditorVoiceSound>\n\n    readonly name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const {regularSound: regularFile, europeanSound: europeanFile,} = editorVoiceSound\n    return regularFile == null\n        ? null\n        : europeanFile == null\n            ? <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n                <SimpleSoundComponent file={regularFile} title={name}/>\n            </div>\n            : <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n                <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={regularFile} title={name}/>\n                </div>\n                <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n                    <SimpleSoundComponent file={europeanFile} title={name}/>\n                </div>\n            </div>\n\n}\n","import {useEffect} from 'react'\n\nimport type {PopoverConfiguration}                from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithOptionalChildren} from 'util/react/ReactProperties'\n\nimport {BootstrapInstanceHandler} from 'bootstrap/BootstrapInstanceHandler'\nimport {PopoverInstance}          from 'bootstrap/popover/PopoverInstance'\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.2/components/popovers\n */\nexport default function Popover<const T extends ReactElement = ReactElement, >({children, option, on: triggers, elementId,}: ReactPropertiesWithOptionalChildren<PopoverConfiguration, T>,) {\n    useEffect(() => {\n        const instance = BootstrapInstanceHandler.get.add(elementId, new PopoverInstance(elementId, option, triggers,),)\n        return () => BootstrapInstanceHandler.get.remove(instance,).destroy()\n    },)\n    return children ?? null\n}\n","import type {PopoverConfiguration}        from 'bootstrap/popover/Popover.types'\nimport type {ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport Popover       from 'bootstrap/popover/Popover'\nimport TextComponent from 'app/tools/text/TextComponent'\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<const T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertiesWithChildren<PopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>\n}\n","import type {Dispatch, SetStateAction} from 'react'\nimport Popover                         from 'bootstrap/js/dist/popover'\nimport {Component}                     from 'react'\n\nimport type {PopoverOrientation}                                       from 'bootstrap/popover/PopoverInstance.declaration'\nimport type {Name}                                                     from 'lang/name/Name'\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties} from 'lang/name/component/Name.properties'\nimport type {ReactComponent}                                           from 'util/react/ReactComponent'\n\nimport TextComponent        from 'app/tools/text/TextComponent'\nimport TextPopover          from 'bootstrap/popover/TextPopover'\nimport {ProjectLanguages}   from 'lang/ProjectLanguages'\nimport {contentTranslation} from 'lang/components/translationMethods'\n\n/** @reactComponent */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    readonly #currentLanguageTextContent\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,)\n        this.#currentLanguageTextContent = ProjectLanguages.current.get<string>(this.name,)\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        }\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id\n    }\n\n    public get listId(): string {\n        return this.props.listId\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override componentDidMount(): void {\n        const id = this.id\n        const setDoesDisplayPopover = this.setDoesDisplayPopover\n\n        this.setState({\n            element: <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, contentTranslation('In other languages',),)}\n                                  {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                {this.#currentLanguageTextContent}\n            </TextPopover>,\n        })\n    }\n\n    public override render(): NonNullReactElement {\n        return this.state.element\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: NullableString<PopoverOrientation>, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    }\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation\n\n    return option\n}\n","import './NameList.component.scss'\n\nimport type {NameListProperties} from 'lang/name/component/Name.properties'\n\nimport TextComponent         from 'app/tools/text/TextComponent'\nimport {languageTranslation} from 'lang/components/translationMethods'\nimport {ProjectLanguages}    from 'lang/ProjectLanguages'\n\n/** @reactComponent */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(it => !it.isCurrent)\n\n    const content = [] as ReactElement[]\n    const nameMap = name.toNameMap()\n    for (const [language, value,] of nameMap) {\n        if (!languagesToDisplay.includes(language,))\n            continue\n        content.push(<div key={`${id} - single language container (${language.englishName}`} className=\"singleLanguage-container\">\n            <TextComponent\n                content={`${languageTranslation(language.englishName)}${ProjectLanguages.current.space}${ProjectLanguages.current.unionTrait}${ProjectLanguages.current.space}`}\n                className=\"language-text col small text-primary text-opacity-50 text-end space-pre\"/>\n            <TextComponent content={value} className=\"languageValue-text col text-start\"/>\n        </div>,)\n    }\n    return <div key={`${id} - list container`} id={listId} className=\"language-list\" hidden={!doesDisplayPopover}>{content}</div>\n}\n","import {useState} from 'react'\n\nimport type {NameProperties} from 'lang/name/component/Name.properties'\n\nimport NamePopoverComponent from 'lang/name/component/NamePopover.component'\nimport NameListComponent    from 'lang/name/component/NameList.component'\nimport {StringContainer}    from 'util/StringContainer'\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.current\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false)\n    const {name,} = otherProperties\n\n    const englishName = name.english\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`\n    const listId = `${elementId}-list`\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`} className=\"name-container\">\n        <NamePopoverComponent key={`${englishName} - popover (${id})`} id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent key={`${englishName} - list (${id})`} name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>\n}\n"],"names":["EditorVoiceGames","EnumWithParent","constructor","super","allColor","smm1Color","smm3dsColor","smm2Color","getAllRouteName","viewDisplay","concat","urlValue","getSmm1RouteName","getSmm3dsRouteName","getSmm2RouteName","_EditorVoiceGames","ALL_GAMES","SUPER_MARIO_MAKER","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_EditorVoiceGames","CompanionEnum_EditorVoiceGames","CompanionEnumWithParent","Games","get","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","this","Object","defineProperty","writable","value","_games","EditorVoiceAppInterpreter","games","content","filterGame","EditorVoices","values","createListDimension","default","small","medium","large","createCardListDimension","createCardListContent","enumerable","_jsx","className","children","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","name","englishName","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","allGames","Possibilities","smm1","SUPER_MARIO_MAKER_1","smm3ds","smm2","EditorVoiceApp","_ref","assert","TABLE","titleContent","gameContentTranslation","appInterpreter","game","intersect","length","hasSMM2","hasSMM1","SubMainContainer","reactKey","description","EditorVoiceDescription","asideContent","EditorVoiceAsideContent","SimpleList","interpreter","CardList","_ref2","_OtherWordInTheGames$","entity","OtherWordInTheGames","ENTITY","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","smm1Link","smm3dsLink","smm2Link","listLink","cardLink","_jsxs","_Fragment","TextOrLink","id","routeName","GameImage","reference","entityLink","LinkText","partialId","color","underwaterLink","ThemeImage","Themes","UNDERWATER","isSmallPath","europeanVariantLink","contentTranslation","cardsLink","_ref3","LinkButton","DisplayButtonGroup","key","views","currentView","map","view","DisplayButton","pathname","currentPath","useLocation","path","routeFromName","htmlType","type","disabled","Link","to","onClick","current","alert","UnfinishedText","isHidden","_keyRetriever","keyRetriever","dimensions","df","sm","md","lg","xl","extraLarge","xxl","extraExtraLarge","createDimension","size","contentToDisplay","Array","index","uniqueKey","englishNameInHtml","NameComponent","nameContainer","popoverOrientation","regularSound","regularFile","europeanSound","europeanFile","SimpleSoundComponent","file","title","Popover","option","on","triggers","elementId","useEffect","instance","BootstrapInstanceHandler","add","PopoverInstance","remove","destroy","TextPopover","otherProperties","TextComponent","_currentLanguageTextContent","NamePopoverComponent","Component","props","ProjectLanguages","state","element","listId","setDoesDisplayPopover","componentDidMount","setState","createOption","show","hide","render","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","it","isCurrent","nameMap","toNameMap","language","includes","push","languageTranslation","space","unionTrait","hidden","useState","english","StringContainer","getInHtml"],"sourceRoot":""}