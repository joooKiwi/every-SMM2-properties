{"version":3,"file":"static/js/982.fcdbea15.chunk.js","mappings":"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","sources":["app/options/GameStyleAppOption.tsx","app/GameStyleApp.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/GameStyleAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {GameStyles}          from 'core/gameStyle/GameStyles'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport {Themes}                 from 'core/theme/Themes'\nimport {Times}                  from 'core/time/Times'\nimport {ProjectLanguages}       from 'lang/ProjectLanguages'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\nexport abstract class GameStyleAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<GameStyles> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =             new class GameStyleAppOption_Images extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return enumeration.renderSingleComponent\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly NAME =              new class GameStyleAppOption_Name extends GameStyleAppOption {\n\n        protected override _createContentOption(enumeration: GameStyles,) {\n            return CommonOptions.get.getNameContent(enumeration)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_DESERT_WIND = new class GameStyleAppOption_NightDesertWind extends GameStyleAppOption {\n\n        protected override _createContentOption({reference,}: GameStyles,) {\n            return <NightEffectComponent gameStyle={reference}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'nightDesertWind',\n                element: <div className=\"night-desert-wind-effect-container\">{Themes.DESERT.renderSingleComponent(false)}{Times.NIGHT.renderSingleComponent}</div>,\n                tooltip: gameContentTranslation('Wind effect (night desert)', {\n                    night: unfinishedText('night'),//TODO add night reference\n                    desert: ProjectLanguages.current.get(Themes.DESERT.reference)!.toLowerCase(),\n                },),\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<GameStyleAppOption, typeof GameStyleAppOption> = class CompanionEnum_GameStyleAppOption\n        extends CompanionEnum<GameStyleAppOption, typeof GameStyleAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_GameStyleAppOption\n\n        private constructor() {\n            super(GameStyleAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_GameStyleAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: GameStyles,): ReactElement\n\n    public renderContent(enumeration: GameStyles,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './GameStyleApp.scss'\n\nimport type {GameStyleProperties}     from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}          from 'util/collection/GameCollection'\n\nimport SubMainContainer         from 'app/_SubMainContainer'\nimport {GameStyleAppOption}     from 'app/options/GameStyleAppOption'\nimport Table                    from 'app/tools/table/Table'\nimport CardList                 from 'app/withInterpreter/CardList'\nimport SimpleList               from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {GameStyles}             from 'core/gameStyle/GameStyles'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport {filterGame}             from 'util/utilitiesMethods'\n\nclass GameStyleAppInterpreter\n    implements AppInterpreterWithTable<GameStyles, GameStyleAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection,) {\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        return filterGame(GameStyles.CompanionEnum.get.values, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        return {\n            default: 1,\n            small: 2,\n            medium: 3,\n            extraLarge: 5,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: GameStyles,) {\n        return <div className=\"card-body\" id={`gameStyle-${enumerable.englishNameInHtml}`}>\n            {enumerable.renderSingleComponent}\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableColor = 'primary' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('game style.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): readonly GameStyleAppOption[] {\n        return [\n            GameStyleAppOption.ICON,\n            GameStyleAppOption.NAME,\n            GameStyleAppOption.NIGHT_DESERT_WIND,\n        ]\n    }\n\n    public createTableContent(content: GameStyles, option: GameStyleAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: GameStyleAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyGameStyle (list)',],\n    [ViewDisplays.CARD_LIST, 'everyGameStyle (card)',],\n    [ViewDisplays.TABLE, 'everyGameStyle (table)',],\n] as const satisfies readonly ViewAndRouteName[]\nconst titleContent = gameContentTranslation('game style.all',)\n\n/** @reactComponent */\nexport default function GameStyleApp({viewDisplay, games,}: GameStyleProperties,) {\n    const appInterpreter = new GameStyleAppInterpreter(games,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <SimpleList reactKey=\"gameStyle\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n            <CardList reactKey=\"gameStyle\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"gameStyle\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}>\n        <Table id=\"gameStyle-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    readonly gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    readonly theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["GameStyleAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","_GameStyleAppOption","ICON","renderSingleComponent","key","element","unfinishedText","NAME","CommonOptions","get","getNameContent","nameHeader","NIGHT_DESERT_WIND","_ref","reference","_jsx","NightEffectComponent","gameStyle","_jsxs","className","children","Themes","DESERT","Times","NIGHT","tooltip","gameContentTranslation","night","desert","ProjectLanguages","current","toLowerCase","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_GameStyleAppOption","CompanionEnum_GameStyleAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","value","_games","GameStyleAppInterpreter","games","tableHeadersColor","tableColor","tableCaption","content","filterGame","GameStyles","values","createListDimension","default","small","medium","extraLarge","createCardListDimension","createCardListContent","enumerable","id","concat","englishNameInHtml","tableOptions","createTableContent","option","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","titleContent","GameStyleApp","viewDisplay","appInterpreter","SubMainContainer","reactKey","SimpleList","interpreter","CardList","Table","properties","NightEffectByGameStyle","NightEffectByTheme","nightDesertWindTranslationKey","translationKey","_Fragment","_ref2","_effect$createNewComp","theme","effect","createNewComponent"],"sourceRoot":""}