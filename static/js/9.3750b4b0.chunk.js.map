{"version":3,"sources":["bootstrap/popover/PopoverInstance.ts","bootstrap/popover/Popover.tsx","bootstrap/popover/TextPopover.tsx","lang/name/component/NamePopover.component.tsx","lang/name/component/NameList.component.tsx","lang/name/component/Name.component.tsx","app/tools/text/BooleanTextComponent.tsx","app/tools/text/BooleanResultTextComponent.tsx","app/tools/sounds/SoundFounds.ts","app/tools/sounds/SoundStates.ts","app/tools/sounds/holder/SoundSubElementsHolder.ts","app/tools/sounds/SimpleSound.tsx","app/tools/table/header/HeaderTypes.ts","app/tools/table/header/HeaderHolder.container.ts","app/tools/table/TableContent.tsx","app/tools/table/TableHeaders.tsx","app/tools/table/Table.tsx","app/tools/text/YesOrNoResultTextComponent.tsx","app/EveryMysteryMushroomsApp.tsx"],"names":["PopoverInstance","element","options","DEFAULT_OPTIONS","callbacks","on","Popover","getOrCreateInstance","this","inserted","onInserted","callback","SHOW_EVENT","SHOWN_EVENT","HIDE_EVENT","HIDDEN_EVENT","INSERTED_EVENT","BootstrapInstance","_getInstance","BootstrapWithBasicEventsInstance","type","addEventListener","event","children","EMPTY_REACT_ELEMENT","option","triggers","elementId","useEffect","flat","forEach","Event","SHOW","SHOWN","HIDE","HIDDEN","INSERTED","TextPopover","otherProperties","TextComponent","id","content","NamePopoverComponent","props","ProjectLanguages","currentLanguage","get","name","state","listId","setDoesDisplayPopover","popoverOrientation","setState","ContentTranslationComponent","translation","createOption","show","hide","Component","title","document","getElementById","html","trigger","placement","NameListComponent","doesDisplayPopover","languagesToDisplay","originalLanguages","filter","language","isCurrentLanguage","className","toNameMap","entries","includes","map","value","languageKey","englishName","LanguageTranslationComponent","style","unionTrait","NameComponent","useState","english","StringContainer","getInHtml","BooleanTextComponent","boolean","_true","true","_false","false","BooleanResultTextComponent","classes","trueValue","trueColor","falseValue","falseColor","Symbol","iterator","SoundFounds","Enum","getNonNullDefaultOn","setDefault","setNonNullDefaultOn","values","find","enumerable","getValueOn","getValuesOn","YES","NO","ON_PLAY","ON_CREATE","_DEFAULT","SoundStates","STANDBY","playElement","PAUSED","stopElement","PLAYING","pauseElement","EXCEPTION","exceptionElement","SoundSubElementsHolder","SimpleSound","properties","isSourceRetrieved","__isSoundFound","audio","source","_source","_everyAudioElements","has","set","Audio","onended","loop","isEveryAudioLoopsAfterCompleted","isSoundFound","default","Number","isFinite","_audio","duration","onCreate","getElements","onClick","_title","audioElement","play","then","onPlay","catch","pause","currentTime","Map","HeaderTypes","simpleName","HEAD","layout","FOOT","reverse","HeaderHolderContainer","tableIdentifier","header","callbackToRenderHead","callbackToRenderFoot","setParent","assert","setSubHeaders","length","currentSubLevel","parent","currentHeight","width","subLevel","subHeadersWidth","subHeaders","reduce","widthSum","setRendered","isHead","renderHead","renderFoot","wasRendered","maximumSubLevel","previousHeader","instance","push","TableContent","key","innerContent","index","TableHeaders","headers","everyHeadersHolder","headerAsTh","createSingleHeaderContent","everyHeaderHolders","headerHolder","resetRendered","getLayout","layoutAsTr","layoutAsTh","render","EMPTY_ARRAY","Image","path","fallbackName","alt","tooltip","AnyTranslationComponent","namespace","Tooltip","translationKey","replace","getHeaderKey","height","colSpan","rowSpan","createTooltip","getHeaderContent","PureComponent","Table","caption","DEFAULT_TABLE_COLOR","DEFAULT_HEADERS_COLOR","isHeaderNull","DelayedObjectHolderContainer","layoutHolder","tableColor","headersColor","array","getSubHeaders","everyHeaders","subHeader","headerContainer","j","i","YesOrNoResultTextComponent","EveryMysteryMushroomsApp","MysteryMushrooms","mysteryMushroom","reference","englishNameOnFile","englishNameAsId","englishNameInHtml","isMysteryMushroom","MYSTERY_MUSHROOM","conditionToUnlockIt","canBeUnlockedByAnAmiibo","games","game","comma","powerUpCollectedSounds","waitingImages","tauntImages","tauntSounds","downImages","walkImages","runningImages","swimmingImages","jumpImages","jumpSounds","fallingAfterJumpImages","onGroundAfterJumpSounds","turningImages","turningSounds","climbingImages","goalPoleImages","goalPoleSounds","lostALifeSounds","pluralName","BASE_PATH","_content","AbstractApp","sounds","sound1","sound2","images","image","imagesFormattedAsGroup","newArray","subImages","partialId"],"mappings":"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","file":"static/js/9.3750b4b0.chunk.js","sourcesContent":["import {Popover} from 'bootstrap';\n\nimport type {PopoverEventCallbackReceived, PopoverEvents, PopoverEventsReceived} from './Popover.types';\n\nimport {BootstrapInstance}                from '../BootstapInstance';\nimport {BootstrapWithBasicEventsInstance} from '../BootstrapWithBasicEventsInstance';\n\nexport class PopoverInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >\n    extends BootstrapWithBasicEventsInstance<typeof PopoverInstance, Popover, Popover.Options, ELEMENT, ID> {\n\n    public static DEFAULT_OPTIONS: Partial<Popover.Options> = {};\n    /**\n     * @see Popover.Events.show\n     */\n    public static readonly SHOW_EVENT = Popover.Event.SHOW as Popover.Events.show;\n    /**\n     * @see Popover.Events.shown\n     */\n    public static readonly SHOWN_EVENT = Popover.Event.SHOWN as Popover.Events.shown;\n    /**\n     * @see Popover.Events.hide\n     */\n    public static readonly HIDE_EVENT = Popover.Event.HIDE as Popover.Events.hide;\n    /**\n     * @see Popover.Events.hidden\n     */\n    public static readonly HIDDEN_EVENT = Popover.Event.HIDDEN as Popover.Events.hidden;\n    /**\n     * @see Popover.Events.inserted\n     */\n    public static readonly INSERTED_EVENT = Popover.Event.INSERTED as Popover.Events.inserted;\n\n    public constructor(element: | ID | ELEMENT, options: Partial<Popover.Options> = PopoverInstance.DEFAULT_OPTIONS, callbacks: PopoverEventsReceived = null,) {\n        super(PopoverInstance, element, options,);\n        this.on(callbacks);\n    }\n\n    protected override _createInstance(options: Partial<Popover.Options>,): Popover {\n        return Popover.getOrCreateInstance(this.element, options,);\n    }\n\n\n    #addEventListener(type: string, callback: PopoverEventCallbackReceived<this>,): this {\n        if (callback != null)\n            this.element.addEventListener(type, event => callback(this, event,));\n        return this;\n    }\n\n    /**\n     * @param callbacks\n     * @see https://getbootstrap.com/docs/5.1/components/popovers/#events\n     */\n    protected override _on(callbacks: Partial<PopoverEvents<this>>,): this {\n        if (callbacks.inserted != null)\n            this.onInserted(callbacks.inserted);\n        return this;\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.show\n     */\n    public override onShow(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOW_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.shown\n     */\n    public override onShown(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.SHOWN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hide\n     */\n    public override onHide(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDE_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.hidden\n     */\n    public override onHidden(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.HIDDEN_EVENT, callback,);\n    }\n\n    /**\n     * @param callback\n     * @see Popover.Events.inserted\n     */\n    public onInserted(callback: PopoverEventCallbackReceived<this>,): this {\n        return this.#addEventListener(PopoverInstance.INSERTED_EVENT, callback,);\n    }\n\n\n    public static getInstance<ELEMENT extends HTMLElement = HTMLElement, ID extends string = string, >(element: | ELEMENT | ID,): PopoverInstance<ELEMENT, ID> {\n        return BootstrapInstance._getInstance(PopoverInstance, element);\n    }\n\n}\n","import {useEffect}         from 'react';\n\nimport type {PopoverConfiguration}                            from './Popover.types';\nimport type {ReactElement, ReactPropertyWithOptionalChildren} from '../../util/react/ReactProperty';\n\nimport {EMPTY_REACT_ELEMENT} from '../../util/emptyReactVariables';\nimport {PopoverInstance}     from './PopoverInstance';\n\n/**\n * Create a new {@link bootstrap.Popover Popover} instance once the element is rendered\n *\n * @param properties the properties received (containing the content, the option & the id)\n * @reactComponent\n * @see https://getbootstrap.com/docs/5.1/components/popovers/\n */\nexport default function Popover<T extends ReactElement = ReactElement, >({children = EMPTY_REACT_ELEMENT as T, option, on: triggers, elementId,}: ReactPropertyWithOptionalChildren<PopoverConfiguration, T>,): T {\n    useEffect(() => [elementId].flat().forEach(elementId => new PopoverInstance(elementId, option, triggers,)));\n    return children;\n}\n","import Popover from './Popover';\n\nimport type {SpanPopoverConfiguration}                        from './Popover.types';\nimport type {ReactElementOrString, ReactPropertyWithChildren} from '../../util/react/ReactProperty';\n\nimport TextComponent from '../../app/tools/text/TextComponent';\n\n/**\n *\n * @param properties\n * @reactComponent\n */\nexport default function TextPopover<T extends ReactElementOrString = ReactElementOrString, >({children, elementId, ...otherProperties}: ReactPropertyWithChildren<SpanPopoverConfiguration, T>,) {\n    return <Popover elementId={elementId} {...otherProperties}>\n        <TextComponent key={elementId} id={elementId} content={children} data-bs-toggle=\"popover\"/>\n    </Popover>;\n}\n","import {Popover}                                       from 'bootstrap';\nimport {Component, type Dispatch, type SetStateAction} from 'react';\n\nimport type {Name}                                                                         from '../Name';\nimport type {NamePopoverProperties, NamePopoverStates, NameProperties, PopoverOrientation} from './Name.properties';\nimport type {ReactComponent}                                                               from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                                                 from '../../../util/react/ReactProperty';\n\nimport ContentTranslationComponent from '../../components/ContentTranslationComponent';\nimport {ProjectLanguages}          from '../../ProjectLanguages';\nimport TextComponent               from '../../../app/tools/text/TextComponent';\nimport TextPopover                 from '../../../bootstrap/popover/TextPopover';\n\n/**\n * @reactComponent\n */\nexport default class NamePopoverComponent\n    extends Component<NamePopoverProperties, NamePopoverStates>\n    implements ReactComponent {\n\n    readonly #currentLanguageTextContent;\n\n    constructor(props: NamePopoverProperties,) {\n        super(props,);\n        this.#currentLanguageTextContent = ProjectLanguages.currentLanguage.get<string>(this.otherProperties.name);\n        this.state = {\n            element: <TextComponent key={`${this.id} - temporary`} content={this.#currentLanguageTextContent}/>,\n        };\n    }\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get listId(): string {\n        return this.props.listId;\n    }\n\n    public get setDoesDisplayPopover(): Dispatch<SetStateAction<boolean>> {\n        return this.props.setDoesDisplayPopover;\n    }\n\n    public get otherProperties(): Omit<NameProperties, 'id'> {\n        return this.props.otherProperties;\n    }\n\n    public get name(): Name<string> {\n        return this.otherProperties.name;\n    }\n\n    public get popoverOrientation(): | PopoverOrientation | undefined {\n        return this.otherProperties.popoverOrientation;\n    }\n\n\n    public override componentDidMount(): void {\n        const id = this.id;\n        const setDoesDisplayPopover = this.setDoesDisplayPopover;\n\n        this.setState({\n            element: <ContentTranslationComponent>{translation =>\n                <TextPopover key={`${id} - span popover`} elementId={id} option={createOption(this.listId, this.popoverOrientation, translation('In other languages'),)}\n                             {...this.otherProperties} on={({show: () => setDoesDisplayPopover(true), hide: () => setDoesDisplayPopover(false),})}>\n                    {this.#currentLanguageTextContent}\n                </TextPopover>\n            }</ContentTranslationComponent>,\n        });\n    }\n\n    public override render(): ReactElement {\n        return this.state.element;\n    }\n\n}\n\n/**\n * Create the option for the name popover\n *\n * @param elementId the element id\n * @param popoverOrientation the {@link Popover popover} orientation\n * @param title popover title\n */\nfunction createOption(elementId: string, popoverOrientation: | PopoverOrientation | undefined, title: string,): Partial<Popover.Options> {\n    const option: Partial<Popover.Options> = {\n        title: title,\n        content: document.getElementById(elementId)!,\n        html: true,\n        trigger: 'hover focus',\n    };\n    if (popoverOrientation != null)\n        option.placement = popoverOrientation;\n\n    return option;\n}\n","import type {NameListProperties} from './Name.properties';\n\nimport LanguageTranslationComponent from '../../components/LanguageTranslationComponent';\nimport {ProjectLanguages}           from '../../ProjectLanguages';\nimport TextComponent                from '../../../app/tools/text/TextComponent';\n\n/**\n * @reactComponent\n */\nexport default function NameListComponent({id, listId, name, doesDisplayPopover,}: NameListProperties,) {\n    const languagesToDisplay = name.originalLanguages.filter(language => !language.isCurrentLanguage);\n\n    return <ul key={`${id} - list`} id={listId} className={`language-list ${doesDisplayPopover ? '' : 'visually-hidden'}`}>{\n        [...name.toNameMap().entries()].filter(([language,],) => languagesToDisplay.includes(language))\n            .map(([language, value,],) => {\n                const languageKey = `${ProjectLanguages.currentLanguage.englishName} - ${language.englishName}`;\n\n                return <LanguageTranslationComponent key={`${id} - language translation component (${languageKey})`}>{translation =>\n                    <li key={`${id} - list element (${languageKey})`} style={({'--language': `'${translation(language.englishName)} ${language.unionTrait} '`,})}>\n                        <TextComponent content={value}/>\n                    </li>\n                }</LanguageTranslationComponent>;\n            })\n    }</ul>;\n}\n","import './Name.component.scss';\n\nimport {useState} from 'react';\n\nimport type {NameProperties} from './Name.properties';\n\nimport {StringContainer}    from '../../../util/StringContainer';\nimport NamePopoverComponent from './NamePopover.component';\nimport NameListComponent    from './NameList.component';\n\n/**\n * A name component used to render the current language in text format\n * and the other languages (excluding the current one) in a simple list format.\n *\n * @param properties\n * @reactComponent\n * @see Name.toNameMap\n * @see ProjectLanguages.currentLanguage\n * @todo move the name structure into the popover\n */\nexport default function NameComponent({id, ...otherProperties}: NameProperties,) {\n    const [doesDisplayPopover, setDoesDisplayPopover,] = useState(false);\n    const {name,} = otherProperties;\n\n    const englishName = name.english;\n    const elementId = `${id}-${StringContainer.getInHtml(englishName)}`;\n    const listId = `${elementId}-list`;\n\n    return <div key={`${englishName} - container (${id})`} id={`${elementId}-container`}>\n        <NamePopoverComponent id={elementId} listId={listId} setDoesDisplayPopover={setDoesDisplayPopover} otherProperties={otherProperties}/>\n        <NameListComponent name={name} id={elementId} listId={listId} doesDisplayPopover={doesDisplayPopover}/>\n    </div>;\n}\n","import type {BooleanTextProperties} from './properties/BooleanTextProperties';\n\nimport TextComponent from './TextComponent';\n\n/**\n * Create a simple {@link TextComponent}\n * with a variable value based on a simple boolean.\n * @reactComponent\n */\nexport default function BooleanTextComponent({boolean, true: _true, false: _false, ...otherProperties}: BooleanTextProperties,) {\n    return <TextComponent content={boolean ? _true : _false} {...otherProperties}/>;\n}\n","import type {BooleanResultTextProperties, TextColor} from './properties/BooleanResultTextProperties';\n\nimport BooleanTextComponent from './BooleanTextComponent';\n\nconst TRUE_DEFAULT_COLOR: TextColor = 'text-success';\nconst FALSE_DEFAULT_COLOR: TextColor = 'text-danger';\n\n/**\n * Create a coloration based on the boolean value.\n *\n * Return a new {@link BooleanTextComponent}\n * with the classes \"text-success\" or \"text-danger\".\n * @reactComponent\n */\nexport default function BooleanResultTextComponent({boolean, classes, true: _true, false: _false, ...otherProperties}: BooleanResultTextProperties,) {\n    const [trueValue, trueColor,] = typeof _true == 'string' ? [_true, TRUE_DEFAULT_COLOR] : _true;\n    const [falseValue, falseColor,] = typeof _false == 'string' ? [_false, FALSE_DEFAULT_COLOR] : _false;\n\n    return <BooleanTextComponent classes={[...(classes ?? []), (boolean ? trueColor : falseColor)]} boolean={boolean} true={trueValue} false={falseValue} {...otherProperties}/>;\n}\n","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, IsSourceFoundCallback, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundFounds.types';\nimport type {ClassWithEnglishName}                                                                                                                                                                                      from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                                           from '../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundFounds\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    /**\n     * Tell that the sound will always be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly YES =       new class SoundFounds_Yes extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(true);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): true {\n            callback(true);\n            return true;\n        }\n\n    }('yes',);\n    /**\n     * Tell that the sound will never be found.\n     *\n     * @noValidationOnPlay\n     * @noValidationOnCreate\n     */\n    public static readonly NO =        new class SoundFounds_No extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback(false);\n        }\n\n        public override onPlay(callback: IsSourceFoundCallback,): false {\n            callback(false);\n            return false;\n        }\n\n    }('no',);\n    /**\n     * Tell whenever the sound is present or not\n     * when the audio source will be played.\n     *\n     * @noValidationOnCreate\n     * @defaultValue\n     */\n    public static readonly ON_PLAY =   new class SoundFounds_OnPlay extends SoundFounds {\n\n        public override onPlay(callback: IsSourceFoundCallback,): null {\n            callback();\n            return null;\n        }\n\n    }('on play',);\n    /**\n     * Tell whenever the sound is present or not\n     * when creating the audio element.\n     *\n     * @noValidationOnPlay\n     */\n    public static readonly ON_CREATE = new class SoundFounds_OnCreate extends SoundFounds {\n\n        public override onCreate(callback: IsSourceFoundCallback,): void {\n            callback();\n        }\n\n    }('on create',);\n\n    protected static readonly _DEFAULT = SoundFounds.ON_PLAY;\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundFounds;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * Handle the state when the {@link SimpleSound sound element} is created.\n     *\n     * @param callback the callback to execute\n     */\n    public onCreate(callback: IsSourceFoundCallback,): void {\n    }\n\n    /**\n     * Handle the state when the {@link HTMLAudioElement audio element} is playing.\n     *\n     * @param callback the callback to execute\n     */\n    public onPlay(callback: IsSourceFoundCallback,): | boolean | null {\n        return null;\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<SoundFounds> {\n        return SoundFounds;\n    }\n\n    //region -------------------- Enum default methods --------------------\n\n    public static get default(): SoundFounds {\n        return Enum.getNonNullDefaultOn(this);\n    }\n\n    public static set default(value: | SoundFounds | string,) {\n        this.setDefault(value);\n    }\n\n    public static setDefault(value: | SoundFounds | string,): typeof SoundFounds {\n        return Enum.setNonNullDefaultOn(this, value,);\n    }\n\n    //endregion -------------------- Enum default methods --------------------\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundFounds, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundFounds\n    public static getValue(value: PossibleValue,): | SoundFounds | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {EnglishName, EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleNonNullableValue, PossibleStringValue, PossibleValue} from './SoundStates.types';\nimport type {ClassWithEnglishName}                                                                                                                                                               from '../../../core/ClassWithEnglishName';\nimport type {StaticReference}                                                                                                                                                                    from '../../../util/enum/Enum.types';\nimport type {ReactElement}                                                                                                                                                                       from '../../../util/react/ReactProperty';\nimport type {SoundSubElementsHolder}                                                                                                                                                             from './holder/SoundSubElementsHolder';\n\nimport {Enum} from '../../../util/enum/Enum';\n\nexport abstract class SoundStates\n    extends Enum<Ordinals, Names>\n    implements ClassWithEnglishName<EnglishName> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly STANDBY = new class SoundStates_Standby extends SoundStates {\n\n        public override getElements({playElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(),];\n        }\n\n    }('standby',);\n    public static readonly PAUSED =  new class SoundStates_Paused extends SoundStates {\n\n        public override getElements({playElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [playElement(), stopElement(),];\n        }\n\n    }('paused',);\n    public static readonly PLAYING = new class SoundStates_Playing extends SoundStates {\n\n        public override getElements({pauseElement, stopElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [pauseElement(), stopElement(),];\n        }\n\n    }('playing',);\n    public static readonly EXCEPTION = new class SoundStates_Exception extends SoundStates {\n\n        public override getElements({exceptionElement,}: SoundSubElementsHolder,): readonly ReactElement[] {\n            return [exceptionElement(),];\n        }\n\n    }('exception',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: SoundStates;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #englishName;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(englishName: EnglishName,) {\n        super();\n        this.#englishName = englishName;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get englishName(): EnglishName {\n        return this.#englishName;\n    }\n\n    public get englishNameInHtml(): EnglishName {\n        return this.englishName;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getElements(elementsHolder: SoundSubElementsHolder,): readonly ReactElement[];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected get _static(): StaticReference<SoundStates> {\n        return SoundStates;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.englishName === value)\n            ?? null;\n    }\n\n    public static getValue(value: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrCharacter: S,): EnumByPossibleString<S>\n    public static getValue<S extends string, >(nameOrCharacter: S,): EnumByString<S>\n    public static getValue<I extends SoundStates, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): SoundStates\n    public static getValue(value: PossibleValue,): | SoundStates | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n}","import type {ReactElement} from '../../../../util/react/ReactProperty';\n\nexport class SoundSubElementsHolder {\n\n    //region -------------------- Fields --------------------\n\n    readonly #playElement;\n    readonly #pauseElement;\n    readonly #stopElement;\n    readonly #exceptionElement;\n\n    //region -------------------- Fields --------------------\n\n    public constructor(playElement: ReactCallback, pauseElement: ReactCallback, stopElement: ReactCallback, exceptionElement: ReactCallback,) {\n        this.#playElement = playElement;\n        this.#pauseElement = pauseElement;\n        this.#stopElement = stopElement;\n        this.#exceptionElement = exceptionElement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get playElement(): ReactCallback {\n        return this.#playElement;\n    }\n\n    public get pauseElement(): ReactCallback {\n        return this.#pauseElement;\n    }\n\n    public get stopElement(): ReactCallback {\n        return this.#stopElement;\n    }\n\n    public get exceptionElement(): ReactCallback {\n        return this.#exceptionElement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n}\n\ntype ReactCallback = () => ReactElement;\n","import './SimpleSound.scss';\n\nimport {Component} from 'react';\n\nimport type {IsSourceFoundCallback} from './SoundFounds.types';\nimport type {SimpleSoundProperties} from './properties/SimpleSoundProperties';\nimport type {SimpleSoundState}      from './properties/SimpleSoundState';\nimport type {ReactElement}          from '../../../util/react/ReactProperty';\n\nimport {SoundFounds}            from './SoundFounds';\nimport {SoundStates}            from './SoundStates';\nimport {SoundSubElementsHolder} from './holder/SoundSubElementsHolder';\n\nexport default class SimpleSound\n    extends Component<SimpleSoundProperties, SimpleSoundState> {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #PLAY_CLASSES = 'btn btn-lg bi-play-btn-fill audio-state audio-state-play';\n    static readonly #PAUSE_CLASSES = 'btn btn-lg bi-pause-btn-fill audio-state audio-state-pause';\n    static readonly #STOP_CLASSES = 'btn btn-lg bi-stop-btn-fill audio-state audio-state-stop';\n    static readonly #EXCEPTION_CLASSES = 'bi-shield-fill-exclamation audio-state audio-state-exception';\n\n    static #IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = false;\n\n    static readonly #EVERY_AUDIO_ELEMENTS = new Map<string, HTMLAudioElement>();\n\n    #audio?: HTMLAudioElement;\n    readonly #isSourceFoundCallback: IsSourceFoundCallback;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(properties: SimpleSoundProperties,) {\n        super(properties);\n        this.state = {\n            state: SoundStates.STANDBY,\n            isSourceRetrieved: false,\n        };\n        this.#isSourceFoundCallback = (value: boolean = this.__isSoundFound,) =>\n            value\n                ? this.setState({isSourceRetrieved: true,})\n                : this.setState({isSourceRetrieved: true, state: SoundStates.EXCEPTION,});\n\n    }\n\n    //region -------------------- Getter & setter methods --------------------\n\n    //region -------------------- Getter & setter methods (audio) --------------------\n\n    /**\n     * A {@link Map} of every audio elements.<br/>\n     * The key is the source of the audio element created.\n     *\n     * @see _audio\n     */\n    protected static get _everyAudioElements() {\n        return this.#EVERY_AUDIO_ELEMENTS;\n    }\n\n    public static get isEveryAudioLoopsAfterCompleted(): boolean {\n        return this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED;\n    }\n\n    public static set isEveryAudioLoopsAfterCompleted(value: boolean,) {\n        this.#IS_EVERY_AUDIO_LOOPS_AFTER_COMPLETED = value;\n        this._everyAudioElements.forEach(audioElement => audioElement.loop = value);\n    }\n\n    /**\n     * A {@link HTMLAudioElement Audio} element created from the source\n     * and with the global property {@link isEveryAudioLoopsAfterCompleted}.\n     *\n     * @note The element is created only if any buttons (play, pause or stop) is handled. Otherwise, it will not be created.\n     */\n    protected get _audio(): HTMLAudioElement {\n        if (this.#audio == null) {\n            const source = this._source;\n            let audio: HTMLAudioElement;\n            if (SimpleSound._everyAudioElements.has(source))\n                audio = SimpleSound._everyAudioElements.get(source)!;\n            else\n                SimpleSound._everyAudioElements.set(source, audio = new Audio(source));\n            this.#audio = audio;\n            audio.onended = () => this.setState({state: SoundStates.STANDBY,});\n            audio.loop = SimpleSound.isEveryAudioLoopsAfterCompleted;\n        }\n        return this.#audio;\n    }\n\n    //endregion -------------------- Getter & setter methods (audio) --------------------\n    //region -------------------- Getter methods (source) --------------------\n\n    protected get _source() {\n        return this.props.source;\n    }\n\n    public get isSoundFound(): SoundFounds {\n        return this.props.isSoundFound ?? SoundFounds.default;\n    }\n\n    private get __isSoundFound(): boolean {\n        return Number.isFinite(this._audio.duration);\n    }\n\n    //endregion -------------------- Getter methods (source) --------------------\n\n    protected get _title() {\n        return this.props.title;\n    }\n\n    //endregion -------------------- Getter & setter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * <p>\n     *  Play the current audio element.\n     *\n     *  And when the audio element has finished playing,\n     *  it will change the state to {@link SoundStates.STANDBY standby}.\n     * </p>\n     *\n     * <p>\n     *  Depending on if an {@link Error exception} is raised,\n     *  it will change the state to {@link SoundStates.EXCEPTION exception}.\n     * </p>\n     *\n     * <p>\n     *  But, if the {@link SoundFounds} is {@link SoundFounds.YES},\n     *  it will assume that the source is valid.\n     * </p>\n     */\n    #play(): void {\n        this._audio.play()\n            .then(() => {\n                const isSoundFound = this.isSoundFound.onPlay(this.#isSourceFoundCallback) ?? this.__isSoundFound;\n                if (!isSoundFound)\n                    this.#stop(SoundStates.EXCEPTION);\n            })\n            .catch(() => this.setState({state: SoundStates.EXCEPTION,}));\n        this.setState({state: SoundStates.PLAYING,});\n    }\n\n    /**\n     * Pause the current audio element.\n     */\n    #pause(): void {\n        this._audio.pause();\n        this.setState({state: SoundStates.PAUSED,});\n    }\n\n    /**\n     * Stop the current audio element.\n     *\n     * @param state either {@link SoundStates.STANDBY standby} or {@link SoundStates.EXCEPTION exception} state\n     */\n    #stop(state: SoundStates = SoundStates.STANDBY,): void {\n        const audio = this._audio;\n        audio.pause();\n        audio.currentTime = 0;\n        this.setState({state: state,});\n    }\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- React methods --------------------\n\n    public override componentDidMount(): void {\n        if (!this.state.isSourceRetrieved)\n            this.isSoundFound.onCreate(this.#isSourceFoundCallback);\n    }\n\n    public override componentWillUnmount(): void {\n        const audio = this.#audio;\n        if (audio != null)\n            audio.onended = null;\n    }\n\n    public override render(): ReactElement {\n        return <div key={this._title} className=\"audio-state-container container\">{\n            this.state.state.getElements(new SoundSubElementsHolder(\n                () => <div key={`${this._title} - play`} className={SimpleSound.#PLAY_CLASSES} onClick={() => this.#play()}/>,\n                () => <div key={`${this._title} - pause`} className={SimpleSound.#PAUSE_CLASSES} onClick={() => this.#pause()}/>,\n                () => <div key={`${this._title} - stop`} className={SimpleSound.#STOP_CLASSES} onClick={() => this.#stop()}/>,\n                () => <div key={`${this._title} - exception`} className={SimpleSound.#EXCEPTION_CLASSES}/>,\n            ))\n        }</div>;\n    }\n\n    //endregion -------------------- React methods --------------------\n\n}\n","import type {EnumArray, EnumByName, EnumByNumber, EnumByOrdinal, EnumByPossibleString, EnumByString, Names, Ordinals, PossibleName, PossibleNonNullableValue, PossiblePlacement, PossibleStringValue, PossibleValue} from './HeaderTypes.types';\nimport type {StaticReference}                                                                                                                                                                                        from '../../../../util/enum/Enum.types';\n\nimport {Enum} from '../../../../util/enum/Enum';\n\nexport abstract class HeaderTypes\n    extends Enum<Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly HEAD = new class HeaderTypes_Head extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return layout;\n        }\n\n    }('head', 'top',);\n    public static readonly FOOT = new class HeaderTypes_Foot extends HeaderTypes {\n\n        public override getLayout(layout: readonly string[][]): readonly string[][] {\n            return [...layout].reverse();\n        }\n\n    }('foot', 'bottom',);\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Enum fields --------------------\n\n    static [index: number]: HeaderTypes;\n\n    //endregion -------------------- Enum fields --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #name;\n    readonly #placement;\n\n    //endregion -------------------- Fields --------------------\n\n    private constructor(name: PossibleName, placement: PossiblePlacement,) {\n        super();\n        this.#name = name;\n        this.#placement = placement;\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    public get simpleName(): PossibleName {\n        return this.#name;\n    }\n\n    public get placement(): PossiblePlacement {\n        return this.#placement;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public abstract getLayout(layout: readonly string[][],): readonly string[][];\n\n    //endregion -------------------- Methods --------------------\n    //region -------------------- Enum methods --------------------\n\n    protected override get _static(): StaticReference<HeaderTypes> {\n        return HeaderTypes;\n    }\n\n    //region -------------------- Enum value methods --------------------\n\n    public static override _getValueByString(value: string,) {\n        return this.values.find(enumerable => enumerable.simpleName === value)\n            ?? null;\n    }\n\n    public static getValue(nullValue: | null | undefined,): null\n    public static getValue<O extends Ordinals, >(ordinal: O,): EnumByOrdinal<O>\n    public static getValue<O extends number, >(ordinal: O,): EnumByNumber<O>\n    public static getValue<N extends Names = Names, >(name: N,): EnumByName<N>\n    public static getValue<S extends PossibleStringValue = PossibleStringValue, >(nameOrAcronym: S,): EnumByPossibleString<S>\n    public static getValue<S extends string = string, >(nameOrAcronym: S,): EnumByString<S>\n    public static getValue<I extends HeaderTypes, >(instance: I,): I\n    public static getValue(value: PossibleNonNullableValue,): HeaderTypes\n    public static getValue(value: PossibleValue,): | HeaderTypes | null\n    public static getValue(value: PossibleValue,) {\n        return Enum.getValueOn(this, value,);\n    }\n\n    public static get values(): EnumArray {\n        return Enum.getValuesOn(this);\n    }\n\n    //endregion -------------------- Enum value methods --------------------\n\n    public static [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n\n    //endregion -------------------- Enum methods --------------------\n\n}\n","import type {HeaderHolder}        from './HeaderHolder';\nimport type {SingleHeaderContent} from '../SimpleHeader';\nimport type {ReactElement}        from '../../../../util/react/ReactProperty';\n\nimport {assert}              from '../../../../util/utilitiesMethods';\nimport {EMPTY_REACT_ELEMENT} from '../../../../util/emptyReactVariables';\n\nexport class HeaderHolderContainer\n    implements HeaderHolder {\n\n    //region -------------------- Fields --------------------\n\n    static readonly #INSTANCES = new Map<string, HeaderHolderContainer[]>();\n    static readonly #MAXIMUM_SUB_LEVEL_MAP = new Map<string, number>();\n    static readonly #EMPTY_ARRAY = [];\n\n    readonly #tableIdentifier: string;\n    readonly #header;\n    #parent: | HeaderHolder | null;\n    #subHeaders?: readonly HeaderHolder[];\n    #subLevel?: number;\n    #width?: number;\n    #height?: number;\n    #wasRendered;\n    readonly #callbackToRenderHead: (headerHolder: this,) => ReactElement;\n    readonly #callbackToRenderFoot: (headerHolder: this,) => ReactElement;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(tableIdentifier: string, header: SingleHeaderContent, callbackToRenderHead: (headerHolder: HeaderHolder,) => ReactElement, callbackToRenderFoot: (headerHolder: HeaderHolder,) => ReactElement,) {\n        this.#tableIdentifier = tableIdentifier;\n        this.#parent = null;\n        this.#header = header;\n        this.#wasRendered = false;\n        this.#callbackToRenderHead = callbackToRenderHead;\n        this.#callbackToRenderFoot = callbackToRenderFoot;\n\n        HeaderHolderContainer.#addInstance(this);\n    }\n\n    //region -------------------- Getter methods --------------------\n\n    static #addInstance(instance: HeaderHolderContainer,): void {\n        const map = this.#INSTANCES;\n        const tableIdentifier = instance.#tableIdentifier;\n        const array = map.has(tableIdentifier) ? map.get(tableIdentifier)! : map.set(tableIdentifier, [],).get(tableIdentifier)!;\n\n        array.push(instance);\n    }\n\n    static #getEveryInstances(tableIdentifier: string,): readonly HeaderHolder[] {\n        return this.#INSTANCES.get(tableIdentifier)!;\n    }\n\n    static #getMaximumSubLevel(tableIdentifier: string,): number {\n        const map = this.#MAXIMUM_SUB_LEVEL_MAP;\n        if (map.has(tableIdentifier))\n            return map.get(tableIdentifier)!;\n\n        let maximumSubLevel = this.#getEveryInstances(tableIdentifier)\n            .reduce((previousHeader, header,) => previousHeader.subLevel < header.subLevel ? header : previousHeader).subLevel;\n\n        return map.set(tableIdentifier, maximumSubLevel,).get(tableIdentifier)!;\n    }\n\n    public get header(): SingleHeaderContent {\n        return this.#header;\n    }\n\n    //region -------------------- Other headers --------------------\n\n    public get parent(): | HeaderHolder | null {\n        return this.#parent;\n    }\n\n    public set parent(value: | HeaderHolder | null,) {\n        this.setParent(value);\n    }\n\n    public setParent(value: null,): never\n    public setParent(value: HeaderHolder,): this\n    // @ts-ignore\n    private setParent(value: | HeaderHolder | null,): | this | never\n    public setParent(value: | HeaderHolder | null,): | this | never {\n        assert(value != null, 'The value to set the parent cannot be null.',);\n        this.#parent = value;\n        return this;\n    }\n\n    public get subHeaders(): readonly HeaderHolder[] {\n        return this.#subHeaders ??= HeaderHolderContainer.#EMPTY_ARRAY;\n    }\n\n    public set subHeaders(value: readonly HeaderHolder[],) {\n        this.setSubHeaders(value);\n    }\n\n    public setSubHeaders(value: readonly HeaderHolder[],): this {\n        if (value.length !== 0)\n            this.#subHeaders = value;\n        return this;\n    }\n\n    //endregion -------------------- Other headers --------------------\n    //region -------------------- Sub level --------------------\n\n    public get subLevel(): number {\n        if (this.#subLevel == null) {\n            let currentSubLevel = 0;\n            let parent: this['parent'] = this.parent;\n            while (parent != null) {\n                currentSubLevel++;\n                parent = parent.parent;\n            }\n            this.#subLevel = currentSubLevel;\n        }\n        return this.#subLevel;\n    }\n\n    //endregion -------------------- Sub level --------------------\n    //region -------------------- Height --------------------\n\n    public get height(): number {\n        if (this.#height == null) {\n            let currentHeight = 1;\n            if (this.width === 1)\n                currentHeight += HeaderHolderContainer.#getMaximumSubLevel(this.#tableIdentifier,) - this.subLevel;\n            this.#height = currentHeight;\n        }\n        return this.#height;\n    }\n\n    //endregion -------------------- Height --------------------\n    //region -------------------- Width --------------------\n\n    public get width(): number {\n        if (this.#width == null) {\n            const subHeadersWidth = this.subHeaders.reduce((widthSum, header,) => widthSum + header.width, 1,);\n            this.#width = subHeadersWidth === 1 ? 1 : subHeadersWidth - 1;\n        }\n        return this.#width;\n    }\n\n    //endregion -------------------- Width --------------------\n    //region -------------------- Render --------------------\n\n    public get wasRendered(): boolean {\n        return this.#wasRendered;\n    }\n\n    public setRendered(value: boolean,): this {\n        this.#wasRendered = value;\n        return this;\n    }\n\n    public resetRendered(): this {\n        return this.setRendered(false);\n    }\n\n    public render(isHead: boolean,): ReactElement {\n        return isHead ? this.renderHead() : this.renderFoot();\n    }\n\n    public renderHead(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderHead(this);\n    }\n\n    public renderFoot(): ReactElement {\n        if (this.wasRendered)\n            return EMPTY_REACT_ELEMENT;\n        this.setRendered(true);\n        return this.#callbackToRenderFoot(this);\n    }\n\n    //endregion -------------------- Render --------------------\n\n    //endregion -------------------- Getter methods --------------------\n\n}","import type {TableContentProperties} from './TableContent.types';\n\nexport default function TableContent({content,}: TableContentProperties,) {\n    return <>{content.map(content => {\n        const key = content[0];\n        return <tr key={`${key} (header)`}>\n            {content.map((innerContent, index) =>\n                typeof innerContent != 'string'\n                    ? <td key={`${key}-${index}`}>{innerContent}</td>\n                    : null)\n                .filter(content => content !== null)}\n        </tr>;\n    })}</>;\n}\n","import {PureComponent} from 'react';\n\nimport type {EveryHeaderHolders, Layout, TableHeadersProperties} from './TableHeaders.types';\nimport type {ReactComponent}                                     from '../../../util/react/ReactComponent';\nimport type {ReactElement}                                       from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent, SingleHeadersContent}          from './SimpleHeader';\n\nimport AnyTranslationComponent from '../../../lang/components/AnyTranslationComponent';\nimport {EMPTY_ARRAY}           from '../../../util/emptyVariables';\nimport {EMPTY_REACT_ELEMENT}   from '../../../util/emptyReactVariables';\nimport {HeaderTypes}           from './header/HeaderTypes';\nimport Image                   from '../images/Image';\nimport Tooltip                 from '../../../bootstrap/tooltip/Tooltip';\n\n/**\n * @reactComponent\n */\nexport default class TableHeaders\n    extends PureComponent<TableHeadersProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    #everyHeaderHolders?: EveryHeaderHolders;\n    #layout?: Layout;\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id(): string {\n        return this.props.id;\n    }\n\n    public get type(): HeaderTypes {\n        return this.props.type;\n    }\n\n    public get headers(): SingleHeadersContent {\n        return this.props.headers;\n    }\n\n    public get everyHeaderHolders(): EveryHeaderHolders {\n        return this.#everyHeaderHolders ??= this.props.everyHeadersHolder();\n    }\n\n    public get layout(): Layout {\n        return this.#layout ??= this.props.layout();\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public static getHeaderKey(header: SingleHeaderContent,): string {\n        return typeof header == 'string' ? header : header.key;\n    }\n\n    public static getSubHeaders(header: SingleHeaderContent,): readonly SingleHeaderContent[] {\n        return typeof header == 'string' ? EMPTY_ARRAY : header.subHeaders ?? EMPTY_ARRAY;\n    }\n\n    public static getHeaderContent(header: SingleHeaderContent,) {\n        return typeof header == 'string'\n            ? <>{header}</>\n            : 'element' in header\n                ? header.element\n                : <Image key={header.key} source={header.path} fallbackName={header.alt}/>;\n    }\n\n    public static createTooltip(type: HeaderTypes, header: SingleHeaderContent,) {\n        if (typeof header == 'string')\n            return EMPTY_REACT_ELEMENT;\n\n        const tooltip = header.tooltip;\n        if (tooltip == null)\n            return EMPTY_REACT_ELEMENT;\n\n        return <AnyTranslationComponent namespace={tooltip.namespace}>{translation =>\n            <Tooltip option={({title: translation(tooltip.translationKey, tooltip.replace,) as string, placement: type.placement,})}\n                     elementId={`${this.getHeaderKey(header)}-${type.simpleName}`}/>}</AnyTranslationComponent>;\n    }\n\n    public static createSingleHeaderContent(type: HeaderTypes, header: SingleHeaderContent, height: number, width: number,) {\n        const key = this.getHeaderKey(header);\n\n        return <th key={`${key} (${type.simpleName})`} id={`${key}-${type.simpleName}`} className={`th-${type.simpleName} ${key}`} colSpan={width} rowSpan={height}>\n            {this.createTooltip(type, header,)}\n            {this.getHeaderContent(header)}\n        </th>;\n    }\n\n\n    public override render(): ReactElement {\n        const headers = this.headers;\n\n        //region -------------------- If headers has only 1 column, return simple headers --------------------\n\n        const headersLength = headers.length;\n        if (headersLength === 1)\n            return <tr key={`${this.id} - ${this.type.simpleName}`} className={`tr-${this.type.simpleName}`}>{\n                headers.map(headerAsTh => TableHeaders.createSingleHeaderContent(this.type, headerAsTh, 1, 1,))\n            }</tr>;\n\n        //endregion -------------------- If headers has only 1 column, return simple headers --------------------~\n        //region -------------------- Display headers with variable columns and height --------------------\n\n        const everyHeaderHolders = this.everyHeaderHolders;\n        everyHeaderHolders.forEach(headerHolder => headerHolder.resetRendered());\n\n        return <>{this.type.getLayout(this.layout).map((layoutAsTr, index,) =>\n            <tr key={`${this.id} - ${this.type.simpleName} #${index}`} className={`tr-${this.type.simpleName}`}>{\n                layoutAsTr.map(layoutAsTh => everyHeaderHolders.get(layoutAsTh)!.render(this.type === HeaderTypes.HEAD))\n            }</tr>)}</>;\n\n        //endregion -------------------- Display headers with variable columns and height --------------------\n    }\n\n}\n","import {PureComponent} from 'react';\n\nimport type {BootstrapColor}             from '../../../bootstrap/Bootstrap.types';\nimport type {HeaderHolder}               from './header/HeaderHolder';\nimport type {EveryHeaderHolders, Layout} from './TableHeaders.types';\nimport type {ObjectHolder}               from '../../../util/holder/ObjectHolder';\nimport type {ReactComponent}             from '../../../util/react/ReactComponent';\nimport type {ReactElement}               from '../../../util/react/ReactProperty';\nimport type {SingleHeaderContent}        from './SimpleHeader';\nimport type {TableProperties}            from './Table.types';\n\nimport {DelayedObjectHolderContainer} from '../../../util/holder/DelayedObjectHolder.container';\nimport {EMPTY_REACT_ELEMENT}          from '../../../util/emptyReactVariables';\nimport {HeaderTypes}                  from './header/HeaderTypes';\nimport {HeaderHolderContainer}        from './header/HeaderHolder.container';\nimport TableContent                   from './TableContent';\nimport TableHeaders                   from './TableHeaders';\n\n/**\n * @reactComponent\n */\nexport default class Table\n    extends PureComponent<TableProperties>\n    implements ReactComponent {\n\n    //region -------------------- Fields --------------------\n\n    public static readonly DEFAULT_TABLE_COLOR: BootstrapColor = 'primary';\n    public static readonly DEFAULT_HEADERS_COLOR: BootstrapColor = 'info';\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get id() {\n        return this.props.id;\n    }\n\n    public get caption() {\n        return this.props.caption;\n    }\n\n    public get headers() {\n        return this.props.headers;\n    }\n\n    public get content() {\n        return this.props.content;\n    }\n\n    public get tableColor() {\n        return this.props['table-color'] ?? Table.DEFAULT_TABLE_COLOR;\n    }\n\n    public get headersColor() {\n        return this.props['headers-color'] ?? Table.DEFAULT_HEADERS_COLOR;\n    }\n\n\n    #getEveryHeaders(): EveryHeaders\n    #getEveryHeaders(headers: readonly SingleHeaderContent[],): readonly [string, SingleHeaderContent,][]\n    #getEveryHeaders(headers: readonly SingleHeaderContent[] = this.headers ?? [],): EveryHeaders {\n        const array = [] as [string, SingleHeaderContent,][];\n        for (let header of headers) {\n            const subHeaders = TableHeaders.getSubHeaders(header);\n            array.push([TableHeaders.getHeaderKey(header), header,]);\n            if (subHeaders.length !== 0)\n                array.push(...this.#getEveryHeaders(subHeaders,));\n        }\n        return array;\n    }\n\n    #getEveryHeaderHolders(everyHeaders: EveryHeaders,): EveryHeaderHolders {\n        const everyHeaderHolders = new Map<string, HeaderHolder>(everyHeaders.map(([key, header,]) =>\n            [key,\n                new HeaderHolderContainer(this.id, header,\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.HEAD, headerHolder.header, headerHolder.height, headerHolder.width,),\n                    headerHolder => TableHeaders.createSingleHeaderContent(HeaderTypes.FOOT, headerHolder.header, headerHolder.height, headerHolder.width,),\n                ),]));\n\n        //Set the sub headers (for the header) & set the parent (for the sub headers)\n        everyHeaderHolders.forEach((header,) =>\n            header.setSubHeaders(TableHeaders.getSubHeaders(header.header).map(subHeader =>\n                everyHeaderHolders.get(TableHeaders.getHeaderKey(subHeader))!).map(subHeader => subHeader.setParent(header))));\n\n        return everyHeaderHolders;\n    }\n\n    #getLayout(everyHeaderHolders: EveryHeaderHolders,): Layout {\n        const layout: string[][] = [];\n\n        everyHeaderHolders.forEach((headerContainer, key,) => {\n            const subLevel = headerContainer.subLevel;\n            const height = headerContainer.height;\n            const width = headerContainer.width;\n\n            for (let j = 0; j < height; j++)\n                for (let i = 0; i < width; i++)\n                    (layout[j + subLevel] ??= []).push(key);\n        });\n        return layout;\n    }\n\n    //endregion -------------------- Getter methods --------------------\n\n    public override render(): ReactElement {\n        const caption = this.caption;\n        const headers = this.headers;\n        const isHeaderNull = headers == null;\n        const everyHeadersHolder: ObjectHolder<EveryHeaderHolders> = new DelayedObjectHolderContainer(() => this.#getEveryHeaderHolders(this.#getEveryHeaders()));\n        const layoutHolder: ObjectHolder<Layout> = new DelayedObjectHolderContainer(() => this.#getLayout(everyHeadersHolder.get));\n\n        return <table key={this.id} id={this.id} className={`table table-${this.tableColor} table-bordered table-striped`}>\n            {caption == null ? EMPTY_REACT_ELEMENT : <caption>{caption}</caption>}\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <thead className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.HEAD} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </thead>}\n            <tbody><TableContent content={this.content}/></tbody>\n            {isHeaderNull ? EMPTY_REACT_ELEMENT : <tfoot className={`table-${this.headersColor} table-borderless`}>\n            <TableHeaders id={this.id} type={HeaderTypes.FOOT} headers={headers}\n                          everyHeadersHolder={() => everyHeadersHolder.get} layout={() => layoutHolder.get}/>\n            </tfoot>}\n        </table>;\n    }\n\n}\n\ntype EveryHeaders = readonly [string, SingleHeaderContent,][];\n","import './YesOrNoResultTextComponent.scss';\n\nimport type {TextColor}             from './properties/BooleanResultTextProperties';\nimport type {YesOrNoTextProperties} from './properties/YesOrNoTextProperties';\n\nimport BooleanResultTextComponent  from './BooleanResultTextComponent';\nimport ContentTranslationComponent from '../../../lang/components/ContentTranslationComponent';\n\nconst YES_COLOR: TextColor = 'text-yes';\nconst NO_COLOR: TextColor = 'text-no';\n\n/**\n * Return a new {@link BooleanResultTextComponent} with a value based on the translation \"Yes\" or \"No\".\n *\n * @return {@link BooleanResultContainer}\n * @reactComponent\n */\nexport default function YesOrNoResultTextComponent(properties: YesOrNoTextProperties,): JSX.Element {\n    return <ContentTranslationComponent>{translation =>\n        <BooleanResultTextComponent\n            true={[translation('Yes'), YES_COLOR,]}\n            false={[translation('No'), NO_COLOR,]}\n            {...properties}\n        />}</ContentTranslationComponent>;\n}\n","import './EveryMysteryMushroomsApp.scss';\n\nimport {Fragment} from 'react';\n\nimport type {MysteryMushroomAppStates} from './AppStates.types';\nimport type {SingleTableContent}       from './tools/table/Table.types';\n\nimport AbstractApp                     from './AbstractApp';\nimport {BASE_PATH}                     from '../variables';\nimport ContentTranslationComponent     from '../lang/components/ContentTranslationComponent';\nimport {EMPTY_REACT_ELEMENT}           from '../util/emptyReactVariables';\nimport GameContentTranslationComponent from '../lang/components/GameContentTranslationComponent';\nimport Image                           from './tools/images/Image';\nimport {MysteryMushrooms}              from '../core/mysteryMushroom/MysteryMushrooms';\nimport {ProjectLanguages}              from '../lang/ProjectLanguages';\nimport Table                           from './tools/table/Table';\nimport TextComponent                   from './tools/text/TextComponent';\nimport NameComponent                   from '../lang/name/component/Name.component';\nimport SimpleSound                     from './tools/sounds/SimpleSound';\nimport {StringContainer}               from '../util/StringContainer';\nimport YesOrNoResultTextComponent      from './tools/text/YesOrNoResultTextComponent';\nimport {ImageProperties}               from './tools/images/properties/ImageProperties';\n\n/**\n * @reactComponent\n */\nexport default class EveryMysteryMushroomsApp\n    extends AbstractApp<{}, MysteryMushroomAppStates> {\n\n    //region -------------------- Fields & getter methods --------------------\n\n    //region -------------------- Fields --------------------\n\n    static readonly #NOT_APPLICABLE_COMPONENT = <TextComponent content=\"N/A\"/>;\n\n    //endregion -------------------- Fields --------------------\n\n    public constructor(props: {},) {\n        super(props,);\n        this.state = {};\n    }\n\n    //endregion -------------------- Fields & getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    /**\n     * <p>\n     *  Create a single image of an animated image.\n     *  It can depend on the images are just an empty arrays\n     *  or just an array of strings.\n     * </p>\n     *\n     * <p>\n     *  If the images are only as <b>[string][]</b> or as <b>string[]</b>,\n     *  then only a single image is returned.\n     * </p>\n     * <p>\n     *  Otherwise, it will return an animated image is returned,\n     *  and it's expected to be as <b>string[][]</b>\n     * </p>\n     *\n     * @param images the images\n     * @param englishName the english name of the {@link MysteryMushroom}\n     * @param type the possible type of the {@link MysteryMushroom} as a property in the {@link SoundProperty}\n     */\n    static #createImages(images: PossibleGroupImages, englishName: string, type: string,) {\n        if (images.length === 0 || images[0].length === 0)\n            return this.#NOT_APPLICABLE_COMPONENT;\n\n        const fallbackName = `${englishName} (${type})`;\n\n        if (typeof images[0] == 'string')\n            return (images as PossibleGroupImages<string>).map((image, index,) =>\n                <Image key={`${fallbackName} - ${index + 1}`} source={image} fallbackName={`${fallbackName} - ${index + 1}`}/>);\n\n        const imagesFormattedAsGroup = [...images as PossibleGroupImages<PossibleImages_Array>]\n            .reduce((newArray, subImages,) => {\n                subImages.forEach((value, index) => newArray[index].push(value));\n                return newArray;\n            }, images.map(() => [] as string[]),)\n            .filter(images => images.length !== 0);\n\n        if (imagesFormattedAsGroup[0].length === 1)\n            return imagesFormattedAsGroup.map(([image,], index) =>\n                <Image key={`${fallbackName} - ${index + 1}`} source={image} fallbackName={fallbackName}/>);\n\n        const id = StringContainer.getInHtml(englishName);\n        return imagesFormattedAsGroup.map((images, index,) =>\n            <Image key={`${fallbackName} - ${index + 1}`} partialId={`${id}-${index + 1}`}\n                   images={images.map<ImageProperties>((image, index,) => ({source: image, fallbackName: `${fallbackName}-${index + 1}`,}))}/>);\n    }\n\n    static #createSounds(sounds: PossibleSounds, englishName: string, type: string,) {\n        if (sounds.length === 0)\n            return EMPTY_REACT_ELEMENT;\n\n        const [sound1, sound2,] = sounds;\n        return <>\n            <SimpleSound source={sound1} title={`${englishName} - ${type}`}/>\n            {sound2 == null ? EMPTY_REACT_ELEMENT : <SimpleSound source={sound2} title={`${englishName} 2 - ${type}`}/>}\n        </>;\n    }\n\n    protected get _content() {\n        const content = [] as SingleTableContent[];\n        let index = 1;\n        for (const enumerable of MysteryMushrooms) {\n            const mysteryMushroom = enumerable.reference;\n            const englishName = enumerable.englishNameOnFile;//FIXME temporary unique name\n            const englishNameAsId = enumerable.englishNameInHtml;\n            const isMysteryMushroom = MysteryMushrooms.MYSTERY_MUSHROOM === enumerable;\n\n            content.push([englishName,\n                <>{index}</>,\n                <>--{mysteryMushroom.conditionToUnlockIt}--</>,\n                <YesOrNoResultTextComponent boolean={mysteryMushroom.canBeUnlockedByAnAmiibo}/>,\n                <div key={`games - ${englishName}`} id={`games_${englishNameAsId}`}>{\n                    mysteryMushroom.games.map((game, index, games,) => <Fragment key={`game (${index + 1}) - ${englishName}`}>\n                        <NameComponent id={`game_${index + 1}_${englishNameAsId}`} name={game.reference} popoverOrientation=\"right\"/>\n                        {index === games.length - 1 ? EMPTY_REACT_ELEMENT : <>{ProjectLanguages.currentLanguage.comma}<br/></>}\n                    </Fragment>)}</div>,\n                <NameComponent id={`name_${englishNameAsId}`} name={mysteryMushroom} popoverOrientation=\"right\"/>,\n                <div key={`${englishName} - power-up collected`}>{isMysteryMushroom ? EveryMysteryMushroomsApp.#NOT_APPLICABLE_COMPONENT\n                    : EveryMysteryMushroomsApp.#createSounds(enumerable.powerUpCollectedSounds, englishName, 'power-up collected',)\n                }</div>,\n                <div key={`${englishName} - waiting`}>{EveryMysteryMushroomsApp.#createImages(enumerable.waitingImages, englishName, 'waiting',)}</div>,\n                <div key={`${englishName} - taunt`}>\n                    {EveryMysteryMushroomsApp.#createImages(enumerable.tauntImages, englishName, 'taunt',)}\n                    {EveryMysteryMushroomsApp.#createSounds(enumerable.tauntSounds, englishName, 'taunt',)}\n                </div>,\n                <div key={`${englishName} - lost a life`}>{EveryMysteryMushroomsApp.#createImages(enumerable.downImages, englishName, 'pressing ↓',)}</div>,\n                <div key={`${englishName} - walking`}>{EveryMysteryMushroomsApp.#createImages(enumerable.walkImages, englishName, 'walk',)}</div>,\n                <div key={`${englishName} - running`}>{EveryMysteryMushroomsApp.#createImages(enumerable.runningImages, englishName, 'running',)}</div>,\n                <div key={`${englishName} - swimming`}>{EveryMysteryMushroomsApp.#createImages(enumerable.swimmingImages, englishName, 'swimming',)}</div>,\n                <div key={`${englishName} - jumping`}>\n                    {EveryMysteryMushroomsApp.#createImages(enumerable.jumpImages, englishName, 'jump',)}\n                    {EveryMysteryMushroomsApp.#createSounds(enumerable.jumpSounds, englishName, 'jump',)}\n                </div>,\n                <div key={`${englishName} - falling after jump`}>{EveryMysteryMushroomsApp.#createImages(enumerable.fallingAfterJumpImages, englishName, 'falling after jump',)}</div>,\n                <div key={`${englishName} - ground after jump`}>{isMysteryMushroom ? EveryMysteryMushroomsApp.#NOT_APPLICABLE_COMPONENT\n                    : EveryMysteryMushroomsApp.#createSounds(enumerable.onGroundAfterJumpSounds, englishName, 'ground after jump',)\n                }</div>,\n                <div key={`${englishName} - turning`}>\n                    {EveryMysteryMushroomsApp.#createImages(enumerable.turningImages, englishName, 'turning',)}\n                    {EveryMysteryMushroomsApp.#createSounds(enumerable.turningSounds, englishName, 'turning',)}</div>,\n                <div key={`${englishName} - climbing`}>{EveryMysteryMushroomsApp.#createImages(enumerable.climbingImages, englishName, 'climbing',)}</div>,\n                <div key={`${englishName} - goal pole`}>\n                    {EveryMysteryMushroomsApp.#createImages(enumerable.goalPoleImages, englishName, 'goal pole',)}\n                    {EveryMysteryMushroomsApp.#createSounds(enumerable.goalPoleSounds, englishName, 'goal pole',)}\n                </div>,\n                <div key={`${englishName} - death`}>{isMysteryMushroom ? EveryMysteryMushroomsApp.#NOT_APPLICABLE_COMPONENT\n                    : EveryMysteryMushroomsApp.#createSounds(enumerable.lostALifeSounds, englishName, 'lost a life',)\n                }</div>,\n            ]);\n            index++;\n        }\n        return content;\n    }\n\n    //endregion -------------------- Methods --------------------\n\n    protected override _mainContent() {\n        return <Table\n            id=\"mysteryMushroom-table\"\n            caption={<GameContentTranslationComponent>{translation => translation('Every Mystery Mushrooms', {pluralName: 'Mystery Mushrooms'})}</GameContentTranslationComponent>}\n            headers={[\n                {key: 'originalOrder', element: <>#</>,},\n                {key: 'conditionToUnlockIt', element: <>--Condition to unlock it--</>,},\n                {\n                    key: 'canBeUnlockedByAnAmiibo',\n                    // @ts-ignore\n                    element: <Image source={`/${BASE_PATH}/others/Amiibo (short).svg`} fallbackName=\"Amiibo icon\"/>, tooltip: {translationKey: '--Can be unlocked by an Amiibo--', namespace: 'gameContent',},\n                },\n                {key: 'game', element: <GameContentTranslationComponent translationKey=\"Game\"/>,},\n                {key: 'name', element: <ContentTranslationComponent translationKey=\"Name\"/>,},\n                {\n                    key: 'imagesAndSounds', element: <>--Images & sounds--</>,\n                    subHeaders: [\n                        {key: 'powerUpCollectedSound', element: <>--Power-up collected (sound)--</>,},\n                        {key: 'waitingImage', element: <>--Waiting (image)--</>,},\n                        {key: 'tauntImageAndSound', element: <>--Taunt (image & sound)--</>,},\n                        {key: 'pressingDownImage', element: <>--Pressing ↓ (image)--</>,},\n                        {key: 'walkImages', element: <>--Walk (image)--</>,},\n                        {key: 'runningImages', element: <>--Running (images)--</>,},\n                        {key: 'swimmingImages', element: <>--Swimming (images)--</>,},\n                        {key: 'jumpingImagesAndSounds', element: <>--Jumping (images & sounds)--</>,},\n                        {key: 'fallingAfterJumpImage', element: <>--Falling after jump (images)--</>,},\n                        {key: 'groundAfterJumpImage', element: <>--Ground after jump (sound)--</>,},\n                        {key: 'turningImageAndSound', element: <>-Turning (image & sound)--</>,},\n                        {key: 'climbingImages', element: <>-Climbing (images)--</>,},\n                        {key: 'goalPoleImagesAndSound', element: <>-Goal pole (images & sound)--</>,},\n                        {key: 'lostALifeSound', element: <>-Lost a life (sound)--</>,},\n                    ],\n                },\n            ]}\n            content={this._content}\n        />;\n    }\n\n}\n\ntype PossibleGroupImages<T extends | PossibleImages_Array | string = | PossibleImages_Array | string> =\n    | readonly []\n    | readonly [T,]\n    | readonly [T, T,]\n    | readonly [T, T, T,]\n    | readonly [T, T, T, T, T, T,];\ntype PossibleImages_Array = | readonly []\n                            | PossibleImages_NotEmptyArray;\ntype PossibleImages_NotEmptyArray = | readonly [string,]\n                                    | readonly [string, string,];\n\ntype PossibleSounds = | readonly []\n                      | readonly [string,]\n                      | readonly [string, string,];\n"],"sourceRoot":""}