{"version":3,"file":"static/js/778.58e4e00c.chunk.js","mappings":"4QAgBqBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAGjB,WAAmBC,GAAwB,IAAD,yBACtC,cAAMA,IACDC,MAAQ,CACTC,cAAeC,EAAAA,EAAAA,WAHmB,CAKzC,C,yCAID,WACI,MAAO,qBACV,oCAED,WACI,OAAOC,EAAAA,EAAAA,IAAuB,gCACjC,4CAED,WACI,OAAO,iFAEH,WACI,OAAOC,EAAAA,EAAsBC,OAAOC,WACvC,GAJE,iCAQH,WACI,MAAO,CACHC,MAAO,EACPC,OAAQ,KACRC,MAAO,KAEd,GAdE,qCAmBH,WACI,MAAO,MACV,GArBE,mCAuBH,SAA6BC,GACzB,OAAO,SAACC,EAAA,QAAD,CAAOC,OAAQF,EAAWG,UAAWC,aAAY,UAAKJ,EAAWK,YAAhB,aAC3D,KAzBE,KA8BV,K,EAnDgBjB,CACTkB,EAAAA,E,oNCNUA,EAAtB,8JAWI,WACI,OAAO,OAAAA,EAAP,KACH,GAbL,yCAeI,SAAsCN,GAClC,OAAOA,EAAWK,WACrB,GAjBL,4BA0BI,WACI,IADkC,EAC5BE,EAAoBC,KAAKC,sBAC3BC,EAAMF,KAAKG,KACXC,EAAoBL,EAAkBM,0BACtCC,EAAa,IAAIC,EAAAA,EAA2C,SAAtBH,EAA+BL,EAAkBS,sBAAwBJ,GAAmBK,mBAEhIC,EAAU,GANkB,UAOTX,EAAkBY,UAPT,IAOlC,2BAAqD,CAAC,IAA3CnB,EAA0C,QAC3CoB,EAAoBZ,KAAKa,4BAA4BrB,GACrDsB,EAAOtB,EAAWuB,UAAUC,cAC5BC,EAAE,UAAMf,EAAN,YAAaV,EAAW0B,kBAAxB,cAGRR,EAAQS,MACJ,gBAA6DF,GAAIA,EAAIG,UAAS,UAAKlB,EAAL,4CAA4CI,GAA1H,UACI,iBAAiEc,UAAU,yCAA3E,WACI,SAAC,UAAD,CAA6DH,GAAG,OAAOH,KAAMA,EAAMO,mBAAmB,QAAtG,UAAuBT,EAAvB,uBACA,gBAAKQ,UAAU,iCAAf,SAAiDrB,EAAkBuB,sBAAsB9B,OAF7F,UAAaoB,EAAb,qCADJ,UAAaA,EAAb,gCAOP,CArBiC,+BAsBlC,OAAO,8BAAGF,GACb,KAjDL,GAEYa,EAAAA,GAFZ,sBAAsBzB,EAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAMwC,CAACd,EAAAA,EAAAA,YAA0BA,EAAAA,EAAAA,Y","sources":["app/SoundEffectCategoryApp.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import './SoundEffectCategoryApp.scss'\n\nimport type {AppProperties}                                        from 'app/AppProperties.types'\nimport type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {ReactElementOrString}                                 from 'util/react/ReactProperties'\n\nimport Image                    from 'app/tools/images/Image'\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {ViewDisplays}           from 'app/withInterpreter/ViewDisplays'\nimport {SoundEffectCategories}  from 'core/soundEffectCategory/SoundEffectCategories'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @reactComponent\n */\nexport default class SoundEffectCategoryApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<SoundEffectCategories>> {\n\n    public constructor(props: AppProperties,) {\n        super(props,)\n        this.state = {\n            typeDisplayed: ViewDisplays.CARD_LIST,\n        }\n    }\n\n    //region -------------------- Create methods --------------------\n\n    protected override _createKey() {\n        return 'soundEffectCategory'\n    }\n\n    protected override _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('Every sound effect categories')\n    }\n\n    protected override _createAppOptionInterpreter(): AppInterpreterWithCardList<SoundEffectCategories> {\n        return new class implements AppInterpreterWithCardList<SoundEffectCategories> {\n\n            public get iterable() {\n                return SoundEffectCategories[Symbol.iterator]()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return {\n                    small: 6,\n                    medium: null,\n                    large: null,\n                }\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent(enumerable: SoundEffectCategories,) {\n                return <Image source={enumerable.imagePath} fallbackName={`${enumerable.englishName} - image`}/>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppProperties}                from 'app/AppProperties.types'\nimport type {AppWithVariableDisplayStates} from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ReactElement}                 from 'util/react/ReactProperties'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppProperties = AppProperties, S extends AppWithVariableDisplayStates = AppWithVariableDisplayStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    static #APP_OPTION_INTERPRETER: readonly ViewDisplays[] = [ViewDisplays.SIMPLE_LIST, ViewDisplays.CARD_LIST,]\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewDisplays[] {\n        return AbstractCardListApp.#APP_OPTION_INTERPRETER\n    }\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter,\n            key = this._key,\n            cardListDimension = optionInterpreter.createCardListDimension(),\n            dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension).createDimensions()\n\n        const content = [] as ReactElement[]\n        for (const enumerable of optionInterpreter.iterable) {\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable)\n            const name = enumerable.reference.nameContainer\n            const id = `${key}-${enumerable.englishNameInHtml}-container`\n\n            //TODO change the popover to be on the id instead of the name directly\n            content.push(\n                <div key={`${uniqueEnglishName} - main card list container`} id={id} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={name} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n            )\n        }\n        return <>{content}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["SoundEffectCategoryApp","props","state","typeDisplayed","ViewDisplays","gameContentTranslation","SoundEffectCategories","Symbol","iterator","small","medium","large","enumerable","Image","source","imagePath","fallbackName","englishName","AbstractCardListApp","optionInterpreter","this","_appOptionInterpreter","key","_key","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","iterable","uniqueEnglishName","_createUniqueNameOnCardList","name","reference","nameContainer","id","englishNameInHtml","push","className","popoverOrientation","createCardListContent","AbstractSimpleListApp"],"sourceRoot":""}