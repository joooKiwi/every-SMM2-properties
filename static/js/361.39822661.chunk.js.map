{"version":3,"file":"static/js/361.39822661.chunk.js","mappings":"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","sources":["app/options/ThemeAppOption.tsx","app/ThemeApp.tsx","app/tools/button/LinkButton.tsx","core/nightEffect/NightEffect.component.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/ThemeAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\n\nimport {CommonOptions}          from 'app/options/CommonOptions'\nimport Image                    from 'app/tools/images/Image'\nimport {unfinishedText}         from 'app/tools/text/UnfinishedText'\nimport NightEffectComponent     from 'core/nightEffect/NightEffect.component'\nimport {Themes}                 from 'core/theme/Themes'\nimport {Times}                  from 'core/time/Times'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\n/**\n * @todo change the SMM1 & SMM2 yes/no result into something different like the sounds or other things\n * @fixme if the yes/no is still in used after the change, use Texts.renderYesNoComponent() instead.\n */\nexport abstract class ThemeAppOption\n    extends Enum<Ordinals, Names>\nimplements AppOption<Themes>{\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ICON =                  new class ThemeAppOption_Image extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return enumeration.renderSingleComponent(false,)\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'icon', element: unfinishedText('Icon'),}\n        }\n\n    }()\n    public static readonly ENDLESS_MARIO_ICON =    new class ThemeAppOption_EndlessMarioImage extends ThemeAppOption {\n\n        protected override _createContentOption({endlessMarioImageFile,}: Themes,) {\n            return <Image file={endlessMarioImageFile}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'endless-mario-icon', element: unfinishedText('Endless Mario'),}//TODO add Endless Mario\n        }\n\n    }()\n    public static readonly NAME =                   new class ThemeAppOptionName extends ThemeAppOption {\n\n        protected override _createContentOption(enumeration: Themes,) {\n            return <div className=\"nameWithContent-container\">\n                <div className=\"col-10\">\n                    {CommonOptions.get.getGameContent(enumeration)}\n                    {CommonOptions.get.getNameContent(enumeration)}\n                </div>\n                <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumeration)}</div>\n            </div>\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }()\n    public static readonly NIGHT_EFFECT =           new class ThemeAppOption_NightEffect extends ThemeAppOption {\n\n        protected override _createContentOption({reference: {courseTheme,},}: Themes,) {\n            return <NightEffectComponent theme={courseTheme}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {\n                key: 'effect', element: <div className=\"nightDesert-header-image-container position-relative mx-auto\">\n                    {Themes.DESERT.renderSingleComponent(false)}\n                    {Times.NIGHT.renderSingleComponent}\n                </div>,\n                tooltip: gameContentTranslation('Effect (night)', {night: unfinishedText('night effect name'),},)//TODO add translation for the night effect name\n            }\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<ThemeAppOption, typeof ThemeAppOption> = class CompanionEnum_ThemeAppOption\n        extends CompanionEnum<ThemeAppOption, typeof ThemeAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_ThemeAppOption\n\n        private constructor() {\n            super(ThemeAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_ThemeAppOption()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: Themes,): ReactElement\n\n    public renderContent(enumeration: Themes,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import './ThemeApp.scss'\n\nimport type {ThemeAppProperties}      from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {ClassWithType}           from 'core/ClassWithType'\nimport type {Themes}                  from 'core/theme/Themes'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\n\nimport SubMainContainer                                  from 'app/_SubMainContainer'\nimport {CommonOptions}                                   from 'app/options/CommonOptions'\nimport {ThemeAppOption}                                  from 'app/options/ThemeAppOption'\nimport {COURSE_THEME_IMAGE_FILE, WORLD_THEME_IMAGE_FILE} from 'app/options/file/themeImageFiles'\nimport {ThemeTypes}                                      from 'app/property/ThemeTypes'\nimport LinkButton                                        from 'app/tools/button/LinkButton'\nimport Image                                             from 'app/tools/images/Image'\nimport Table                                             from 'app/tools/table/Table'\nimport CardList                                          from 'app/withInterpreter/CardList'\nimport SimpleList                                        from 'app/withInterpreter/SimpleList'\nimport {ViewDisplays}                                    from 'app/withInterpreter/ViewDisplays'\nimport {contentTranslation, gameContentTranslation}      from 'lang/components/translationMethods'\nimport {filterGame}                                      from 'util/utilitiesMethods'\n\nclass ThemeAppInterpreter\n    implements AppInterpreterWithTable<Themes, ThemeAppOption>,\n        ClassWithType<ThemeTypes> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #type\n    readonly #games\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(type: ThemeTypes, games: GameCollection,) {\n        this.#type = type\n        this.#games = games\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get type(): ThemeTypes {\n        return this.#type\n    }\n\n    public get content() {\n        return filterGame(this.type.content, this.#games,)\n    }\n\n    //region -------------------- List interpreter --------------------\n\n    public createListDimension(): DimensionOnList {\n        const type = this.type\n        if (type === ThemeTypes.COURSE)\n            return {\n                default: 1,\n                small: 2,\n                medium: 5,\n            }\n        if (type === ThemeTypes.WORLD)\n            return {\n                default: 1,\n                small: 2,\n                medium: 4,\n            }\n        return {\n            default: 1,\n            small: 2,\n            medium: 3,\n            large: 4,\n            extraLarge: 6,\n        }\n    }\n\n    //endregion -------------------- List interpreter --------------------\n    //region -------------------- Card list interpreter --------------------\n\n    public createCardListDimension() {\n        return this.createListDimension()\n    }\n\n    public createCardListContent(enumerable: Themes,) {\n        const {englishNameInHtml, endlessMarioImageFile,} = enumerable\n\n        return <div className=\"card-body\" id={`theme-${englishNameInHtml}`}>\n            <div className=\"col-2\">{CommonOptions.get.getGameContent(enumerable,)}</div>\n            <div className=\"images-container col-7\">\n                {enumerable.renderSingleComponent(true,)}\n                <Image file={endlessMarioImageFile}/>\n            </div>\n            <div className=\"col-2\">{CommonOptions.get.getThemeContent(enumerable,)}</div>\n        </div>\n    }\n\n    //endregion -------------------- Card list interpreter --------------------\n    //region -------------------- Table interpreter --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableColor = 'primary' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('theme.all.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): readonly ThemeAppOption[] {\n        return [\n            ThemeAppOption.ICON,\n            ThemeAppOption.ENDLESS_MARIO_ICON,\n            ThemeAppOption.NAME,\n            ThemeAppOption.NIGHT_EFFECT,\n        ]\n    }\n\n\n    public createTableContent(content: Themes, option: ThemeAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: ThemeAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table interpreter --------------------\n\n}\n\nconst titleContent = gameContentTranslation('theme.all.all',)\n\n/** @reactComponent */\nexport default function ThemeApp({viewDisplay, type, games,}: ThemeAppProperties,) {\n    const routeName = type.routeName\n    const viewDisplayAndRouteName = [\n        [ViewDisplays.SIMPLE_LIST, `${routeName} (list)`,],\n        [ViewDisplays.CARD_LIST, `${routeName} (card)`,],\n        [ViewDisplays.TABLE, `${routeName} (table)`,],\n    ] as const satisfies readonly ViewAndRouteName[]\n    const appInterpreter = new ThemeAppInterpreter(type, games,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type}/>}>\n            <SimpleList reactKey=\"theme\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                                 asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type}/>}>\n            <CardList reactKey=\"theme\" interpreter={appInterpreter}/>\n        </SubMainContainer>\n    return <SubMainContainer reactKey=\"theme\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay} titleContent={titleContent}\n                             asideContent={<ThemeAsideContent viewDisplay={viewDisplay} type={type}/>}>\n        <Table id=\"theme-table\" interpreter={appInterpreter}/>\n    </SubMainContainer>\n}\n\n\ninterface ThemeAsideContentProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly type: ThemeTypes\n\n}\n\n/** @reactComponent */\nfunction ThemeAsideContent({viewDisplay, type,}: ThemeAsideContentProperties,) {\n    return <div id=\"theme-linkButton-container\" className=\"btn-group btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allTheme\" routeName={viewDisplay.getRoutePath(type.allRouteName,)} color={type.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"theme-linkButton-courseAndWorld-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"courseTheme\" routeName={viewDisplay.getRoutePath(type.courseRouteName,)} color={type.courseColor}>\n                <Image id=\"courseTheme-button-image\" file={COURSE_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n            </LinkButton>\n            <LinkButton partialId=\"worldTheme\" routeName={viewDisplay.getRoutePath(type.worldRouteName,)} color={type.worldColor}>\n                <Image id=\"worldTheme-button-image\" file={WORLD_THEME_IMAGE_FILE} className=\"theme-button-image\"/>\n            </LinkButton>\n        </div>\n    </div>\n}\n","import {Link} from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/route'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: Nullable<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a simple disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrString>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {GameStyle}       from 'core/gameStyle/GameStyle'\nimport type {CourseTheme}     from 'core/theme/CourseTheme'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport {gameContentTranslation} from 'lang/components/translationMethods'\n\ninterface NightEffectComponentProperties_GameStyle\n    extends ReactProperties {\n\n    readonly gameStyle: GameStyle\n\n}\n\ninterface NightEffectComponentProperties_Theme\n    extends ReactProperties {\n\n    readonly theme: CourseTheme\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function NightEffectComponent(properties: | NightEffectComponentProperties_GameStyle | NightEffectComponentProperties_Theme,) {\n    return 'gameStyle' in properties\n        ? <NightEffectByGameStyle {...properties}/>\n        : <NightEffectByTheme {...properties}/>\n}\n\nfunction NightEffectByGameStyle({gameStyle: {nightDesertWindTranslationKey: translationKey,},}: NightEffectComponentProperties_GameStyle,) {\n    return translationKey == null ? null : <>{gameContentTranslation(`nightEffect.nightDesertWindEffect.${translationKey}`)}</>\n}\n\nfunction NightEffectByTheme({theme: {effect,},}: NightEffectComponentProperties_Theme,) {\n    return effect?.createNewComponent ?? null\n}\n"],"names":["ThemeAppOption","Enum","constructor","super","renderContent","enumeration","this","_createContentOption","renderTableHeader","_createTableHeaderOption","_ThemeAppOption","ICON","renderSingleComponent","key","element","unfinishedText","ENDLESS_MARIO_ICON","_ref","endlessMarioImageFile","_jsx","Image","file","NAME","_jsxs","className","children","CommonOptions","get","getGameContent","getNameContent","getThemeContent","nameHeader","NIGHT_EFFECT","_ref2","reference","courseTheme","NightEffectComponent","theme","Themes","DESERT","Times","NIGHT","tooltip","gameContentTranslation","night","CompanionEnum","_instance","_classPrivateFieldLooseKey","_CompanionEnum_ThemeAppOption","CompanionEnum_ThemeAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","Object","defineProperty","writable","value","_type","_games","ThemeAppInterpreter","type","games","tableHeadersColor","tableColor","tableCaption","content","filterGame","createListDimension","ThemeTypes","COURSE","default","small","medium","WORLD","large","extraLarge","createCardListDimension","createCardListContent","enumerable","englishNameInHtml","id","concat","tableOptions","createTableContent","option","createTableHeader","titleContent","ThemeApp","viewDisplay","routeName","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","appInterpreter","SubMainContainer","reactKey","asideContent","ThemeAsideContent","SimpleList","interpreter","CardList","Table","LinkButton","partialId","getRoutePath","allRouteName","color","allColor","contentTranslation","courseRouteName","courseColor","COURSE_THEME_IMAGE_FILE","worldRouteName","worldColor","WORLD_THEME_IMAGE_FILE","disabled","Link","to","routeFromName","properties","NightEffectByGameStyle","NightEffectByTheme","gameStyle","nightDesertWindTranslationKey","translationKey","_Fragment","_effect$createNewComp","effect","createNewComponent"],"sourceRoot":""}