{"version":3,"file":"static/js/248.53da757f.chunk.js","mappings":"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","sources":["app/options/EditorVoiceAppOption.tsx","app/property/EditorVoiceGames.ts","app/property/EditorVoiceTimes.ts","app/EditorVoiceApp.tsx","app/tools/button/LinkButton.tsx","app/tools/text/LinkText.tsx","app/tools/text/TextOrLink.tsx","core/editorVoice/EditorVoiceSound.component.tsx","core/time/component/TimeImage.tsx"],"sourcesContent":["import type {CompanionEnumSingleton} from '@joookiwi/enumerable'\nimport {CompanionEnum, Enum}         from '@joookiwi/enumerable'\n\nimport type {AppOption}           from 'app/options/AppOption'\nimport type {Names, Ordinals}     from 'app/options/EditorVoiceAppOption.types'\nimport type {SingleHeaderContent} from 'app/tools/table/SimpleHeader'\nimport type {EditorVoices}        from 'core/editorVoice/EditorVoices'\n\nimport {CommonOptions}           from 'app/options/CommonOptions'\nimport EditorVoiceSoundComponent from 'core/editorVoice/EditorVoiceSound.component'\nimport {gameContentTranslation}  from 'lang/components/translationMethods'\n\nexport abstract class EditorVoiceAppOption\n    extends Enum<Ordinals, Names>\n    implements AppOption<EditorVoices> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly NAME = new class EditorVoiceAppOption_Name extends EditorVoiceAppOption {\n\n        protected override _createContentOption(enumeration: EditorVoices,) {\n            return CommonOptions.get.getNameContent(enumeration,)\n        }\n\n        protected override _createTableHeaderOption() {\n            return CommonOptions.get.nameHeader\n        }\n\n    }('name',)\n    public static readonly EDITOR_VOICE = new class EditorVoiceAppOption_Name extends EditorVoiceAppOption {\n\n        protected override _createContentOption(enumeration: EditorVoices,) {\n            return <EditorVoiceSoundComponent editorVoiceSound={enumeration.editorVoiceSoundFileHolder} name={enumeration.englishName}/>\n        }\n\n        protected override _createTableHeaderOption(): SingleHeaderContent {\n            return {key: 'editor-voice', element: gameContentTranslation('editor voice.singular',),}\n        }\n\n    }('editor-voice',)\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumSingleton<EditorVoiceAppOption, typeof EditorVoiceAppOption> = class CompanionEnum_EditorVoiceAppOption\n        extends CompanionEnum<EditorVoiceAppOption, typeof EditorVoiceAppOption> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EditorVoiceAppOption\n\n        private constructor() {\n            super(EditorVoiceAppOption,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new this()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n\n    readonly #associatedClass\n    readonly #additionalClasses\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor(associatedClass: string,) {\n        super()\n        this.#additionalClasses = [this.#associatedClass = associatedClass,] as const\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get associatedClass(): string {\n        return this.#associatedClass\n    }\n\n    public get additionalClasses(): readonly [string,] {\n        return this.#additionalClasses\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    //region -------------------- App option - content --------------------\n\n    protected abstract _createContentOption(enumeration: EditorVoices,): ReactElement\n\n    public renderContent(enumeration: EditorVoices,): readonly [ReactElement,] {\n        return [this._createContentOption(enumeration,),]\n    }\n\n    //endregion -------------------- App option - content --------------------\n    //region -------------------- App option - table --------------------\n\n    protected abstract _createTableHeaderOption(): SingleHeaderContent\n\n    public renderTableHeader(): SingleHeaderContent {\n        return this._createTableHeaderOption()\n    }\n\n    //endregion -------------------- App option - table --------------------\n\n    //endregion -------------------- Methods --------------------\n\n}\n","import type {CompanionEnumWithParentSingleton}           from '@joookiwi/enumerable'\nimport type {NullOr}                                     from '@joookiwi/type'\nimport {CompanionEnumWithParent, EnumWithNullableParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/EditorVoiceGames.types'\n\nimport {Games} from 'core/game/Games'\n\nexport class EditorVoiceGames\n    extends EnumWithNullableParent<Games, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_GAMES = new class EditorVoiceGames_AllGames extends EditorVoiceGames {\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER = new class EditorVoiceGames_SuperMarioMaker extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1RouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_FOR_NINTENDO_3DS = new class EditorVoiceGames_SuperMarioMakerForNintendo3DS extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm3dsRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly SUPER_MARIO_MAKER_2 = new class EditorVoiceGames_SuperMarioMaker2 extends EditorVoiceGames {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm3dsColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm1Color(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get smm2RouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<EditorVoiceGames, typeof EditorVoiceGames, Games, typeof Games> = class CompanionEnum_EditorVoiceGames\n        extends CompanionEnumWithParent<EditorVoiceGames, typeof EditorVoiceGames, Games, typeof Games> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EditorVoiceGames\n\n        private constructor() {\n            super(EditorVoiceGames, Games,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_EditorVoiceGames()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm1Color(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm3dsColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get smm2Color(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get allRouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Game=all)`\n    }\n\n    public get smm1RouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Game=1)`\n    }\n\n    public get smm3dsRouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Game=3DS)`\n    }\n\n    public get smm2RouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Game=2)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import type {CompanionEnumWithParentSingleton}           from '@joookiwi/enumerable'\nimport type {NullOr}                                     from '@joookiwi/type'\nimport {CompanionEnumWithParent, EnumWithNullableParent} from '@joookiwi/enumerable'\n\nimport type {Names, Ordinals, PossibleRouteName} from 'app/property/EditorVoiceTimes.types'\n\nimport {Times} from 'core/time/Times'\n\nexport class EditorVoiceTimes\n    extends EnumWithNullableParent<Times, Ordinals, Names> {\n\n    //region -------------------- Enum instances --------------------\n\n    public static readonly ALL_TIMES = new class EditorVoiceTimes_All extends EditorVoiceTimes {\n\n        public override get allRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly DAY = new class EditorVoiceTimes_Day extends EditorVoiceTimes {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get nightColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get dayRouteName() {\n            return null\n        }\n\n    }()\n    public static readonly NIGHT = new class EditorVoiceTimes_Night extends EditorVoiceTimes {\n\n        public override get allColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get dayColor(): PossibleColor {\n            return 'warning'\n        }\n\n        public override get nightRouteName() {\n            return null\n        }\n\n    }()\n\n    //endregion -------------------- Enum instances --------------------\n    //region -------------------- Companion enum --------------------\n\n    public static readonly CompanionEnum: CompanionEnumWithParentSingleton<EditorVoiceTimes, typeof EditorVoiceTimes, Times, typeof Times> = class CompanionEnum_EditorVoiceTimes\n        extends CompanionEnumWithParent<EditorVoiceTimes, typeof EditorVoiceTimes, Times, typeof Times> {\n\n        //region -------------------- Singleton usage --------------------\n\n        static #instance?: CompanionEnum_EditorVoiceTimes\n\n        private constructor() {\n            super(EditorVoiceTimes, Times,)\n        }\n\n        public static get get() {\n            return this.#instance ??= new CompanionEnum_EditorVoiceTimes()\n        }\n\n        //endregion -------------------- Singleton usage --------------------\n\n    }\n\n    //endregion -------------------- Companion enum --------------------\n    //region -------------------- Fields --------------------\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    private constructor() {\n        super()\n    }\n\n    //endregion -------------------- Constructor --------------------\n    //region -------------------- Getter methods --------------------\n\n    public get allColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get dayColor(): PossibleColor {\n        return 'success'\n    }\n\n    public get nightColor(): PossibleColor {\n        return 'success'\n    }\n\n    //endregion -------------------- Getter methods --------------------\n    //region -------------------- Methods --------------------\n\n    public get allRouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Time=all)`\n    }\n\n    public get dayRouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Time=day)`\n    }\n\n    public get nightRouteName(): NullOr<PossibleRouteName> {\n        return `everyEditorVoice (Time=night)`\n    }\n\n    //endregion -------------------- Methods --------------------\n\n}\n\ntype PossibleColor = Extract<BootstrapColor, | 'success' | 'warning'>\n","import 'app/_GameAsideContent.scss'\nimport 'app/_TimeAsideContent.scss'\nimport './EditorVoiceApp.scss'\n\nimport type {Array, NullOr, NullOrString} from '@joookiwi/type'\nimport type {CollectionHolder}            from '@joookiwi/collection'\nimport {filterByArray}                    from '@joookiwi/collection'\n\nimport type {EditorVoiceProperties}   from 'app/AppProperties.types'\nimport type {AppInterpreterWithTable} from 'app/interpreter/AppInterpreterWithTable'\nimport type {DimensionOnList}         from 'app/interpreter/DimensionOnList'\nimport type {ViewAndRouteName}        from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {GameCollection}          from 'util/collection/GameCollection'\nimport type {TimeCollection}          from 'util/collection/TimeCollection'\nimport type {ReactProperties}         from 'util/react/ReactProperties'\nimport type {PossibleRouteName}       from 'route/EveryRoutes.types'\n\nimport SubMainContainer                             from 'app/_SubMainContainer'\nimport {EditorVoiceAppOption}                       from 'app/options/EditorVoiceAppOption'\nimport {EditorVoiceGames}                           from 'app/property/EditorVoiceGames'\nimport {EditorVoiceTimes}                           from 'app/property/EditorVoiceTimes'\nimport LinkButton                                   from 'app/tools/button/LinkButton'\nimport Table                                        from 'app/tools/table/Table'\nimport LinkText                                     from 'app/tools/text/LinkText'\nimport TextOrLink                                   from 'app/tools/text/TextOrLink'\nimport {unfinishedText}                             from 'app/tools/text/UnfinishedText'\nimport List                                         from 'app/util/List'\nimport CardList                                     from 'app/withInterpreter/CardList'\nimport {ViewDisplays}                               from 'app/withInterpreter/ViewDisplays'\nimport {EditorVoices}                               from 'core/editorVoice/EditorVoices'\nimport EditorVoiceSoundComponent                    from 'core/editorVoice/EditorVoiceSound.component'\nimport {Games}                                      from 'core/game/Games'\nimport GameImage                                    from 'core/game/component/GameImage'\nimport {OtherWordInTheGames}                        from 'core/otherWordInTheGame/OtherWordInTheGames'\nimport {Times}                                      from 'core/time/Times'\nimport TimeImage                                    from 'core/time/component/TimeImage'\nimport {Themes}                                     from 'core/theme/Themes'\nimport ThemeImage                                   from 'core/theme/component/ThemeImage'\nimport {contentTranslation, gameContentTranslation} from 'lang/components/translationMethods'\nimport NameComponent                                from 'lang/name/component/Name.component'\n\nimport ALL =    EditorVoices.ALL\nimport SMM1 =   Games.SMM1\nimport SMM2 =   Games.SMM2\nimport SMM3DS = Games.SMM3DS\n\nclass EditorVoiceAppInterpreter\n    implements AppInterpreterWithTable<EditorVoices, EditorVoiceAppOption> {\n\n    //region -------------------- Fields --------------------\n\n    readonly #games\n    readonly #times\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Constructor --------------------\n\n    public constructor(games: GameCollection, times: TimeCollection,) {\n        this.#games = games\n        this.#times = times\n    }\n\n    //endregion -------------------- Constructor --------------------\n\n    public get content() {\n        const games = this.#games\n        const times = this.#times\n        return filterByArray(ALL, ({reference,},) =>\n            games.hasAnyIn(reference,)\n            && (times.hasAllTimes || times.hasAnyIn(reference,)),)\n    }\n\n    //region -------------------- Card --------------------\n\n    public createCardListDimension() {\n        return {\n            default: 1,\n            small: 3,\n            medium: 4,\n            large: 6,\n        } as const satisfies DimensionOnList\n    }\n\n    public createCardListContent(enumerable: EditorVoices,) {\n        return <div className=\"editorVoices-container\">\n            <EditorVoiceSoundComponent editorVoiceSound={enumerable.editorVoiceSoundFileHolder} name={enumerable.englishName}/>\n        </div>\n    }\n\n    //endregion -------------------- Card --------------------\n    //region -------------------- Table --------------------\n\n    public readonly tableHeadersColor = 'info' satisfies BootstrapThemeColor\n    public readonly tableCaption = gameContentTranslation('editor voice.all',) satisfies ReactElementOrString\n\n    public get tableOptions(): Array<EditorVoiceAppOption> {\n        return [EditorVoiceAppOption.NAME, EditorVoiceAppOption.EDITOR_VOICE,]\n    }\n\n\n    public getAdditionalClass(option: EditorVoiceAppOption,) {\n        return option.additionalClasses\n    }\n\n    public createTableContent(content: EditorVoices, option: EditorVoiceAppOption,) {\n        return option.renderContent(content,)\n    }\n\n    public createTableHeader(option: EditorVoiceAppOption,) {\n        return option.renderTableHeader()\n    }\n\n    //endregion -------------------- Table --------------------\n\n}\n\nconst viewDisplayAndRouteName = [\n    [ViewDisplays.SIMPLE_LIST, 'everyEditorVoice (list)',],\n    [ViewDisplays.CARD_LIST, 'everyEditorVoice (card)',],\n    [ViewDisplays.TABLE, 'everyEditorVoice (table)',],\n] as const satisfies Array<ViewAndRouteName>\n\n/** @reactComponent */\nexport default function EditorVoiceApp({viewDisplay, games, times,}: EditorVoiceProperties,) {\n    const game = games.hasAllGames\n        ? EditorVoiceGames.ALL_GAMES\n        : games.hasSmm2\n            ? EditorVoiceGames.SUPER_MARIO_MAKER_2\n            : games.hasSmm1\n                ? EditorVoiceGames.SUPER_MARIO_MAKER\n                : EditorVoiceGames.SUPER_MARIO_MAKER_FOR_NINTENDO_3DS\n    const time = games.hasNotSmm2AndSmm1Or3ds\n        ? null\n        : times.hasAllTimes\n            ? EditorVoiceTimes.ALL_TIMES\n            : times.hasDay\n                ? EditorVoiceTimes.DAY\n                : EditorVoiceTimes.NIGHT\n\n    return <SubMainContainer reactKey=\"editorVoice\" viewDisplayAndRouteName={viewDisplayAndRouteName} viewDisplay={viewDisplay}\n                             titleContent={gameContentTranslation('editor voice.all',)}\n                             description={<EditorVoiceDescription viewDisplay={viewDisplay} game={game}/>}\n                             asideContent={<EditorVoiceAsideContent game={times.hasOnlyNight ? null : game} time={time}/>}>\n        <SubContent viewDisplay={viewDisplay} games={games} times={times}/>\n    </SubMainContainer>\n}\n\n/** @reactComponent */\nfunction SubContent({viewDisplay, games, times,}: Omit<EditorVoiceProperties, 'gameStyles'>,) {\n    const appInterpreter = new EditorVoiceAppInterpreter(games, times,)\n\n    if (viewDisplay === ViewDisplays.SIMPLE_LIST)\n        return <EditorVoiceList items={appInterpreter.content}/>\n    if (viewDisplay === ViewDisplays.CARD_LIST)\n        return <CardList reactKey=\"editorVoice\" interpreter={appInterpreter}/>\n    return <Table id=\"editorVoice-table\" interpreter={appInterpreter}/>\n}\n\n//region -------------------- List --------------------\n\ninterface EditorVoice_ListProperties\n    extends ReactProperties {\n\n    readonly items: CollectionHolder<EditorVoices>\n\n}\n\n/** @reactComponent */\nfunction EditorVoiceList({items,}: EditorVoice_ListProperties,) {\n    return <List partialId=\"editorVoice\" items={items} withSeparator>{it =>\n        <div className=\"d-flex justify-content-between\">\n            <NameComponent id=\"editorVoice-name\" name={it.reference} popoverOrientation=\"top\"/>\n            <EditorVoiceSoundComponent editorVoiceSound={it.editorVoiceSoundFileHolder} name={it.englishName}/>\n        </div>\n    }</List>\n}\n\n//endregion -------------------- List --------------------\n//region -------------------- Description content --------------------\n\ninterface EditorVoiceDescriptionProperties\n    extends ReactProperties {\n\n    readonly viewDisplay: ViewDisplays\n\n    readonly game: EditorVoiceGames\n\n}\n\n/** @reactComponent */\nfunction EditorVoiceDescription({viewDisplay, game,}: EditorVoiceDescriptionProperties,) {\n    const entity = OtherWordInTheGames.ENTITY.singularLowerCaseNameOnReferenceOrNull ?? unfinishedText(OtherWordInTheGames.ENTITY.singularEnglishName.toLowerCase(),)\n\n    const smm1Link = game.smm1RouteName satisfies NullOrString<PossibleRouteName>\n    const smm3dsLink = game.smm3dsRouteName satisfies NullOrString<PossibleRouteName>\n    const smm2Link = game.smm2RouteName satisfies NullOrString<PossibleRouteName>\n\n    const listLink = viewDisplay === ViewDisplays.SIMPLE_LIST ? null : 'everyEditorVoice (list)' satisfies PossibleRouteName\n    const cardLink = viewDisplay === ViewDisplays.CARD_LIST ? null : 'everyEditorVoice (card)' satisfies PossibleRouteName\n    const tableLink = viewDisplay === ViewDisplays.TABLE ? null : 'everyEditorVoice (table)' satisfies PossibleRouteName\n\n    return <>\n        <p>\n            {gameContentTranslation('editor voice.description.intro page',)}\n            {gameContentTranslation('editor voice.description.intro games', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-description\" routeName={smm1Link}><GameImage reference={SMM1}/></TextOrLink>,\n                smm3dsLink: <TextOrLink key=\"smm3dsLink\" id=\"smm3dsGame-description\" routeName={smm3dsLink}><GameImage reference={SMM3DS}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-description\" routeName={smm2Link}><GameImage reference={SMM2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('editor voice.description.intro smm1', {\n                smm1Link: <TextOrLink key=\"smm1Link\" id=\"smm1Game-references-description\" routeName={smm1Link}><GameImage reference={SMM1}/></TextOrLink>,\n                smm2Link: <TextOrLink key=\"smm2Link\" id=\"smm2Game-references-description\" routeName={smm2Link}><GameImage reference={SMM2}/></TextOrLink>,\n            },)}\n            {gameContentTranslation('editor voice.description.intro characters',)}\n            {gameContentTranslation('editor voice.description.intro variants', {\n                //TODO change the underwater link to a different link\n                //TODO change the european link to a different link\n                entityLink: <LinkText key=\"entityLink\" partialId=\"entityLink\" routeName=\"everyEntity\" color=\"primary\">{entity}</LinkText>,\n                underwaterLink: <LinkText key=\"underwaterLink\" partialId=\"underwaterEntityLink\" routeName=\"everyEntity\" color=\"primary\"><ThemeImage reference={Themes.UNDERWATER}\n                                                                                                                                                    isSmallPath/></LinkText>,\n                europeanVariantLink: <LinkText key=\"europeanVariantLink\" partialId=\"europeanEntityLink\" routeName=\"everyEntity\" color=\"primary\">{contentTranslation('variant.European',)}</LinkText>,\n            },)}\n        </p>\n        <p>{gameContentTranslation('editor voice.description.viewable', {\n            listLink: <LinkText key=\"listLink\" partialId=\"listLink\" routeName={listLink} color=\"primary\">{contentTranslation('view type.list.singular',).toLowerCase()}</LinkText>,\n            cardLink: <LinkText key=\"cardLink\" partialId=\"cardLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.singular',).toLowerCase()}</LinkText>,\n            cardsLink: <LinkText key=\"cardsLink\" partialId=\"cardsLink\" routeName={cardLink} color=\"primary\">{contentTranslation('view type.card.plural',).toLowerCase()}</LinkText>,\n            tableLink: <LinkText key=\"tableLink\" partialId=\"tableLink\" routeName={tableLink} color=\"primary\">{contentTranslation('view type.table.singular',).toLowerCase()}</LinkText>,\n        },)}</p>\n    </>\n}\n\n//endregion -------------------- Description content --------------------\n//region -------------------- Aside content --------------------\n\ninterface EditorVoiceAsideContentProperties\n    extends ReactProperties {\n\n    readonly game: NullOr<EditorVoiceGames>\n    readonly time: NullOr<EditorVoiceTimes>\n\n}\n\n/** @reactComponent */\nfunction EditorVoiceAsideContent({game, time,}: EditorVoiceAsideContentProperties,) {\n    return <div id=\"editorVoice-asideContent-container\">\n        <GameAsideContent game={game}/>\n        {time == null ? null : <div className=\"d-inline mx-1\"/>}\n        <TimeAsideContent time={time}/>\n    </div>\n}\n\n/** @reactComponent */\nfunction GameAsideContent({game,}: Pick<EditorVoiceAsideContentProperties, 'game'>,) {\n    if (game == null)\n        return null\n    return <div id=\"editorVoice-gamesButton-container\" className=\"gameAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allGameLimit\" routeName={game.allRouteName} color={game.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div id=\"editorVoice-gamesButton-singularGame-container\" className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"smm1Game\" routeName={game.smm1RouteName} color={game.smm1Color}><GameImage reference={SMM1}/></LinkButton>\n            <LinkButton partialId=\"smm3dsGame\" routeName={game.smm3dsRouteName} color={game.smm3dsColor}><GameImage reference={SMM3DS}/></LinkButton>\n            <LinkButton partialId=\"smm2Game\" routeName={game.smm2RouteName} color={game.smm2Color}><GameImage reference={SMM2}/></LinkButton>\n        </div>\n    </div>\n}\n\n/** @reactComponent */\nfunction TimeAsideContent({time,}: Pick<EditorVoiceAsideContentProperties, 'time'>,) {\n    if (time == null)\n        return null\n    return <div id=\"editorVoice-timesButton-container\" className=\"timeAsideContent-container btn-group-vertical btn-group-sm\">\n        <LinkButton partialId=\"allTime\" routeName={time.allRouteName} color={time.allColor}>{contentTranslation('All',)}</LinkButton>\n        <div className=\"btn-group btn-group-sm\">\n            <LinkButton partialId=\"dayTime\" routeName={time.dayRouteName} color={time.dayColor}>\n                <TimeImage reference={Times.DAY}/>\n            </LinkButton>\n            <LinkButton partialId=\"nightTime\" routeName={time.nightRouteName} color={time.nightColor}>\n                <TimeImage reference={Times.NIGHT}/>\n            </LinkButton>\n        </div>\n    </div>\n}\n\n//endregion -------------------- Aside content --------------------\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface LinkButtonsProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} button or a disabled button (if the {@link LinkButtonsProperties.routeName route name} is <b>null</b>)\n *\n * @reactComponent\n */\nexport default function LinkButton({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkButtonsProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-button`\n    const className = `btn btn-${color} link-button`\n\n    if (routeName == null)\n        return <button type=\"button\" id={id} className={className} disabled>{children}</button>\n    return <Link type=\"button\" id={id} className={className} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface LinkTextProperties\n    extends ReactProperties {\n\n    readonly partialId: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n    readonly color: BootstrapColor\n\n}\n\n/**\n * Create a {@link Link} text or an underlined text if the {@link LinkTextProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function LinkText({partialId, routeName, color, children,}: ReactPropertiesWithChildren<LinkTextProperties, ReactElementOrStringOrArray>,) {\n    const id = `${partialId}-text`\n\n    if (routeName == null)\n        return <span id={id} className=\"text-decoration-underline\">{children}</span>\n    return <Link id={id} className={`link-${color}`} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import type {NullableString} from '@joookiwi/type'\nimport {Link}                from 'react-router-dom'\n\nimport type {PossibleRouteName}                            from 'route/EveryRoutes.types'\nimport type {ReactProperties, ReactPropertiesWithChildren} from 'util/react/ReactProperties'\n\nimport {routeFromName} from 'route/method/route.fromName'\n\ninterface TextOrLinkProperties\n    extends ReactProperties {\n\n    readonly id: string\n\n    readonly routeName: NullableString<PossibleRouteName>\n\n}\n\n/**\n * Create a {@link Link} or a text if the {@link TextOrLinkProperties.routeName route name} is <b>null</b>\n *\n * @reactComponent\n */\nexport default function TextOrLink({id, routeName, children,}: ReactPropertiesWithChildren<TextOrLinkProperties, ReactElementOrStringOrArray>,) {\n    if (routeName == null)\n        return <span id={id}>{children}</span>\n    return <Link id={id} to={routeFromName(routeName,)}>{children}</Link>\n}\n","import './EditorVoiceSound.component.scss'\n\nimport type {Nullable} from '@joookiwi/type'\n\nimport type {EditorVoiceSound} from 'core/editorVoice/sound/EditorVoiceSound'\nimport type {ReactProperties}  from 'util/react/ReactProperties'\n\nimport SimpleSoundComponent from 'util/file/sound/component/SimpleSound.component'\n\ninterface EditorVoiceSoundComponentProperties\n    extends ReactProperties {\n\n    readonly editorVoiceSound: Nullable<EditorVoiceSound>\n\n    readonly name: string\n\n}\n\n/**\n * @param properties\n * @reactComponent\n */\nexport default function EditorVoiceSoundComponent({editorVoiceSound, name,}: EditorVoiceSoundComponentProperties,) {\n    if (editorVoiceSound == null)\n        return null\n\n    const regularFile = editorVoiceSound.regularSound\n    if (regularFile == null)\n        return null\n\n    const europeanFile = editorVoiceSound.europeanSound\n    if (europeanFile == null)\n        return <div key={`Editor voice sound container (single - ${name})`} className=\"single-editorVoiceSound-container\">\n            <SimpleSoundComponent file={regularFile} title={name}/>\n        </div>\n    return <div key={`Editor voice sound container (double - ${name})`} className=\"double-editorVoiceSound-container container\">\n        <div key={`Editor voice sound container (single #1 - ${name}`} className=\"single-editorVoiceSound-container\">\n            <SimpleSoundComponent file={regularFile} title={name}/>\n        </div>\n        <div key={`Editor voice sound container (single #2 - ${name})`} className=\"single-editorVoiceSound-container\">\n            <SimpleSoundComponent file={europeanFile} title={name}/>\n        </div>\n    </div>\n\n}\n","import type {Nullable, NullableString} from '@joookiwi/type'\n\nimport type {Times}           from 'core/time/Times'\nimport type {ReactProperties} from 'util/react/ReactProperties'\n\nimport Image   from 'app/tools/images/Image'\nimport {Empty} from 'util/emptyVariables'\n\nimport EMPTY_STRING = Empty.EMPTY_STRING\n\ninterface TimeImageProperties\n    extends ReactProperties {\n\n    readonly reference: Nullable<Times>\n\n    readonly className?: NullableString\n\n}\n\n/** @reactComponent */\nexport default function TimeImage({reference, className,}: TimeImageProperties,) {\n    if (reference == null)\n        return null\n    return <Image file={reference.imageFile} className={`time-image ${reference.englishNameInHtml}-image${className == null ? EMPTY_STRING : ` ${className}`}`}/>\n}\n"],"names":["_associatedClass","_classPrivateFieldLooseKey","_additionalClasses","EditorVoiceAppOption","Enum","constructor","associatedClass","super","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","additionalClasses","renderContent","enumeration","_createContentOption","renderTableHeader","_createTableHeaderOption","_EditorVoiceAppOption","NAME","CommonOptions","get","getNameContent","nameHeader","EDITOR_VOICE","_jsx","EditorVoiceSoundComponent","editorVoiceSound","editorVoiceSoundFileHolder","name","englishName","key","element","gameContentTranslation","CompanionEnum","_instance","_CompanionEnum_EditorVoiceAppOption","_classPrivateFieldLoo","_classPrivateFieldLoo2","EditorVoiceGames","EnumWithNullableParent","allColor","smm1Color","smm3dsColor","smm2Color","allRouteName","smm1RouteName","smm3dsRouteName","smm2RouteName","_EditorVoiceGames","ALL_GAMES","SUPER_MARIO_MAKER","SUPER_MARIO_MAKER_FOR_NINTENDO_3DS","SUPER_MARIO_MAKER_2","_CompanionEnum_EditorVoiceGames","CompanionEnum_EditorVoiceGames","CompanionEnumWithParent","Games","EditorVoiceTimes","dayColor","nightColor","dayRouteName","nightRouteName","_EditorVoiceTimes","ALL_TIMES","DAY","NIGHT","_CompanionEnum_EditorVoiceTimes","CompanionEnum_EditorVoiceTimes","Times","ALL","EditorVoices","SMM1","SMM2","SMM3DS","_games","_times","EditorVoiceAppInterpreter","games","times","tableHeadersColor","tableCaption","content","filterByArray","_ref","reference","hasAnyIn","hasAllTimes","createCardListDimension","default","small","medium","large","createCardListContent","enumerable","className","children","tableOptions","getAdditionalClass","option","createTableContent","createTableHeader","viewDisplayAndRouteName","ViewDisplays","SIMPLE_LIST","CARD_LIST","TABLE","EditorVoiceApp","_ref2","viewDisplay","game","hasAllGames","hasSmm2","hasSmm1","time","hasNotSmm2AndSmm1Or3ds","hasDay","SubMainContainer","reactKey","titleContent","description","EditorVoiceDescription","asideContent","EditorVoiceAsideContent","hasOnlyNight","SubContent","_ref3","appInterpreter","EditorVoiceList","items","CardList","interpreter","Table","id","_ref4","List","partialId","withSeparator","it","_jsxs","NameComponent","popoverOrientation","_ref5","_OtherWordInTheGames$","entity","OtherWordInTheGames","ENTITY","singularLowerCaseNameOnReferenceOrNull","unfinishedText","singularEnglishName","toLowerCase","smm1Link","smm3dsLink","smm2Link","listLink","cardLink","tableLink","_Fragment","TextOrLink","routeName","GameImage","entityLink","LinkText","color","underwaterLink","ThemeImage","Themes","UNDERWATER","isSmallPath","europeanVariantLink","contentTranslation","cardsLink","_ref6","GameAsideContent","TimeAsideContent","_ref7","LinkButton","_ref8","TimeImage","concat","type","disabled","Link","to","routeFromName","regularFile","regularSound","europeanFile","europeanSound","SimpleSoundComponent","file","title","EMPTY_STRING","Empty","Image","imageFile","englishNameInHtml"],"sourceRoot":""}