{"version":3,"file":"static/js/556.227cdd52.chunk.js","mappings":"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","sources":["app/InstrumentApp.tsx","app/withInterpreter/AbstractCardListApp.tsx"],"sourcesContent":["import type {AppInterpreterWithCardList}                           from 'app/interpreter/AppInterpreterWithCardList'\nimport type {PossibleDimensionOnCardList, PossibleDimensionOnList} from 'app/interpreter/DimensionOnList'\nimport type {EveryPossibleRouteNames}                              from 'route/everyRoutes.types'\n\nimport {AbstractCardListApp}    from 'app/withInterpreter/AbstractCardListApp'\nimport {Instruments}            from 'core/instrument/Instruments'\nimport {gameContentTranslation} from 'lang/components/translationMethods'\nimport SimpleSoundComponent     from 'util/file/sound/component/SimpleSound.component'\n\nexport default class InstrumentApp\n    extends AbstractCardListApp<AppInterpreterWithCardList<Instruments>> {\n\n    //region -------------------- Create methods --------------------\n\n    protected _createKey() {\n        return 'instrument'\n    }\n\n\n    protected override _createSimpleListRouteName(): EveryPossibleRouteNames {\n        return 'everyInstrument (list)'\n    }\n\n    protected override _createCardListRouteName(): EveryPossibleRouteNames {\n        return 'everyInstrument (card)'\n    }\n\n\n    protected _createTitleContent(): ReactElementOrString {\n        return gameContentTranslation('instrument.all')\n    }\n\n    protected _createAppOptionInterpreter() {\n        return new class InstrumentAppInterpreter implements AppInterpreterWithCardList<Instruments> {\n\n            public get content() {\n                return Instruments.values.toArray()\n            }\n\n            //region -------------------- List interpreter --------------------\n\n            public createListDimension(): PossibleDimensionOnList {\n                return null\n            }\n\n            //endregion -------------------- List interpreter --------------------\n            //region -------------------- Card list interpreter --------------------\n\n            public createCardListDimension(): PossibleDimensionOnCardList {\n                return 'list'\n            }\n\n            public createCardListContent({sounds, name,}: Instruments,) {\n                return <div className=\"instrument-sounds\">{sounds.map((sound, index,) =>\n                    <SimpleSoundComponent file={sound} title={`${name} (instrument #${index})`}/>\n                )}</div>\n            }\n\n            //endregion -------------------- Card list interpreter --------------------\n\n        }()\n    }\n\n    //endregion -------------------- Create methods --------------------\n\n}\n","import type {AppWithInterpreterProperties} from 'app/AppProperties.types'\nimport type {AppStates}                    from 'app/AppStates.types'\nimport type {ValueByApp}                   from 'app/interpreter/AppInterpreter'\nimport type {AppInterpreterWithCardList}   from 'app/interpreter/AppInterpreterWithCardList'\nimport type {ViewAndRouteName}             from 'app/withInterpreter/DisplayButtonGroup.properties'\nimport type {EveryPossibleRouteNames}      from 'route/everyRoutes.types'\n\nimport {AbstractSimpleListApp} from 'app/withInterpreter/AbstractSimpleListApp'\nimport {ListDimensionCreator}  from 'app/withInterpreter/ListDimension.creator'\nimport {ViewDisplays}          from 'app/withInterpreter/ViewDisplays'\nimport NameComponent           from 'lang/name/component/Name.component'\nimport {ReactElement}          from 'react'\n\nexport abstract class AbstractCardListApp<APP extends AppInterpreterWithCardList,\n    T extends AppWithInterpreterProperties = AppWithInterpreterProperties, S extends AppStates = AppStates, >\n    extends AbstractSimpleListApp<APP, T, S> {\n\n    //region -------------------- Fields --------------------\n\n    #routeName?: EveryPossibleRouteNames\n\n    //endregion -------------------- Fields --------------------\n    //region -------------------- Getter & create methods --------------------\n\n    protected override _createPossibleViewDisplay(): readonly ViewAndRouteName[] {\n        return [\n            ...super._createPossibleViewDisplay(),\n            [ViewDisplays.CARD_LIST, this.__cardRouteName,],\n        ]\n    }\n\n    private get __cardRouteName(): EveryPossibleRouteNames {\n        return this.#routeName ??= this._createCardListRouteName()\n    }\n\n    protected abstract _createCardListRouteName(): EveryPossibleRouteNames\n\n    protected _createUniqueNameOnCardList(enumerable: ValueByApp<APP>,): string {\n        return enumerable.englishName\n    }\n\n    //endregion -------------------- Getter & create methods --------------------\n    //region -------------------- Render methods --------------------\n\n    /**\n     * Create a list of elements in a card manner.\n     * It can be similar to the {@link createList} but has more information displayed.\n     */\n    public createCardList(): ReactElement {\n        const optionInterpreter = this._appOptionInterpreter\n        const key = this._key\n        const cardListDimension = optionInterpreter.createCardListDimension()\n        const dimensions = new ListDimensionCreator(cardListDimension === 'list' ? optionInterpreter.createListDimension() : cardListDimension,).createDimensions()\n        const content = optionInterpreter.content\n\n        const size = content.length\n        const contentToDisplay = new Array<ReactElement>(size,)\n        let index = size\n        while (index-- > 0) {\n            const enumerable = content[index]\n            const uniqueEnglishName = this._createUniqueNameOnCardList(enumerable,)\n\n            //TODO change the popover to be on the id instead of the name directly\n            contentToDisplay[index] =\n                <div key={`${uniqueEnglishName} - main card list container`} id={`${key}-${enumerable.englishNameInHtml}-container`} className={`${key}-container listElement-container ${dimensions}`}>\n                    <div key={`${uniqueEnglishName} - main card list sub-container`} className=\"cardListElement-container rounded-pill\">\n                        <NameComponent key={`${uniqueEnglishName} - text container`} id=\"name\" name={enumerable.reference.nameContainer} popoverOrientation=\"left\"/>\n                        <div className=\"cardListName-content-container\">{optionInterpreter.createCardListContent(enumerable)}</div>\n                    </div>\n                </div>\n        }\n        return <>{contentToDisplay}</>\n    }\n\n    //endregion -------------------- Render methods --------------------\n\n}\n"],"names":["InstrumentApp","_AbstractCardListApp","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","gameContentTranslation","InstrumentAppInterpreter","get","Instruments","values","toArray","_ref","sounds","name","_jsx","className","children","map","sound","index","SimpleSoundComponent","file","title","concat","AbstractCardListApp","_routeName","_classPrivateFieldLooseKey","_AbstractSimpleListAp","_this","_len","length","args","Array","_key","call","Object","defineProperty","_assertThisInitialized","writable","_toConsumableArray","_get","_getPrototypeOf","prototype","ViewDisplays","CARD_LIST","this","__cardRouteName","_classPrivateFieldLoo","_classPrivateFieldLoo2","_classPrivateFieldLooseBase","_createCardListRouteName","enumerable","englishName","optionInterpreter","_appOptionInterpreter","cardListDimension","createCardListDimension","dimensions","ListDimensionCreator","createListDimension","createDimensions","content","size","contentToDisplay","uniqueEnglishName","_createUniqueNameOnCardList","id","englishNameInHtml","_jsxs","NameComponent","reference","nameContainer","popoverOrientation","createCardListContent","_Fragment","AbstractSimpleListApp"],"sourceRoot":""}